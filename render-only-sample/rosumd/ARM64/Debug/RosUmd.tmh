// 65bac83bb0b408077623896d98673547 Generated file. Do not edit.
// File created by WPP compiler version 10.0.19041
// from template um-default.tpl

#pragma once

// template um-header.tpl

#ifdef  WPP_THIS_FILE
// included twice
#       define  WPP_ALREADY_INCLUDED
#       undef   WPP_THIS_FILE
#endif  // #ifdef WPP_THIS_FILE

#define WPP_THIS_FILE RosUmd_cpp

#ifndef WPP_ALREADY_INCLUDED

#define WPP_DLL 
#define WPP_EMIT_FUNC_NAME 

#ifdef BUILD_MINWIN
#include <windowscore.h>
#else
#include <windows.h>
#endif

#include <wmistr.h>
#include <evntrace.h>
#ifndef WPP_TRACE_W2K_COMPATABILITY
#include <sddl.h>
#endif

#ifdef __cplusplus
extern "C" {
#endif

// LEGACY: This structure was used by Win2k RpcRt4 and cluster tracing

typedef struct _WPP_WIN2K_CONTROL_BLOCK {
    TRACEHANDLE Logger;
    ULONG Flags;
    ULONG Level;
    LPCGUID ControlGuid;
} WPP_WIN2K_CONTROL_BLOCK, *PWPP_WIN2K_CONTROL_BLOCK;

#pragma warning(push)
#pragma warning(disable:4201) // nonstandard extension used nameless struct/union

typedef struct _WPP_TRACE_CONTROL_BLOCK
{
    struct _WPP_TRACE_CONTROL_BLOCK *Next;
    TRACEHANDLE     UmRegistrationHandle;
    union {
        TRACEHANDLE              Logger;
        PWPP_WIN2K_CONTROL_BLOCK Win2kCb;
        PVOID                    Ptr;
        struct _WPP_TRACE_CONTROL_BLOCK *Cb;
    };

    UCHAR           FlagsLen;
    UCHAR           Level;
    USHORT          Options;
    ULONG           Flags[1];
    LPCGUID         ControlGuid;
#if ENABLE_WPP_RECORDER
    PVOID           AutoLogContext;
    USHORT          AutoLogVerboseEnabled;
    USHORT          AutoLogAttachToMiniDump;
#endif
} WPP_TRACE_CONTROL_BLOCK, *PWPP_TRACE_CONTROL_BLOCK;
#pragma warning(pop)

#ifdef WPP_USE_NTDLL_FUNCTIONS
// Not supported.
#include <wpp_use_ntdll_functions.h>
#endif

#define WPP_IsValidSid IsValidSid
#define WPP_GetLengthSid GetLengthSid

#ifndef WPP_TRACE
#define WPP_TRACE TraceMessage
#endif

#ifndef WPP_UNREGISTER_TRACE_GUIDS
#define WPP_UNREGISTER_TRACE_GUIDS  UnregisterTraceGuids
#endif


#ifndef WPP_REGISTER_TRACE_GUIDS
#define WPP_REGISTER_TRACE_GUIDS  RegisterTraceGuids
#endif


#ifndef WPP_GET_TRACE_LOGGER_HANDLE
#define WPP_GET_TRACE_LOGGER_HANDLE  GetTraceLoggerHandle
#endif

#ifndef WPP_GET_TRACE_ENABLE_LEVEL
#define WPP_GET_TRACE_ENABLE_LEVEL  GetTraceEnableLevel
#endif

#ifndef WPP_GET_TRACE_ENABLE_FLAGS
#define WPP_GET_TRACE_ENABLE_FLAGS  GetTraceEnableFlags
#endif

enum {
    WPP_VER_WIN2K_CB_FORWARD_PTR    = 0x01,
    WPP_VER_WHISTLER_CB_FORWARD_PTR = 0x02,
    WPP_VER_LH_CB_FORWARD_PTR = 0x03
};

#if ENABLE_WPP_RECORDER

#ifndef WPP_RECORDER
#define WPP_RECORDER WppAutoLogTrace
#endif

//
// This setting is only applicable when IFR is enabled.
// Setting this to 1 will allow a WPP trace session to 
// capture trace messages as usual i.e it will require the
// user to provide WPP trace ENABLED and LOGGER macro. If 
// this is set to 0 by default the IFR trace filter also
// affects which trace messages land in the WPP trace session.
//
#if !defined(ENABLE_WPP_TRACE_FILTERING_WITH_WPP_RECORDER)
#define ENABLE_WPP_TRACE_FILTERING_WITH_WPP_RECORDER 0
#endif

#if !defined(WPP_RECORDER_LEVEL_FLAGS_ARGS)
#define WPP_RECORDER_LEVEL_FLAGS_ARGS(lvl, flags) WPP_CONTROL(WPP_BIT_ ## flags).AutoLogContext, lvl, WPP_BIT_ ## flags
#define WPP_RECORDER_LEVEL_FLAGS_FILTER(lvl,flags) (lvl < TRACE_LEVEL_VERBOSE || WPP_CONTROL(WPP_BIT_ ## flags).AutoLogVerboseEnabled)
#endif

#if !defined(WPP_RECORDER_FLAGS_LEVEL_ARGS)
#define WPP_RECORDER_FLAGS_LEVEL_ARGS(flags, lvl) WPP_RECORDER_LEVEL_FLAGS_ARGS(lvl, flags)
#define WPP_RECORDER_FLAGS_LEVEL_FILTER(flags, lvl) WPP_RECORDER_LEVEL_FLAGS_FILTER(lvl, flags)
#endif

#if !defined(WPP_RECORDER_LEVEL_ARGS)
#define WPP_RECORDER_LEVEL_ARGS(lvl) WPP_CONTROL(WPP_BIT_ ## lvl).AutoLogContext, 0, WPP_BIT_ ## lvl
#define WPP_RECORDER_LEVEL_FILTER(lvl) (WPP_CONTROL(WPP_BIT_ ## lvl).AutoLogVerboseEnabled)
#endif

NTSTATUS
WppAutoLogTrace(
    _In_ PVOID              AutoLogContext,
    _In_ UCHAR              MessageLevel,
    _In_ ULONG              MessageFlags,
    _In_ LPGUID             MessageGuid,
    _In_ USHORT             MessageNumber,
    _In_ ...
    );

#endif // ENABLE_WPP_RECORDER

//
// WPP_INIT_TRACING and WPP_CLEANUP macros are defined differently for kernel
// mode and user mode. In order to support mode-agnostic WDF drivers,
// WPP_INIT_TRACING and WPP_CLEANUP macros for UMDF 2.x user-mode drivers are
// being updated to be same as kernel mode macros. This difference is based
// upon the macro WPP_MACRO_USE_KM_VERSION_FOR_UM.
//

#ifdef WPP_MACRO_USE_KM_VERSION_FOR_UM

VOID WppCleanupUm( VOID );
#define WPP_CLEANUP(DrvObj) WppCleanupUm()
#else
VOID WppCleanupUm( VOID );
#define WPP_CLEANUP() WppCleanupUm()
#endif

#define WppLoadTracingSupport

//
// For getting private callback, implement a function with the signature below.
// To register the function: #define WPP_PRIVATE_ENABLE_CALLBACK MyPrivateCallback
// If multiple control guids are used, be sure to compare Guid to the one of interest.
//

#if defined(WPP_PRIVATE_ENABLE_CALLBACK)

typedef
VOID
(NTAPI *PFN_WPP_PRIVATE_ENABLE_CALLBACK)(
    _In_ LPCGUID Guid,
    _In_ TRACEHANDLE Logger,
    _In_ BOOLEAN Enable,
    _In_ ULONG Flags,
    _In_ UCHAR Level
    );

#endif

//
// For generating CAPTURE_STATE callback (Win7+), implement a function with the signature
// below. To register the function: #define WPP_CAPTURE_STATE_CALLBACK MyCaptureStateCallback
// If multiple control guids are used, be sure to compare Guid to the one of interest.
//

#if defined(WPP_CAPTURE_STATE_CALLBACK)

typedef
VOID
(NTAPI *PFN_WPP_CAPTURE_STATE_CALLBACK)(
    _In_ LPCGUID Guid,
    _In_ TRACEHANDLE Logger,
    _In_ ULONG Flags,
    _In_ UCHAR Level
    );

#endif

#ifdef __cplusplus
} // extern "C"
#endif

#endif  // #ifndef WPP_ALREADY_INCLUDED

// template control.tpl

//
//     Defines a set of macro that expand control model specified
//     with WPP_CONTROL_GUIDS (example shown below)
//     into an enum of trace levels and required structures that
//     contain the mask of levels, logger handle and some information
//     required for registration.
//

#ifndef WPP_ALREADY_INCLUDED

#define WPP_EVAL(x) x
#define WPP_STR(x)  #x
#define WPP_STRINGIZE(x) WPP_STR(x)
#define WPP_GLUE(a, b)  a ## b
#define WPP_GLUE3(a, b, c)  a ## b ## c
#define WPP_GLUE4(a, b, c, d)  a ## b ## c ## d
#define WPP_XGLUE(a, b) WPP_GLUE(a, b)
#define WPP_XGLUE3(a, b, c) WPP_GLUE3(a, b, c)
#define WPP_XGLUE4(a, b, c, d) WPP_GLUE4(a, b, c, d)

///////////////////////////////////////////////////////////////////////////////////
//
// #define WPP_CONTROL_GUIDS \
//     WPP_DEFINE_CONTROL_GUID(Regular,(81b20fea,73a8,4b62,95bc,354477c97a6f), \
//       WPP_DEFINE_BIT(Error)      \
//       WPP_DEFINE_BIT(Unusual)    \
//       WPP_DEFINE_BIT(Noise)      \
//    )        \
//    WPP_DEFINE_CONTROL_GUID(HiFreq,(91b20fea,73a8,4b62,95bc,354477c97a6f), \
//       WPP_DEFINE_BIT(Entry)      \
//       WPP_DEFINE_BIT(Exit)       \
//       WPP_DEFINE_BIT(ApiCalls)   \
//       WPP_DEFINE_BIT(RandomJunk) \
//       WPP_DEFINE_BIT(LovePoem)   \
//    )

#ifdef __cplusplus
extern "C" {
#endif

#ifndef WPP_NO_CONTROL_GUIDS

#ifdef WPP_DEFAULT_CONTROL_GUID
#  ifdef WPP_CONTROL_GUIDS
#     error WPP_DEFAULT_CONTROL_GUID cannot be used together with WPP_CONTROL_GUIDS.
#  else // WPP_CONTROL_GUIDS
#     define WPP_CONTROL_GUIDS \
         WPP_DEFINE_CONTROL_GUID(Default,(WPP_DEFAULT_CONTROL_GUID), \
         WPP_DEFINE_BIT(Error)   \
         WPP_DEFINE_BIT(Unusual) \
         WPP_DEFINE_BIT(Noise)   \
      )
#  endif // WPP_CONTROL_GUIDS
#endif // WPP_DEFAULT_CONTROL_GUID

#ifndef WPP_CONTROL_GUIDS
#  pragma message(__FILE__ " : error : Please define control model via WPP_CONTROL_GUIDS or WPP_DEFAULT_CONTROL_GUID macros")
#  pragma message(__FILE__ " : error : don't forget to call WPP_INIT_TRACING and WPP_CLEANUP in your main, DriverEntry or DllInit")
#  pragma message(__FILE__ " : error : see tracewpp.doc for further information")
#  error WPP_CONTROL_GUIDS not defined.
#endif // WPP_CONTROL_GUIDS
// a set of macro to convert a guid in a form x(81b20fea,73a8,4b62,95bc,354477c97a6f)
// into either a a struct or text string

#define _WPPW(x) WPP_GLUE(L, x)

#define WPP_GUID_NORM(l,w1,w2,w3,ll) l ## w1 ## w2 ## w3 ## ll
#define WPP_GUID_TEXT(l,w1,w2,w3,ll) #l "-" #w1 "-" #w2 "-" #w3 "-" #ll
#define WPP_GUID_WTEXT(l,w1,w2,w3,ll) _WPPW(#l) L"-" _WPPW(#w1) L"-" _WPPW(#w2) L"-" _WPPW(#w3) L"-" _WPPW(#ll)
#define WPP_EXTRACT_BYTE(val,n) (((ULONGLONG)(0x ## val) >> (8 * n)) & 0xFF)
#define WPP_GUID_STRUCT(l,w1,w2,w3,ll) {0x ## l, 0x ## w1, 0x ## w2,\
     {WPP_EXTRACT_BYTE(w3, 1), WPP_EXTRACT_BYTE(w3, 0),\
      WPP_EXTRACT_BYTE(ll, 5), WPP_EXTRACT_BYTE(ll, 4),\
      WPP_EXTRACT_BYTE(ll, 3), WPP_EXTRACT_BYTE(ll, 2),\
      WPP_EXTRACT_BYTE(ll, 1), WPP_EXTRACT_BYTE(ll, 0)} }

#ifndef WPP_FORCEINLINE
#define WPP_FORCEINLINE __forceinline
#endif

// define an enum of control block names
//////
#define WPP_DEFINE_CONTROL_GUID(Name,Guid,Bits) WPP_XGLUE(WPP_CTL_, WPP_EVAL(Name)),
enum WPP_CTL_NAMES { WPP_CONTROL_GUIDS WPP_LAST_CTL};
#undef WPP_DEFINE_CONTROL_GUID

// define control guids
//////
#define WPP_DEFINE_CONTROL_GUID(Name,Guid,Bits) \
extern __declspec(selectany) const GUID WPP_XGLUE4(WPP_, ThisDir, _CTLGUID_, WPP_EVAL(Name)) = WPP_GUID_STRUCT Guid;
WPP_CONTROL_GUIDS
#undef WPP_DEFINE_CONTROL_GUID

// define enums of individual bits
/////
#define WPP_DEFINE_CONTROL_GUID(Name,Guid,Bits) \
    WPP_XGLUE(WPP_BLOCK_START_, WPP_EVAL(Name)) = WPP_XGLUE(WPP_CTL_, WPP_EVAL(Name)) * 0x10000, Bits WPP_XGLUE(WPP_BLOCK_END_, WPP_EVAL(Name)),
# define WPP_DEFINE_BIT(Name) WPP_BIT_ ## Name,
enum WPP_DEFINE_BIT_NAMES { WPP_CONTROL_GUIDS };
# undef WPP_DEFINE_BIT
#undef WPP_DEFINE_CONTROL_GUID

#define WPP_MASK(CTL)    (1 << ( ((CTL)-1) & 31 ))
#define WPP_FLAG_NO(CTL) ( (0xFFFF & ((CTL)-1) ) / 32)
#define WPP_CTRL_NO(CTL) ((CTL) >> 16)

// calculate how many DWORDs we need to get the required number of bits
// upper estimate. Sometimes will be off by one
#define WPP_DEFINE_CONTROL_GUID(Name,Guid,Bits) | WPP_XGLUE(WPP_BLOCK_END_, WPP_EVAL(Name))
enum _WPP_FLAG_LEN_ENUM { WPP_FLAG_LEN = 1 | ((0 WPP_CONTROL_GUIDS) & 0xFFFF) / 32 };
#undef WPP_DEFINE_CONTROL_GUID

//
// Check that maximum number of flags does not exceed 32
//
#ifndef C_ASSERT
#define C_ASSERT(e) typedef char __C_ASSERT__[(e)?1:-1]
#endif

#define MAX_NUMBER_OF_ETW_FLAGS 34 // 32 flags plus 2 separators
#define WPP_DEFINE_CONTROL_GUID(Name,Guid,Bits) && ((WPP_XGLUE(WPP_BLOCK_END_, WPP_EVAL(Name) & 0xFFFF)) < MAX_NUMBER_OF_ETW_FLAGS)
enum _WPP_FLAG_LEN_ENUM_MAX { WPP_MAX_FLAG_LEN_CHECK = (1 WPP_CONTROL_GUIDS) };
#undef WPP_DEFINE_CONTROL_GUID

#ifndef WPP_CB
#define WPP_CB      WPP_GLOBAL_Control
#endif
#ifndef WPP_CB_TYPE
#define WPP_CB_TYPE WPP_PROJECT_CONTROL_BLOCK
#endif

#ifndef WPP_CHECK_INIT
#define WPP_CHECK_INIT (WPP_CB != (WPP_CB_TYPE*)&WPP_CB) &&
#endif

typedef union {
    WPP_TRACE_CONTROL_BLOCK Control;
    UCHAR ReserveSpace[ sizeof(WPP_TRACE_CONTROL_BLOCK) + sizeof(ULONG) * (WPP_FLAG_LEN - 1) ];
} WPP_CB_TYPE ;


extern __declspec(selectany) WPP_CB_TYPE *WPP_CB = (WPP_CB_TYPE*)&WPP_CB;

#if ENABLE_WPP_RECORDER
#ifndef WPP_RECORDER_CHECK_INIT
#define WPP_RECORDER_CHECK_INIT (WPP_RECORDER_INITIALIZED != (WPP_CB_TYPE*)&WPP_RECORDER_INITIALIZED) &&
#endif
// Global varaible used to track if WPP_RECORDER was initialized.
// It will be initialized on calling WPP_INIT_TRACING macro.
extern __declspec(selectany) WPP_CB_TYPE *WPP_RECORDER_INITIALIZED = (WPP_CB_TYPE*)&WPP_RECORDER_INITIALIZED;
#endif

#define WPP_CONTROL(CTL) (WPP_CB[WPP_CTRL_NO(CTL)].Control)

// Define the default WPP_LEVEL_LOGGER/WPP_LEVEL_ENABLED macros for the
// predefined DoTraceMessage(LEVEL) function.
#ifdef WPP_USE_TRACE_LEVELS

#ifndef WPP_LEVEL_LOGGER
#define WPP_LEVEL_LOGGER(lvl) (WPP_CONTROL(WPP_BIT_ ## DUMMY).Logger),
#endif
#ifndef WPP_LEVEL_ENABLED
#define WPP_LEVEL_ENABLED(lvl) (WPP_CONTROL(WPP_BIT_ ## DUMMY).Level >= lvl)
#endif

#else // WPP_USE_TRACE_LEVELS

// For historical reasons, the use of LEVEL means flags by default.
// This was a bad choice but very difficult to undo.
#ifndef WPP_LEVEL_LOGGER
#  define WPP_LEVEL_LOGGER(CTL)  (WPP_CONTROL(WPP_BIT_ ## CTL).Logger),
#endif
#ifndef WPP_LEVEL_ENABLED
#  define WPP_LEVEL_ENABLED(CTL) (WPP_CONTROL(WPP_BIT_ ## CTL).Flags[WPP_FLAG_NO(WPP_BIT_ ## CTL)] & WPP_MASK(WPP_BIT_ ## CTL))
#endif

#endif // WPP_USE_TRACE_LEVELS

// Define default WPP_FLAG_LOGGER/WPP_FLAG_ENABLED macros for convenience in
// defining a function that takes a FLAG parameter e.g. DoTrace(FLAG).
#ifndef WPP_FLAG_LOGGER
#  define WPP_FLAG_LOGGER(CTL)  (WPP_CONTROL(WPP_BIT_ ## CTL).Logger),
#endif
#ifndef WPP_FLAG_ENABLED
#  define WPP_FLAG_ENABLED(CTL) (WPP_CONTROL(WPP_BIT_ ## CTL).Flags[WPP_FLAG_NO(WPP_BIT_ ## CTL)] & WPP_MASK(WPP_BIT_ ## CTL))
#endif

#ifndef WPP_ENABLED
#  define WPP_ENABLED() 1
#endif
#ifndef WPP_LOGGER
#  define WPP_LOGGER() (WPP_CB[0].Control.Logger),
#endif

#endif // WPP_NO_CONTROL_GUIDS

#ifndef WPP_GET_LOGGER
#  define WPP_GET_LOGGER Logger
#endif

#ifndef WPP_LOGGER_ARG
#  define WPP_LOGGER_ARG TRACEHANDLE Logger,
#endif

#ifdef __cplusplus
} // extern "C"
#endif

#endif // WPP_ALREADY_INCLUDED

// template tracemacro.tpl

// This template expects:
//      WPP_THIS_FILE defined (see header.tpl)
//      WPP_LOGGER_ARG  defined
//      WPP_GET_LOGGER  defined
//      WPP_ENABLED() defined

#ifdef __cplusplus
extern "C" {
#endif

#ifdef WPP_ALREADY_INCLUDED

#undef WPP_LOCAL_TraceGuids
#undef WPP_INVOKE_WPP_DEBUG

#else // WPP_ALREADY_INCLUDED

#ifndef NO_CHECK_FOR_NULL_STRING
#ifndef WPP_CHECK_FOR_NULL_STRING
#define WPP_CHECK_FOR_NULL_STRING
#endif
#endif // NO_CHECK_FOR_NULL_STRING

#define WPP_FLATTEN(...) __VA_ARGS__
#define WPP_GLUE5(a, b, c, d, e)  a ## b ## c ## d ## e
#define WPP_XGLUE5(a, b, c, d, e)  WPP_GLUE5(a, b, c, d, e)
#define WPP_(Id) WPP_XGLUE5(WPP_, Id, _, WPP_THIS_FILE, __LINE__)

#ifndef WPP_INLINE
#define WPP_INLINE DECLSPEC_NOINLINE __inline
#endif

#ifndef WPP_FORCEINLINE
#define WPP_FORCEINLINE __forceinline
#endif

#endif // WPP_ALREADY_INCLUDED

#ifdef WPP_NO_ANNOTATIONS

#define WPP_ANNOTATE(x)

#else // WPP_NO_ANNOTATIONS

#ifdef WPP_PUBLIC_
#define WPP_PUBLIC_ANNOT_RosUmd_cpp30
#endif
#ifdef WPP_EMIT_FUNC_NAME
#define WPP_FUNC_NAME L" FUNC=" _WPPW(__FUNCTION__)
#else // WPP_EMIT_FUNC_NAME
#define WPP_FUNC_NAME
#endif // WPP_EMIT_FUNC_NAME

#ifdef WPP_USER_MSG_GUID
# define WPP_ANNOTATE_RosUmd_cpp30_FINAL(P, File, Name, ...) __annotation( \
    L ## P, \
    WPP_GUID_WTEXT WPP_USER_MSG_GUID L"rosumd // SRC=" _WPPW(File) \
    L" MJ= MN=", \
    L"#typev " _WPPW(Name) \
    L" 10 \"%0 [%10!s! @ %11!u!] TRACE :RosUmd was loaded. (hmod = 0x%12!p!)\" //   LEVEL=TRACE_LEVEL_VERBOSE FLAGS=ROS_TRACING_DEFAULT" \
    WPP_FUNC_NAME, \
    __VA_ARGS__)
#else // WPP_USER_MSG_GUID
# define WPP_ANNOTATE_RosUmd_cpp30_FINAL(P, File, Name, ...) __annotation( \
    L ## P, \
    L"a14af87d-1431-3b2c-68d6-75f02628811c rosumd // SRC=" _WPPW(File) \
    L" MJ= MN=", \
    L"#typev " _WPPW(Name) \
    L" 10 \"%0 [%10!s! @ %11!u!] TRACE :RosUmd was loaded. (hmod = 0x%12!p!)\" //   LEVEL=TRACE_LEVEL_VERBOSE FLAGS=ROS_TRACING_DEFAULT" \
    WPP_FUNC_NAME, \
    __VA_ARGS__)
#endif // WPP_USER_MSG_GUID

#ifdef WPP_PUBLIC_ANNOT_RosUmd_cpp30
# define WPP_ANNOTATE_RosUmd_cpp30 WPP_ANNOTATE_RosUmd_cpp30_FINAL( \
    "TMF:", \
    "Unknown_cxx00", \
    "Unknown_cxx00", \
    L"{", \
    L"Arg, ItemString -- 10" , \
    L"Arg, ItemLong -- 11" , \
    L"Arg, ItemPtr -- 12" , \
    L"}", \
    L"PUBLIC_TMF:")
# ifndef WPP_PUBLIC_TMC
#  define WPP_PUBLIC_TMC // Adds "PUBLIC_TMF:" to the control guid annotation
# endif
#else // WPP_PUBLIC_ANNOT_RosUmd_cpp30
# define WPP_ANNOTATE_RosUmd_cpp30 WPP_ANNOTATE_RosUmd_cpp30_FINAL( \
    "TMF:", \
    "RosUmd.cpp", \
    "RosUmd_cpp30", \
    L"{", \
    L"__FILE__, ItemString -- 10" , \
    L"__LINE__, ItemLong -- 11" , \
    L"hmod, ItemPtr -- 12" , \
    L"}")
#endif // WPP_PUBLIC_ANNOT_RosUmd_cpp30

# define WPP_ANNOTATE(x) WPP_ANNOTATE_ ## x,

#endif // WPP_NO_ANNOTATIONS

#ifdef WPP_USER_MSG_GUID

#define WPP_LOCAL_MSG_VAR(Guid) WPP_XGLUE3(WPP_, WPP_GUID_NORM Guid, _Traceguids)

#define WPP_LOCAL_MSG_GUID(Guid) \
extern const __declspec(selectany) GUID WPP_LOCAL_MSG_VAR(Guid)[] = { WPP_GUID_STRUCT Guid }

WPP_LOCAL_MSG_GUID(WPP_USER_MSG_GUID);
#define WPP_LOCAL_TraceGuids WPP_LOCAL_MSG_VAR(WPP_USER_MSG_GUID)

#else // WPP_USER_MSG_GUID

#define WPP_LOCAL_TraceGuids WPP_a14af87d14313b2c68d675f02628811c_Traceguids
extern const __declspec(selectany) GUID WPP_LOCAL_TraceGuids[] = { {0xa14af87d,0x1431,0x3b2c,{0x68,0xd6,0x75,0xf0,0x26,0x28,0x81,0x1c}}, };

#endif // WPP_USER_MSG_GUID

#ifndef WPP_ALREADY_INCLUDED

#ifndef WPP_TRACE_OPTIONS
enum { WPP_TRACE_OPTIONS =
    TRACE_MESSAGE_SEQUENCE   |
    TRACE_MESSAGE_GUID       |
    TRACE_MESSAGE_SYSTEMINFO |
    TRACE_MESSAGE_TIMESTAMP };
#endif // WPP_TRACE_OPTIONS

#ifndef WPP_LOGPAIR_SEPARATOR
# define WPP_LOGPAIR_SEPARATOR ,
#endif
#ifndef WPP_LOGPAIR_SIZET
# define WPP_LOGPAIR_SIZET SIZE_T
#endif
#ifndef WPP_LOGPAIR
# define WPP_LOGPAIR(_Size, _Addr)     (_Addr),((WPP_LOGPAIR_SIZET)(_Size))WPP_LOGPAIR_SEPARATOR
#endif

#define WPP_LOGTYPEVAL(_Type, _Value) WPP_LOGPAIR(sizeof(_Type), &(_Value))
#define WPP_LOGTYPEPTR(_Value)        WPP_LOGPAIR(sizeof(*(_Value)), (_Value))

// Marshalling macros.

#ifndef WPP_LOGASTR
# ifdef WPP_CHECK_FOR_NULL_STRING
#  define WPP_LOGASTR(_value)  WPP_LOGPAIR( \
    (_value) ? strlen(_value) + 1 : 5, \
    (_value) ?       (_value)     : "NULL" )
# else // WPP_CHECK_FOR_NULL_STRING
#  define WPP_LOGASTR(_value)  WPP_LOGPAIR( \
    strlen(_value) + 1, \
    _value )
# endif // WPP_CHECK_FOR_NULL_STRING
#endif // WPP_LOGASTR

#ifndef WPP_LOGWSTR
# ifdef WPP_CHECK_FOR_NULL_STRING
#  define WPP_LOGWSTR(_value)  WPP_LOGPAIR( \
    ((_value) ? wcslen(_value) + 1 : 5) * sizeof(WCHAR), \
     (_value) ?       (_value)     : L"NULL" )
# else // WPP_CHECK_FOR_NULL_STRING
#  define WPP_LOGWSTR(_value)  WPP_LOGPAIR( \
    (wcslen(_value) + 1) * sizeof(WCHAR), \
    _value )
# endif // WPP_CHECK_FOR_NULL_STRING
#endif // WPP_LOGWSTR

#ifndef WPP_LOGPGUID
# define WPP_LOGPGUID(_value) WPP_LOGPAIR( sizeof(GUID), (_value) )
#endif // WPP_LOGPGUID

#ifndef WPP_LOGPSID
# ifdef WPP_CHECK_FOR_NULL_STRING
# define WPP_LOGPSID(_value)  WPP_LOGPAIR( \
    (_value) && WPP_IsValidSid(_value) ? WPP_GetLengthSid(_value) : 5, \
    (_value) && WPP_IsValidSid(_value) ? (_value) : (void const*)"NULL")
# else // WPP_CHECK_FOR_NULL_STRING
# define WPP_LOGPSID(_value)  WPP_LOGPAIR( \
    WPP_GetLengthSid(_value), \
    (_value) )
#endif // WPP_CHECK_FOR_NULL_STRING
#endif // WPP_LOGPSID

#ifndef WPP_LOGCSTR
# define WPP_LOGCSTR(_x) \
    WPP_LOGPAIR( sizeof(USHORT),      &(_x).Length ) \
    WPP_LOGPAIR( (USHORT)(_x).Length, (USHORT)(_x).Length ? (_x).Buffer : "" )
#endif // WPP_LOGCSTR

#ifndef WPP_LOGUSTR
# define WPP_LOGUSTR(_x) \
    WPP_LOGPAIR( sizeof(USHORT),      &(_x).Length ) \
    WPP_LOGPAIR( (USHORT)(_x).Length, (USHORT)(_x).Length ? (_x).Buffer : L"" )
#endif // WPP_LOGUSTR

#ifndef WPP_LOGPUSTR
#ifdef WPP_CHECK_FOR_NULL_STRING
# define WPP_LOGPUSTR(_x) \
    WPP_LOGPAIR( \
        sizeof(USHORT), \
        (_x) ? &(_x)->Length : (void const*)L"\x08" ) \
    WPP_LOGPAIR( \
        (_x)                         ? (USHORT)(_x)->Length : 0x08, \
        (_x) && (USHORT)(_x)->Length ? (_x)->Buffer         : L"NULL" )
#else // WPP_CHECK_FOR_NULL_STRING
# define WPP_LOGPUSTR(_x) WPP_LOGUSTR(*(_x))
#endif // WPP_CHECK_FOR_NULL_STRING
#endif // WPP_LOGPUSTR

#ifndef WPP_LOGPCSTR
#ifdef WPP_CHECK_FOR_NULL_STRING
# define WPP_LOGPCSTR(_x) \
    WPP_LOGPAIR( \
        sizeof(USHORT), \
        (_x) ? &(_x)->Length : (void const*)L"\x04" ) \
    WPP_LOGPAIR( \
        (_x)                         ? (USHORT)(_x)->Length : 0x04, \
        (_x) && (USHORT)(_x)->Length ? (_x)->Buffer         : "NULL" )
#else // WPP_CHECK_FOR_NULL_STRING
# define WPP_LOGPCSTR(_x) WPP_LOGCSTR(*(_x))
#endif // WPP_CHECK_FOR_NULL_STRING
#endif // WPP_LOGPCSTR

#ifdef __cplusplus

#ifndef WPP_POINTER_TO_USHORT
struct WppPointerToUshort
{
    USHORT m_val;
    WPP_FORCEINLINE explicit WppPointerToUshort(USHORT val) : m_val(val) {}
    WPP_FORCEINLINE USHORT const* get() const { return &m_val; }
};
#define WPP_POINTER_TO_USHORT(val) (WppPointerToUshort((val)).get())
#endif // WPP_POINTER_TO_USHORT

#ifndef WPP_LOGCPPSTR
#define WPP_LOGCPPSTR(_value) \
    WPP_LOGPAIR( \
        sizeof(USHORT), \
        WPP_POINTER_TO_USHORT((USHORT)((_value).size()*sizeof(*(_value).c_str()))) ) \
    WPP_LOGPAIR( \
        (USHORT)((_value).size()*sizeof(*(_value).c_str())), \
        (_value).c_str() )
#endif // WPP_LOGCPPSTR

#ifndef WPP_LOGCPPVEC
#define WPP_LOGCPPVEC(_value) \
    WPP_LOGPAIR( \
        sizeof(USHORT), \
        WPP_POINTER_TO_USHORT((USHORT)((_value).size()*sizeof(*(_value).data()))) ) \
    WPP_LOGPAIR( \
        (USHORT)((_value).size()*sizeof(*(_value).data())), \
        (_value).data() + ((_value).data() == NULL) )
#endif // WPP_LOGCPPVEC

#endif // __cplusplus

#ifndef WPP_BINARY_def
# define WPP_BINARY_def
typedef struct tagWPP_BINARY
{
    _Field_size_bytes_(Length) void const* Buffer;
    USHORT Length;
} WPP_BINARY;
#endif // WPP_BINARY_def

#ifndef WPP_BINARY_func
# define WPP_BINARY_func
WPP_FORCEINLINE WPP_BINARY
WppBinary(_In_reads_bytes_(Length) void const* Buffer, USHORT Length)
{
    WPP_BINARY data;
    data.Buffer = Buffer;
    data.Length = Length;
    return data;
}
#endif // WPP_BINARY_func

#endif // WPP_ALREADY_INCLUDED

#ifndef WPP_ENABLE_FLAG_BIT
#define WPP_ENABLE_FLAG_BIT(flag) (WPP_CB[((flag) >> 16)].Control).Flags[( (0xFFFF & ((flag)-1) ) / 32)] & (1 << ( ((flag)-1) & 31 ))
#endif

#ifndef WPP_SF_sDq_def
# define WPP_SF_sDq_def
WPP_INLINE void WPP_SF_sDq(WPP_LOGGER_ARG unsigned short id, LPCGUID TraceGuid, LPCSTR _a1, unsigned int _a2, const void* _a3)
{ WPP_TRACE(WPP_GET_LOGGER, WPP_TRACE_OPTIONS, (LPGUID)TraceGuid, id, WPP_LOGASTR(_a1) WPP_LOGTYPEVAL(unsigned int, _a2) WPP_LOGTYPEVAL(const void*, _a3)  (void*)0); }
#endif // WPP_SF_sDq_def

#if ENABLE_WPP_RECORDER

#if ENABLE_WPP_TRACE_FILTERING_WITH_WPP_RECORDER

//
// Generate the WPP_RECORDER_AND_TRACE_SF_sDq function
//
#ifndef WPP_RECORDER_AND_TRACE_SF_sDq_def
#define WPP_RECORDER_AND_TRACE_SF_sDq_def
WPP_INLINE
VOID
WPP_RECORDER_AND_TRACE_SF_sDq(
    WPP_LOGGER_ARG
    BOOLEAN  wppEnabled,
    BOOLEAN  recorderEnabled,
    PVOID    AutoLogContext,
    UCHAR    level,
    ULONG    flags,
    USHORT   id,
    LPCGUID  traceGuid
    , LPCSTR _a1, unsigned int _a2, const void* _a3
    )
{
    if (wppEnabled)
    {
        WPP_TRACE( WPP_GET_LOGGER,
                   WPP_TRACE_OPTIONS,
                   (LPGUID)traceGuid,
                   id,
                   WPP_LOGASTR(_a1) WPP_LOGTYPEVAL(unsigned int, _a2) WPP_LOGTYPEVAL(const void*, _a3)  (void*)0);
    }

    if (recorderEnabled)
    {
        WPP_RECORDER( AutoLogContext, level, flags, (LPGUID) traceGuid, id, WPP_LOGASTR(_a1) WPP_LOGTYPEVAL(unsigned int, _a2) WPP_LOGTYPEVAL(const void*, _a3)  (void*)0 );
    }
}
#endif // WPP_RECORDER_AND_TRACE_SF_sDq_def

#else  // ENABLE_WPP_TRACE_FILTERING_WITH_WPP_RECORDER

//
// Generate the WPP_RECORDER_SP_sDq function
//
#ifndef WPP_RECORDER_SF_sDq_def
#define WPP_RECORDER_SF_sDq_def
WPP_INLINE
VOID
WPP_RECORDER_SF_sDq(
    PVOID    AutoLogContext,
    UCHAR    level,
    ULONG    flags,
    USHORT   id,
    LPCGUID  traceGuid
    , LPCSTR _a1, unsigned int _a2, const void* _a3
    )
{
    if (WPP_ENABLE_FLAG_BIT(flags) &&
        (WPP_CONTROL(flags).Level >= level))
    {
        WPP_TRACE(
            WPP_CONTROL(flags).Logger,
            WPP_TRACE_OPTIONS,
            (LPGUID)traceGuid,
            id,
            WPP_LOGASTR(_a1) WPP_LOGTYPEVAL(unsigned int, _a2) WPP_LOGTYPEVAL(const void*, _a3)  (void*)0);
    }

    WPP_RECORDER(AutoLogContext, level, flags, (LPGUID) traceGuid, id, WPP_LOGASTR(_a1) WPP_LOGTYPEVAL(unsigned int, _a2) WPP_LOGTYPEVAL(const void*, _a3)  (void*)0);
}
#endif // WPP_RECORDER_SF_sDq_def

#endif // ENABLE_WPP_TRACE_FILTERING_WITH_WPP_RECORDER

#endif // ENABLE_WPP_RECORDER

// WPP_LOG_ALWAYS:
// Called for each event: WPP_LOG_ALWAYS(EX, MSG, arg1, arg2, arg3...) Other()
// If defined, the definition needs to include a trailing comma or semicolon.
// In addition, you will need to define a WPP_EX_[args](args...) macro to
// extract any needed information from the other arguments (e.g. LEVEL).
#ifndef WPP_LOG_ALWAYS
#define WPP_LOG_ALWAYS(...)
#endif

// WPP_DEBUG:
// Called for each enabled event: WPP_DEBUG((MSG, arg1, arg2, arg3...)), Other()
// Potential definition: printf MsgArgs
// Definition should not include any trailing comma or semicolon.
#ifdef WPP_DEBUG
#define WPP_INVOKE_WPP_DEBUG(MsgArgs) WPP_DEBUG(MsgArgs)
#else // WPP_DEBUG
#define WPP_INVOKE_WPP_DEBUG(MsgArgs) (void)0
#endif // WPP_DEBUG

// WPP_CALL_RosUmd_cpp30
#ifndef WPP_LEVEL_FLAGS_PRE
#  define WPP_LEVEL_FLAGS_PRE(LEVEL,FLAGS)
#endif
#ifndef WPP_LEVEL_FLAGS_POST
#  define WPP_LEVEL_FLAGS_POST(LEVEL,FLAGS)
#endif
#if ENABLE_WPP_RECORDER
#if ENABLE_WPP_TRACE_FILTERING_WITH_WPP_RECORDER
#define WPP_CALL_RosUmd_cpp30(MSG, _a12) \
    WPP_LOG_ALWAYS(WPP_EX_LEVEL_FLAGS(TRACE_LEVEL_VERBOSE, ROS_TRACING_DEFAULT), MSG, _a12) \
    WPP_LEVEL_FLAGS_PRE(TRACE_LEVEL_VERBOSE, ROS_TRACING_DEFAULT) \
    do {\
        WPP_ANNOTATE(RosUmd_cpp30) 0; \
        BOOLEAN wppEnabled = WPP_CHECK_INIT WPP_LEVEL_FLAGS_ENABLED(TRACE_LEVEL_VERBOSE, ROS_TRACING_DEFAULT); \
        BOOLEAN recorderEnabled = WPP_RECORDER_CHECK_INIT WPP_RECORDER_LEVEL_FLAGS_FILTER(TRACE_LEVEL_VERBOSE, ROS_TRACING_DEFAULT); \
        if (wppEnabled || recorderEnabled) { \
            WPP_INVOKE_WPP_DEBUG((MSG, _a12)); \
            WPP_RECORDER_AND_TRACE_SF_sDq( \
                     WPP_LEVEL_FLAGS_LOGGER(TRACE_LEVEL_VERBOSE, ROS_TRACING_DEFAULT) \
                     wppEnabled, recorderEnabled, \
                     WPP_RECORDER_LEVEL_FLAGS_ARGS(TRACE_LEVEL_VERBOSE, ROS_TRACING_DEFAULT), \
                     10, \
                     WPP_LOCAL_TraceGuids+0, __FILE__, __LINE__, _a12);\
        } \
    } \
    while(0) \
    WPP_LEVEL_FLAGS_POST(TRACE_LEVEL_VERBOSE, ROS_TRACING_DEFAULT)
#else // ENABLE_WPP_TRACE_FILTERING_WITH_WPP_RECORDER
#define WPP_CALL_RosUmd_cpp30(MSG, _a12) \
    WPP_LOG_ALWAYS(WPP_EX_LEVEL_FLAGS(TRACE_LEVEL_VERBOSE, ROS_TRACING_DEFAULT), MSG, _a12) \
    WPP_LEVEL_FLAGS_PRE(TRACE_LEVEL_VERBOSE, ROS_TRACING_DEFAULT) \
    WPP_ANNOTATE(RosUmd_cpp30) \
    (( \
        WPP_RECORDER_CHECK_INIT WPP_RECORDER_LEVEL_FLAGS_FILTER(TRACE_LEVEL_VERBOSE, ROS_TRACING_DEFAULT) \
        ?   WPP_INVOKE_WPP_DEBUG((MSG, _a12)), \
            WPP_RECORDER_SF_sDq( \
                WPP_RECORDER_LEVEL_FLAGS_ARGS(TRACE_LEVEL_VERBOSE, ROS_TRACING_DEFAULT), \
                10, \
                WPP_LOCAL_TraceGuids+0, __FILE__, __LINE__, _a12), \
            1 \
        :   0 \
    )) \
    WPP_LEVEL_FLAGS_POST(TRACE_LEVEL_VERBOSE, ROS_TRACING_DEFAULT)
#endif // ENABLE_WPP_TRACE_FILTERING_WITH_WPP_RECORDER
#else  // ENABLE_WPP_RECORDER
#define WPP_CALL_RosUmd_cpp30(MSG, _a12) \
    WPP_LOG_ALWAYS(WPP_EX_LEVEL_FLAGS(TRACE_LEVEL_VERBOSE, ROS_TRACING_DEFAULT), MSG, _a12) \
    WPP_LEVEL_FLAGS_PRE(TRACE_LEVEL_VERBOSE, ROS_TRACING_DEFAULT) \
    WPP_ANNOTATE(RosUmd_cpp30) \
    (( \
        WPP_CHECK_INIT WPP_LEVEL_FLAGS_ENABLED(TRACE_LEVEL_VERBOSE, ROS_TRACING_DEFAULT) \
        ?   WPP_INVOKE_WPP_DEBUG((MSG, _a12)), \
            WPP_SF_sDq( \
                WPP_LEVEL_FLAGS_LOGGER(TRACE_LEVEL_VERBOSE, ROS_TRACING_DEFAULT) \
                10, \
                WPP_LOCAL_TraceGuids+0, __FILE__, __LINE__, _a12), \
            1 \
        :   0 \
    )) \
    WPP_LEVEL_FLAGS_POST(TRACE_LEVEL_VERBOSE, ROS_TRACING_DEFAULT)
#endif // ENABLE_WPP_RECORDER

// Functions
#undef DoDebugTrace
#define DoDebugTrace WPP_(CALL)
#undef DoTraceMessage
#define DoTraceMessage WPP_(CALL)
#undef ROS_ASSERT
#define ROS_ASSERT WPP_(CALL)
#undef ROS_CRITICAL_ASSERT
#define ROS_CRITICAL_ASSERT WPP_(CALL)
#undef ROS_LOG_ASSERTION
#define ROS_LOG_ASSERTION WPP_(CALL)
#undef ROS_LOG_CRITICAL_ERROR
#define ROS_LOG_CRITICAL_ERROR WPP_(CALL)
#undef ROS_LOG_ERROR
#define ROS_LOG_ERROR WPP_(CALL)
#undef ROS_LOG_INFORMATION
#define ROS_LOG_INFORMATION WPP_(CALL)
#undef ROS_LOG_LOW_MEMORY
#define ROS_LOG_LOW_MEMORY WPP_(CALL)
#undef ROS_LOG_TRACE
#define ROS_LOG_TRACE WPP_(CALL)
#undef ROS_LOG_WARNING
#define ROS_LOG_WARNING WPP_(CALL)
#undef ROS_TRACE_EVENTS
#define ROS_TRACE_EVENTS WPP_(CALL)

#ifdef __cplusplus
} // extern "C"
#endif

// template um-init.tpl

//
//     Defines a set of functions that simplifies
//     user mode registration for tracing
//

#ifdef __cplusplus
extern "C" {
#endif

#ifndef WPPINIT_EXPORT
#define WPPINIT_EXPORT
#endif

#ifndef WppDebug
#define WppDebug(a,b)
#endif

#define __WARNING_BANNED_LEGACY_INSTRUMENTATION_API_USAGE 28735

#if ENABLE_WPP_RECORDER
#ifdef WPP_MACRO_USE_KM_VERSION_FOR_UM
WPPINIT_EXPORT
VOID
__cdecl
WppAutoLogStart(
    _In_ WPP_CB_TYPE * WppCb,
    _In_ PDRIVER_OBJECT DrvObj,
    _In_ PCUNICODE_STRING RegPath
    );
#else
WPPINIT_EXPORT
VOID
__cdecl
WppAutoLogStart(
    _In_ WPP_CB_TYPE * WppCb,
    _In_ PVOID DrvObj,
    _In_ PCUNICODE_STRING RegPath
    );
#endif // WPP_MACRO_USE_KM_VERSION_FOR_UM

WPPINIT_EXPORT
VOID
__cdecl
WppAutoLogStop(
    _In_ WPP_CB_TYPE * WppCb
    );

#endif // ENABLE_WPP_RECORDER

// define annotation record that will carry control information to pdb (in case somebody needs it)
WPP_FORCEINLINE void WPP_CONTROL_ANNOTATION() {
#if !defined(WPP_NO_ANNOTATIONS)

#ifndef WPP_TMC_ANNOT_SUFIX
#ifdef WPP_PUBLIC_TMC
    #define WPP_TMC_ANNOT_SUFIX ,L"PUBLIC_TMF:"
#else
    #define WPP_TMC_ANNOT_SUFIX
#endif
#endif

#  define WPP_DEFINE_CONTROL_GUID(Name,Guid,Bits) __annotation(L"TMC:", WPP_GUID_WTEXT Guid, _WPPW(WPP_STRINGIZE(Name)) Bits WPP_TMC_ANNOT_SUFIX);
#  define WPP_DEFINE_BIT(Name) , _WPPW(#Name)

    WPP_CONTROL_GUIDS
#  undef WPP_DEFINE_BIT
#  undef WPP_DEFINE_CONTROL_GUID
#endif
}

LPCGUID WPP_REGISTRATION_GUIDS[WPP_LAST_CTL];

WPP_CB_TYPE WPP_MAIN_CB[WPP_LAST_CTL];

#define WPP_NEXT(Name) ((WPP_TRACE_CONTROL_BLOCK*) \
    (WPP_XGLUE(WPP_CTL_, WPP_EVAL(Name)) + 1 == WPP_LAST_CTL ? 0:WPP_MAIN_CB + WPP_XGLUE(WPP_CTL_, WPP_EVAL(Name)) + 1))

#if ENABLE_WPP_RECORDER
#define INIT_WPP_RECORDER(Arr)                  \
   Arr->Control.AutoLogContext = NULL;          \
   Arr->Control.AutoLogVerboseEnabled = 0x0;    \
   Arr->Control.AutoLogAttachToMiniDump = 0x0;
#else
#define INIT_WPP_RECORDER(Arr)
#endif

__inline void WPP_INIT_CONTROL_ARRAY(WPP_CB_TYPE* Arr) {
#define WPP_DEFINE_CONTROL_GUID(Name,Guid,Bits)                        \
   Arr->Control.Ptr = NULL;                                            \
   Arr->Control.Next = WPP_NEXT(WPP_EVAL(Name));                       \
   Arr->Control.FlagsLen = WPP_FLAG_LEN;                               \
   Arr->Control.Level = 0;                                             \
   Arr->Control.Options = 0;                                           \
   Arr->Control.Flags[0] = 0;                                          \
   INIT_WPP_RECORDER(Arr)                                              \
   ++Arr;
#define WPP_DEFINE_BIT(BitName) L" " L ## #BitName
WPP_CONTROL_GUIDS
#undef WPP_DEFINE_BIT
#undef WPP_DEFINE_CONTROL_GUID
}

#undef WPP_INIT_STATIC_DATA
#define WPP_INIT_STATIC_DATA WPP_INIT_CONTROL_ARRAY(WPP_MAIN_CB)

__inline void WPP_INIT_GUID_ARRAY(LPCGUID* Arr) {
#define WPP_DEFINE_CONTROL_GUID(Name,Guid,Bits)                         \
   WPP_XGLUE4(*Arr = &WPP_, ThisDir, _CTLGUID_, WPP_EVAL(Name));        \
   ++Arr;
WPP_CONTROL_GUIDS
#undef WPP_DEFINE_CONTROL_GUID
}

VOID WppInitUm(_In_opt_ LPCWSTR AppName);
//
// WPP_INIT_TRACING and WPP_CLEANUP macros are defined differently for kernel
// mode and user mode. In order to support mode-agnostic WDF drivers,
// WPP_INIT_TRACING and WPP_CLEANUP macros for UMDF 2.x user-mode drivers are
// being updated to be same as kernel mode macros. This difference is based
// upon the macro WPP_MACRO_USE_KM_VERSION_FOR_UM.
//

#ifdef WPP_MACRO_USE_KM_VERSION_FOR_UM
VOID WppInitUmDriver(
                     _In_ PDRIVER_OBJECT DrvObject,
                     _In_ PCUNICODE_STRING RegPath
                     );

VOID WppInitUm(_In_opt_ LPCWSTR AppName);

#ifndef WPP_MACRO_USE_KM_VERSION_FOR_UM_IGNORE_VALIDATION

//
// To reduce confusion due to this breaking change, we have overloaded
// WPP_INIT_TRACING with some macro wizardry to notify the developer
// if (s)he is using the deprecated single argument version.
//
// Example of how this works:
//
// 1) WPP_INIT_TRACING is called with two parameters, X and Y.
// 2) FX_WPP_COUNT_ARGUMENTS is called, but due to a bug with VC++ __VA_ARGS__ remains as a single token.
// 3) FX_WPP_EXPAND_ARGUMENTS expands the argument list to (X, Y, 2, 1, 0)
// 4) FX_WPP_DETERMINE_MACRO_NAME puts X into _1_, Y into _2_, 2 into Count (the value we want),
//    and the rest into "..." which are discarded. Count is then combined with WPP_INIT_TRACING.
// 5) WPP_GLUE combines "WPP_INIT_TRACING2" with "(X, Y)" giving us our function call: WPP_INIT_TRACING2(X,Y)
//
#define FX_WPP_DETERMINE_MACRO_NAME(_1_, _2_, Count, ...) WPP_INIT_TRACING##Count
#define FX_WPP_EXPAND_ARGUMENTS(Args) FX_WPP_DETERMINE_MACRO_NAME Args
#define FX_WPP_COUNT_ARGUMENTS(...) FX_WPP_EXPAND_ARGUMENTS((__VA_ARGS__, 2, 1, 0))

#define WPP_INIT_TRACING(...) WPP_GLUE(FX_WPP_COUNT_ARGUMENTS(__VA_ARGS__),(__VA_ARGS__))

//
// _pragma(message("...")) doesn't work with newline characters. "ERROR..." is an
// undocumented keyword in visual studio that causes an error, but this is ignored by razzle.
// Instead we use an undeclared identifier.
//
#define WPP_INIT_TRACING1(AppName) \
        __pragma(message("ERROR: This version of WPP_INIT_TRACING has been deprecated from UMDF 2.15 onwards")) \
        __pragma(message("WPP_INIT_TRACING( ")) \
        __pragma(message("  _In_ PDRIVER_OBJECT DriverObject, ")) \
        __pragma(message("  _In_ PUNICODE_STRING RegistryPath ")) \
        __pragma(message("); ")) \
        __pragma(message("WPP_CLEANUP( ")) \
        __pragma(message("  _In_ PDRIVER_OBJECT DriverObject ")) \
        __pragma(message(");" )) \
        __pragma(message("Please refer to the MSDN documentation on WPP tracing for more information.")) \
        WPP_INIT_TRACING_FUNCTION_IS_DEPRECATED_PLEASE_REFER_TO_BUILD_LOG_FOR_MORE_INFORMATION;

#define WPP_INIT_TRACING2(DrvObj, RegPath)                                   \
                 WppLoadTracingSupport;                                      \
                 (WPP_CONTROL_ANNOTATION(),WPP_INIT_STATIC_DATA,             \
                  WPP_INIT_GUID_ARRAY((LPCGUID*)&WPP_REGISTRATION_GUIDS),    \
                  WPP_CB= WPP_MAIN_CB,                                       \
                  WppInitUmDriver(DrvObj, RegPath))

#else
#define WPP_INIT_TRACING(DrvObj, RegPath)                                    \
                 WppLoadTracingSupport;                                      \
                 (WPP_CONTROL_ANNOTATION(),WPP_INIT_STATIC_DATA,             \
                  WPP_INIT_GUID_ARRAY((LPCGUID*)&WPP_REGISTRATION_GUIDS),    \
                  WPP_CB= WPP_MAIN_CB,                                       \
                  WppInitUmDriver(DrvObj, RegPath))

#endif // WPP_MACRO_USE_KM_VERSION_FOR_UM_IGNORE_VALIDATION
#else
#define WPP_INIT_TRACING(AppName)                                           \
                WppLoadTracingSupport;                                      \
                (WPP_CONTROL_ANNOTATION(),WPP_INIT_STATIC_DATA,             \
                 WPP_INIT_GUID_ARRAY((LPCGUID*)&WPP_REGISTRATION_GUIDS),    \
                 WPP_CB= WPP_MAIN_CB,                                       \
                 WppInitUm(AppName))

#endif // WPP_MACRO_USE_KM_VERSION_FOR_UM
void WPP_Set_Dll_CB(
                    PWPP_TRACE_CONTROL_BLOCK Control,
                    VOID * DllControlBlock,
                    USHORT Flags)
{

    if (*(PVOID*)DllControlBlock != DllControlBlock){
        Control->Ptr = DllControlBlock;
    } else {
        if (Flags == WPP_VER_WHISTLER_CB_FORWARD_PTR ){
            memset(Control, 0, sizeof(WPP_TRACE_CONTROL_BLOCK));
            *(PWPP_TRACE_CONTROL_BLOCK*)DllControlBlock = Control;
            Control->Options = WPP_VER_LH_CB_FORWARD_PTR;

        }
    }

}


#define WPP_SET_FORWARD_PTR(CTL, FLAGS, PTR) (\
    (WPP_MAIN_CB[WPP_CTRL_NO(WPP_BIT_ ## CTL )].Control.Options = (FLAGS)));\
    WPP_Set_Dll_CB(&WPP_MAIN_CB[WPP_CTRL_NO(WPP_BIT_ ## CTL )].Control,(PTR),(USHORT)FLAGS)


#define DEFAULT_LOGGER_NAME             L"stdout"

#if !defined(WPPINIT_STATIC)
#  define WPPINIT_STATIC
#endif

#define WPP_GUID_FORMAT     "%08x-%04x-%04x-%02x%02x-%02x%02x%02x%02x%02x%02x"
#define WPP_GUID_ELEMENTS(p) \
    p->Data1,                 p->Data2,    p->Data3,\
    p->Data4[0], p->Data4[1], p->Data4[2], p->Data4[3],\
    p->Data4[4], p->Data4[5], p->Data4[6], p->Data4[7]

#define WPP_MAX_LEVEL 255
#define WPP_MAX_FLAGS 0xFFFFFFFF



#if defined (WPP_GLOBALLOGGER)

__inline
TRACEHANDLE
WppQueryLogger(
    _In_opt_ PCWSTR LoggerName
    )
{
    ULONG Status;
    EVENT_TRACE_PROPERTIES LoggerInfo;

    ZeroMemory(&LoggerInfo, sizeof(LoggerInfo));
    LoggerInfo.Wnode.BufferSize = sizeof(LoggerInfo);
    LoggerInfo.Wnode.Flags = WNODE_FLAG_TRACED_GUID;

    Status = ControlTraceW(0, LoggerName ? LoggerName : L"stdout", &LoggerInfo, EVENT_TRACE_CONTROL_QUERY);
    if (Status == ERROR_SUCCESS || Status == ERROR_MORE_DATA) {
        return (TRACEHANDLE) LoggerInfo.Wnode.HistoricalContext;
    }
    return 0;
}

#define WPP_REG_GLOBALLOGGER_FLAGS             L"Flags"
#define WPP_REG_GLOBALLOGGER_LEVEL             L"Level"
#define WPP_REG_GLOBALLOGGER_START             L"Start"

#define WPP_TEXTGUID_LEN  38
#define WPP_REG_GLOBALLOGGER_KEY            L"SYSTEM\\CurrentControlSet\\Control\\Wmi\\GlobalLogger"

WPPINIT_STATIC
void WppIntToHex(
    _Out_writes_(digits) PWCHAR Buf,
    unsigned int value,
    int digits
    )
{
    static LPCWSTR hexDigit = L"0123456789abcdef";
    while (--digits >= 0) {
        Buf[digits] = hexDigit[ value & 15 ];
        value /= 16;
    }
}

WPPINIT_EXPORT
void WppInitGlobalLogger(
        IN LPCGUID ControlGuid,
        IN PTRACEHANDLE LoggerHandle,
        OUT PULONG Flags,
        _Out_writes_(sizeof(UCHAR)) PUCHAR Level )
{
WCHAR    GuidBuf[WPP_TEXTGUID_LEN];
ULONG    CurrentFlags = 0;
ULONG    CurrentLevel = 0;
DWORD    Start = 0;
DWORD    DataSize ;
ULONG    Status ;
HKEY     GloblaLoggerHandleKey;
HKEY     ValueHandleKey ;



   WppDebug(0,("WPP checking Global Logger %S",WPP_REG_GLOBALLOGGER_KEY));

   if ((Status = RegOpenKeyExW(HKEY_LOCAL_MACHINE,
                        (LPWSTR)WPP_REG_GLOBALLOGGER_KEY,
                        0,
                        KEY_READ,
                        &GloblaLoggerHandleKey
                        )) != ERROR_SUCCESS) {
       WppDebug(0,("GlobalLogger key does not exist (0x%08X)",Status));
       return ;
   }

   DataSize = sizeof(DWORD);
   Status = RegQueryValueExW(GloblaLoggerHandleKey,
                             (LPWSTR)WPP_REG_GLOBALLOGGER_START,
                             0,
                             NULL,
                             (LPBYTE)&Start,
                             &DataSize);
    if (Status != ERROR_SUCCESS || Start == 0 ) {
        WppDebug(0,("Global Logger not started (0x%08X)",Status));
        goto Cleanup;
    }


   WppDebug(0,("Global Logger exists and is set to be started"));

   {
        static LPCWSTR hexDigit = L"0123456789abcdef";
        int i;

        WppIntToHex(GuidBuf, ControlGuid->Data1, 8);
        GuidBuf[8]  = '-';

        WppIntToHex(&GuidBuf[9], ControlGuid->Data2, 4);
        GuidBuf[13] = '-';

        WppIntToHex(&GuidBuf[14], ControlGuid->Data3, 4);
        GuidBuf[18] = '-';

        GuidBuf[19] =  hexDigit[(ControlGuid->Data4[0] & 0xF0) >> 4];
        GuidBuf[20] =  hexDigit[ControlGuid->Data4[0] & 0x0F ];
        GuidBuf[21] =  hexDigit[(ControlGuid->Data4[1] & 0xF0) >> 4];
        GuidBuf[22] =  hexDigit[ControlGuid->Data4[1] & 0x0F ];
        GuidBuf[23] = '-';

        for( i=2; i < 8 ; i++ ){
            GuidBuf[i*2+20] =  hexDigit[(ControlGuid->Data4[i] & 0xF0) >> 4];
            GuidBuf[i*2+21] =  hexDigit[ControlGuid->Data4[i] & 0x0F ];
        }
        GuidBuf[36] = 0;

    }

   //
   // Perform the query
   //

   if ((Status = RegOpenKeyExW(GloblaLoggerHandleKey,
                        (LPWSTR)GuidBuf,
                        0,
                        KEY_READ,
                        &ValueHandleKey
                        )) != ERROR_SUCCESS) {
       WppDebug(0,("Global Logger Key not set for this Control Guid %S (0x%08X)",GuidBuf,Status));
       goto Cleanup;
   }
   // Get the Flags Parameter
   DataSize = sizeof(DWORD);
   Status = RegQueryValueExW(ValueHandleKey,
                             (LPWSTR)WPP_REG_GLOBALLOGGER_FLAGS,
                             0,
                             NULL,
                             (LPBYTE)&CurrentFlags,
                             &DataSize);
    if (Status != ERROR_SUCCESS || CurrentFlags == 0 ) {
        WppDebug(0,("GlobalLogger for %S Flags not set (0x%08X)",GuidBuf,Status));
    }
   // Get the levels Parameter
   DataSize = sizeof(DWORD);
   Status = RegQueryValueExW(ValueHandleKey,
                             (LPWSTR)WPP_REG_GLOBALLOGGER_LEVEL,
                             0,
                             NULL,
                             (LPBYTE)&CurrentLevel,
                             &DataSize);
    if (Status != ERROR_SUCCESS || CurrentLevel == 0 ) {
        WppDebug(0,("GlobalLogger for %S Level not set (0x%08X)",GuidBuf,Status));
    }

    if (Start==1) {

       if ((*LoggerHandle= WppQueryLogger( L"GlobalLogger")) != (TRACEHANDLE)NULL) {
           *Flags = CurrentFlags & 0x7FFFFFFF ;
           *Level = (UCHAR)(CurrentLevel & 0xFF) ;
           WppDebug(0,("WPP Enabled via Global Logger Flags=0x%08X Level=0x%02X",CurrentFlags,CurrentLevel));
       } else {
           WppDebug(0,("GlobalLogger set for start but not running (Flags=0x%08X Level=0x%02X)",CurrentFlags,CurrentLevel));
       }

    }

   RegCloseKey(ValueHandleKey);
Cleanup:
   RegCloseKey(GloblaLoggerHandleKey);
}
#endif  //#ifdef WPP_GLOBALLOGGER

#ifdef WPP_MANAGED_CPP
#pragma managed(push, off)
#endif

ULONG
__stdcall
WppControlCallback(
    IN WMIDPREQUESTCODE RequestCode,
    IN PVOID Context,
    _Inout_ ULONG *InOutBufferSize,
    _Inout_ PVOID Buffer
    )
{
    PWPP_TRACE_CONTROL_BLOCK Ctx = (PWPP_TRACE_CONTROL_BLOCK)Context;
    TRACEHANDLE Logger;
    UCHAR Level;
    DWORD Flags;

    *InOutBufferSize = 0;

    switch (RequestCode)
    {
        case WMI_ENABLE_EVENTS:
        {
            Logger = WPP_GET_TRACE_LOGGER_HANDLE( Buffer );
            Level = WPP_GET_TRACE_ENABLE_LEVEL(Logger);
            Flags = WPP_GET_TRACE_ENABLE_FLAGS(Logger);

            WppDebug(1, ("[WppInit] WMI_ENABLE_EVENTS Ctx %p Flags %x"
                     " Lev %d Logger %I64x\n",
                     Ctx, Flags, Level, Logger) );
            break;
        }

        case WMI_DISABLE_EVENTS:
        {
            Logger = 0;
            Flags  = 0;
            Level  = 0;
            WppDebug(1, ("[WppInit] WMI_DISABLE_EVENTS Ctx 0x%08p\n", Ctx));
            break;
        }

#ifdef WPP_CAPTURE_STATE_CALLBACK

        case WMI_CAPTURE_STATE:
        {
            Logger = WPP_GET_TRACE_LOGGER_HANDLE(Buffer);
            Level = WPP_GET_TRACE_ENABLE_LEVEL(Logger);
            Flags = WPP_GET_TRACE_ENABLE_FLAGS(Logger);
            WPP_CAPTURE_STATE_CALLBACK(Ctx->ControlGuid,
                                       Logger,
                                       Flags,
                                       Level);

            return ERROR_SUCCESS;
        }

#endif

        default:
        {
            return ERROR_INVALID_PARAMETER;
        }
    }

    if (Ctx->Options & WPP_VER_WHISTLER_CB_FORWARD_PTR && Ctx->Cb) {
        Ctx = Ctx->Cb; // use forwarding address
    }

    Ctx->Logger   = Logger;
    Ctx->Level    = Level;
    Ctx->Flags[0] = Flags;

#ifdef WPP_PRIVATE_ENABLE_CALLBACK
    WPP_PRIVATE_ENABLE_CALLBACK(Ctx->ControlGuid,
                                Logger,
                                (RequestCode != WMI_DISABLE_EVENTS) ? TRUE : FALSE,
                                Flags,
                                Level);
#endif

    return(ERROR_SUCCESS);
}

#ifdef WPP_MANAGED_CPP
#pragma managed(pop)
#endif

#pragma warning(push)
#pragma warning(disable:4068)


#ifdef WPP_MACRO_USE_KM_VERSION_FOR_UM
WPPINIT_EXPORT
VOID WppInitUmDriver(
    _In_ PDRIVER_OBJECT DrvObject,
    _In_ PCUNICODE_STRING RegPath
    )
{
    WppInitUm(L"UMDF Driver");

#if ENABLE_WPP_RECORDER
    WppAutoLogStart(&WPP_CB[0], DrvObject, RegPath);
#else
    UNREFERENCED_PARAMETER(DrvObject);
    UNREFERENCED_PARAMETER(RegPath);
#endif // ENABLE_WPP_RECORDER
}

#endif // WPP_MACRO_USE_KM_VERSION_FOR_UM

WPPINIT_EXPORT
VOID WppInitUm(_In_opt_ LPCWSTR AppName)
{
    C_ASSERT(WPP_MAX_FLAG_LEN_CHECK);

    PWPP_TRACE_CONTROL_BLOCK Control = &WPP_CB[0].Control;
    TRACE_GUID_REGISTRATION TraceRegistration;
    LPCGUID *               RegistrationGuids = (LPCGUID *)&WPP_REGISTRATION_GUIDS;
    LPCGUID                 ControlGuid;

    ULONG Status;

#ifdef WPP_MOF_RESOURCENAME
#ifdef WPP_DLL
    HMODULE hModule = NULL;
#endif
    WCHAR ImagePath[MAX_PATH] = {UNICODE_NULL} ;
    WCHAR WppMofResourceName[] = WPP_MOF_RESOURCENAME ;
#else
    UNREFERENCED_PARAMETER(AppName);
#endif //#ifdef WPP_MOF_RESOURCENAME

    WppDebug(1, ("Registering %ws\n", AppName) );

    for(; Control; Control = Control->Next) {

        ControlGuid = *RegistrationGuids++;
        TraceRegistration.Guid = ControlGuid;
        TraceRegistration.RegHandle = 0;
        Control->ControlGuid = ControlGuid;

        WppDebug(1,(WPP_GUID_FORMAT " %ws : %d\n",
                    WPP_GUID_ELEMENTS(ControlGuid),
                    AppName,
                    Control->FlagsLen));


#ifdef WPP_MOF_RESOURCENAME
        if (AppName != NULL) {

#ifdef WPP_DLL
           if ((hModule = GetModuleHandleW(AppName)) != NULL) {
               Status = GetModuleFileNameW(hModule, ImagePath, MAX_PATH) ;
               ImagePath[MAX_PATH-1] = '\0';
               if (Status == 0) {
                  WppDebug(1,("RegisterTraceGuids => GetModuleFileName(DLL) Failed 0x%08X\n",GetLastError()));
               }
           } else {
               WppDebug(1,("RegisterTraceGuids => GetModuleHandleW failed for %ws (0x%08X)\n",AppName,GetLastError()));
           }
#else   // #ifdef WPP_DLL
           Status = GetModuleFileNameW(NULL,ImagePath,MAX_PATH);
           if (Status == 0) {
               WppDebug(1,("GetModuleFileName(EXE) Failed 0x%08X\n",GetLastError()));
           }
#endif  //  #ifdef WPP_DLL
        }
        WppDebug(1,("registerTraceGuids => registering with WMI, App=%ws, Mof=%ws, ImagePath=%ws\n",AppName,WppMofResourceName,ImagePath));

#pragma prefast(suppress:__WARNING_BANNED_LEGACY_INSTRUMENTATION_API_USAGE, "WPP generated, requires legacy providers");
        Status = RegisterTraceGuidsW(                   // Always use Unicode
#else   // ifndef WPP_MOF_RESOURCENAME

#pragma prefast(suppress:__WARNING_BANNED_LEGACY_INSTRUMENTATION_API_USAGE, "WPP generated, requires legacy providers");
        Status = WPP_REGISTER_TRACE_GUIDS(
#endif  // ifndef WPP_MOF_RESOURCENAME

            WppControlCallback,
            Control,              // Context for the callback
            ControlGuid,
            1,
            &TraceRegistration,
#ifndef WPP_MOF_RESOURCENAME
            0, //ImagePath,
            0, //ResourceName,
#else   // #ifndef WPP_MOF_RESOURCENAME
            ImagePath,
            WppMofResourceName,
#endif // #ifndef WPP_MOF_RESOURCENAME
            &Control->UmRegistrationHandle
        );


    if (Status != ERROR_SUCCESS) {

        WppDebug(1, ("RegisterTraceGuid failed %d\n", Status) );

    }

#if defined (WPP_GLOBALLOGGER)

        //
        // Check if Global logger is active if we have not been immediately activated
        //
        if (Control->Logger == (TRACEHANDLE)NULL) {
            WppInitGlobalLogger( ControlGuid, (PTRACEHANDLE)&Control->Logger, &Control->Flags[0], &Control->Level);
        }

#endif  //#if defined (WPP_GLOBALLOGGER)

#if ENABLE_WPP_RECORDER
#ifndef WPP_MACRO_USE_KM_VERSION_FOR_UM
    UNICODE_STRING AppNameStr;
    if (NULL != AppName) {
        RtlInitUnicodeString( &AppNameStr, AppName);
    }
    WppAutoLogStart(&WPP_CB[0], NULL, AppName ? &AppNameStr : NULL);
#endif
    WPP_RECORDER_INITIALIZED = WPP_MAIN_CB;
#endif
    }

}

WPPINIT_EXPORT
VOID WppCleanupUm(    VOID   )
{
    PWPP_TRACE_CONTROL_BLOCK Control;

    if (WPP_CB == (WPP_CB_TYPE*)&WPP_CB){
        //
        // WPP_INIT_TRACING macro has not been called
        //
        return;
    }
    WppDebug(1, ("Cleanup\n") );
    Control = &WPP_CB[0].Control;
    for(; Control; Control = Control->Next) {
        WppDebug(1,("UnRegistering %I64x\n", Control->UmRegistrationHandle) );
        if (Control->UmRegistrationHandle) {

#pragma prefast(suppress:__WARNING_BANNED_LEGACY_INSTRUMENTATION_API_USAGE, "WPP generated, requires legacy providers");
            WPP_UNREGISTER_TRACE_GUIDS(Control->UmRegistrationHandle);

            Control->UmRegistrationHandle = (TRACEHANDLE)NULL ;
        }
    }

#if ENABLE_WPP_RECORDER
    WppAutoLogStop(&WPP_CB[0]);

    WPP_RECORDER_INITIALIZED = (WPP_CB_TYPE*) &WPP_RECORDER_INITIALIZED;
#endif

    WPP_CB = (WPP_CB_TYPE*)&WPP_CB;
}

#pragma warning(pop)


#ifdef __cplusplus
} // extern "C"
#endif

