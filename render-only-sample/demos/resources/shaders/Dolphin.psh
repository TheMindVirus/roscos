//
// Copyright (c) Microsoft Corporation.  All rights reserved.
//
//
// Use of this sample source code is subject to the terms of the Microsoft
// license agreement under which you licensed this sample source code. If
// you did not accept the terms of the license agreement, you are not
// authorized to use this sample source code. For the terms of the license,
// please see the license agreement between you and Microsoft or, if applicable,
// see the LICENSE.RTF on your install media or the root of your tools installation.
// THE SAMPLE SOURCE CODE IS PROVIDED "AS IS", WITH NO WARRANTIES OR INDEMNITIES.
//
//--------------------------------------------------------------------------------------
// Shaders for the Dolphin sample
//--------------------------------------------------------------------------------------


struct VSOUT
{
    float4 vPosition    : SV_POSITION;
    float4 vTexCoords   : TEXCOORD1;            // TEXCOORD0.xy = basetex, TEXCOORD0.zw = caustictex
    float4 vLightAndFog : COLOR0_center;        // COLOR0.x = light, COLOR0.y = fog
};

//--------------------------------------------------------------------------------------
// Pixel shader constants
//--------------------------------------------------------------------------------------
sampler SamplerSkin     : register(s0);
sampler SamplerCaustics : register(s1);

cbuffer cb0 : register(b0)
{
    uniform float3 g_vAmbient       : packoffset(c0); // Material ambient color
    uniform float4 g_vFogColor      : packoffset(c1); // Fog color
}

Texture2D TextureSkin     : register(t0);
Texture2D TextureCaustics : register(t1);

//--------------------------------------------------------------------------------------
// Name: ShadeCausticsPixel()
// Desc: Pixel shader to add underwater caustics to a lit base texture.
//--------------------------------------------------------------------------------------
float4 ShadeCausticsPixel( VSOUT Input ) : SV_Target
{

    // Decompress input values
    float3 vLightColor       = Input.vLightAndFog.xxx;
    float  fFogValue         = Input.vLightAndFog.y;
    float2 vBaseTexCoords    = Input.vTexCoords.xy;
    float2 vCausticTexCoords = Input.vTexCoords.zw;

    // Combine lighting, base texture and water caustics texture
    float4 vDiffuse = TextureSkin.Sample( SamplerSkin, vBaseTexCoords );
    float4 vCaustics = TextureCaustics.Sample( SamplerCaustics, vCausticTexCoords );
    
    // Combine lighting, base texture and water caustics texture
    float4 PixelColor0 = vDiffuse  * float4( vLightColor + g_vAmbient, 1 );
    float4 PixelColor1 = vCaustics * float4( vLightColor, 1 );
     
    // Return color blended with fog
    return lerp( g_vFogColor, PixelColor0 + PixelColor1, fFogValue );


}


