// 8253f497c5efcb50440988e86cba85d6 Generated file. Do not edit.
// File created by WPP compiler version 10.0.19041
// from template km-default.tpl

#pragma once

// template km-header.tpl

#ifdef  WPP_THIS_FILE
// included twice
#       define  WPP_ALREADY_INCLUDED
#       undef   WPP_THIS_FILE
#endif  // #ifdef WPP_THIS_FILE

#define WPP_THIS_FILE Vc4Display_cpp

#ifndef WPP_ALREADY_INCLUDED

#define ENABLE_WPP_RECORDER 1
#define WPP_EMIT_FUNC_NAME 
#define WPP_KERNEL_MODE 

#include <evntrace.h>
#include <stddef.h>
#include <stdarg.h>
#include <wmistr.h>

#ifdef __cplusplus
extern "C" {
#endif

typedef
LONG
(*PFN_WPPQUERYTRACEINFORMATION) (
    IN  TRACE_INFORMATION_CLASS TraceInformationClass,
    OUT PVOID  TraceInformation,
    IN  ULONG  TraceInformationLength,
    OUT PULONG RequiredLength OPTIONAL,
    IN  PVOID  Buffer OPTIONAL
    );

typedef
LONG
(*PFN_WPPTRACEMESSAGE)(
    IN ULONG64  LoggerHandle,
    IN ULONG   MessageFlags,
    IN LPCGUID MessageGuid,
    IN USHORT  MessageNumber,
    IN ...
    );

typedef enum _WPP_TRACE_API_SUITE {
    WppTraceDisabledSuite,
    WppTraceWin2K,
    WppTraceWinXP,
    WppTraceTraceLH,
    WppTraceServer08,
    WppTraceMaxSuite
} WPP_TRACE_API_SUITE;

_IRQL_requires_same_
typedef
VOID
(NTAPI *PETW_CLASSIC_CALLBACK)(
    _In_ LPCGUID Guid,
    _In_ UCHAR ControlCode,
    _In_ PVOID EnableContext,
    _In_opt_ PVOID CallbackContext
    );

_IRQL_requires_same_
typedef
NTSTATUS
NTKERNELAPI
(FN_ETWREGISTERCLASSICPROVIDER)(
    _In_ LPCGUID ProviderGuid,
    _In_ ULONG Type,
    _In_ PETW_CLASSIC_CALLBACK EnableCallback,
    _In_opt_ PVOID CallbackContext,
    _Out_ PREGHANDLE RegHandle
    );

typedef FN_ETWREGISTERCLASSICPROVIDER *PFN_ETWREGISTERCLASSICPROVIDER;

typedef
BOOLEAN
NTKERNELAPI
(FN_WPPGETVERSION)(
    _Out_opt_ PULONG MajorVersion,
    _Out_opt_ PULONG MinorVersion,
    _Out_opt_ PULONG BuildNumber,
    _Out_opt_ PUNICODE_STRING CSDVersion
    );

typedef FN_WPPGETVERSION *PFN_WPPGETVERSION;

typedef
NTSTATUS
NTKERNELAPI
(FN_ETWUNREGISTER)(
    _In_ REGHANDLE RegHandle
    );

typedef FN_ETWUNREGISTER *PFN_ETWUNREGISTER;

#pragma prefast(suppress:__WARNING_ENCODE_GLOBAL_FUNCTION_POINTER, "this pointer can not be encoded");
__declspec(selectany) PFN_WPPQUERYTRACEINFORMATION   pfnWppQueryTraceInformation = NULL;

#pragma prefast(suppress:__WARNING_ENCODE_GLOBAL_FUNCTION_POINTER, "this pointer can not be encoded");
__declspec(selectany) PFN_WPPTRACEMESSAGE            pfnWppTraceMessage = NULL;

#pragma prefast(suppress:__WARNING_ENCODE_GLOBAL_FUNCTION_POINTER, "this pointer can not be encoded");
__declspec(selectany) PFN_ETWUNREGISTER              pfnEtwUnregister = NULL;

#pragma prefast(suppress:__WARNING_ENCODE_GLOBAL_FUNCTION_POINTER, "this pointer can not be encoded");
__declspec(selectany) PFN_ETWREGISTERCLASSICPROVIDER pfnEtwRegisterClassicProvider = NULL;

#pragma prefast(suppress:__WARNING_ENCODE_GLOBAL_FUNCTION_POINTER, "this pointer can not be encoded");
__declspec(selectany) PFN_WPPGETVERSION              pfnWppGetVersion = NULL;


__declspec(selectany) WPP_TRACE_API_SUITE            WPPTraceSuite = WppTraceDisabledSuite;

#if !defined(_NTRTL_)
#if !defined(_NTHAL_)
// fake RTL_TIME_ZONE_INFORMATION //
typedef int RTL_TIME_ZONE_INFORMATION;
#endif
#define _WMIKM_
#endif

#ifndef WPP_TRACE
#define WPP_TRACE pfnWppTraceMessage
#endif

#if ENABLE_WPP_RECORDER

#define _ENABLE_WPP_RECORDER TRUE

#ifndef WPP_RECORDER
#define WPP_RECORDER WppAutoLogTrace
#endif

//
// This setting is only applicable when IFR is enabled.
// Setting this to 1 will allow a WPP trace session to 
// capture trace messages as usual i.e it will require the
// user to provide WPP trace ENABLED and LOGGER macro. If 
// this is set to 0 by default the IFR trace filter also
// affects which trace messages land in the WPP trace session.
//
#if !defined(ENABLE_WPP_TRACE_FILTERING_WITH_WPP_RECORDER)
#define ENABLE_WPP_TRACE_FILTERING_WITH_WPP_RECORDER 0
#endif

#if !defined(WPP_RECORDER_LEVEL_FLAGS_ARGS)
#define WPP_RECORDER_LEVEL_FLAGS_ARGS(lvl, flags) WPP_CONTROL(WPP_BIT_ ## flags).AutoLogContext, lvl, WPP_BIT_ ## flags
#define WPP_RECORDER_LEVEL_FLAGS_FILTER(lvl,flags) (lvl < TRACE_LEVEL_VERBOSE || WPP_CONTROL(WPP_BIT_ ## flags).AutoLogVerboseEnabled)
#endif


#if !defined(WPP_RECORDER_LEVEL_ARGS)
#define WPP_RECORDER_LEVEL_ARGS(lvl) WPP_CONTROL(WPP_BIT_ ## lvl).AutoLogContext, 0, WPP_BIT_ ## lvl
#define WPP_RECORDER_LEVEL_FILTER(lvl) (WPP_CONTROL(WPP_BIT_ ## lvl).AutoLogVerboseEnabled)
#endif

NTSTATUS
WppAutoLogTrace(
    IN PVOID              AutoLogContext,
    IN UCHAR              MessageLevel,
    IN ULONG              MessageFlags,
    IN LPGUID             MessageGuid,
    IN USHORT             MessageNumber,
    IN ...
    );

#else
#define _ENABLE_WPP_RECORDER FALSE
#endif

VOID
WppLoadTracingSupport(
    VOID
    );

NTSTATUS
WppTraceCallback(
    _In_ UCHAR MinorFunction,
    _In_opt_ PVOID DataPath,
    _In_ ULONG BufferLength,
    _Inout_updates_bytes_(BufferLength) PVOID Buffer,
    _Inout_ PVOID Context,
    _Out_ PULONG Size
    );

#if !defined(WPP_TRACE_CONTROL_NULL_GUID)
DEFINE_GUID(WPP_TRACE_CONTROL_NULL_GUID, 0x00000000L, 0x0000, 0x0000, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00);
#endif

#define WPP_TRACE_CONTROL(Function,Buffer,BufferSize,ReturnSize) WppTraceCallback(Function,NULL,BufferSize,Buffer,&WPP_CB[0],&ReturnSize);

__inline ULONG64 WppQueryLogger(_In_opt_ PCWSTR LoggerName)
{
    if (WppTraceWinXP != WPPTraceSuite) {
        return (ULONG64)0;
    }

    ULONG ReturnLength;
    LONG Status;
    ULONG64 TraceHandle;
    UNICODE_STRING Buffer;

    RtlInitUnicodeString(&Buffer, LoggerName ? LoggerName : L"stdout");

    Status = pfnWppQueryTraceInformation(TraceHandleByNameClass,
                                         (PVOID)&TraceHandle,
                                         sizeof(TraceHandle),
                                         &ReturnLength,
                                         (PVOID)&Buffer
                                         );
    if (Status != STATUS_SUCCESS) {
        return (ULONG64)0;
    }

    return TraceHandle;
}

typedef LONG (*WMIENTRY_NEW)(
    _In_ UCHAR MinorFunction,
    _In_opt_ PVOID DataPath,
    _In_ ULONG BufferLength,
    _Inout_updates_bytes_(BufferLength) PVOID Buffer,
    _In_ PVOID Context,
    _Out_ PULONG Size
    );

typedef struct _WPP_TRACE_CONTROL_BLOCK
{
    WMIENTRY_NEW                        Callback;
    LPCGUID                             ControlGuid;
    struct _WPP_TRACE_CONTROL_BLOCK    *Next;
    __int64                             Logger;
    PUNICODE_STRING                     RegistryPath;
    UCHAR                               FlagsLen;
    UCHAR                               Level;
    USHORT                              Reserved;
    ULONG                               Flags[1];
    ULONG                               ReservedFlags;
    REGHANDLE                           RegHandle;
#if ENABLE_WPP_RECORDER
    PVOID                               AutoLogContext;
    USHORT                              AutoLogVerboseEnabled;
    USHORT                              AutoLogAttachToMiniDump;
#endif
} WPP_TRACE_CONTROL_BLOCK, *PWPP_TRACE_CONTROL_BLOCK;

VOID WppCleanupKm(_When_(_ENABLE_WPP_RECORDER, _In_) _When_(!_ENABLE_WPP_RECORDER, _In_opt_) PDRIVER_OBJECT DriverObject);

#define WPP_CLEANUP(DriverObject) WppCleanupKm((PDRIVER_OBJECT)DriverObject)

#define WPP_IsValidSid RtlValidSid
#define WPP_GetLengthSid RtlLengthSid

//
// Callback routine to be defined by the driver, which will be called from WPP callback
// WPP will pass current valued of : GUID, Logger, Enable, Flags, and Level
//
// To activate driver must define WPP_PRIVATE_ENABLE_CALLBACK in their code, sample below
// #define WPP_PRIVATE_ENABLE_CALLBACK MyPrivateCallback;
//
typedef
VOID
(*PFN_WPP_PRIVATE_ENABLE_CALLBACK)(
    _In_ LPCGUID Guid,
    _In_ __int64 Logger,
    _In_ BOOLEAN Enable,
    _In_ ULONG Flags,
    _In_ UCHAR Level);

#ifdef __cplusplus
} // extern "C"
#endif

#endif  // #ifndef WPP_ALREADY_INCLUDED

// template control.tpl

//
//     Defines a set of macro that expand control model specified
//     with WPP_CONTROL_GUIDS (example shown below)
//     into an enum of trace levels and required structures that
//     contain the mask of levels, logger handle and some information
//     required for registration.
//

#ifndef WPP_ALREADY_INCLUDED

#define WPP_EVAL(x) x
#define WPP_STR(x)  #x
#define WPP_STRINGIZE(x) WPP_STR(x)
#define WPP_GLUE(a, b)  a ## b
#define WPP_GLUE3(a, b, c)  a ## b ## c
#define WPP_GLUE4(a, b, c, d)  a ## b ## c ## d
#define WPP_XGLUE(a, b) WPP_GLUE(a, b)
#define WPP_XGLUE3(a, b, c) WPP_GLUE3(a, b, c)
#define WPP_XGLUE4(a, b, c, d) WPP_GLUE4(a, b, c, d)

///////////////////////////////////////////////////////////////////////////////////
//
// #define WPP_CONTROL_GUIDS \
//     WPP_DEFINE_CONTROL_GUID(Regular,(81b20fea,73a8,4b62,95bc,354477c97a6f), \
//       WPP_DEFINE_BIT(Error)      \
//       WPP_DEFINE_BIT(Unusual)    \
//       WPP_DEFINE_BIT(Noise)      \
//    )        \
//    WPP_DEFINE_CONTROL_GUID(HiFreq,(91b20fea,73a8,4b62,95bc,354477c97a6f), \
//       WPP_DEFINE_BIT(Entry)      \
//       WPP_DEFINE_BIT(Exit)       \
//       WPP_DEFINE_BIT(ApiCalls)   \
//       WPP_DEFINE_BIT(RandomJunk) \
//       WPP_DEFINE_BIT(LovePoem)   \
//    )

#ifdef __cplusplus
extern "C" {
#endif

#ifndef WPP_NO_CONTROL_GUIDS

#ifdef WPP_DEFAULT_CONTROL_GUID
#  ifdef WPP_CONTROL_GUIDS
#     error WPP_DEFAULT_CONTROL_GUID cannot be used together with WPP_CONTROL_GUIDS.
#  else // WPP_CONTROL_GUIDS
#     define WPP_CONTROL_GUIDS \
         WPP_DEFINE_CONTROL_GUID(Default,(WPP_DEFAULT_CONTROL_GUID), \
         WPP_DEFINE_BIT(Error)   \
         WPP_DEFINE_BIT(Unusual) \
         WPP_DEFINE_BIT(Noise)   \
      )
#  endif // WPP_CONTROL_GUIDS
#endif // WPP_DEFAULT_CONTROL_GUID

#ifndef WPP_CONTROL_GUIDS
#  pragma message(__FILE__ " : error : Please define control model via WPP_CONTROL_GUIDS or WPP_DEFAULT_CONTROL_GUID macros")
#  pragma message(__FILE__ " : error : don't forget to call WPP_INIT_TRACING and WPP_CLEANUP in your main, DriverEntry or DllInit")
#  pragma message(__FILE__ " : error : see tracewpp.doc for further information")
#  error WPP_CONTROL_GUIDS not defined.
#endif // WPP_CONTROL_GUIDS
// a set of macro to convert a guid in a form x(81b20fea,73a8,4b62,95bc,354477c97a6f)
// into either a a struct or text string

#define _WPPW(x) WPP_GLUE(L, x)

#define WPP_GUID_NORM(l,w1,w2,w3,ll) l ## w1 ## w2 ## w3 ## ll
#define WPP_GUID_TEXT(l,w1,w2,w3,ll) #l "-" #w1 "-" #w2 "-" #w3 "-" #ll
#define WPP_GUID_WTEXT(l,w1,w2,w3,ll) _WPPW(#l) L"-" _WPPW(#w1) L"-" _WPPW(#w2) L"-" _WPPW(#w3) L"-" _WPPW(#ll)
#define WPP_EXTRACT_BYTE(val,n) (((ULONGLONG)(0x ## val) >> (8 * n)) & 0xFF)
#define WPP_GUID_STRUCT(l,w1,w2,w3,ll) {0x ## l, 0x ## w1, 0x ## w2,\
     {WPP_EXTRACT_BYTE(w3, 1), WPP_EXTRACT_BYTE(w3, 0),\
      WPP_EXTRACT_BYTE(ll, 5), WPP_EXTRACT_BYTE(ll, 4),\
      WPP_EXTRACT_BYTE(ll, 3), WPP_EXTRACT_BYTE(ll, 2),\
      WPP_EXTRACT_BYTE(ll, 1), WPP_EXTRACT_BYTE(ll, 0)} }

#ifndef WPP_FORCEINLINE
#define WPP_FORCEINLINE __forceinline
#endif

// define an enum of control block names
//////
#define WPP_DEFINE_CONTROL_GUID(Name,Guid,Bits) WPP_XGLUE(WPP_CTL_, WPP_EVAL(Name)),
enum WPP_CTL_NAMES { WPP_CONTROL_GUIDS WPP_LAST_CTL};
#undef WPP_DEFINE_CONTROL_GUID

// define control guids
//////
#define WPP_DEFINE_CONTROL_GUID(Name,Guid,Bits) \
extern __declspec(selectany) const GUID WPP_XGLUE4(WPP_, ThisDir, _CTLGUID_, WPP_EVAL(Name)) = WPP_GUID_STRUCT Guid;
WPP_CONTROL_GUIDS
#undef WPP_DEFINE_CONTROL_GUID

// define enums of individual bits
/////
#define WPP_DEFINE_CONTROL_GUID(Name,Guid,Bits) \
    WPP_XGLUE(WPP_BLOCK_START_, WPP_EVAL(Name)) = WPP_XGLUE(WPP_CTL_, WPP_EVAL(Name)) * 0x10000, Bits WPP_XGLUE(WPP_BLOCK_END_, WPP_EVAL(Name)),
# define WPP_DEFINE_BIT(Name) WPP_BIT_ ## Name,
enum WPP_DEFINE_BIT_NAMES { WPP_CONTROL_GUIDS };
# undef WPP_DEFINE_BIT
#undef WPP_DEFINE_CONTROL_GUID

#define WPP_MASK(CTL)    (1 << ( ((CTL)-1) & 31 ))
#define WPP_FLAG_NO(CTL) ( (0xFFFF & ((CTL)-1) ) / 32)
#define WPP_CTRL_NO(CTL) ((CTL) >> 16)

// calculate how many DWORDs we need to get the required number of bits
// upper estimate. Sometimes will be off by one
#define WPP_DEFINE_CONTROL_GUID(Name,Guid,Bits) | WPP_XGLUE(WPP_BLOCK_END_, WPP_EVAL(Name))
enum _WPP_FLAG_LEN_ENUM { WPP_FLAG_LEN = 1 | ((0 WPP_CONTROL_GUIDS) & 0xFFFF) / 32 };
#undef WPP_DEFINE_CONTROL_GUID

//
// Check that maximum number of flags does not exceed 32
//
#ifndef C_ASSERT
#define C_ASSERT(e) typedef char __C_ASSERT__[(e)?1:-1]
#endif

#define MAX_NUMBER_OF_ETW_FLAGS 34 // 32 flags plus 2 separators
#define WPP_DEFINE_CONTROL_GUID(Name,Guid,Bits) && ((WPP_XGLUE(WPP_BLOCK_END_, WPP_EVAL(Name) & 0xFFFF)) < MAX_NUMBER_OF_ETW_FLAGS)
enum _WPP_FLAG_LEN_ENUM_MAX { WPP_MAX_FLAG_LEN_CHECK = (1 WPP_CONTROL_GUIDS) };
#undef WPP_DEFINE_CONTROL_GUID

#ifndef WPP_CB
#define WPP_CB      WPP_GLOBAL_Control
#endif
#ifndef WPP_CB_TYPE
#define WPP_CB_TYPE WPP_PROJECT_CONTROL_BLOCK
#endif

#ifndef WPP_CHECK_INIT
#define WPP_CHECK_INIT (WPP_CB != (WPP_CB_TYPE*)&WPP_CB) &&
#endif

typedef union {
    WPP_TRACE_CONTROL_BLOCK Control;
    UCHAR ReserveSpace[ sizeof(WPP_TRACE_CONTROL_BLOCK) + sizeof(ULONG) * (WPP_FLAG_LEN - 1) ];
} WPP_CB_TYPE ;


extern __declspec(selectany) WPP_CB_TYPE *WPP_CB = (WPP_CB_TYPE*)&WPP_CB;

#if ENABLE_WPP_RECORDER
#ifndef WPP_RECORDER_CHECK_INIT
#define WPP_RECORDER_CHECK_INIT (WPP_RECORDER_INITIALIZED != (WPP_CB_TYPE*)&WPP_RECORDER_INITIALIZED) &&
#endif
// Global varaible used to track if WPP_RECORDER was initialized.
// It will be initialized on calling WPP_INIT_TRACING macro.
extern __declspec(selectany) WPP_CB_TYPE *WPP_RECORDER_INITIALIZED = (WPP_CB_TYPE*)&WPP_RECORDER_INITIALIZED;
#endif

#define WPP_CONTROL(CTL) (WPP_CB[WPP_CTRL_NO(CTL)].Control)

// Define the default WPP_LEVEL_LOGGER/WPP_LEVEL_ENABLED macros for the
// predefined DoTraceMessage(LEVEL) function.
#ifdef WPP_USE_TRACE_LEVELS

#ifndef WPP_LEVEL_LOGGER
#define WPP_LEVEL_LOGGER(lvl) (WPP_CONTROL(WPP_BIT_ ## DUMMY).Logger),
#endif
#ifndef WPP_LEVEL_ENABLED
#define WPP_LEVEL_ENABLED(lvl) (WPP_CONTROL(WPP_BIT_ ## DUMMY).Level >= lvl)
#endif

#else // WPP_USE_TRACE_LEVELS

// For historical reasons, the use of LEVEL means flags by default.
// This was a bad choice but very difficult to undo.
#ifndef WPP_LEVEL_LOGGER
#  define WPP_LEVEL_LOGGER(CTL)  (WPP_CONTROL(WPP_BIT_ ## CTL).Logger),
#endif
#ifndef WPP_LEVEL_ENABLED
#  define WPP_LEVEL_ENABLED(CTL) (WPP_CONTROL(WPP_BIT_ ## CTL).Flags[WPP_FLAG_NO(WPP_BIT_ ## CTL)] & WPP_MASK(WPP_BIT_ ## CTL))
#endif

#endif // WPP_USE_TRACE_LEVELS

// Define default WPP_FLAG_LOGGER/WPP_FLAG_ENABLED macros for convenience in
// defining a function that takes a FLAG parameter e.g. DoTrace(FLAG).
#ifndef WPP_FLAG_LOGGER
#  define WPP_FLAG_LOGGER(CTL)  (WPP_CONTROL(WPP_BIT_ ## CTL).Logger),
#endif
#ifndef WPP_FLAG_ENABLED
#  define WPP_FLAG_ENABLED(CTL) (WPP_CONTROL(WPP_BIT_ ## CTL).Flags[WPP_FLAG_NO(WPP_BIT_ ## CTL)] & WPP_MASK(WPP_BIT_ ## CTL))
#endif

#ifndef WPP_ENABLED
#  define WPP_ENABLED() 1
#endif
#ifndef WPP_LOGGER
#  define WPP_LOGGER() (WPP_CB[0].Control.Logger),
#endif

#endif // WPP_NO_CONTROL_GUIDS

#ifndef WPP_GET_LOGGER
#  define WPP_GET_LOGGER Logger
#endif

#ifndef WPP_LOGGER_ARG
#  define WPP_LOGGER_ARG TRACEHANDLE Logger,
#endif

#ifdef __cplusplus
} // extern "C"
#endif

#endif // WPP_ALREADY_INCLUDED

// template tracemacro.tpl

// This template expects:
//      WPP_THIS_FILE defined (see header.tpl)
//      WPP_LOGGER_ARG  defined
//      WPP_GET_LOGGER  defined
//      WPP_ENABLED() defined

#ifdef __cplusplus
extern "C" {
#endif

#ifdef WPP_ALREADY_INCLUDED

#undef WPP_LOCAL_TraceGuids
#undef WPP_INVOKE_WPP_DEBUG

#else // WPP_ALREADY_INCLUDED

#ifndef NO_CHECK_FOR_NULL_STRING
#ifndef WPP_CHECK_FOR_NULL_STRING
#define WPP_CHECK_FOR_NULL_STRING
#endif
#endif // NO_CHECK_FOR_NULL_STRING

#define WPP_FLATTEN(...) __VA_ARGS__
#define WPP_GLUE5(a, b, c, d, e)  a ## b ## c ## d ## e
#define WPP_XGLUE5(a, b, c, d, e)  WPP_GLUE5(a, b, c, d, e)
#define WPP_(Id) WPP_XGLUE5(WPP_, Id, _, WPP_THIS_FILE, __LINE__)

#ifndef WPP_INLINE
#define WPP_INLINE DECLSPEC_NOINLINE __inline
#endif

#ifndef WPP_FORCEINLINE
#define WPP_FORCEINLINE __forceinline
#endif

#endif // WPP_ALREADY_INCLUDED

#ifdef WPP_NO_ANNOTATIONS

#define WPP_ANNOTATE(x)

#else // WPP_NO_ANNOTATIONS

#ifdef WPP_PUBLIC_
#define WPP_PUBLIC_ANNOT_Vc4Display_cpp24
#endif
#ifdef WPP_PUBLIC_
#define WPP_PUBLIC_ANNOT_Vc4Display_cpp36
#endif
#ifdef WPP_PUBLIC_
#define WPP_PUBLIC_ANNOT_Vc4Display_cpp50
#endif
#ifdef WPP_PUBLIC_
#define WPP_PUBLIC_ANNOT_Vc4Display_cpp81
#endif
#ifdef WPP_PUBLIC_
#define WPP_PUBLIC_ANNOT_Vc4Display_cpp110
#endif
#ifdef WPP_PUBLIC_
#define WPP_PUBLIC_ANNOT_Vc4Display_cpp114
#endif
#ifdef WPP_PUBLIC_
#define WPP_PUBLIC_ANNOT_Vc4Display_cpp143
#endif
#ifdef WPP_PUBLIC_
#define WPP_PUBLIC_ANNOT_Vc4Display_cpp183
#endif
#ifdef WPP_PUBLIC_
#define WPP_PUBLIC_ANNOT_Vc4Display_cpp230
#endif
#ifdef WPP_PUBLIC_
#define WPP_PUBLIC_ANNOT_Vc4Display_cpp281
#endif
#ifdef WPP_PUBLIC_
#define WPP_PUBLIC_ANNOT_Vc4Display_cpp296
#endif
#ifdef WPP_PUBLIC_
#define WPP_PUBLIC_ANNOT_Vc4Display_cpp309
#endif
#ifdef WPP_PUBLIC_
#define WPP_PUBLIC_ANNOT_Vc4Display_cpp325
#endif
#ifdef WPP_PUBLIC_
#define WPP_PUBLIC_ANNOT_Vc4Display_cpp337
#endif
#ifdef WPP_PUBLIC_
#define WPP_PUBLIC_ANNOT_Vc4Display_cpp344
#endif
#ifdef WPP_PUBLIC_
#define WPP_PUBLIC_ANNOT_Vc4Display_cpp366
#endif
#ifdef WPP_PUBLIC_
#define WPP_PUBLIC_ANNOT_Vc4Display_cpp397
#endif
#ifdef WPP_PUBLIC_
#define WPP_PUBLIC_ANNOT_Vc4Display_cpp419
#endif
#ifdef WPP_PUBLIC_
#define WPP_PUBLIC_ANNOT_Vc4Display_cpp435
#endif
#ifdef WPP_PUBLIC_
#define WPP_PUBLIC_ANNOT_Vc4Display_cpp449
#endif
#ifdef WPP_PUBLIC_
#define WPP_PUBLIC_ANNOT_Vc4Display_cpp464
#endif
#ifdef WPP_PUBLIC_
#define WPP_PUBLIC_ANNOT_Vc4Display_cpp483
#endif
#ifdef WPP_PUBLIC_
#define WPP_PUBLIC_ANNOT_Vc4Display_cpp493
#endif
#ifdef WPP_PUBLIC_
#define WPP_PUBLIC_ANNOT_Vc4Display_cpp517
#endif
#ifdef WPP_PUBLIC_
#define WPP_PUBLIC_ANNOT_Vc4Display_cpp534
#endif
#ifdef WPP_PUBLIC_
#define WPP_PUBLIC_ANNOT_Vc4Display_cpp555
#endif
#ifdef WPP_PUBLIC_
#define WPP_PUBLIC_ANNOT_Vc4Display_cpp566
#endif
#ifdef WPP_PUBLIC_
#define WPP_PUBLIC_ANNOT_Vc4Display_cpp579
#endif
#ifdef WPP_PUBLIC_
#define WPP_PUBLIC_ANNOT_Vc4Display_cpp592
#endif
#ifdef WPP_PUBLIC_
#define WPP_PUBLIC_ANNOT_Vc4Display_cpp617
#endif
#ifdef WPP_PUBLIC_
#define WPP_PUBLIC_ANNOT_Vc4Display_cpp660
#endif
#ifdef WPP_PUBLIC_
#define WPP_PUBLIC_ANNOT_Vc4Display_cpp672
#endif
#ifdef WPP_PUBLIC_
#define WPP_PUBLIC_ANNOT_Vc4Display_cpp712
#endif
#ifdef WPP_PUBLIC_
#define WPP_PUBLIC_ANNOT_Vc4Display_cpp732
#endif
#ifdef WPP_PUBLIC_
#define WPP_PUBLIC_ANNOT_Vc4Display_cpp735
#endif
#ifdef WPP_PUBLIC_
#define WPP_PUBLIC_ANNOT_Vc4Display_cpp739
#endif
#ifdef WPP_PUBLIC_
#define WPP_PUBLIC_ANNOT_Vc4Display_cpp745
#endif
#ifdef WPP_PUBLIC_
#define WPP_PUBLIC_ANNOT_Vc4Display_cpp781
#endif
#ifdef WPP_PUBLIC_
#define WPP_PUBLIC_ANNOT_Vc4Display_cpp785
#endif
#ifdef WPP_PUBLIC_
#define WPP_PUBLIC_ANNOT_Vc4Display_cpp809
#endif
#ifdef WPP_PUBLIC_
#define WPP_PUBLIC_ANNOT_Vc4Display_cpp812
#endif
#ifdef WPP_PUBLIC_
#define WPP_PUBLIC_ANNOT_Vc4Display_cpp828
#endif
#ifdef WPP_PUBLIC_
#define WPP_PUBLIC_ANNOT_Vc4Display_cpp844
#endif
#ifdef WPP_PUBLIC_
#define WPP_PUBLIC_ANNOT_Vc4Display_cpp858
#endif
#ifdef WPP_PUBLIC_
#define WPP_PUBLIC_ANNOT_Vc4Display_cpp875
#endif
#ifdef WPP_PUBLIC_
#define WPP_PUBLIC_ANNOT_Vc4Display_cpp891
#endif
#ifdef WPP_PUBLIC_
#define WPP_PUBLIC_ANNOT_Vc4Display_cpp901
#endif
#ifdef WPP_PUBLIC_
#define WPP_PUBLIC_ANNOT_Vc4Display_cpp917
#endif
#ifdef WPP_PUBLIC_
#define WPP_PUBLIC_ANNOT_Vc4Display_cpp940
#endif
#ifdef WPP_PUBLIC_
#define WPP_PUBLIC_ANNOT_Vc4Display_cpp950
#endif
#ifdef WPP_PUBLIC_
#define WPP_PUBLIC_ANNOT_Vc4Display_cpp968
#endif
#ifdef WPP_PUBLIC_
#define WPP_PUBLIC_ANNOT_Vc4Display_cpp987
#endif
#ifdef WPP_PUBLIC_
#define WPP_PUBLIC_ANNOT_Vc4Display_cpp1005
#endif
#ifdef WPP_PUBLIC_
#define WPP_PUBLIC_ANNOT_Vc4Display_cpp1021
#endif
#ifdef WPP_PUBLIC_
#define WPP_PUBLIC_ANNOT_Vc4Display_cpp1057
#endif
#ifdef WPP_PUBLIC_
#define WPP_PUBLIC_ANNOT_Vc4Display_cpp1094
#endif
#ifdef WPP_PUBLIC_
#define WPP_PUBLIC_ANNOT_Vc4Display_cpp1164
#endif
#ifdef WPP_PUBLIC_
#define WPP_PUBLIC_ANNOT_Vc4Display_cpp1180
#endif
#ifdef WPP_PUBLIC_
#define WPP_PUBLIC_ANNOT_Vc4Display_cpp1204
#endif
#ifdef WPP_PUBLIC_
#define WPP_PUBLIC_ANNOT_Vc4Display_cpp1222
#endif
#ifdef WPP_PUBLIC_
#define WPP_PUBLIC_ANNOT_Vc4Display_cpp1244
#endif
#ifdef WPP_PUBLIC_
#define WPP_PUBLIC_ANNOT_Vc4Display_cpp1262
#endif
#ifdef WPP_PUBLIC_
#define WPP_PUBLIC_ANNOT_Vc4Display_cpp1279
#endif
#ifdef WPP_PUBLIC_
#define WPP_PUBLIC_ANNOT_Vc4Display_cpp1288
#endif
#ifdef WPP_PUBLIC_
#define WPP_PUBLIC_ANNOT_Vc4Display_cpp1304
#endif
#ifdef WPP_PUBLIC_
#define WPP_PUBLIC_ANNOT_Vc4Display_cpp1327
#endif
#ifdef WPP_PUBLIC_
#define WPP_PUBLIC_ANNOT_Vc4Display_cpp1364
#endif
#ifdef WPP_PUBLIC_
#define WPP_PUBLIC_ANNOT_Vc4Display_cpp1382
#endif
#ifdef WPP_PUBLIC_
#define WPP_PUBLIC_ANNOT_Vc4Display_cpp1400
#endif
#ifdef WPP_PUBLIC_
#define WPP_PUBLIC_ANNOT_Vc4Display_cpp1416
#endif
#ifdef WPP_PUBLIC_
#define WPP_PUBLIC_ANNOT_Vc4Display_cpp1444
#endif
#ifdef WPP_PUBLIC_
#define WPP_PUBLIC_ANNOT_Vc4Display_cpp1469
#endif
#ifdef WPP_PUBLIC_
#define WPP_PUBLIC_ANNOT_Vc4Display_cpp1498
#endif
#ifdef WPP_PUBLIC_
#define WPP_PUBLIC_ANNOT_Vc4Display_cpp1533
#endif
#ifdef WPP_PUBLIC_
#define WPP_PUBLIC_ANNOT_Vc4Display_cpp1545
#endif
#ifdef WPP_PUBLIC_
#define WPP_PUBLIC_ANNOT_Vc4Display_cpp1564
#endif
#ifdef WPP_PUBLIC_
#define WPP_PUBLIC_ANNOT_Vc4Display_cpp1578
#endif
#ifdef WPP_PUBLIC_
#define WPP_PUBLIC_ANNOT_Vc4Display_cpp1601
#endif
#ifdef WPP_PUBLIC_
#define WPP_PUBLIC_ANNOT_Vc4Display_cpp1617
#endif
#ifdef WPP_PUBLIC_
#define WPP_PUBLIC_ANNOT_Vc4Display_cpp1648
#endif
#ifdef WPP_PUBLIC_
#define WPP_PUBLIC_ANNOT_Vc4Display_cpp1675
#endif
#ifdef WPP_PUBLIC_
#define WPP_PUBLIC_ANNOT_Vc4Display_cpp1698
#endif
#ifdef WPP_PUBLIC_
#define WPP_PUBLIC_ANNOT_Vc4Display_cpp1748
#endif
#ifdef WPP_PUBLIC_
#define WPP_PUBLIC_ANNOT_Vc4Display_cpp1772
#endif
#ifdef WPP_PUBLIC_
#define WPP_PUBLIC_ANNOT_Vc4Display_cpp1801
#endif
#ifdef WPP_PUBLIC_
#define WPP_PUBLIC_ANNOT_Vc4Display_cpp1817
#endif
#ifdef WPP_PUBLIC_
#define WPP_PUBLIC_ANNOT_Vc4Display_cpp1833
#endif
#ifdef WPP_PUBLIC_
#define WPP_PUBLIC_ANNOT_Vc4Display_cpp1868
#endif
#ifdef WPP_PUBLIC_
#define WPP_PUBLIC_ANNOT_Vc4Display_cpp1891
#endif
#ifdef WPP_PUBLIC_
#define WPP_PUBLIC_ANNOT_Vc4Display_cpp1940
#endif
#ifdef WPP_PUBLIC_
#define WPP_PUBLIC_ANNOT_Vc4Display_cpp1964
#endif
#ifdef WPP_PUBLIC_
#define WPP_PUBLIC_ANNOT_Vc4Display_cpp1991
#endif
#ifdef WPP_PUBLIC_
#define WPP_PUBLIC_ANNOT_Vc4Display_cpp2007
#endif
#ifdef WPP_PUBLIC_
#define WPP_PUBLIC_ANNOT_Vc4Display_cpp2028
#endif
#ifdef WPP_PUBLIC_
#define WPP_PUBLIC_ANNOT_Vc4Display_cpp2039
#endif
#ifdef WPP_PUBLIC_
#define WPP_PUBLIC_ANNOT_Vc4Display_cpp2048
#endif
#ifdef WPP_PUBLIC_
#define WPP_PUBLIC_ANNOT_Vc4Display_cpp2057
#endif
#ifdef WPP_PUBLIC_
#define WPP_PUBLIC_ANNOT_Vc4Display_cpp2078
#endif
#ifdef WPP_PUBLIC_
#define WPP_PUBLIC_ANNOT_Vc4Display_cpp2087
#endif
#ifdef WPP_PUBLIC_
#define WPP_PUBLIC_ANNOT_Vc4Display_cpp2097
#endif
#ifdef WPP_PUBLIC_
#define WPP_PUBLIC_ANNOT_Vc4Display_cpp2109
#endif
#ifdef WPP_PUBLIC_
#define WPP_PUBLIC_ANNOT_Vc4Display_cpp2121
#endif
#ifdef WPP_PUBLIC_
#define WPP_PUBLIC_ANNOT_Vc4Display_cpp2132
#endif
#ifdef WPP_EMIT_FUNC_NAME
#define WPP_FUNC_NAME L" FUNC=" _WPPW(__FUNCTION__)
#else // WPP_EMIT_FUNC_NAME
#define WPP_FUNC_NAME
#endif // WPP_EMIT_FUNC_NAME

#ifdef WPP_USER_MSG_GUID
# define WPP_ANNOTATE_Vc4Display_cpp24_FINAL(P, File, Name, ...) __annotation( \
    L ## P, \
    WPP_GUID_WTEXT WPP_USER_MSG_GUID L"roskmd // SRC=" _WPPW(File) \
    L" MJ= MN=", \
    L"#typev " _WPPW(Name) \
    L" 10 \"%0 [%10!s! @ %11!u!] ERROR :Vc4DdiResetDevice() was called but is not implemented.\" //   LEVEL=TRACE_LEVEL_ERROR FLAGS=ROS_TRACING_DEFAULT" \
    WPP_FUNC_NAME, \
    __VA_ARGS__)
#else // WPP_USER_MSG_GUID
# define WPP_ANNOTATE_Vc4Display_cpp24_FINAL(P, File, Name, ...) __annotation( \
    L ## P, \
    L"c0ccd90e-305c-3e36-4951-54eca8ed5fb9 roskmd // SRC=" _WPPW(File) \
    L" MJ= MN=", \
    L"#typev " _WPPW(Name) \
    L" 10 \"%0 [%10!s! @ %11!u!] ERROR :Vc4DdiResetDevice() was called but is not implemented.\" //   LEVEL=TRACE_LEVEL_ERROR FLAGS=ROS_TRACING_DEFAULT" \
    WPP_FUNC_NAME, \
    __VA_ARGS__)
#endif // WPP_USER_MSG_GUID

#ifdef WPP_PUBLIC_ANNOT_Vc4Display_cpp24
# define WPP_ANNOTATE_Vc4Display_cpp24 WPP_ANNOTATE_Vc4Display_cpp24_FINAL( \
    "TMF:", \
    "Unknown_cxx00", \
    "Unknown_cxx00", \
    L"{", \
    L"Arg, ItemString -- 10" , \
    L"Arg, ItemLong -- 11" , \
    L"}", \
    L"PUBLIC_TMF:")
# ifndef WPP_PUBLIC_TMC
#  define WPP_PUBLIC_TMC // Adds "PUBLIC_TMF:" to the control guid annotation
# endif
#else // WPP_PUBLIC_ANNOT_Vc4Display_cpp24
# define WPP_ANNOTATE_Vc4Display_cpp24 WPP_ANNOTATE_Vc4Display_cpp24_FINAL( \
    "TMF:", \
    "Vc4Display.cpp", \
    "Vc4Display_cpp24", \
    L"{", \
    L"__FILE__, ItemString -- 10" , \
    L"__LINE__, ItemLong -- 11" , \
    L"}")
#endif // WPP_PUBLIC_ANNOT_Vc4Display_cpp24

#ifdef WPP_USER_MSG_GUID
# define WPP_ANNOTATE_Vc4Display_cpp36_FINAL(P, File, Name, ...) __annotation( \
    L ## P, \
    WPP_GUID_WTEXT WPP_USER_MSG_GUID L"roskmd // SRC=" _WPPW(File) \
    L" MJ= MN=", \
    L"#typev " _WPPW(Name) \
    L" 11 \"%0 [%10!s! @ %11!u!] ASSERTION :Not implemented\" //   LEVEL=TRACE_LEVEL_ERROR FLAGS=ROS_TRACING_DEBUG" \
    WPP_FUNC_NAME, \
    __VA_ARGS__)
#else // WPP_USER_MSG_GUID
# define WPP_ANNOTATE_Vc4Display_cpp36_FINAL(P, File, Name, ...) __annotation( \
    L ## P, \
    L"c0ccd90e-305c-3e36-4951-54eca8ed5fb9 roskmd // SRC=" _WPPW(File) \
    L" MJ= MN=", \
    L"#typev " _WPPW(Name) \
    L" 11 \"%0 [%10!s! @ %11!u!] ASSERTION :Not implemented\" //   LEVEL=TRACE_LEVEL_ERROR FLAGS=ROS_TRACING_DEBUG" \
    WPP_FUNC_NAME, \
    __VA_ARGS__)
#endif // WPP_USER_MSG_GUID

#ifdef WPP_PUBLIC_ANNOT_Vc4Display_cpp36
# define WPP_ANNOTATE_Vc4Display_cpp36 WPP_ANNOTATE_Vc4Display_cpp36_FINAL( \
    "TMF:", \
    "Unknown_cxx00", \
    "Unknown_cxx00", \
    L"{", \
    L"Arg, ItemString -- 10" , \
    L"Arg, ItemLong -- 11" , \
    L"}", \
    L"PUBLIC_TMF:")
# ifndef WPP_PUBLIC_TMC
#  define WPP_PUBLIC_TMC // Adds "PUBLIC_TMF:" to the control guid annotation
# endif
#else // WPP_PUBLIC_ANNOT_Vc4Display_cpp36
# define WPP_ANNOTATE_Vc4Display_cpp36 WPP_ANNOTATE_Vc4Display_cpp36_FINAL( \
    "TMF:", \
    "Vc4Display.cpp", \
    "Vc4Display_cpp36", \
    L"{", \
    L"__FILE__, ItemString -- 10" , \
    L"__LINE__, ItemLong -- 11" , \
    L"}")
#endif // WPP_PUBLIC_ANNOT_Vc4Display_cpp36

#ifdef WPP_USER_MSG_GUID
# define WPP_ANNOTATE_Vc4Display_cpp50_FINAL(P, File, Name, ...) __annotation( \
    L ## P, \
    WPP_GUID_WTEXT WPP_USER_MSG_GUID L"roskmd // SRC=" _WPPW(File) \
    L" MJ= MN=", \
    L"#typev " _WPPW(Name) \
    L" 12 \"%0 [%10!s! @ %11!u!] ASSERTION :Not implemented\" //   LEVEL=TRACE_LEVEL_ERROR FLAGS=ROS_TRACING_DEBUG" \
    WPP_FUNC_NAME, \
    __VA_ARGS__)
#else // WPP_USER_MSG_GUID
# define WPP_ANNOTATE_Vc4Display_cpp50_FINAL(P, File, Name, ...) __annotation( \
    L ## P, \
    L"c0ccd90e-305c-3e36-4951-54eca8ed5fb9 roskmd // SRC=" _WPPW(File) \
    L" MJ= MN=", \
    L"#typev " _WPPW(Name) \
    L" 12 \"%0 [%10!s! @ %11!u!] ASSERTION :Not implemented\" //   LEVEL=TRACE_LEVEL_ERROR FLAGS=ROS_TRACING_DEBUG" \
    WPP_FUNC_NAME, \
    __VA_ARGS__)
#endif // WPP_USER_MSG_GUID

#ifdef WPP_PUBLIC_ANNOT_Vc4Display_cpp50
# define WPP_ANNOTATE_Vc4Display_cpp50 WPP_ANNOTATE_Vc4Display_cpp50_FINAL( \
    "TMF:", \
    "Unknown_cxx00", \
    "Unknown_cxx00", \
    L"{", \
    L"Arg, ItemString -- 10" , \
    L"Arg, ItemLong -- 11" , \
    L"}", \
    L"PUBLIC_TMF:")
# ifndef WPP_PUBLIC_TMC
#  define WPP_PUBLIC_TMC // Adds "PUBLIC_TMF:" to the control guid annotation
# endif
#else // WPP_PUBLIC_ANNOT_Vc4Display_cpp50
# define WPP_ANNOTATE_Vc4Display_cpp50 WPP_ANNOTATE_Vc4Display_cpp50_FINAL( \
    "TMF:", \
    "Vc4Display.cpp", \
    "Vc4Display_cpp50", \
    L"{", \
    L"__FILE__, ItemString -- 10" , \
    L"__LINE__, ItemLong -- 11" , \
    L"}")
#endif // WPP_PUBLIC_ANNOT_Vc4Display_cpp50

#ifdef WPP_USER_MSG_GUID
# define WPP_ANNOTATE_Vc4Display_cpp81_FINAL(P, File, Name, ...) __annotation( \
    L ## P, \
    WPP_GUID_WTEXT WPP_USER_MSG_GUID L"roskmd // SRC=" _WPPW(File) \
    L" MJ= MN=", \
    L"#typev " _WPPW(Name) \
    L" 13 \"%0 [%10!s! @ %11!u!] ASSERTION :Incompatible mode change was requested. (desiredModeDescPtr->Width/Height = (%12!d!,%13!d!), TranslateDxgiFormat(rosKmdAllocation->m_primaryDesc.Format) = %14!d!, currentSourceModePtr->PrimSurfSize = (%15!d!,%16!d!), currentSourceModePtr->PixelFormat = %17!d!\" //   LEVEL=TRACE_LEVEL_ERROR FLAGS=ROS_TRACING_DEBUG" \
    WPP_FUNC_NAME, \
    __VA_ARGS__)
#else // WPP_USER_MSG_GUID
# define WPP_ANNOTATE_Vc4Display_cpp81_FINAL(P, File, Name, ...) __annotation( \
    L ## P, \
    L"c0ccd90e-305c-3e36-4951-54eca8ed5fb9 roskmd // SRC=" _WPPW(File) \
    L" MJ= MN=", \
    L"#typev " _WPPW(Name) \
    L" 13 \"%0 [%10!s! @ %11!u!] ASSERTION :Incompatible mode change was requested. (desiredModeDescPtr->Width/Height = (%12!d!,%13!d!), TranslateDxgiFormat(rosKmdAllocation->m_primaryDesc.Format) = %14!d!, currentSourceModePtr->PrimSurfSize = (%15!d!,%16!d!), currentSourceModePtr->PixelFormat = %17!d!\" //   LEVEL=TRACE_LEVEL_ERROR FLAGS=ROS_TRACING_DEBUG" \
    WPP_FUNC_NAME, \
    __VA_ARGS__)
#endif // WPP_USER_MSG_GUID

#ifdef WPP_PUBLIC_ANNOT_Vc4Display_cpp81
# define WPP_ANNOTATE_Vc4Display_cpp81 WPP_ANNOTATE_Vc4Display_cpp81_FINAL( \
    "TMF:", \
    "Unknown_cxx00", \
    "Unknown_cxx00", \
    L"{", \
    L"Arg, ItemString -- 10" , \
    L"Arg, ItemLong -- 11" , \
    L"Arg, ItemLong -- 12" , \
    L"Arg, ItemLong -- 13" , \
    L"Arg, ItemLong -- 14" , \
    L"Arg, ItemLong -- 15" , \
    L"Arg, ItemLong -- 16" , \
    L"Arg, ItemLong -- 17" , \
    L"}", \
    L"PUBLIC_TMF:")
# ifndef WPP_PUBLIC_TMC
#  define WPP_PUBLIC_TMC // Adds "PUBLIC_TMF:" to the control guid annotation
# endif
#else // WPP_PUBLIC_ANNOT_Vc4Display_cpp81
# define WPP_ANNOTATE_Vc4Display_cpp81 WPP_ANNOTATE_Vc4Display_cpp81_FINAL( \
    "TMF:", \
    "Vc4Display.cpp", \
    "Vc4Display_cpp81", \
    L"{", \
    L"__FILE__, ItemString -- 10" , \
    L"__LINE__, ItemLong -- 11" , \
    L"desiredModeDescPtr->Width, ItemLong -- 12" , \
    L"desiredModeDescPtr->Height, ItemLong -- 13" , \
    L"TranslateDxgiFormat(rosKmdAllocation->m_format), ItemLong -- 14" , \
    L"currentSourceModePtr->PrimSurfSize.cx, ItemLong -- 15" , \
    L"currentSourceModePtr->PrimSurfSize.cy, ItemLong -- 16" , \
    L"currentSourceModePtr->PixelFormat, ItemLong -- 17" , \
    L"}")
#endif // WPP_PUBLIC_ANNOT_Vc4Display_cpp81

#ifdef WPP_USER_MSG_GUID
# define WPP_ANNOTATE_Vc4Display_cpp110_FINAL(P, File, Name, ...) __annotation( \
    L ## P, \
    WPP_GUID_WTEXT WPP_USER_MSG_GUID L"roskmd // SRC=" _WPPW(File) \
    L" MJ= MN=", \
    L"#typev " _WPPW(Name) \
    L" 14 \"%0 [%10!s! @ %11!u!] WARNING :What do we do here?\" //   LEVEL=TRACE_LEVEL_WARNING FLAGS=ROS_TRACING_DEFAULT" \
    WPP_FUNC_NAME, \
    __VA_ARGS__)
#else // WPP_USER_MSG_GUID
# define WPP_ANNOTATE_Vc4Display_cpp110_FINAL(P, File, Name, ...) __annotation( \
    L ## P, \
    L"c0ccd90e-305c-3e36-4951-54eca8ed5fb9 roskmd // SRC=" _WPPW(File) \
    L" MJ= MN=", \
    L"#typev " _WPPW(Name) \
    L" 14 \"%0 [%10!s! @ %11!u!] WARNING :What do we do here?\" //   LEVEL=TRACE_LEVEL_WARNING FLAGS=ROS_TRACING_DEFAULT" \
    WPP_FUNC_NAME, \
    __VA_ARGS__)
#endif // WPP_USER_MSG_GUID

#ifdef WPP_PUBLIC_ANNOT_Vc4Display_cpp110
# define WPP_ANNOTATE_Vc4Display_cpp110 WPP_ANNOTATE_Vc4Display_cpp110_FINAL( \
    "TMF:", \
    "Unknown_cxx00", \
    "Unknown_cxx00", \
    L"{", \
    L"Arg, ItemString -- 10" , \
    L"Arg, ItemLong -- 11" , \
    L"}", \
    L"PUBLIC_TMF:")
# ifndef WPP_PUBLIC_TMC
#  define WPP_PUBLIC_TMC // Adds "PUBLIC_TMF:" to the control guid annotation
# endif
#else // WPP_PUBLIC_ANNOT_Vc4Display_cpp110
# define WPP_ANNOTATE_Vc4Display_cpp110 WPP_ANNOTATE_Vc4Display_cpp110_FINAL( \
    "TMF:", \
    "Vc4Display.cpp", \
    "Vc4Display_cpp110", \
    L"{", \
    L"__FILE__, ItemString -- 10" , \
    L"__LINE__, ItemLong -- 11" , \
    L"}")
#endif // WPP_PUBLIC_ANNOT_Vc4Display_cpp110

#ifdef WPP_USER_MSG_GUID
# define WPP_ANNOTATE_Vc4Display_cpp114_FINAL(P, File, Name, ...) __annotation( \
    L ## P, \
    WPP_GUID_WTEXT WPP_USER_MSG_GUID L"roskmd // SRC=" _WPPW(File) \
    L" MJ= MN=", \
    L"#typev " _WPPW(Name) \
    L" 15 \"%0 [%10!s! @ %11!u!] ASSERTION :What do we do here?\" //   LEVEL=TRACE_LEVEL_ERROR FLAGS=ROS_TRACING_DEBUG" \
    WPP_FUNC_NAME, \
    __VA_ARGS__)
#else // WPP_USER_MSG_GUID
# define WPP_ANNOTATE_Vc4Display_cpp114_FINAL(P, File, Name, ...) __annotation( \
    L ## P, \
    L"c0ccd90e-305c-3e36-4951-54eca8ed5fb9 roskmd // SRC=" _WPPW(File) \
    L" MJ= MN=", \
    L"#typev " _WPPW(Name) \
    L" 15 \"%0 [%10!s! @ %11!u!] ASSERTION :What do we do here?\" //   LEVEL=TRACE_LEVEL_ERROR FLAGS=ROS_TRACING_DEBUG" \
    WPP_FUNC_NAME, \
    __VA_ARGS__)
#endif // WPP_USER_MSG_GUID

#ifdef WPP_PUBLIC_ANNOT_Vc4Display_cpp114
# define WPP_ANNOTATE_Vc4Display_cpp114 WPP_ANNOTATE_Vc4Display_cpp114_FINAL( \
    "TMF:", \
    "Unknown_cxx00", \
    "Unknown_cxx00", \
    L"{", \
    L"Arg, ItemString -- 10" , \
    L"Arg, ItemLong -- 11" , \
    L"}", \
    L"PUBLIC_TMF:")
# ifndef WPP_PUBLIC_TMC
#  define WPP_PUBLIC_TMC // Adds "PUBLIC_TMF:" to the control guid annotation
# endif
#else // WPP_PUBLIC_ANNOT_Vc4Display_cpp114
# define WPP_ANNOTATE_Vc4Display_cpp114 WPP_ANNOTATE_Vc4Display_cpp114_FINAL( \
    "TMF:", \
    "Vc4Display.cpp", \
    "Vc4Display_cpp114", \
    L"{", \
    L"__FILE__, ItemString -- 10" , \
    L"__LINE__, ItemLong -- 11" , \
    L"}")
#endif // WPP_PUBLIC_ANNOT_Vc4Display_cpp114

#ifdef WPP_USER_MSG_GUID
# define WPP_ANNOTATE_Vc4Display_cpp143_FINAL(P, File, Name, ...) __annotation( \
    L ## P, \
    WPP_GUID_WTEXT WPP_USER_MSG_GUID L"roskmd // SRC=" _WPPW(File) \
    L" MJ= MN=", \
    L"#typev " _WPPW(Name) \
    L" 16 \"%0 [%10!s! @ %11!u!] TRACE :Successfully programmed VidPn source address. (PrimaryAddress.LowPart=0x%12!x!, physicAddress=0x%13!x!, virtualAddress = 0x%14!p!)\" //   LEVEL=TRACE_LEVEL_VERBOSE FLAGS=ROS_TRACING_PRESENT" \
    WPP_FUNC_NAME, \
    __VA_ARGS__)
#else // WPP_USER_MSG_GUID
# define WPP_ANNOTATE_Vc4Display_cpp143_FINAL(P, File, Name, ...) __annotation( \
    L ## P, \
    L"c0ccd90e-305c-3e36-4951-54eca8ed5fb9 roskmd // SRC=" _WPPW(File) \
    L" MJ= MN=", \
    L"#typev " _WPPW(Name) \
    L" 16 \"%0 [%10!s! @ %11!u!] TRACE :Successfully programmed VidPn source address. (PrimaryAddress.LowPart=0x%12!x!, physicAddress=0x%13!x!, virtualAddress = 0x%14!p!)\" //   LEVEL=TRACE_LEVEL_VERBOSE FLAGS=ROS_TRACING_PRESENT" \
    WPP_FUNC_NAME, \
    __VA_ARGS__)
#endif // WPP_USER_MSG_GUID

#ifdef WPP_PUBLIC_ANNOT_Vc4Display_cpp143
# define WPP_ANNOTATE_Vc4Display_cpp143 WPP_ANNOTATE_Vc4Display_cpp143_FINAL( \
    "TMF:", \
    "Unknown_cxx00", \
    "Unknown_cxx00", \
    L"{", \
    L"Arg, ItemString -- 10" , \
    L"Arg, ItemLong -- 11" , \
    L"Arg, ItemLong -- 12" , \
    L"Arg, ItemLong -- 13" , \
    L"Arg, ItemPtr -- 14" , \
    L"}", \
    L"PUBLIC_TMF:")
# ifndef WPP_PUBLIC_TMC
#  define WPP_PUBLIC_TMC // Adds "PUBLIC_TMF:" to the control guid annotation
# endif
#else // WPP_PUBLIC_ANNOT_Vc4Display_cpp143
# define WPP_ANNOTATE_Vc4Display_cpp143 WPP_ANNOTATE_Vc4Display_cpp143_FINAL( \
    "TMF:", \
    "Vc4Display.cpp", \
    "Vc4Display_cpp143", \
    L"{", \
    L"__FILE__, ItemString -- 10" , \
    L"__LINE__, ItemLong -- 11" , \
    L"Args->PrimaryAddress.LowPart, ItemLong -- 12" , \
    L"physicAddress, ItemLong -- 13" , \
    L"static_cast<const BYTE*>(RosKmdGlobal::s_pVideoMemory) + Args->PrimaryAddress.LowPart, ItemPtr -- 14" , \
    L"}")
#endif // WPP_PUBLIC_ANNOT_Vc4Display_cpp143

#ifdef WPP_USER_MSG_GUID
# define WPP_ANNOTATE_Vc4Display_cpp183_FINAL(P, File, Name, ...) __annotation( \
    L ## P, \
    WPP_GUID_WTEXT WPP_USER_MSG_GUID L"roskmd // SRC=" _WPPW(File) \
    L" MJ= MN=", \
    L"#typev " _WPPW(Name) \
    L" 17 \"%0 [%10!s! @ %11!u!] ASSERTION :Unexpected interrupt!\" //   LEVEL=TRACE_LEVEL_ERROR FLAGS=ROS_TRACING_DEBUG" \
    WPP_FUNC_NAME, \
    __VA_ARGS__)
#else // WPP_USER_MSG_GUID
# define WPP_ANNOTATE_Vc4Display_cpp183_FINAL(P, File, Name, ...) __annotation( \
    L ## P, \
    L"c0ccd90e-305c-3e36-4951-54eca8ed5fb9 roskmd // SRC=" _WPPW(File) \
    L" MJ= MN=", \
    L"#typev " _WPPW(Name) \
    L" 17 \"%0 [%10!s! @ %11!u!] ASSERTION :Unexpected interrupt!\" //   LEVEL=TRACE_LEVEL_ERROR FLAGS=ROS_TRACING_DEBUG" \
    WPP_FUNC_NAME, \
    __VA_ARGS__)
#endif // WPP_USER_MSG_GUID

#ifdef WPP_PUBLIC_ANNOT_Vc4Display_cpp183
# define WPP_ANNOTATE_Vc4Display_cpp183 WPP_ANNOTATE_Vc4Display_cpp183_FINAL( \
    "TMF:", \
    "Unknown_cxx00", \
    "Unknown_cxx00", \
    L"{", \
    L"Arg, ItemString -- 10" , \
    L"Arg, ItemLong -- 11" , \
    L"}", \
    L"PUBLIC_TMF:")
# ifndef WPP_PUBLIC_TMC
#  define WPP_PUBLIC_TMC // Adds "PUBLIC_TMF:" to the control guid annotation
# endif
#else // WPP_PUBLIC_ANNOT_Vc4Display_cpp183
# define WPP_ANNOTATE_Vc4Display_cpp183 WPP_ANNOTATE_Vc4Display_cpp183_FINAL( \
    "TMF:", \
    "Vc4Display.cpp", \
    "Vc4Display_cpp183", \
    L"{", \
    L"__FILE__, ItemString -- 10" , \
    L"__LINE__, ItemLong -- 11" , \
    L"}")
#endif // WPP_PUBLIC_ANNOT_Vc4Display_cpp183

#ifdef WPP_USER_MSG_GUID
# define WPP_ANNOTATE_Vc4Display_cpp230_FINAL(P, File, Name, ...) __annotation( \
    L ## P, \
    WPP_GUID_WTEXT WPP_USER_MSG_GUID L"roskmd // SRC=" _WPPW(File) \
    L" MJ= MN=", \
    L"#typev " _WPPW(Name) \
    L" 18 \"%0 [%10!s! @ %11!u!] TRACE :Successfully constructed display subsystem. (this=0x%12!p!, PhysicalDeviceObjectPtr=0x%13!p!)\" //   LEVEL=TRACE_LEVEL_VERBOSE FLAGS=ROS_TRACING_DEFAULT" \
    WPP_FUNC_NAME, \
    __VA_ARGS__)
#else // WPP_USER_MSG_GUID
# define WPP_ANNOTATE_Vc4Display_cpp230_FINAL(P, File, Name, ...) __annotation( \
    L ## P, \
    L"c0ccd90e-305c-3e36-4951-54eca8ed5fb9 roskmd // SRC=" _WPPW(File) \
    L" MJ= MN=", \
    L"#typev " _WPPW(Name) \
    L" 18 \"%0 [%10!s! @ %11!u!] TRACE :Successfully constructed display subsystem. (this=0x%12!p!, PhysicalDeviceObjectPtr=0x%13!p!)\" //   LEVEL=TRACE_LEVEL_VERBOSE FLAGS=ROS_TRACING_DEFAULT" \
    WPP_FUNC_NAME, \
    __VA_ARGS__)
#endif // WPP_USER_MSG_GUID

#ifdef WPP_PUBLIC_ANNOT_Vc4Display_cpp230
# define WPP_ANNOTATE_Vc4Display_cpp230 WPP_ANNOTATE_Vc4Display_cpp230_FINAL( \
    "TMF:", \
    "Unknown_cxx00", \
    "Unknown_cxx00", \
    L"{", \
    L"Arg, ItemString -- 10" , \
    L"Arg, ItemLong -- 11" , \
    L"Arg, ItemPtr -- 12" , \
    L"Arg, ItemPtr -- 13" , \
    L"}", \
    L"PUBLIC_TMF:")
# ifndef WPP_PUBLIC_TMC
#  define WPP_PUBLIC_TMC // Adds "PUBLIC_TMF:" to the control guid annotation
# endif
#else // WPP_PUBLIC_ANNOT_Vc4Display_cpp230
# define WPP_ANNOTATE_Vc4Display_cpp230 WPP_ANNOTATE_Vc4Display_cpp230_FINAL( \
    "TMF:", \
    "Vc4Display.cpp", \
    "Vc4Display_cpp230", \
    L"{", \
    L"__FILE__, ItemString -- 10" , \
    L"__LINE__, ItemLong -- 11" , \
    L"this, ItemPtr -- 12" , \
    L"PhysicalDeviceObjectPtr, ItemPtr -- 13" , \
    L"}")
#endif // WPP_PUBLIC_ANNOT_Vc4Display_cpp230

#ifdef WPP_USER_MSG_GUID
# define WPP_ANNOTATE_Vc4Display_cpp281_FINAL(P, File, Name, ...) __annotation( \
    L ## P, \
    WPP_GUID_WTEXT WPP_USER_MSG_GUID L"roskmd // SRC=" _WPPW(File) \
    L" MJ= MN=", \
    L"#typev " _WPPW(Name) \
    L" 19 \"%0 [%10!s! @ %11!u!] WARNING :Received unexpected memory resource. (memResourceCount=%12!d!, resourcePtr=%13!p!, FirstResourceIndex=%14!d!)\" //   LEVEL=TRACE_LEVEL_WARNING FLAGS=ROS_TRACING_DEFAULT" \
    WPP_FUNC_NAME, \
    __VA_ARGS__)
#else // WPP_USER_MSG_GUID
# define WPP_ANNOTATE_Vc4Display_cpp281_FINAL(P, File, Name, ...) __annotation( \
    L ## P, \
    L"c0ccd90e-305c-3e36-4951-54eca8ed5fb9 roskmd // SRC=" _WPPW(File) \
    L" MJ= MN=", \
    L"#typev " _WPPW(Name) \
    L" 19 \"%0 [%10!s! @ %11!u!] WARNING :Received unexpected memory resource. (memResourceCount=%12!d!, resourcePtr=%13!p!, FirstResourceIndex=%14!d!)\" //   LEVEL=TRACE_LEVEL_WARNING FLAGS=ROS_TRACING_DEFAULT" \
    WPP_FUNC_NAME, \
    __VA_ARGS__)
#endif // WPP_USER_MSG_GUID

#ifdef WPP_PUBLIC_ANNOT_Vc4Display_cpp281
# define WPP_ANNOTATE_Vc4Display_cpp281 WPP_ANNOTATE_Vc4Display_cpp281_FINAL( \
    "TMF:", \
    "Unknown_cxx00", \
    "Unknown_cxx00", \
    L"{", \
    L"Arg, ItemString -- 10" , \
    L"Arg, ItemLong -- 11" , \
    L"Arg, ItemLong -- 12" , \
    L"Arg, ItemPtr -- 13" , \
    L"Arg, ItemLong -- 14" , \
    L"}", \
    L"PUBLIC_TMF:")
# ifndef WPP_PUBLIC_TMC
#  define WPP_PUBLIC_TMC // Adds "PUBLIC_TMF:" to the control guid annotation
# endif
#else // WPP_PUBLIC_ANNOT_Vc4Display_cpp281
# define WPP_ANNOTATE_Vc4Display_cpp281 WPP_ANNOTATE_Vc4Display_cpp281_FINAL( \
    "TMF:", \
    "Vc4Display.cpp", \
    "Vc4Display_cpp281", \
    L"{", \
    L"__FILE__, ItemString -- 10" , \
    L"__LINE__, ItemLong -- 11" , \
    L"memResourceCount, ItemLong -- 12" , \
    L"resourcePtr, ItemPtr -- 13" , \
    L"FirstResourceIndex, ItemLong -- 14" , \
    L"}")
#endif // WPP_PUBLIC_ANNOT_Vc4Display_cpp281

#ifdef WPP_USER_MSG_GUID
# define WPP_ANNOTATE_Vc4Display_cpp296_FINAL(P, File, Name, ...) __annotation( \
    L ## P, \
    WPP_GUID_WTEXT WPP_USER_MSG_GUID L"roskmd // SRC=" _WPPW(File) \
    L" MJ= MN=", \
    L"#typev " _WPPW(Name) \
    L" 20 \"%0 [%10!s! @ %11!u!] WARNING :Received unexpected interrupt resource. (interruptResourceCount=%12!d!, resourcePtr=%13!p!, FirstResourceIndex=%14!d!)\" //   LEVEL=TRACE_LEVEL_WARNING FLAGS=ROS_TRACING_DEFAULT" \
    WPP_FUNC_NAME, \
    __VA_ARGS__)
#else // WPP_USER_MSG_GUID
# define WPP_ANNOTATE_Vc4Display_cpp296_FINAL(P, File, Name, ...) __annotation( \
    L ## P, \
    L"c0ccd90e-305c-3e36-4951-54eca8ed5fb9 roskmd // SRC=" _WPPW(File) \
    L" MJ= MN=", \
    L"#typev " _WPPW(Name) \
    L" 20 \"%0 [%10!s! @ %11!u!] WARNING :Received unexpected interrupt resource. (interruptResourceCount=%12!d!, resourcePtr=%13!p!, FirstResourceIndex=%14!d!)\" //   LEVEL=TRACE_LEVEL_WARNING FLAGS=ROS_TRACING_DEFAULT" \
    WPP_FUNC_NAME, \
    __VA_ARGS__)
#endif // WPP_USER_MSG_GUID

#ifdef WPP_PUBLIC_ANNOT_Vc4Display_cpp296
# define WPP_ANNOTATE_Vc4Display_cpp296 WPP_ANNOTATE_Vc4Display_cpp296_FINAL( \
    "TMF:", \
    "Unknown_cxx00", \
    "Unknown_cxx00", \
    L"{", \
    L"Arg, ItemString -- 10" , \
    L"Arg, ItemLong -- 11" , \
    L"Arg, ItemLong -- 12" , \
    L"Arg, ItemPtr -- 13" , \
    L"Arg, ItemLong -- 14" , \
    L"}", \
    L"PUBLIC_TMF:")
# ifndef WPP_PUBLIC_TMC
#  define WPP_PUBLIC_TMC // Adds "PUBLIC_TMF:" to the control guid annotation
# endif
#else // WPP_PUBLIC_ANNOT_Vc4Display_cpp296
# define WPP_ANNOTATE_Vc4Display_cpp296 WPP_ANNOTATE_Vc4Display_cpp296_FINAL( \
    "TMF:", \
    "Vc4Display.cpp", \
    "Vc4Display_cpp296", \
    L"{", \
    L"__FILE__, ItemString -- 10" , \
    L"__LINE__, ItemLong -- 11" , \
    L"interruptResourceCount, ItemLong -- 12" , \
    L"resourcePtr, ItemPtr -- 13" , \
    L"FirstResourceIndex, ItemLong -- 14" , \
    L"}")
#endif // WPP_PUBLIC_ANNOT_Vc4Display_cpp296

#ifdef WPP_USER_MSG_GUID
# define WPP_ANNOTATE_Vc4Display_cpp309_FINAL(P, File, Name, ...) __annotation( \
    L ## P, \
    WPP_GUID_WTEXT WPP_USER_MSG_GUID L"roskmd // SRC=" _WPPW(File) \
    L" MJ= MN=", \
    L"#typev " _WPPW(Name) \
    L" 21 \"%0 [%10!s! @ %11!u!] TRACE :Received I2C resource. (i2cResourceCount=%12!d!, resourcePtr=%13!p!, FirstResourceIndex=%14!d!)\" //   LEVEL=TRACE_LEVEL_VERBOSE FLAGS=ROS_TRACING_DEFAULT" \
    WPP_FUNC_NAME, \
    __VA_ARGS__)
#else // WPP_USER_MSG_GUID
# define WPP_ANNOTATE_Vc4Display_cpp309_FINAL(P, File, Name, ...) __annotation( \
    L ## P, \
    L"c0ccd90e-305c-3e36-4951-54eca8ed5fb9 roskmd // SRC=" _WPPW(File) \
    L" MJ= MN=", \
    L"#typev " _WPPW(Name) \
    L" 21 \"%0 [%10!s! @ %11!u!] TRACE :Received I2C resource. (i2cResourceCount=%12!d!, resourcePtr=%13!p!, FirstResourceIndex=%14!d!)\" //   LEVEL=TRACE_LEVEL_VERBOSE FLAGS=ROS_TRACING_DEFAULT" \
    WPP_FUNC_NAME, \
    __VA_ARGS__)
#endif // WPP_USER_MSG_GUID

#ifdef WPP_PUBLIC_ANNOT_Vc4Display_cpp309
# define WPP_ANNOTATE_Vc4Display_cpp309 WPP_ANNOTATE_Vc4Display_cpp309_FINAL( \
    "TMF:", \
    "Unknown_cxx00", \
    "Unknown_cxx00", \
    L"{", \
    L"Arg, ItemString -- 10" , \
    L"Arg, ItemLong -- 11" , \
    L"Arg, ItemLong -- 12" , \
    L"Arg, ItemPtr -- 13" , \
    L"Arg, ItemLong -- 14" , \
    L"}", \
    L"PUBLIC_TMF:")
# ifndef WPP_PUBLIC_TMC
#  define WPP_PUBLIC_TMC // Adds "PUBLIC_TMF:" to the control guid annotation
# endif
#else // WPP_PUBLIC_ANNOT_Vc4Display_cpp309
# define WPP_ANNOTATE_Vc4Display_cpp309 WPP_ANNOTATE_Vc4Display_cpp309_FINAL( \
    "TMF:", \
    "Vc4Display.cpp", \
    "Vc4Display_cpp309", \
    L"{", \
    L"__FILE__, ItemString -- 10" , \
    L"__LINE__, ItemLong -- 11" , \
    L"i2cResourceCount, ItemLong -- 12" , \
    L"resourcePtr, ItemPtr -- 13" , \
    L"FirstResourceIndex, ItemLong -- 14" , \
    L"}")
#endif // WPP_PUBLIC_ANNOT_Vc4Display_cpp309

#ifdef WPP_USER_MSG_GUID
# define WPP_ANNOTATE_Vc4Display_cpp325_FINAL(P, File, Name, ...) __annotation( \
    L ## P, \
    WPP_GUID_WTEXT WPP_USER_MSG_GUID L"roskmd // SRC=" _WPPW(File) \
    L" MJ= MN=", \
    L"#typev " _WPPW(Name) \
    L" 22 \"%0 [%10!s! @ %11!u!] ERROR :Did not find required resources. (TranslatedResourceList=%12!p!, FirstResourceIndex=%13!d!, hvsMemoryResourcePtr=%14!p!, pvMemoryResourcePtr=%15!p!, pvInterruptResourcePtr=%16!p!, i2cResourceCount=%17!d!)\" //   LEVEL=TRACE_LEVEL_ERROR FLAGS=ROS_TRACING_DEFAULT" \
    WPP_FUNC_NAME, \
    __VA_ARGS__)
#else // WPP_USER_MSG_GUID
# define WPP_ANNOTATE_Vc4Display_cpp325_FINAL(P, File, Name, ...) __annotation( \
    L ## P, \
    L"c0ccd90e-305c-3e36-4951-54eca8ed5fb9 roskmd // SRC=" _WPPW(File) \
    L" MJ= MN=", \
    L"#typev " _WPPW(Name) \
    L" 22 \"%0 [%10!s! @ %11!u!] ERROR :Did not find required resources. (TranslatedResourceList=%12!p!, FirstResourceIndex=%13!d!, hvsMemoryResourcePtr=%14!p!, pvMemoryResourcePtr=%15!p!, pvInterruptResourcePtr=%16!p!, i2cResourceCount=%17!d!)\" //   LEVEL=TRACE_LEVEL_ERROR FLAGS=ROS_TRACING_DEFAULT" \
    WPP_FUNC_NAME, \
    __VA_ARGS__)
#endif // WPP_USER_MSG_GUID

#ifdef WPP_PUBLIC_ANNOT_Vc4Display_cpp325
# define WPP_ANNOTATE_Vc4Display_cpp325 WPP_ANNOTATE_Vc4Display_cpp325_FINAL( \
    "TMF:", \
    "Unknown_cxx00", \
    "Unknown_cxx00", \
    L"{", \
    L"Arg, ItemString -- 10" , \
    L"Arg, ItemLong -- 11" , \
    L"Arg, ItemPtr -- 12" , \
    L"Arg, ItemLong -- 13" , \
    L"Arg, ItemPtr -- 14" , \
    L"Arg, ItemPtr -- 15" , \
    L"Arg, ItemPtr -- 16" , \
    L"Arg, ItemLong -- 17" , \
    L"}", \
    L"PUBLIC_TMF:")
# ifndef WPP_PUBLIC_TMC
#  define WPP_PUBLIC_TMC // Adds "PUBLIC_TMF:" to the control guid annotation
# endif
#else // WPP_PUBLIC_ANNOT_Vc4Display_cpp325
# define WPP_ANNOTATE_Vc4Display_cpp325 WPP_ANNOTATE_Vc4Display_cpp325_FINAL( \
    "TMF:", \
    "Vc4Display.cpp", \
    "Vc4Display_cpp325", \
    L"{", \
    L"__FILE__, ItemString -- 10" , \
    L"__LINE__, ItemLong -- 11" , \
    L"this->dxgkDeviceInfo.TranslatedResourceList, ItemPtr -- 12" , \
    L"FirstResourceIndex, ItemLong -- 13" , \
    L"hvsMemoryResourcePtr, ItemPtr -- 14" , \
    L"pvMemoryResourcePtr, ItemPtr -- 15" , \
    L"pvInterruptResourcePtr, ItemPtr -- 16" , \
    L"i2cResourceCount, ItemLong -- 17" , \
    L"}")
#endif // WPP_PUBLIC_ANNOT_Vc4Display_cpp325

#ifdef WPP_USER_MSG_GUID
# define WPP_ANNOTATE_Vc4Display_cpp337_FINAL(P, File, Name, ...) __annotation( \
    L ## P, \
    WPP_GUID_WTEXT WPP_USER_MSG_GUID L"roskmd // SRC=" _WPPW(File) \
    L" MJ= MN=", \
    L"#typev " _WPPW(Name) \
    L" 23 \"%0 [%10!s! @ %11!u!] ERROR :Memory region is too small to fit VC4HVS_REGISTERS. (hvsMemoryResourcePtr=%12!p!)\" //   LEVEL=TRACE_LEVEL_ERROR FLAGS=ROS_TRACING_DEFAULT" \
    WPP_FUNC_NAME, \
    __VA_ARGS__)
#else // WPP_USER_MSG_GUID
# define WPP_ANNOTATE_Vc4Display_cpp337_FINAL(P, File, Name, ...) __annotation( \
    L ## P, \
    L"c0ccd90e-305c-3e36-4951-54eca8ed5fb9 roskmd // SRC=" _WPPW(File) \
    L" MJ= MN=", \
    L"#typev " _WPPW(Name) \
    L" 23 \"%0 [%10!s! @ %11!u!] ERROR :Memory region is too small to fit VC4HVS_REGISTERS. (hvsMemoryResourcePtr=%12!p!)\" //   LEVEL=TRACE_LEVEL_ERROR FLAGS=ROS_TRACING_DEFAULT" \
    WPP_FUNC_NAME, \
    __VA_ARGS__)
#endif // WPP_USER_MSG_GUID

#ifdef WPP_PUBLIC_ANNOT_Vc4Display_cpp337
# define WPP_ANNOTATE_Vc4Display_cpp337 WPP_ANNOTATE_Vc4Display_cpp337_FINAL( \
    "TMF:", \
    "Unknown_cxx00", \
    "Unknown_cxx00", \
    L"{", \
    L"Arg, ItemString -- 10" , \
    L"Arg, ItemLong -- 11" , \
    L"Arg, ItemPtr -- 12" , \
    L"}", \
    L"PUBLIC_TMF:")
# ifndef WPP_PUBLIC_TMC
#  define WPP_PUBLIC_TMC // Adds "PUBLIC_TMF:" to the control guid annotation
# endif
#else // WPP_PUBLIC_ANNOT_Vc4Display_cpp337
# define WPP_ANNOTATE_Vc4Display_cpp337 WPP_ANNOTATE_Vc4Display_cpp337_FINAL( \
    "TMF:", \
    "Vc4Display.cpp", \
    "Vc4Display_cpp337", \
    L"{", \
    L"__FILE__, ItemString -- 10" , \
    L"__LINE__, ItemLong -- 11" , \
    L"hvsMemoryResourcePtr, ItemPtr -- 12" , \
    L"}")
#endif // WPP_PUBLIC_ANNOT_Vc4Display_cpp337

#ifdef WPP_USER_MSG_GUID
# define WPP_ANNOTATE_Vc4Display_cpp344_FINAL(P, File, Name, ...) __annotation( \
    L ## P, \
    WPP_GUID_WTEXT WPP_USER_MSG_GUID L"roskmd // SRC=" _WPPW(File) \
    L" MJ= MN=", \
    L"#typev " _WPPW(Name) \
    L" 24 \"%0 [%10!s! @ %11!u!] ERROR :Memory region is too small to fit VC4PIXELVALVE_REGISTERS. (pvMemoryResourcePtr=%12!p!)\" //   LEVEL=TRACE_LEVEL_ERROR FLAGS=ROS_TRACING_DEFAULT" \
    WPP_FUNC_NAME, \
    __VA_ARGS__)
#else // WPP_USER_MSG_GUID
# define WPP_ANNOTATE_Vc4Display_cpp344_FINAL(P, File, Name, ...) __annotation( \
    L ## P, \
    L"c0ccd90e-305c-3e36-4951-54eca8ed5fb9 roskmd // SRC=" _WPPW(File) \
    L" MJ= MN=", \
    L"#typev " _WPPW(Name) \
    L" 24 \"%0 [%10!s! @ %11!u!] ERROR :Memory region is too small to fit VC4PIXELVALVE_REGISTERS. (pvMemoryResourcePtr=%12!p!)\" //   LEVEL=TRACE_LEVEL_ERROR FLAGS=ROS_TRACING_DEFAULT" \
    WPP_FUNC_NAME, \
    __VA_ARGS__)
#endif // WPP_USER_MSG_GUID

#ifdef WPP_PUBLIC_ANNOT_Vc4Display_cpp344
# define WPP_ANNOTATE_Vc4Display_cpp344 WPP_ANNOTATE_Vc4Display_cpp344_FINAL( \
    "TMF:", \
    "Unknown_cxx00", \
    "Unknown_cxx00", \
    L"{", \
    L"Arg, ItemString -- 10" , \
    L"Arg, ItemLong -- 11" , \
    L"Arg, ItemPtr -- 12" , \
    L"}", \
    L"PUBLIC_TMF:")
# ifndef WPP_PUBLIC_TMC
#  define WPP_PUBLIC_TMC // Adds "PUBLIC_TMF:" to the control guid annotation
# endif
#else // WPP_PUBLIC_ANNOT_Vc4Display_cpp344
# define WPP_ANNOTATE_Vc4Display_cpp344 WPP_ANNOTATE_Vc4Display_cpp344_FINAL( \
    "TMF:", \
    "Vc4Display.cpp", \
    "Vc4Display_cpp344", \
    L"{", \
    L"__FILE__, ItemString -- 10" , \
    L"__LINE__, ItemLong -- 11" , \
    L"pvMemoryResourcePtr, ItemPtr -- 12" , \
    L"}")
#endif // WPP_PUBLIC_ANNOT_Vc4Display_cpp344

#ifdef WPP_USER_MSG_GUID
# define WPP_ANNOTATE_Vc4Display_cpp366_FINAL(P, File, Name, ...) __annotation( \
    L ## P, \
    WPP_GUID_WTEXT WPP_USER_MSG_GUID L"roskmd // SRC=" _WPPW(File) \
    L" MJ= MN=", \
    L"#typev " _WPPW(Name) \
    L" 25 \"%0 [%10!s! @ %11!u!] LOW MEMORY :Failed to map VC4 HVS registers into system address space. (status=%12!s!, hvsMemoryResourcePtr->u.Memory.Start=0x%13!I64x!, length=%14!d!)\" //   LEVEL=TRACE_LEVEL_ERROR FLAGS=ROS_TRACING_DEFAULT" \
    WPP_FUNC_NAME, \
    __VA_ARGS__)
#else // WPP_USER_MSG_GUID
# define WPP_ANNOTATE_Vc4Display_cpp366_FINAL(P, File, Name, ...) __annotation( \
    L ## P, \
    L"c0ccd90e-305c-3e36-4951-54eca8ed5fb9 roskmd // SRC=" _WPPW(File) \
    L" MJ= MN=", \
    L"#typev " _WPPW(Name) \
    L" 25 \"%0 [%10!s! @ %11!u!] LOW MEMORY :Failed to map VC4 HVS registers into system address space. (status=%12!s!, hvsMemoryResourcePtr->u.Memory.Start=0x%13!I64x!, length=%14!d!)\" //   LEVEL=TRACE_LEVEL_ERROR FLAGS=ROS_TRACING_DEFAULT" \
    WPP_FUNC_NAME, \
    __VA_ARGS__)
#endif // WPP_USER_MSG_GUID

#ifdef WPP_PUBLIC_ANNOT_Vc4Display_cpp366
# define WPP_ANNOTATE_Vc4Display_cpp366 WPP_ANNOTATE_Vc4Display_cpp366_FINAL( \
    "TMF:", \
    "Unknown_cxx00", \
    "Unknown_cxx00", \
    L"{", \
    L"Arg, ItemString -- 10" , \
    L"Arg, ItemLong -- 11" , \
    L"Arg, ItemNTSTATUS -- 12" , \
    L"Arg, ItemLongLongX -- 13" , \
    L"Arg, ItemLong -- 14" , \
    L"}", \
    L"PUBLIC_TMF:")
# ifndef WPP_PUBLIC_TMC
#  define WPP_PUBLIC_TMC // Adds "PUBLIC_TMF:" to the control guid annotation
# endif
#else // WPP_PUBLIC_ANNOT_Vc4Display_cpp366
# define WPP_ANNOTATE_Vc4Display_cpp366 WPP_ANNOTATE_Vc4Display_cpp366_FINAL( \
    "TMF:", \
    "Vc4Display.cpp", \
    "Vc4Display_cpp366", \
    L"{", \
    L"__FILE__, ItemString -- 10" , \
    L"__LINE__, ItemLong -- 11" , \
    L"status, ItemNTSTATUS -- 12" , \
    L"hvsMemoryResourcePtr->u.Memory.Start.QuadPart, ItemLongLongX -- 13" , \
    L"sizeof(*_hvsRegistersPtr), ItemLong -- 14" , \
    L"}")
#endif // WPP_PUBLIC_ANNOT_Vc4Display_cpp366

#ifdef WPP_USER_MSG_GUID
# define WPP_ANNOTATE_Vc4Display_cpp397_FINAL(P, File, Name, ...) __annotation( \
    L ## P, \
    WPP_GUID_WTEXT WPP_USER_MSG_GUID L"roskmd // SRC=" _WPPW(File) \
    L" MJ= MN=", \
    L"#typev " _WPPW(Name) \
    L" 26 \"%0 [%10!s! @ %11!u!] LOW MEMORY :Failed to map PixelValve registers into system address space. (status=%12!s!, pvMemoryResourcePtr->u.Memory.Start=0x%13!I64x!, length=%14!d!)\" //   LEVEL=TRACE_LEVEL_ERROR FLAGS=ROS_TRACING_DEFAULT" \
    WPP_FUNC_NAME, \
    __VA_ARGS__)
#else // WPP_USER_MSG_GUID
# define WPP_ANNOTATE_Vc4Display_cpp397_FINAL(P, File, Name, ...) __annotation( \
    L ## P, \
    L"c0ccd90e-305c-3e36-4951-54eca8ed5fb9 roskmd // SRC=" _WPPW(File) \
    L" MJ= MN=", \
    L"#typev " _WPPW(Name) \
    L" 26 \"%0 [%10!s! @ %11!u!] LOW MEMORY :Failed to map PixelValve registers into system address space. (status=%12!s!, pvMemoryResourcePtr->u.Memory.Start=0x%13!I64x!, length=%14!d!)\" //   LEVEL=TRACE_LEVEL_ERROR FLAGS=ROS_TRACING_DEFAULT" \
    WPP_FUNC_NAME, \
    __VA_ARGS__)
#endif // WPP_USER_MSG_GUID

#ifdef WPP_PUBLIC_ANNOT_Vc4Display_cpp397
# define WPP_ANNOTATE_Vc4Display_cpp397 WPP_ANNOTATE_Vc4Display_cpp397_FINAL( \
    "TMF:", \
    "Unknown_cxx00", \
    "Unknown_cxx00", \
    L"{", \
    L"Arg, ItemString -- 10" , \
    L"Arg, ItemLong -- 11" , \
    L"Arg, ItemNTSTATUS -- 12" , \
    L"Arg, ItemLongLongX -- 13" , \
    L"Arg, ItemLong -- 14" , \
    L"}", \
    L"PUBLIC_TMF:")
# ifndef WPP_PUBLIC_TMC
#  define WPP_PUBLIC_TMC // Adds "PUBLIC_TMF:" to the control guid annotation
# endif
#else // WPP_PUBLIC_ANNOT_Vc4Display_cpp397
# define WPP_ANNOTATE_Vc4Display_cpp397 WPP_ANNOTATE_Vc4Display_cpp397_FINAL( \
    "TMF:", \
    "Vc4Display.cpp", \
    "Vc4Display_cpp397", \
    L"{", \
    L"__FILE__, ItemString -- 10" , \
    L"__LINE__, ItemLong -- 11" , \
    L"status, ItemNTSTATUS -- 12" , \
    L"pvMemoryResourcePtr->u.Memory.Start.QuadPart, ItemLongLongX -- 13" , \
    L"sizeof(*_pvRegistersPtr), ItemLong -- 14" , \
    L"}")
#endif // WPP_PUBLIC_ANNOT_Vc4Display_cpp397

#ifdef WPP_USER_MSG_GUID
# define WPP_ANNOTATE_Vc4Display_cpp419_FINAL(P, File, Name, ...) __annotation( \
    L ## P, \
    WPP_GUID_WTEXT WPP_USER_MSG_GUID L"roskmd // SRC=" _WPPW(File) \
    L" MJ= MN=", \
    L"#typev " _WPPW(Name) \
    L" 27 \"%0 [%10!s! @ %11!u!] ERROR :The HVS is not enabled\" //   LEVEL=TRACE_LEVEL_ERROR FLAGS=ROS_TRACING_DEFAULT" \
    WPP_FUNC_NAME, \
    __VA_ARGS__)
#else // WPP_USER_MSG_GUID
# define WPP_ANNOTATE_Vc4Display_cpp419_FINAL(P, File, Name, ...) __annotation( \
    L ## P, \
    L"c0ccd90e-305c-3e36-4951-54eca8ed5fb9 roskmd // SRC=" _WPPW(File) \
    L" MJ= MN=", \
    L"#typev " _WPPW(Name) \
    L" 27 \"%0 [%10!s! @ %11!u!] ERROR :The HVS is not enabled\" //   LEVEL=TRACE_LEVEL_ERROR FLAGS=ROS_TRACING_DEFAULT" \
    WPP_FUNC_NAME, \
    __VA_ARGS__)
#endif // WPP_USER_MSG_GUID

#ifdef WPP_PUBLIC_ANNOT_Vc4Display_cpp419
# define WPP_ANNOTATE_Vc4Display_cpp419 WPP_ANNOTATE_Vc4Display_cpp419_FINAL( \
    "TMF:", \
    "Unknown_cxx00", \
    "Unknown_cxx00", \
    L"{", \
    L"Arg, ItemString -- 10" , \
    L"Arg, ItemLong -- 11" , \
    L"}", \
    L"PUBLIC_TMF:")
# ifndef WPP_PUBLIC_TMC
#  define WPP_PUBLIC_TMC // Adds "PUBLIC_TMF:" to the control guid annotation
# endif
#else // WPP_PUBLIC_ANNOT_Vc4Display_cpp419
# define WPP_ANNOTATE_Vc4Display_cpp419 WPP_ANNOTATE_Vc4Display_cpp419_FINAL( \
    "TMF:", \
    "Vc4Display.cpp", \
    "Vc4Display_cpp419", \
    L"{", \
    L"__FILE__, ItemString -- 10" , \
    L"__LINE__, ItemLong -- 11" , \
    L"}")
#endif // WPP_PUBLIC_ANNOT_Vc4Display_cpp419

#ifdef WPP_USER_MSG_GUID
# define WPP_ANNOTATE_Vc4Display_cpp435_FINAL(P, File, Name, ...) __annotation( \
    L ## P, \
    WPP_GUID_WTEXT WPP_USER_MSG_GUID L"roskmd // SRC=" _WPPW(File) \
    L" MJ= MN=", \
    L"#typev " _WPPW(Name) \
    L" 28 \"%0 [%10!s! @ %11!u!] ASSERTION :DISPID register did not match expected value. (dispId=0x%12!x!, VC4HVS_DISPID=0x%13!x!)\" //   LEVEL=TRACE_LEVEL_ERROR FLAGS=ROS_TRACING_DEBUG" \
    WPP_FUNC_NAME, \
    __VA_ARGS__)
#else // WPP_USER_MSG_GUID
# define WPP_ANNOTATE_Vc4Display_cpp435_FINAL(P, File, Name, ...) __annotation( \
    L ## P, \
    L"c0ccd90e-305c-3e36-4951-54eca8ed5fb9 roskmd // SRC=" _WPPW(File) \
    L" MJ= MN=", \
    L"#typev " _WPPW(Name) \
    L" 28 \"%0 [%10!s! @ %11!u!] ASSERTION :DISPID register did not match expected value. (dispId=0x%12!x!, VC4HVS_DISPID=0x%13!x!)\" //   LEVEL=TRACE_LEVEL_ERROR FLAGS=ROS_TRACING_DEBUG" \
    WPP_FUNC_NAME, \
    __VA_ARGS__)
#endif // WPP_USER_MSG_GUID

#ifdef WPP_PUBLIC_ANNOT_Vc4Display_cpp435
# define WPP_ANNOTATE_Vc4Display_cpp435 WPP_ANNOTATE_Vc4Display_cpp435_FINAL( \
    "TMF:", \
    "Unknown_cxx00", \
    "Unknown_cxx00", \
    L"{", \
    L"Arg, ItemString -- 10" , \
    L"Arg, ItemLong -- 11" , \
    L"Arg, ItemLong -- 12" , \
    L"Arg, ItemLong -- 13" , \
    L"}", \
    L"PUBLIC_TMF:")
# ifndef WPP_PUBLIC_TMC
#  define WPP_PUBLIC_TMC // Adds "PUBLIC_TMF:" to the control guid annotation
# endif
#else // WPP_PUBLIC_ANNOT_Vc4Display_cpp435
# define WPP_ANNOTATE_Vc4Display_cpp435 WPP_ANNOTATE_Vc4Display_cpp435_FINAL( \
    "TMF:", \
    "Vc4Display.cpp", \
    "Vc4Display_cpp435", \
    L"{", \
    L"__FILE__, ItemString -- 10" , \
    L"__LINE__, ItemLong -- 11" , \
    L"dispId, ItemLong -- 12" , \
    L"VC4HVS_DISPID, ItemLong -- 13" , \
    L"}")
#endif // WPP_PUBLIC_ANNOT_Vc4Display_cpp435

#ifdef WPP_USER_MSG_GUID
# define WPP_ANNOTATE_Vc4Display_cpp449_FINAL(P, File, Name, ...) __annotation( \
    L ## P, \
    WPP_GUID_WTEXT WPP_USER_MSG_GUID L"roskmd // SRC=" _WPPW(File) \
    L" MJ= MN=", \
    L"#typev " _WPPW(Name) \
    L" 29 \"%0 [%10!s! @ %11!u!] ERROR :The HVS version is not VC4. (displstat.VERSION=0x%12!x!, VC4HVS_VERSION_VC4=0x%13!x!, displstat.AsUlong=0x%14!x!)\" //   LEVEL=TRACE_LEVEL_ERROR FLAGS=ROS_TRACING_DEFAULT" \
    WPP_FUNC_NAME, \
    __VA_ARGS__)
#else // WPP_USER_MSG_GUID
# define WPP_ANNOTATE_Vc4Display_cpp449_FINAL(P, File, Name, ...) __annotation( \
    L ## P, \
    L"c0ccd90e-305c-3e36-4951-54eca8ed5fb9 roskmd // SRC=" _WPPW(File) \
    L" MJ= MN=", \
    L"#typev " _WPPW(Name) \
    L" 29 \"%0 [%10!s! @ %11!u!] ERROR :The HVS version is not VC4. (displstat.VERSION=0x%12!x!, VC4HVS_VERSION_VC4=0x%13!x!, displstat.AsUlong=0x%14!x!)\" //   LEVEL=TRACE_LEVEL_ERROR FLAGS=ROS_TRACING_DEFAULT" \
    WPP_FUNC_NAME, \
    __VA_ARGS__)
#endif // WPP_USER_MSG_GUID

#ifdef WPP_PUBLIC_ANNOT_Vc4Display_cpp449
# define WPP_ANNOTATE_Vc4Display_cpp449 WPP_ANNOTATE_Vc4Display_cpp449_FINAL( \
    "TMF:", \
    "Unknown_cxx00", \
    "Unknown_cxx00", \
    L"{", \
    L"Arg, ItemString -- 10" , \
    L"Arg, ItemLong -- 11" , \
    L"Arg, ItemLong -- 12" , \
    L"Arg, ItemLong -- 13" , \
    L"Arg, ItemLong -- 14" , \
    L"}", \
    L"PUBLIC_TMF:")
# ifndef WPP_PUBLIC_TMC
#  define WPP_PUBLIC_TMC // Adds "PUBLIC_TMF:" to the control guid annotation
# endif
#else // WPP_PUBLIC_ANNOT_Vc4Display_cpp449
# define WPP_ANNOTATE_Vc4Display_cpp449 WPP_ANNOTATE_Vc4Display_cpp449_FINAL( \
    "TMF:", \
    "Vc4Display.cpp", \
    "Vc4Display_cpp449", \
    L"{", \
    L"__FILE__, ItemString -- 10" , \
    L"__LINE__, ItemLong -- 11" , \
    L"displstat.VERSION, ItemLong -- 12" , \
    L"VC4HVS_VERSION_VC4, ItemLong -- 13" , \
    L"displstat.AsUlong, ItemLong -- 14" , \
    L"}")
#endif // WPP_PUBLIC_ANNOT_Vc4Display_cpp449

#ifdef WPP_USER_MSG_GUID
# define WPP_ANNOTATE_Vc4Display_cpp464_FINAL(P, File, Name, ...) __annotation( \
    L ## P, \
    WPP_GUID_WTEXT WPP_USER_MSG_GUID L"roskmd // SRC=" _WPPW(File) \
    L" MJ= MN=", \
    L"#typev " _WPPW(Name) \
    L" 30 \"%0 [%10!s! @ %11!u!] ERROR :The PixelValve peripheral is not enabled. (pvControlRegister=0x%12!x!, _pvRegistersPtr=%13!p!)\" //   LEVEL=TRACE_LEVEL_ERROR FLAGS=ROS_TRACING_DEFAULT" \
    WPP_FUNC_NAME, \
    __VA_ARGS__)
#else // WPP_USER_MSG_GUID
# define WPP_ANNOTATE_Vc4Display_cpp464_FINAL(P, File, Name, ...) __annotation( \
    L ## P, \
    L"c0ccd90e-305c-3e36-4951-54eca8ed5fb9 roskmd // SRC=" _WPPW(File) \
    L" MJ= MN=", \
    L"#typev " _WPPW(Name) \
    L" 30 \"%0 [%10!s! @ %11!u!] ERROR :The PixelValve peripheral is not enabled. (pvControlRegister=0x%12!x!, _pvRegistersPtr=%13!p!)\" //   LEVEL=TRACE_LEVEL_ERROR FLAGS=ROS_TRACING_DEFAULT" \
    WPP_FUNC_NAME, \
    __VA_ARGS__)
#endif // WPP_USER_MSG_GUID

#ifdef WPP_PUBLIC_ANNOT_Vc4Display_cpp464
# define WPP_ANNOTATE_Vc4Display_cpp464 WPP_ANNOTATE_Vc4Display_cpp464_FINAL( \
    "TMF:", \
    "Unknown_cxx00", \
    "Unknown_cxx00", \
    L"{", \
    L"Arg, ItemString -- 10" , \
    L"Arg, ItemLong -- 11" , \
    L"Arg, ItemLong -- 12" , \
    L"Arg, ItemPtr -- 13" , \
    L"}", \
    L"PUBLIC_TMF:")
# ifndef WPP_PUBLIC_TMC
#  define WPP_PUBLIC_TMC // Adds "PUBLIC_TMF:" to the control guid annotation
# endif
#else // WPP_PUBLIC_ANNOT_Vc4Display_cpp464
# define WPP_ANNOTATE_Vc4Display_cpp464 WPP_ANNOTATE_Vc4Display_cpp464_FINAL( \
    "TMF:", \
    "Vc4Display.cpp", \
    "Vc4Display_cpp464", \
    L"{", \
    L"__FILE__, ItemString -- 10" , \
    L"__LINE__, ItemLong -- 11" , \
    L"pvControlRegister.AsUlong, ItemLong -- 12" , \
    L"_pvRegistersPtr, ItemPtr -- 13" , \
    L"}")
#endif // WPP_PUBLIC_ANNOT_Vc4Display_cpp464

#ifdef WPP_USER_MSG_GUID
# define WPP_ANNOTATE_Vc4Display_cpp483_FINAL(P, File, Name, ...) __annotation( \
    L ## P, \
    WPP_GUID_WTEXT WPP_USER_MSG_GUID L"roskmd // SRC=" _WPPW(File) \
    L" MJ= MN=", \
    L"#typev " _WPPW(Name) \
    L" 31 \"%0 [%10!s! @ %11!u!] ERROR :DxgkCbAcquirePostDisplayOwnership() failed. (status = %12!s!)\" //   LEVEL=TRACE_LEVEL_ERROR FLAGS=ROS_TRACING_DEFAULT" \
    WPP_FUNC_NAME, \
    __VA_ARGS__)
#else // WPP_USER_MSG_GUID
# define WPP_ANNOTATE_Vc4Display_cpp483_FINAL(P, File, Name, ...) __annotation( \
    L ## P, \
    L"c0ccd90e-305c-3e36-4951-54eca8ed5fb9 roskmd // SRC=" _WPPW(File) \
    L" MJ= MN=", \
    L"#typev " _WPPW(Name) \
    L" 31 \"%0 [%10!s! @ %11!u!] ERROR :DxgkCbAcquirePostDisplayOwnership() failed. (status = %12!s!)\" //   LEVEL=TRACE_LEVEL_ERROR FLAGS=ROS_TRACING_DEFAULT" \
    WPP_FUNC_NAME, \
    __VA_ARGS__)
#endif // WPP_USER_MSG_GUID

#ifdef WPP_PUBLIC_ANNOT_Vc4Display_cpp483
# define WPP_ANNOTATE_Vc4Display_cpp483 WPP_ANNOTATE_Vc4Display_cpp483_FINAL( \
    "TMF:", \
    "Unknown_cxx00", \
    "Unknown_cxx00", \
    L"{", \
    L"Arg, ItemString -- 10" , \
    L"Arg, ItemLong -- 11" , \
    L"Arg, ItemNTSTATUS -- 12" , \
    L"}", \
    L"PUBLIC_TMF:")
# ifndef WPP_PUBLIC_TMC
#  define WPP_PUBLIC_TMC // Adds "PUBLIC_TMF:" to the control guid annotation
# endif
#else // WPP_PUBLIC_ANNOT_Vc4Display_cpp483
# define WPP_ANNOTATE_Vc4Display_cpp483 WPP_ANNOTATE_Vc4Display_cpp483_FINAL( \
    "TMF:", \
    "Vc4Display.cpp", \
    "Vc4Display_cpp483", \
    L"{", \
    L"__FILE__, ItemString -- 10" , \
    L"__LINE__, ItemLong -- 11" , \
    L"status, ItemNTSTATUS -- 12" , \
    L"}")
#endif // WPP_PUBLIC_ANNOT_Vc4Display_cpp483

#ifdef WPP_USER_MSG_GUID
# define WPP_ANNOTATE_Vc4Display_cpp493_FINAL(P, File, Name, ...) __annotation( \
    L ## P, \
    WPP_GUID_WTEXT WPP_USER_MSG_GUID L"roskmd // SRC=" _WPPW(File) \
    L" MJ= MN=", \
    L"#typev " _WPPW(Name) \
    L" 32 \"%0 [%10!s! @ %11!u!] ERROR :DxgkCbAcquirePostDisplayOwnership(...) reported invalid frame buffer. (Width=%12!d!, Height=%13!d!, PhysicAddress=0x%14!I64x!)\" //   LEVEL=TRACE_LEVEL_ERROR FLAGS=ROS_TRACING_DEFAULT" \
    WPP_FUNC_NAME, \
    __VA_ARGS__)
#else // WPP_USER_MSG_GUID
# define WPP_ANNOTATE_Vc4Display_cpp493_FINAL(P, File, Name, ...) __annotation( \
    L ## P, \
    L"c0ccd90e-305c-3e36-4951-54eca8ed5fb9 roskmd // SRC=" _WPPW(File) \
    L" MJ= MN=", \
    L"#typev " _WPPW(Name) \
    L" 32 \"%0 [%10!s! @ %11!u!] ERROR :DxgkCbAcquirePostDisplayOwnership(...) reported invalid frame buffer. (Width=%12!d!, Height=%13!d!, PhysicAddress=0x%14!I64x!)\" //   LEVEL=TRACE_LEVEL_ERROR FLAGS=ROS_TRACING_DEFAULT" \
    WPP_FUNC_NAME, \
    __VA_ARGS__)
#endif // WPP_USER_MSG_GUID

#ifdef WPP_PUBLIC_ANNOT_Vc4Display_cpp493
# define WPP_ANNOTATE_Vc4Display_cpp493 WPP_ANNOTATE_Vc4Display_cpp493_FINAL( \
    "TMF:", \
    "Unknown_cxx00", \
    "Unknown_cxx00", \
    L"{", \
    L"Arg, ItemString -- 10" , \
    L"Arg, ItemLong -- 11" , \
    L"Arg, ItemLong -- 12" , \
    L"Arg, ItemLong -- 13" , \
    L"Arg, ItemLongLongX -- 14" , \
    L"}", \
    L"PUBLIC_TMF:")
# ifndef WPP_PUBLIC_TMC
#  define WPP_PUBLIC_TMC // Adds "PUBLIC_TMF:" to the control guid annotation
# endif
#else // WPP_PUBLIC_ANNOT_Vc4Display_cpp493
# define WPP_ANNOTATE_Vc4Display_cpp493 WPP_ANNOTATE_Vc4Display_cpp493_FINAL( \
    "TMF:", \
    "Vc4Display.cpp", \
    "Vc4Display_cpp493", \
    L"{", \
    L"__FILE__, ItemString -- 10" , \
    L"__LINE__, ItemLong -- 11" , \
    L"this->dxgkDisplayInfo.Width, ItemLong -- 12" , \
    L"this->dxgkDisplayInfo.Height, ItemLong -- 13" , \
    L"this->dxgkDisplayInfo.PhysicAddress.QuadPart, ItemLongLongX -- 14" , \
    L"}")
#endif // WPP_PUBLIC_ANNOT_Vc4Display_cpp493

#ifdef WPP_USER_MSG_GUID
# define WPP_ANNOTATE_Vc4Display_cpp517_FINAL(P, File, Name, ...) __annotation( \
    L ## P, \
    WPP_GUID_WTEXT WPP_USER_MSG_GUID L"roskmd // SRC=" _WPPW(File) \
    L" MJ= MN=", \
    L"#typev " _WPPW(Name) \
    L" 33 \"%0 [%10!s! @ %11!u!] TRACE :Successfully acquired post display ownership. (Width = %12!d!, Height = %13!d!, Pitch = %14!d!, ColorFormat = %15!d!, TargetId = %16!d!, AcpiId = %17!d!)\" //   LEVEL=TRACE_LEVEL_VERBOSE FLAGS=ROS_TRACING_DEFAULT" \
    WPP_FUNC_NAME, \
    __VA_ARGS__)
#else // WPP_USER_MSG_GUID
# define WPP_ANNOTATE_Vc4Display_cpp517_FINAL(P, File, Name, ...) __annotation( \
    L ## P, \
    L"c0ccd90e-305c-3e36-4951-54eca8ed5fb9 roskmd // SRC=" _WPPW(File) \
    L" MJ= MN=", \
    L"#typev " _WPPW(Name) \
    L" 33 \"%0 [%10!s! @ %11!u!] TRACE :Successfully acquired post display ownership. (Width = %12!d!, Height = %13!d!, Pitch = %14!d!, ColorFormat = %15!d!, TargetId = %16!d!, AcpiId = %17!d!)\" //   LEVEL=TRACE_LEVEL_VERBOSE FLAGS=ROS_TRACING_DEFAULT" \
    WPP_FUNC_NAME, \
    __VA_ARGS__)
#endif // WPP_USER_MSG_GUID

#ifdef WPP_PUBLIC_ANNOT_Vc4Display_cpp517
# define WPP_ANNOTATE_Vc4Display_cpp517 WPP_ANNOTATE_Vc4Display_cpp517_FINAL( \
    "TMF:", \
    "Unknown_cxx00", \
    "Unknown_cxx00", \
    L"{", \
    L"Arg, ItemString -- 10" , \
    L"Arg, ItemLong -- 11" , \
    L"Arg, ItemLong -- 12" , \
    L"Arg, ItemLong -- 13" , \
    L"Arg, ItemLong -- 14" , \
    L"Arg, ItemLong -- 15" , \
    L"Arg, ItemLong -- 16" , \
    L"Arg, ItemLong -- 17" , \
    L"}", \
    L"PUBLIC_TMF:")
# ifndef WPP_PUBLIC_TMC
#  define WPP_PUBLIC_TMC // Adds "PUBLIC_TMF:" to the control guid annotation
# endif
#else // WPP_PUBLIC_ANNOT_Vc4Display_cpp517
# define WPP_ANNOTATE_Vc4Display_cpp517 WPP_ANNOTATE_Vc4Display_cpp517_FINAL( \
    "TMF:", \
    "Vc4Display.cpp", \
    "Vc4Display_cpp517", \
    L"{", \
    L"__FILE__, ItemString -- 10" , \
    L"__LINE__, ItemLong -- 11" , \
    L"this->dxgkDisplayInfo.Width, ItemLong -- 12" , \
    L"this->dxgkDisplayInfo.Height, ItemLong -- 13" , \
    L"this->dxgkDisplayInfo.Pitch, ItemLong -- 14" , \
    L"this->dxgkDisplayInfo.ColorFormat, ItemLong -- 15" , \
    L"this->dxgkDisplayInfo.TargetId, ItemLong -- 16" , \
    L"this->dxgkDisplayInfo.AcpiId, ItemLong -- 17" , \
    L"}")
#endif // WPP_PUBLIC_ANNOT_Vc4Display_cpp517

#ifdef WPP_USER_MSG_GUID
# define WPP_ANNOTATE_Vc4Display_cpp534_FINAL(P, File, Name, ...) __annotation( \
    L ## P, \
    WPP_GUID_WTEXT WPP_USER_MSG_GUID L"roskmd // SRC=" _WPPW(File) \
    L" MJ= MN=", \
    L"#typev " _WPPW(Name) \
    L" 34 \"%0 [%10!s! @ %11!u!] LOW MEMORY :Failed to map frame buffer into system address space. (this->dxgkDisplayInfo.PhysicAddress = 0x%12!I64x!, _frameBufferLength = %13!d!)\" //   LEVEL=TRACE_LEVEL_ERROR FLAGS=ROS_TRACING_DEFAULT" \
    WPP_FUNC_NAME, \
    __VA_ARGS__)
#else // WPP_USER_MSG_GUID
# define WPP_ANNOTATE_Vc4Display_cpp534_FINAL(P, File, Name, ...) __annotation( \
    L ## P, \
    L"c0ccd90e-305c-3e36-4951-54eca8ed5fb9 roskmd // SRC=" _WPPW(File) \
    L" MJ= MN=", \
    L"#typev " _WPPW(Name) \
    L" 34 \"%0 [%10!s! @ %11!u!] LOW MEMORY :Failed to map frame buffer into system address space. (this->dxgkDisplayInfo.PhysicAddress = 0x%12!I64x!, _frameBufferLength = %13!d!)\" //   LEVEL=TRACE_LEVEL_ERROR FLAGS=ROS_TRACING_DEFAULT" \
    WPP_FUNC_NAME, \
    __VA_ARGS__)
#endif // WPP_USER_MSG_GUID

#ifdef WPP_PUBLIC_ANNOT_Vc4Display_cpp534
# define WPP_ANNOTATE_Vc4Display_cpp534 WPP_ANNOTATE_Vc4Display_cpp534_FINAL( \
    "TMF:", \
    "Unknown_cxx00", \
    "Unknown_cxx00", \
    L"{", \
    L"Arg, ItemString -- 10" , \
    L"Arg, ItemLong -- 11" , \
    L"Arg, ItemLongLongX -- 12" , \
    L"Arg, ItemLong -- 13" , \
    L"}", \
    L"PUBLIC_TMF:")
# ifndef WPP_PUBLIC_TMC
#  define WPP_PUBLIC_TMC // Adds "PUBLIC_TMF:" to the control guid annotation
# endif
#else // WPP_PUBLIC_ANNOT_Vc4Display_cpp534
# define WPP_ANNOTATE_Vc4Display_cpp534 WPP_ANNOTATE_Vc4Display_cpp534_FINAL( \
    "TMF:", \
    "Vc4Display.cpp", \
    "Vc4Display_cpp534", \
    L"{", \
    L"__FILE__, ItemString -- 10" , \
    L"__LINE__, ItemLong -- 11" , \
    L"this->dxgkDisplayInfo.PhysicAddress.QuadPart, ItemLongLongX -- 12" , \
    L"_frameBufferLength, ItemLong -- 13" , \
    L"}")
#endif // WPP_PUBLIC_ANNOT_Vc4Display_cpp534

#ifdef WPP_USER_MSG_GUID
# define WPP_ANNOTATE_Vc4Display_cpp555_FINAL(P, File, Name, ...) __annotation( \
    L ## P, \
    WPP_GUID_WTEXT WPP_USER_MSG_GUID L"roskmd // SRC=" _WPPW(File) \
    L" MJ= MN=", \
    L"#typev " _WPPW(Name) \
    L" 35 \"%0 [%10!s! @ %11!u!] ASSERTION :DISPCTRL1 (display FIFO 1 control) is not in the expected state. (dispCtrl1=0x%12!x!)\" //   LEVEL=TRACE_LEVEL_ERROR FLAGS=ROS_TRACING_DEBUG" \
    WPP_FUNC_NAME, \
    __VA_ARGS__)
#else // WPP_USER_MSG_GUID
# define WPP_ANNOTATE_Vc4Display_cpp555_FINAL(P, File, Name, ...) __annotation( \
    L ## P, \
    L"c0ccd90e-305c-3e36-4951-54eca8ed5fb9 roskmd // SRC=" _WPPW(File) \
    L" MJ= MN=", \
    L"#typev " _WPPW(Name) \
    L" 35 \"%0 [%10!s! @ %11!u!] ASSERTION :DISPCTRL1 (display FIFO 1 control) is not in the expected state. (dispCtrl1=0x%12!x!)\" //   LEVEL=TRACE_LEVEL_ERROR FLAGS=ROS_TRACING_DEBUG" \
    WPP_FUNC_NAME, \
    __VA_ARGS__)
#endif // WPP_USER_MSG_GUID

#ifdef WPP_PUBLIC_ANNOT_Vc4Display_cpp555
# define WPP_ANNOTATE_Vc4Display_cpp555 WPP_ANNOTATE_Vc4Display_cpp555_FINAL( \
    "TMF:", \
    "Unknown_cxx00", \
    "Unknown_cxx00", \
    L"{", \
    L"Arg, ItemString -- 10" , \
    L"Arg, ItemLong -- 11" , \
    L"Arg, ItemLong -- 12" , \
    L"}", \
    L"PUBLIC_TMF:")
# ifndef WPP_PUBLIC_TMC
#  define WPP_PUBLIC_TMC // Adds "PUBLIC_TMF:" to the control guid annotation
# endif
#else // WPP_PUBLIC_ANNOT_Vc4Display_cpp555
# define WPP_ANNOTATE_Vc4Display_cpp555 WPP_ANNOTATE_Vc4Display_cpp555_FINAL( \
    "TMF:", \
    "Vc4Display.cpp", \
    "Vc4Display_cpp555", \
    L"{", \
    L"__FILE__, ItemString -- 10" , \
    L"__LINE__, ItemLong -- 11" , \
    L"dispCtrl1.AsUlong, ItemLong -- 12" , \
    L"}")
#endif // WPP_PUBLIC_ANNOT_Vc4Display_cpp555

#ifdef WPP_USER_MSG_GUID
# define WPP_ANNOTATE_Vc4Display_cpp566_FINAL(P, File, Name, ...) __annotation( \
    L ## P, \
    WPP_GUID_WTEXT WPP_USER_MSG_GUID L"roskmd // SRC=" _WPPW(File) \
    L" MJ= MN=", \
    L"#typev " _WPPW(Name) \
    L" 36 \"%0 [%10!s! @ %11!u!] ASSERTION :Display FIFO 1 width and height do not match values reported by BIOS. (dispCtrl1=0x%12!x!)\" //   LEVEL=TRACE_LEVEL_ERROR FLAGS=ROS_TRACING_DEBUG" \
    WPP_FUNC_NAME, \
    __VA_ARGS__)
#else // WPP_USER_MSG_GUID
# define WPP_ANNOTATE_Vc4Display_cpp566_FINAL(P, File, Name, ...) __annotation( \
    L ## P, \
    L"c0ccd90e-305c-3e36-4951-54eca8ed5fb9 roskmd // SRC=" _WPPW(File) \
    L" MJ= MN=", \
    L"#typev " _WPPW(Name) \
    L" 36 \"%0 [%10!s! @ %11!u!] ASSERTION :Display FIFO 1 width and height do not match values reported by BIOS. (dispCtrl1=0x%12!x!)\" //   LEVEL=TRACE_LEVEL_ERROR FLAGS=ROS_TRACING_DEBUG" \
    WPP_FUNC_NAME, \
    __VA_ARGS__)
#endif // WPP_USER_MSG_GUID

#ifdef WPP_PUBLIC_ANNOT_Vc4Display_cpp566
# define WPP_ANNOTATE_Vc4Display_cpp566 WPP_ANNOTATE_Vc4Display_cpp566_FINAL( \
    "TMF:", \
    "Unknown_cxx00", \
    "Unknown_cxx00", \
    L"{", \
    L"Arg, ItemString -- 10" , \
    L"Arg, ItemLong -- 11" , \
    L"Arg, ItemLong -- 12" , \
    L"}", \
    L"PUBLIC_TMF:")
# ifndef WPP_PUBLIC_TMC
#  define WPP_PUBLIC_TMC // Adds "PUBLIC_TMF:" to the control guid annotation
# endif
#else // WPP_PUBLIC_ANNOT_Vc4Display_cpp566
# define WPP_ANNOTATE_Vc4Display_cpp566 WPP_ANNOTATE_Vc4Display_cpp566_FINAL( \
    "TMF:", \
    "Vc4Display.cpp", \
    "Vc4Display_cpp566", \
    L"{", \
    L"__FILE__, ItemString -- 10" , \
    L"__LINE__, ItemLong -- 11" , \
    L"dispCtrl1.AsUlong, ItemLong -- 12" , \
    L"}")
#endif // WPP_PUBLIC_ANNOT_Vc4Display_cpp566

#ifdef WPP_USER_MSG_GUID
# define WPP_ANNOTATE_Vc4Display_cpp579_FINAL(P, File, Name, ...) __annotation( \
    L ## P, \
    WPP_GUID_WTEXT WPP_USER_MSG_GUID L"roskmd // SRC=" _WPPW(File) \
    L" MJ= MN=", \
    L"#typev " _WPPW(Name) \
    L" 37 \"%0 [%10!s! @ %11!u!] ASSERTION :Display list address is out of range\" //   LEVEL=TRACE_LEVEL_ERROR FLAGS=ROS_TRACING_DEBUG" \
    WPP_FUNC_NAME, \
    __VA_ARGS__)
#else // WPP_USER_MSG_GUID
# define WPP_ANNOTATE_Vc4Display_cpp579_FINAL(P, File, Name, ...) __annotation( \
    L ## P, \
    L"c0ccd90e-305c-3e36-4951-54eca8ed5fb9 roskmd // SRC=" _WPPW(File) \
    L" MJ= MN=", \
    L"#typev " _WPPW(Name) \
    L" 37 \"%0 [%10!s! @ %11!u!] ASSERTION :Display list address is out of range\" //   LEVEL=TRACE_LEVEL_ERROR FLAGS=ROS_TRACING_DEBUG" \
    WPP_FUNC_NAME, \
    __VA_ARGS__)
#endif // WPP_USER_MSG_GUID

#ifdef WPP_PUBLIC_ANNOT_Vc4Display_cpp579
# define WPP_ANNOTATE_Vc4Display_cpp579 WPP_ANNOTATE_Vc4Display_cpp579_FINAL( \
    "TMF:", \
    "Unknown_cxx00", \
    "Unknown_cxx00", \
    L"{", \
    L"Arg, ItemString -- 10" , \
    L"Arg, ItemLong -- 11" , \
    L"}", \
    L"PUBLIC_TMF:")
# ifndef WPP_PUBLIC_TMC
#  define WPP_PUBLIC_TMC // Adds "PUBLIC_TMF:" to the control guid annotation
# endif
#else // WPP_PUBLIC_ANNOT_Vc4Display_cpp579
# define WPP_ANNOTATE_Vc4Display_cpp579 WPP_ANNOTATE_Vc4Display_cpp579_FINAL( \
    "TMF:", \
    "Vc4Display.cpp", \
    "Vc4Display_cpp579", \
    L"{", \
    L"__FILE__, ItemString -- 10" , \
    L"__LINE__, ItemLong -- 11" , \
    L"}")
#endif // WPP_PUBLIC_ANNOT_Vc4Display_cpp579

#ifdef WPP_USER_MSG_GUID
# define WPP_ANNOTATE_Vc4Display_cpp592_FINAL(P, File, Name, ...) __annotation( \
    L ## P, \
    WPP_GUID_WTEXT WPP_USER_MSG_GUID L"roskmd // SRC=" _WPPW(File) \
    L" MJ= MN=", \
    L"#typev " _WPPW(Name) \
    L" 38 \"%0 [%10!s! @ %11!u!] ASSERTION :The display list does not point to the BIOS buffer\" //   LEVEL=TRACE_LEVEL_ERROR FLAGS=ROS_TRACING_DEBUG" \
    WPP_FUNC_NAME, \
    __VA_ARGS__)
#else // WPP_USER_MSG_GUID
# define WPP_ANNOTATE_Vc4Display_cpp592_FINAL(P, File, Name, ...) __annotation( \
    L ## P, \
    L"c0ccd90e-305c-3e36-4951-54eca8ed5fb9 roskmd // SRC=" _WPPW(File) \
    L" MJ= MN=", \
    L"#typev " _WPPW(Name) \
    L" 38 \"%0 [%10!s! @ %11!u!] ASSERTION :The display list does not point to the BIOS buffer\" //   LEVEL=TRACE_LEVEL_ERROR FLAGS=ROS_TRACING_DEBUG" \
    WPP_FUNC_NAME, \
    __VA_ARGS__)
#endif // WPP_USER_MSG_GUID

#ifdef WPP_PUBLIC_ANNOT_Vc4Display_cpp592
# define WPP_ANNOTATE_Vc4Display_cpp592 WPP_ANNOTATE_Vc4Display_cpp592_FINAL( \
    "TMF:", \
    "Unknown_cxx00", \
    "Unknown_cxx00", \
    L"{", \
    L"Arg, ItemString -- 10" , \
    L"Arg, ItemLong -- 11" , \
    L"}", \
    L"PUBLIC_TMF:")
# ifndef WPP_PUBLIC_TMC
#  define WPP_PUBLIC_TMC // Adds "PUBLIC_TMF:" to the control guid annotation
# endif
#else // WPP_PUBLIC_ANNOT_Vc4Display_cpp592
# define WPP_ANNOTATE_Vc4Display_cpp592 WPP_ANNOTATE_Vc4Display_cpp592_FINAL( \
    "TMF:", \
    "Vc4Display.cpp", \
    "Vc4Display_cpp592", \
    L"{", \
    L"__FILE__, ItemString -- 10" , \
    L"__LINE__, ItemLong -- 11" , \
    L"}")
#endif // WPP_PUBLIC_ANNOT_Vc4Display_cpp592

#ifdef WPP_USER_MSG_GUID
# define WPP_ANNOTATE_Vc4Display_cpp617_FINAL(P, File, Name, ...) __annotation( \
    L ## P, \
    WPP_GUID_WTEXT WPP_USER_MSG_GUID L"roskmd // SRC=" _WPPW(File) \
    L" MJ= MN=", \
    L"#typev " _WPPW(Name) \
    L" 39 \"%0 [%10!s! @ %11!u!] TRACE :Successfully started device.\" //   LEVEL=TRACE_LEVEL_VERBOSE FLAGS=ROS_TRACING_DEFAULT" \
    WPP_FUNC_NAME, \
    __VA_ARGS__)
#else // WPP_USER_MSG_GUID
# define WPP_ANNOTATE_Vc4Display_cpp617_FINAL(P, File, Name, ...) __annotation( \
    L ## P, \
    L"c0ccd90e-305c-3e36-4951-54eca8ed5fb9 roskmd // SRC=" _WPPW(File) \
    L" MJ= MN=", \
    L"#typev " _WPPW(Name) \
    L" 39 \"%0 [%10!s! @ %11!u!] TRACE :Successfully started device.\" //   LEVEL=TRACE_LEVEL_VERBOSE FLAGS=ROS_TRACING_DEFAULT" \
    WPP_FUNC_NAME, \
    __VA_ARGS__)
#endif // WPP_USER_MSG_GUID

#ifdef WPP_PUBLIC_ANNOT_Vc4Display_cpp617
# define WPP_ANNOTATE_Vc4Display_cpp617 WPP_ANNOTATE_Vc4Display_cpp617_FINAL( \
    "TMF:", \
    "Unknown_cxx00", \
    "Unknown_cxx00", \
    L"{", \
    L"Arg, ItemString -- 10" , \
    L"Arg, ItemLong -- 11" , \
    L"}", \
    L"PUBLIC_TMF:")
# ifndef WPP_PUBLIC_TMC
#  define WPP_PUBLIC_TMC // Adds "PUBLIC_TMF:" to the control guid annotation
# endif
#else // WPP_PUBLIC_ANNOT_Vc4Display_cpp617
# define WPP_ANNOTATE_Vc4Display_cpp617 WPP_ANNOTATE_Vc4Display_cpp617_FINAL( \
    "TMF:", \
    "Vc4Display.cpp", \
    "Vc4Display_cpp617", \
    L"{", \
    L"__FILE__, ItemString -- 10" , \
    L"__LINE__, ItemLong -- 11" , \
    L"}")
#endif // WPP_PUBLIC_ANNOT_Vc4Display_cpp617

#ifdef WPP_USER_MSG_GUID
# define WPP_ANNOTATE_Vc4Display_cpp660_FINAL(P, File, Name, ...) __annotation( \
    L ## P, \
    WPP_GUID_WTEXT WPP_USER_MSG_GUID L"roskmd // SRC=" _WPPW(File) \
    L" MJ= MN=", \
    L"#typev " _WPPW(Name) \
    L" 40 \"%0 [%10!s! @ %11!u!] TRACE :Successfully stopped device.\" //   LEVEL=TRACE_LEVEL_VERBOSE FLAGS=ROS_TRACING_DEFAULT" \
    WPP_FUNC_NAME, \
    __VA_ARGS__)
#else // WPP_USER_MSG_GUID
# define WPP_ANNOTATE_Vc4Display_cpp660_FINAL(P, File, Name, ...) __annotation( \
    L ## P, \
    L"c0ccd90e-305c-3e36-4951-54eca8ed5fb9 roskmd // SRC=" _WPPW(File) \
    L" MJ= MN=", \
    L"#typev " _WPPW(Name) \
    L" 40 \"%0 [%10!s! @ %11!u!] TRACE :Successfully stopped device.\" //   LEVEL=TRACE_LEVEL_VERBOSE FLAGS=ROS_TRACING_DEFAULT" \
    WPP_FUNC_NAME, \
    __VA_ARGS__)
#endif // WPP_USER_MSG_GUID

#ifdef WPP_PUBLIC_ANNOT_Vc4Display_cpp660
# define WPP_ANNOTATE_Vc4Display_cpp660 WPP_ANNOTATE_Vc4Display_cpp660_FINAL( \
    "TMF:", \
    "Unknown_cxx00", \
    "Unknown_cxx00", \
    L"{", \
    L"Arg, ItemString -- 10" , \
    L"Arg, ItemLong -- 11" , \
    L"}", \
    L"PUBLIC_TMF:")
# ifndef WPP_PUBLIC_TMC
#  define WPP_PUBLIC_TMC // Adds "PUBLIC_TMF:" to the control guid annotation
# endif
#else // WPP_PUBLIC_ANNOT_Vc4Display_cpp660
# define WPP_ANNOTATE_Vc4Display_cpp660 WPP_ANNOTATE_Vc4Display_cpp660_FINAL( \
    "TMF:", \
    "Vc4Display.cpp", \
    "Vc4Display_cpp660", \
    L"{", \
    L"__FILE__, ItemString -- 10" , \
    L"__LINE__, ItemLong -- 11" , \
    L"}")
#endif // WPP_PUBLIC_ANNOT_Vc4Display_cpp660

#ifdef WPP_USER_MSG_GUID
# define WPP_ANNOTATE_Vc4Display_cpp672_FINAL(P, File, Name, ...) __annotation( \
    L ## P, \
    WPP_GUID_WTEXT WPP_USER_MSG_GUID L"roskmd // SRC=" _WPPW(File) \
    L" MJ= MN=", \
    L"#typev " _WPPW(Name) \
    L" 41 \"%0 [%10!s! @ %11!u!] WARNING :Unsupported IO Control Code. (VideoRequestPacketPtr->IoControlCode = 0x%12!x!)\" //   LEVEL=TRACE_LEVEL_WARNING FLAGS=ROS_TRACING_DEFAULT" \
    WPP_FUNC_NAME, \
    __VA_ARGS__)
#else // WPP_USER_MSG_GUID
# define WPP_ANNOTATE_Vc4Display_cpp672_FINAL(P, File, Name, ...) __annotation( \
    L ## P, \
    L"c0ccd90e-305c-3e36-4951-54eca8ed5fb9 roskmd // SRC=" _WPPW(File) \
    L" MJ= MN=", \
    L"#typev " _WPPW(Name) \
    L" 41 \"%0 [%10!s! @ %11!u!] WARNING :Unsupported IO Control Code. (VideoRequestPacketPtr->IoControlCode = 0x%12!x!)\" //   LEVEL=TRACE_LEVEL_WARNING FLAGS=ROS_TRACING_DEFAULT" \
    WPP_FUNC_NAME, \
    __VA_ARGS__)
#endif // WPP_USER_MSG_GUID

#ifdef WPP_PUBLIC_ANNOT_Vc4Display_cpp672
# define WPP_ANNOTATE_Vc4Display_cpp672 WPP_ANNOTATE_Vc4Display_cpp672_FINAL( \
    "TMF:", \
    "Unknown_cxx00", \
    "Unknown_cxx00", \
    L"{", \
    L"Arg, ItemString -- 10" , \
    L"Arg, ItemLong -- 11" , \
    L"Arg, ItemLong -- 12" , \
    L"}", \
    L"PUBLIC_TMF:")
# ifndef WPP_PUBLIC_TMC
#  define WPP_PUBLIC_TMC // Adds "PUBLIC_TMF:" to the control guid annotation
# endif
#else // WPP_PUBLIC_ANNOT_Vc4Display_cpp672
# define WPP_ANNOTATE_Vc4Display_cpp672 WPP_ANNOTATE_Vc4Display_cpp672_FINAL( \
    "TMF:", \
    "Vc4Display.cpp", \
    "Vc4Display_cpp672", \
    L"{", \
    L"__FILE__, ItemString -- 10" , \
    L"__LINE__, ItemLong -- 11" , \
    L"VideoRequestPacketPtr->IoControlCode, ItemLong -- 12" , \
    L"}")
#endif // WPP_PUBLIC_ANNOT_Vc4Display_cpp672

#ifdef WPP_USER_MSG_GUID
# define WPP_ANNOTATE_Vc4Display_cpp712_FINAL(P, File, Name, ...) __annotation( \
    L ## P, \
    WPP_GUID_WTEXT WPP_USER_MSG_GUID L"roskmd // SRC=" _WPPW(File) \
    L" MJ= MN=", \
    L"#typev " _WPPW(Name) \
    L" 42 \"%0 [%10!s! @ %11!u!] TRACE :Child relations reported successfully.\" //   LEVEL=TRACE_LEVEL_VERBOSE FLAGS=ROS_TRACING_DEFAULT" \
    WPP_FUNC_NAME, \
    __VA_ARGS__)
#else // WPP_USER_MSG_GUID
# define WPP_ANNOTATE_Vc4Display_cpp712_FINAL(P, File, Name, ...) __annotation( \
    L ## P, \
    L"c0ccd90e-305c-3e36-4951-54eca8ed5fb9 roskmd // SRC=" _WPPW(File) \
    L" MJ= MN=", \
    L"#typev " _WPPW(Name) \
    L" 42 \"%0 [%10!s! @ %11!u!] TRACE :Child relations reported successfully.\" //   LEVEL=TRACE_LEVEL_VERBOSE FLAGS=ROS_TRACING_DEFAULT" \
    WPP_FUNC_NAME, \
    __VA_ARGS__)
#endif // WPP_USER_MSG_GUID

#ifdef WPP_PUBLIC_ANNOT_Vc4Display_cpp712
# define WPP_ANNOTATE_Vc4Display_cpp712 WPP_ANNOTATE_Vc4Display_cpp712_FINAL( \
    "TMF:", \
    "Unknown_cxx00", \
    "Unknown_cxx00", \
    L"{", \
    L"Arg, ItemString -- 10" , \
    L"Arg, ItemLong -- 11" , \
    L"}", \
    L"PUBLIC_TMF:")
# ifndef WPP_PUBLIC_TMC
#  define WPP_PUBLIC_TMC // Adds "PUBLIC_TMF:" to the control guid annotation
# endif
#else // WPP_PUBLIC_ANNOT_Vc4Display_cpp712
# define WPP_ANNOTATE_Vc4Display_cpp712 WPP_ANNOTATE_Vc4Display_cpp712_FINAL( \
    "TMF:", \
    "Vc4Display.cpp", \
    "Vc4Display_cpp712", \
    L"{", \
    L"__FILE__, ItemString -- 10" , \
    L"__LINE__, ItemLong -- 11" , \
    L"}")
#endif // WPP_PUBLIC_ANNOT_Vc4Display_cpp712

#ifdef WPP_USER_MSG_GUID
# define WPP_ANNOTATE_Vc4Display_cpp732_FINAL(P, File, Name, ...) __annotation( \
    L ## P, \
    WPP_GUID_WTEXT WPP_USER_MSG_GUID L"roskmd // SRC=" _WPPW(File) \
    L" MJ= MN=", \
    L"#typev " _WPPW(Name) \
    L" 43 \"%0 [%10!s! @ %11!u!] ERROR :Received StatusRotation query even though D3DKMDT_MOA_NONE was reported.\" //   LEVEL=TRACE_LEVEL_ERROR FLAGS=ROS_TRACING_DEFAULT" \
    WPP_FUNC_NAME, \
    __VA_ARGS__)
#else // WPP_USER_MSG_GUID
# define WPP_ANNOTATE_Vc4Display_cpp732_FINAL(P, File, Name, ...) __annotation( \
    L ## P, \
    L"c0ccd90e-305c-3e36-4951-54eca8ed5fb9 roskmd // SRC=" _WPPW(File) \
    L" MJ= MN=", \
    L"#typev " _WPPW(Name) \
    L" 43 \"%0 [%10!s! @ %11!u!] ERROR :Received StatusRotation query even though D3DKMDT_MOA_NONE was reported.\" //   LEVEL=TRACE_LEVEL_ERROR FLAGS=ROS_TRACING_DEFAULT" \
    WPP_FUNC_NAME, \
    __VA_ARGS__)
#endif // WPP_USER_MSG_GUID

#ifdef WPP_PUBLIC_ANNOT_Vc4Display_cpp732
# define WPP_ANNOTATE_Vc4Display_cpp732 WPP_ANNOTATE_Vc4Display_cpp732_FINAL( \
    "TMF:", \
    "Unknown_cxx00", \
    "Unknown_cxx00", \
    L"{", \
    L"Arg, ItemString -- 10" , \
    L"Arg, ItemLong -- 11" , \
    L"}", \
    L"PUBLIC_TMF:")
# ifndef WPP_PUBLIC_TMC
#  define WPP_PUBLIC_TMC // Adds "PUBLIC_TMF:" to the control guid annotation
# endif
#else // WPP_PUBLIC_ANNOT_Vc4Display_cpp732
# define WPP_ANNOTATE_Vc4Display_cpp732 WPP_ANNOTATE_Vc4Display_cpp732_FINAL( \
    "TMF:", \
    "Vc4Display.cpp", \
    "Vc4Display_cpp732", \
    L"{", \
    L"__FILE__, ItemString -- 10" , \
    L"__LINE__, ItemLong -- 11" , \
    L"}")
#endif // WPP_PUBLIC_ANNOT_Vc4Display_cpp732

#ifdef WPP_USER_MSG_GUID
# define WPP_ANNOTATE_Vc4Display_cpp735_FINAL(P, File, Name, ...) __annotation( \
    L ## P, \
    WPP_GUID_WTEXT WPP_USER_MSG_GUID L"roskmd // SRC=" _WPPW(File) \
    L" MJ= MN=", \
    L"#typev " _WPPW(Name) \
    L" 44 \"%0 [%10!s! @ %11!u!] ERROR :Miracast is not supported.\" //   LEVEL=TRACE_LEVEL_ERROR FLAGS=ROS_TRACING_DEFAULT" \
    WPP_FUNC_NAME, \
    __VA_ARGS__)
#else // WPP_USER_MSG_GUID
# define WPP_ANNOTATE_Vc4Display_cpp735_FINAL(P, File, Name, ...) __annotation( \
    L ## P, \
    L"c0ccd90e-305c-3e36-4951-54eca8ed5fb9 roskmd // SRC=" _WPPW(File) \
    L" MJ= MN=", \
    L"#typev " _WPPW(Name) \
    L" 44 \"%0 [%10!s! @ %11!u!] ERROR :Miracast is not supported.\" //   LEVEL=TRACE_LEVEL_ERROR FLAGS=ROS_TRACING_DEFAULT" \
    WPP_FUNC_NAME, \
    __VA_ARGS__)
#endif // WPP_USER_MSG_GUID

#ifdef WPP_PUBLIC_ANNOT_Vc4Display_cpp735
# define WPP_ANNOTATE_Vc4Display_cpp735 WPP_ANNOTATE_Vc4Display_cpp735_FINAL( \
    "TMF:", \
    "Unknown_cxx00", \
    "Unknown_cxx00", \
    L"{", \
    L"Arg, ItemString -- 10" , \
    L"Arg, ItemLong -- 11" , \
    L"}", \
    L"PUBLIC_TMF:")
# ifndef WPP_PUBLIC_TMC
#  define WPP_PUBLIC_TMC // Adds "PUBLIC_TMF:" to the control guid annotation
# endif
#else // WPP_PUBLIC_ANNOT_Vc4Display_cpp735
# define WPP_ANNOTATE_Vc4Display_cpp735 WPP_ANNOTATE_Vc4Display_cpp735_FINAL( \
    "TMF:", \
    "Vc4Display.cpp", \
    "Vc4Display_cpp735", \
    L"{", \
    L"__FILE__, ItemString -- 10" , \
    L"__LINE__, ItemLong -- 11" , \
    L"}")
#endif // WPP_PUBLIC_ANNOT_Vc4Display_cpp735

#ifdef WPP_USER_MSG_GUID
# define WPP_ANNOTATE_Vc4Display_cpp739_FINAL(P, File, Name, ...) __annotation( \
    L ## P, \
    WPP_GUID_WTEXT WPP_USER_MSG_GUID L"roskmd // SRC=" _WPPW(File) \
    L" MJ= MN=", \
    L"#typev " _WPPW(Name) \
    L" 45 \"%0 [%10!s! @ %11!u!] ERROR :Received invalid Type value in DdiQueryChildStatus. (ChildStatusPtr->Type = %12!d!)\" //   LEVEL=TRACE_LEVEL_ERROR FLAGS=ROS_TRACING_DEFAULT" \
    WPP_FUNC_NAME, \
    __VA_ARGS__)
#else // WPP_USER_MSG_GUID
# define WPP_ANNOTATE_Vc4Display_cpp739_FINAL(P, File, Name, ...) __annotation( \
    L ## P, \
    L"c0ccd90e-305c-3e36-4951-54eca8ed5fb9 roskmd // SRC=" _WPPW(File) \
    L" MJ= MN=", \
    L"#typev " _WPPW(Name) \
    L" 45 \"%0 [%10!s! @ %11!u!] ERROR :Received invalid Type value in DdiQueryChildStatus. (ChildStatusPtr->Type = %12!d!)\" //   LEVEL=TRACE_LEVEL_ERROR FLAGS=ROS_TRACING_DEFAULT" \
    WPP_FUNC_NAME, \
    __VA_ARGS__)
#endif // WPP_USER_MSG_GUID

#ifdef WPP_PUBLIC_ANNOT_Vc4Display_cpp739
# define WPP_ANNOTATE_Vc4Display_cpp739 WPP_ANNOTATE_Vc4Display_cpp739_FINAL( \
    "TMF:", \
    "Unknown_cxx00", \
    "Unknown_cxx00", \
    L"{", \
    L"Arg, ItemString -- 10" , \
    L"Arg, ItemLong -- 11" , \
    L"Arg, ItemLong -- 12" , \
    L"}", \
    L"PUBLIC_TMF:")
# ifndef WPP_PUBLIC_TMC
#  define WPP_PUBLIC_TMC // Adds "PUBLIC_TMF:" to the control guid annotation
# endif
#else // WPP_PUBLIC_ANNOT_Vc4Display_cpp739
# define WPP_ANNOTATE_Vc4Display_cpp739 WPP_ANNOTATE_Vc4Display_cpp739_FINAL( \
    "TMF:", \
    "Vc4Display.cpp", \
    "Vc4Display_cpp739", \
    L"{", \
    L"__FILE__, ItemString -- 10" , \
    L"__LINE__, ItemLong -- 11" , \
    L"ChildStatusPtr->Type, ItemLong -- 12" , \
    L"}")
#endif // WPP_PUBLIC_ANNOT_Vc4Display_cpp739

#ifdef WPP_USER_MSG_GUID
# define WPP_ANNOTATE_Vc4Display_cpp745_FINAL(P, File, Name, ...) __annotation( \
    L ## P, \
    WPP_GUID_WTEXT WPP_USER_MSG_GUID L"roskmd // SRC=" _WPPW(File) \
    L" MJ= MN=", \
    L"#typev " _WPPW(Name) \
    L" 46 \"%0 [%10!s! @ %11!u!] TRACE :Child status reported successfully. (NonDestructiveOnly = %12!d!)\" //   LEVEL=TRACE_LEVEL_VERBOSE FLAGS=ROS_TRACING_DEFAULT" \
    WPP_FUNC_NAME, \
    __VA_ARGS__)
#else // WPP_USER_MSG_GUID
# define WPP_ANNOTATE_Vc4Display_cpp745_FINAL(P, File, Name, ...) __annotation( \
    L ## P, \
    L"c0ccd90e-305c-3e36-4951-54eca8ed5fb9 roskmd // SRC=" _WPPW(File) \
    L" MJ= MN=", \
    L"#typev " _WPPW(Name) \
    L" 46 \"%0 [%10!s! @ %11!u!] TRACE :Child status reported successfully. (NonDestructiveOnly = %12!d!)\" //   LEVEL=TRACE_LEVEL_VERBOSE FLAGS=ROS_TRACING_DEFAULT" \
    WPP_FUNC_NAME, \
    __VA_ARGS__)
#endif // WPP_USER_MSG_GUID

#ifdef WPP_PUBLIC_ANNOT_Vc4Display_cpp745
# define WPP_ANNOTATE_Vc4Display_cpp745 WPP_ANNOTATE_Vc4Display_cpp745_FINAL( \
    "TMF:", \
    "Unknown_cxx00", \
    "Unknown_cxx00", \
    L"{", \
    L"Arg, ItemString -- 10" , \
    L"Arg, ItemLong -- 11" , \
    L"Arg, ItemLong -- 12" , \
    L"}", \
    L"PUBLIC_TMF:")
# ifndef WPP_PUBLIC_TMC
#  define WPP_PUBLIC_TMC // Adds "PUBLIC_TMF:" to the control guid annotation
# endif
#else // WPP_PUBLIC_ANNOT_Vc4Display_cpp745
# define WPP_ANNOTATE_Vc4Display_cpp745 WPP_ANNOTATE_Vc4Display_cpp745_FINAL( \
    "TMF:", \
    "Vc4Display.cpp", \
    "Vc4Display_cpp745", \
    L"{", \
    L"__FILE__, ItemString -- 10" , \
    L"__LINE__, ItemLong -- 11" , \
    L"NonDestructiveOnly, ItemLong -- 12" , \
    L"}")
#endif // WPP_PUBLIC_ANNOT_Vc4Display_cpp745

#ifdef WPP_USER_MSG_GUID
# define WPP_ANNOTATE_Vc4Display_cpp781_FINAL(P, File, Name, ...) __annotation( \
    L ## P, \
    WPP_GUID_WTEXT WPP_USER_MSG_GUID L"roskmd // SRC=" _WPPW(File) \
    L" MJ= MN=", \
    L"#typev " _WPPW(Name) \
    L" 47 \"%0 [%10!s! @ %11!u!] ASSERTION :Invalid DeviceUid. (DeviceUid = %12!d!)\" //   LEVEL=TRACE_LEVEL_ERROR FLAGS=ROS_TRACING_DEBUG" \
    WPP_FUNC_NAME, \
    __VA_ARGS__)
#else // WPP_USER_MSG_GUID
# define WPP_ANNOTATE_Vc4Display_cpp781_FINAL(P, File, Name, ...) __annotation( \
    L ## P, \
    L"c0ccd90e-305c-3e36-4951-54eca8ed5fb9 roskmd // SRC=" _WPPW(File) \
    L" MJ= MN=", \
    L"#typev " _WPPW(Name) \
    L" 47 \"%0 [%10!s! @ %11!u!] ASSERTION :Invalid DeviceUid. (DeviceUid = %12!d!)\" //   LEVEL=TRACE_LEVEL_ERROR FLAGS=ROS_TRACING_DEBUG" \
    WPP_FUNC_NAME, \
    __VA_ARGS__)
#endif // WPP_USER_MSG_GUID

#ifdef WPP_PUBLIC_ANNOT_Vc4Display_cpp781
# define WPP_ANNOTATE_Vc4Display_cpp781 WPP_ANNOTATE_Vc4Display_cpp781_FINAL( \
    "TMF:", \
    "Unknown_cxx00", \
    "Unknown_cxx00", \
    L"{", \
    L"Arg, ItemString -- 10" , \
    L"Arg, ItemLong -- 11" , \
    L"Arg, ItemLong -- 12" , \
    L"}", \
    L"PUBLIC_TMF:")
# ifndef WPP_PUBLIC_TMC
#  define WPP_PUBLIC_TMC // Adds "PUBLIC_TMF:" to the control guid annotation
# endif
#else // WPP_PUBLIC_ANNOT_Vc4Display_cpp781
# define WPP_ANNOTATE_Vc4Display_cpp781 WPP_ANNOTATE_Vc4Display_cpp781_FINAL( \
    "TMF:", \
    "Vc4Display.cpp", \
    "Vc4Display_cpp781", \
    L"{", \
    L"__FILE__, ItemString -- 10" , \
    L"__LINE__, ItemLong -- 11" , \
    L"DeviceUid, ItemLong -- 12" , \
    L"}")
#endif // WPP_PUBLIC_ANNOT_Vc4Display_cpp781

#ifdef WPP_USER_MSG_GUID
# define WPP_ANNOTATE_Vc4Display_cpp785_FINAL(P, File, Name, ...) __annotation( \
    L ## P, \
    WPP_GUID_WTEXT WPP_USER_MSG_GUID L"roskmd // SRC=" _WPPW(File) \
    L" MJ= MN=", \
    L"#typev " _WPPW(Name) \
    L" 48 \"%0 [%10!s! @ %11!u!] TRACE :Successfully set power state. (DeviceUid = %12!d!, DevicePowerState = %13!d!, ActionType = %14!d!)\" //   LEVEL=TRACE_LEVEL_VERBOSE FLAGS=ROS_TRACING_DEFAULT" \
    WPP_FUNC_NAME, \
    __VA_ARGS__)
#else // WPP_USER_MSG_GUID
# define WPP_ANNOTATE_Vc4Display_cpp785_FINAL(P, File, Name, ...) __annotation( \
    L ## P, \
    L"c0ccd90e-305c-3e36-4951-54eca8ed5fb9 roskmd // SRC=" _WPPW(File) \
    L" MJ= MN=", \
    L"#typev " _WPPW(Name) \
    L" 48 \"%0 [%10!s! @ %11!u!] TRACE :Successfully set power state. (DeviceUid = %12!d!, DevicePowerState = %13!d!, ActionType = %14!d!)\" //   LEVEL=TRACE_LEVEL_VERBOSE FLAGS=ROS_TRACING_DEFAULT" \
    WPP_FUNC_NAME, \
    __VA_ARGS__)
#endif // WPP_USER_MSG_GUID

#ifdef WPP_PUBLIC_ANNOT_Vc4Display_cpp785
# define WPP_ANNOTATE_Vc4Display_cpp785 WPP_ANNOTATE_Vc4Display_cpp785_FINAL( \
    "TMF:", \
    "Unknown_cxx00", \
    "Unknown_cxx00", \
    L"{", \
    L"Arg, ItemString -- 10" , \
    L"Arg, ItemLong -- 11" , \
    L"Arg, ItemLong -- 12" , \
    L"Arg, ItemLong -- 13" , \
    L"Arg, ItemLong -- 14" , \
    L"}", \
    L"PUBLIC_TMF:")
# ifndef WPP_PUBLIC_TMC
#  define WPP_PUBLIC_TMC // Adds "PUBLIC_TMF:" to the control guid annotation
# endif
#else // WPP_PUBLIC_ANNOT_Vc4Display_cpp785
# define WPP_ANNOTATE_Vc4Display_cpp785 WPP_ANNOTATE_Vc4Display_cpp785_FINAL( \
    "TMF:", \
    "Vc4Display.cpp", \
    "Vc4Display_cpp785", \
    L"{", \
    L"__FILE__, ItemString -- 10" , \
    L"__LINE__, ItemLong -- 11" , \
    L"DeviceUid, ItemLong -- 12" , \
    L"DevicePowerState, ItemLong -- 13" , \
    L"ActionType, ItemLong -- 14" , \
    L"}")
#endif // WPP_PUBLIC_ANNOT_Vc4Display_cpp785

#ifdef WPP_USER_MSG_GUID
# define WPP_ANNOTATE_Vc4Display_cpp809_FINAL(P, File, Name, ...) __annotation( \
    L ## P, \
    WPP_GUID_WTEXT WPP_USER_MSG_GUID L"roskmd // SRC=" _WPPW(File) \
    L" MJ= MN=", \
    L"#typev " _WPPW(Name) \
    L" 49 \"%0 [%10!s! @ %11!u!] TRACE :Received request to set pointer visibility to OFF.\" //   LEVEL=TRACE_LEVEL_VERBOSE FLAGS=ROS_TRACING_DEFAULT" \
    WPP_FUNC_NAME, \
    __VA_ARGS__)
#else // WPP_USER_MSG_GUID
# define WPP_ANNOTATE_Vc4Display_cpp809_FINAL(P, File, Name, ...) __annotation( \
    L ## P, \
    L"c0ccd90e-305c-3e36-4951-54eca8ed5fb9 roskmd // SRC=" _WPPW(File) \
    L" MJ= MN=", \
    L"#typev " _WPPW(Name) \
    L" 49 \"%0 [%10!s! @ %11!u!] TRACE :Received request to set pointer visibility to OFF.\" //   LEVEL=TRACE_LEVEL_VERBOSE FLAGS=ROS_TRACING_DEFAULT" \
    WPP_FUNC_NAME, \
    __VA_ARGS__)
#endif // WPP_USER_MSG_GUID

#ifdef WPP_PUBLIC_ANNOT_Vc4Display_cpp809
# define WPP_ANNOTATE_Vc4Display_cpp809 WPP_ANNOTATE_Vc4Display_cpp809_FINAL( \
    "TMF:", \
    "Unknown_cxx00", \
    "Unknown_cxx00", \
    L"{", \
    L"Arg, ItemString -- 10" , \
    L"Arg, ItemLong -- 11" , \
    L"}", \
    L"PUBLIC_TMF:")
# ifndef WPP_PUBLIC_TMC
#  define WPP_PUBLIC_TMC // Adds "PUBLIC_TMF:" to the control guid annotation
# endif
#else // WPP_PUBLIC_ANNOT_Vc4Display_cpp809
# define WPP_ANNOTATE_Vc4Display_cpp809 WPP_ANNOTATE_Vc4Display_cpp809_FINAL( \
    "TMF:", \
    "Vc4Display.cpp", \
    "Vc4Display_cpp809", \
    L"{", \
    L"__FILE__, ItemString -- 10" , \
    L"__LINE__, ItemLong -- 11" , \
    L"}")
#endif // WPP_PUBLIC_ANNOT_Vc4Display_cpp809

#ifdef WPP_USER_MSG_GUID
# define WPP_ANNOTATE_Vc4Display_cpp812_FINAL(P, File, Name, ...) __annotation( \
    L ## P, \
    WPP_GUID_WTEXT WPP_USER_MSG_GUID L"roskmd // SRC=" _WPPW(File) \
    L" MJ= MN=", \
    L"#typev " _WPPW(Name) \
    L" 50 \"%0 [%10!s! @ %11!u!] ASSERTION :SetPointerPosition should never be called to set the pointer to visible since VC4 doesn't support hardware cursors.\" //   LEVEL=TRACE_LEVEL_ERROR FLAGS=ROS_TRACING_DEBUG" \
    WPP_FUNC_NAME, \
    __VA_ARGS__)
#else // WPP_USER_MSG_GUID
# define WPP_ANNOTATE_Vc4Display_cpp812_FINAL(P, File, Name, ...) __annotation( \
    L ## P, \
    L"c0ccd90e-305c-3e36-4951-54eca8ed5fb9 roskmd // SRC=" _WPPW(File) \
    L" MJ= MN=", \
    L"#typev " _WPPW(Name) \
    L" 50 \"%0 [%10!s! @ %11!u!] ASSERTION :SetPointerPosition should never be called to set the pointer to visible since VC4 doesn't support hardware cursors.\" //   LEVEL=TRACE_LEVEL_ERROR FLAGS=ROS_TRACING_DEBUG" \
    WPP_FUNC_NAME, \
    __VA_ARGS__)
#endif // WPP_USER_MSG_GUID

#ifdef WPP_PUBLIC_ANNOT_Vc4Display_cpp812
# define WPP_ANNOTATE_Vc4Display_cpp812 WPP_ANNOTATE_Vc4Display_cpp812_FINAL( \
    "TMF:", \
    "Unknown_cxx00", \
    "Unknown_cxx00", \
    L"{", \
    L"Arg, ItemString -- 10" , \
    L"Arg, ItemLong -- 11" , \
    L"}", \
    L"PUBLIC_TMF:")
# ifndef WPP_PUBLIC_TMC
#  define WPP_PUBLIC_TMC // Adds "PUBLIC_TMF:" to the control guid annotation
# endif
#else // WPP_PUBLIC_ANNOT_Vc4Display_cpp812
# define WPP_ANNOTATE_Vc4Display_cpp812 WPP_ANNOTATE_Vc4Display_cpp812_FINAL( \
    "TMF:", \
    "Vc4Display.cpp", \
    "Vc4Display_cpp812", \
    L"{", \
    L"__FILE__, ItemString -- 10" , \
    L"__LINE__, ItemLong -- 11" , \
    L"}")
#endif // WPP_PUBLIC_ANNOT_Vc4Display_cpp812

#ifdef WPP_USER_MSG_GUID
# define WPP_ANNOTATE_Vc4Display_cpp828_FINAL(P, File, Name, ...) __annotation( \
    L ## P, \
    WPP_GUID_WTEXT WPP_USER_MSG_GUID L"roskmd // SRC=" _WPPW(File) \
    L" MJ= MN=", \
    L"#typev " _WPPW(Name) \
    L" 51 \"%0 [%10!s! @ %11!u!] ASSERTION :SetPointerShape should never be called since VC4 doesn't support hardware cursors.\" //   LEVEL=TRACE_LEVEL_ERROR FLAGS=ROS_TRACING_DEBUG" \
    WPP_FUNC_NAME, \
    __VA_ARGS__)
#else // WPP_USER_MSG_GUID
# define WPP_ANNOTATE_Vc4Display_cpp828_FINAL(P, File, Name, ...) __annotation( \
    L ## P, \
    L"c0ccd90e-305c-3e36-4951-54eca8ed5fb9 roskmd // SRC=" _WPPW(File) \
    L" MJ= MN=", \
    L"#typev " _WPPW(Name) \
    L" 51 \"%0 [%10!s! @ %11!u!] ASSERTION :SetPointerShape should never be called since VC4 doesn't support hardware cursors.\" //   LEVEL=TRACE_LEVEL_ERROR FLAGS=ROS_TRACING_DEBUG" \
    WPP_FUNC_NAME, \
    __VA_ARGS__)
#endif // WPP_USER_MSG_GUID

#ifdef WPP_PUBLIC_ANNOT_Vc4Display_cpp828
# define WPP_ANNOTATE_Vc4Display_cpp828 WPP_ANNOTATE_Vc4Display_cpp828_FINAL( \
    "TMF:", \
    "Unknown_cxx00", \
    "Unknown_cxx00", \
    L"{", \
    L"Arg, ItemString -- 10" , \
    L"Arg, ItemLong -- 11" , \
    L"}", \
    L"PUBLIC_TMF:")
# ifndef WPP_PUBLIC_TMC
#  define WPP_PUBLIC_TMC // Adds "PUBLIC_TMF:" to the control guid annotation
# endif
#else // WPP_PUBLIC_ANNOT_Vc4Display_cpp828
# define WPP_ANNOTATE_Vc4Display_cpp828 WPP_ANNOTATE_Vc4Display_cpp828_FINAL( \
    "TMF:", \
    "Vc4Display.cpp", \
    "Vc4Display_cpp828", \
    L"{", \
    L"__FILE__, ItemString -- 10" , \
    L"__LINE__, ItemLong -- 11" , \
    L"}")
#endif // WPP_PUBLIC_ANNOT_Vc4Display_cpp828

#ifdef WPP_USER_MSG_GUID
# define WPP_ANNOTATE_Vc4Display_cpp844_FINAL(P, File, Name, ...) __annotation( \
    L ## P, \
    WPP_GUID_WTEXT WPP_USER_MSG_GUID L"roskmd // SRC=" _WPPW(File) \
    L" MJ= MN=", \
    L"#typev " _WPPW(Name) \
    L" 52 \"%0 [%10!s! @ %11!u!] TRACE :Returning IsVidPnSupported=TRUE for hDesiredVidPn=0.\" //   LEVEL=TRACE_LEVEL_VERBOSE FLAGS=ROS_TRACING_VIDPN" \
    WPP_FUNC_NAME, \
    __VA_ARGS__)
#else // WPP_USER_MSG_GUID
# define WPP_ANNOTATE_Vc4Display_cpp844_FINAL(P, File, Name, ...) __annotation( \
    L ## P, \
    L"c0ccd90e-305c-3e36-4951-54eca8ed5fb9 roskmd // SRC=" _WPPW(File) \
    L" MJ= MN=", \
    L"#typev " _WPPW(Name) \
    L" 52 \"%0 [%10!s! @ %11!u!] TRACE :Returning IsVidPnSupported=TRUE for hDesiredVidPn=0.\" //   LEVEL=TRACE_LEVEL_VERBOSE FLAGS=ROS_TRACING_VIDPN" \
    WPP_FUNC_NAME, \
    __VA_ARGS__)
#endif // WPP_USER_MSG_GUID

#ifdef WPP_PUBLIC_ANNOT_Vc4Display_cpp844
# define WPP_ANNOTATE_Vc4Display_cpp844 WPP_ANNOTATE_Vc4Display_cpp844_FINAL( \
    "TMF:", \
    "Unknown_cxx00", \
    "Unknown_cxx00", \
    L"{", \
    L"Arg, ItemString -- 10" , \
    L"Arg, ItemLong -- 11" , \
    L"}", \
    L"PUBLIC_TMF:")
# ifndef WPP_PUBLIC_TMC
#  define WPP_PUBLIC_TMC // Adds "PUBLIC_TMF:" to the control guid annotation
# endif
#else // WPP_PUBLIC_ANNOT_Vc4Display_cpp844
# define WPP_ANNOTATE_Vc4Display_cpp844 WPP_ANNOTATE_Vc4Display_cpp844_FINAL( \
    "TMF:", \
    "Vc4Display.cpp", \
    "Vc4Display_cpp844", \
    L"{", \
    L"__FILE__, ItemString -- 10" , \
    L"__LINE__, ItemLong -- 11" , \
    L"}")
#endif // WPP_PUBLIC_ANNOT_Vc4Display_cpp844

#ifdef WPP_USER_MSG_GUID
# define WPP_ANNOTATE_Vc4Display_cpp858_FINAL(P, File, Name, ...) __annotation( \
    L ## P, \
    WPP_GUID_WTEXT WPP_USER_MSG_GUID L"roskmd // SRC=" _WPPW(File) \
    L" MJ= MN=", \
    L"#typev " _WPPW(Name) \
    L" 53 \"%0 [%10!s! @ %11!u!] TRACE :DxgkCbQueryVidPnInterface() failed. (status = %12!s!, IsSupportedVidPnPtr->hDesiredVidPn = %13!p!, this = %14!p!)\" //   LEVEL=TRACE_LEVEL_ERROR FLAGS=ROS_TRACING_VIDPN" \
    WPP_FUNC_NAME, \
    __VA_ARGS__)
#else // WPP_USER_MSG_GUID
# define WPP_ANNOTATE_Vc4Display_cpp858_FINAL(P, File, Name, ...) __annotation( \
    L ## P, \
    L"c0ccd90e-305c-3e36-4951-54eca8ed5fb9 roskmd // SRC=" _WPPW(File) \
    L" MJ= MN=", \
    L"#typev " _WPPW(Name) \
    L" 53 \"%0 [%10!s! @ %11!u!] TRACE :DxgkCbQueryVidPnInterface() failed. (status = %12!s!, IsSupportedVidPnPtr->hDesiredVidPn = %13!p!, this = %14!p!)\" //   LEVEL=TRACE_LEVEL_ERROR FLAGS=ROS_TRACING_VIDPN" \
    WPP_FUNC_NAME, \
    __VA_ARGS__)
#endif // WPP_USER_MSG_GUID

#ifdef WPP_PUBLIC_ANNOT_Vc4Display_cpp858
# define WPP_ANNOTATE_Vc4Display_cpp858 WPP_ANNOTATE_Vc4Display_cpp858_FINAL( \
    "TMF:", \
    "Unknown_cxx00", \
    "Unknown_cxx00", \
    L"{", \
    L"Arg, ItemString -- 10" , \
    L"Arg, ItemLong -- 11" , \
    L"Arg, ItemNTSTATUS -- 12" , \
    L"Arg, ItemPtr -- 13" , \
    L"Arg, ItemPtr -- 14" , \
    L"}", \
    L"PUBLIC_TMF:")
# ifndef WPP_PUBLIC_TMC
#  define WPP_PUBLIC_TMC // Adds "PUBLIC_TMF:" to the control guid annotation
# endif
#else // WPP_PUBLIC_ANNOT_Vc4Display_cpp858
# define WPP_ANNOTATE_Vc4Display_cpp858 WPP_ANNOTATE_Vc4Display_cpp858_FINAL( \
    "TMF:", \
    "Vc4Display.cpp", \
    "Vc4Display_cpp858", \
    L"{", \
    L"__FILE__, ItemString -- 10" , \
    L"__LINE__, ItemLong -- 11" , \
    L"status, ItemNTSTATUS -- 12" , \
    L"IsSupportedVidPnPtr->hDesiredVidPn, ItemPtr -- 13" , \
    L"this, ItemPtr -- 14" , \
    L"}")
#endif // WPP_PUBLIC_ANNOT_Vc4Display_cpp858

#ifdef WPP_USER_MSG_GUID
# define WPP_ANNOTATE_Vc4Display_cpp875_FINAL(P, File, Name, ...) __annotation( \
    L ## P, \
    WPP_GUID_WTEXT WPP_USER_MSG_GUID L"roskmd // SRC=" _WPPW(File) \
    L" MJ= MN=", \
    L"#typev " _WPPW(Name) \
    L" 54 \"%0 [%10!s! @ %11!u!] TRACE :pfnGetTopology() failed. (status = %12!s!, IsSupportedVidPnPtr->hDesiredVidPn = %13!p!, vidPnInterfacePtr = %14!p!)\" //   LEVEL=TRACE_LEVEL_ERROR FLAGS=ROS_TRACING_VIDPN" \
    WPP_FUNC_NAME, \
    __VA_ARGS__)
#else // WPP_USER_MSG_GUID
# define WPP_ANNOTATE_Vc4Display_cpp875_FINAL(P, File, Name, ...) __annotation( \
    L ## P, \
    L"c0ccd90e-305c-3e36-4951-54eca8ed5fb9 roskmd // SRC=" _WPPW(File) \
    L" MJ= MN=", \
    L"#typev " _WPPW(Name) \
    L" 54 \"%0 [%10!s! @ %11!u!] TRACE :pfnGetTopology() failed. (status = %12!s!, IsSupportedVidPnPtr->hDesiredVidPn = %13!p!, vidPnInterfacePtr = %14!p!)\" //   LEVEL=TRACE_LEVEL_ERROR FLAGS=ROS_TRACING_VIDPN" \
    WPP_FUNC_NAME, \
    __VA_ARGS__)
#endif // WPP_USER_MSG_GUID

#ifdef WPP_PUBLIC_ANNOT_Vc4Display_cpp875
# define WPP_ANNOTATE_Vc4Display_cpp875 WPP_ANNOTATE_Vc4Display_cpp875_FINAL( \
    "TMF:", \
    "Unknown_cxx00", \
    "Unknown_cxx00", \
    L"{", \
    L"Arg, ItemString -- 10" , \
    L"Arg, ItemLong -- 11" , \
    L"Arg, ItemNTSTATUS -- 12" , \
    L"Arg, ItemPtr -- 13" , \
    L"Arg, ItemPtr -- 14" , \
    L"}", \
    L"PUBLIC_TMF:")
# ifndef WPP_PUBLIC_TMC
#  define WPP_PUBLIC_TMC // Adds "PUBLIC_TMF:" to the control guid annotation
# endif
#else // WPP_PUBLIC_ANNOT_Vc4Display_cpp875
# define WPP_ANNOTATE_Vc4Display_cpp875 WPP_ANNOTATE_Vc4Display_cpp875_FINAL( \
    "TMF:", \
    "Vc4Display.cpp", \
    "Vc4Display_cpp875", \
    L"{", \
    L"__FILE__, ItemString -- 10" , \
    L"__LINE__, ItemLong -- 11" , \
    L"status, ItemNTSTATUS -- 12" , \
    L"IsSupportedVidPnPtr->hDesiredVidPn, ItemPtr -- 13" , \
    L"vidPnInterfacePtr, ItemPtr -- 14" , \
    L"}")
#endif // WPP_PUBLIC_ANNOT_Vc4Display_cpp875

#ifdef WPP_USER_MSG_GUID
# define WPP_ANNOTATE_Vc4Display_cpp891_FINAL(P, File, Name, ...) __annotation( \
    L ## P, \
    WPP_GUID_WTEXT WPP_USER_MSG_GUID L"roskmd // SRC=" _WPPW(File) \
    L" MJ= MN=", \
    L"#typev " _WPPW(Name) \
    L" 55 \"%0 [%10!s! @ %11!u!] TRACE :Failed to get number of paths in topology. (status = %12!s!, vidPnTopologyHandle = %13!p!)\" //   LEVEL=TRACE_LEVEL_ERROR FLAGS=ROS_TRACING_VIDPN" \
    WPP_FUNC_NAME, \
    __VA_ARGS__)
#else // WPP_USER_MSG_GUID
# define WPP_ANNOTATE_Vc4Display_cpp891_FINAL(P, File, Name, ...) __annotation( \
    L ## P, \
    L"c0ccd90e-305c-3e36-4951-54eca8ed5fb9 roskmd // SRC=" _WPPW(File) \
    L" MJ= MN=", \
    L"#typev " _WPPW(Name) \
    L" 55 \"%0 [%10!s! @ %11!u!] TRACE :Failed to get number of paths in topology. (status = %12!s!, vidPnTopologyHandle = %13!p!)\" //   LEVEL=TRACE_LEVEL_ERROR FLAGS=ROS_TRACING_VIDPN" \
    WPP_FUNC_NAME, \
    __VA_ARGS__)
#endif // WPP_USER_MSG_GUID

#ifdef WPP_PUBLIC_ANNOT_Vc4Display_cpp891
# define WPP_ANNOTATE_Vc4Display_cpp891 WPP_ANNOTATE_Vc4Display_cpp891_FINAL( \
    "TMF:", \
    "Unknown_cxx00", \
    "Unknown_cxx00", \
    L"{", \
    L"Arg, ItemString -- 10" , \
    L"Arg, ItemLong -- 11" , \
    L"Arg, ItemNTSTATUS -- 12" , \
    L"Arg, ItemPtr -- 13" , \
    L"}", \
    L"PUBLIC_TMF:")
# ifndef WPP_PUBLIC_TMC
#  define WPP_PUBLIC_TMC // Adds "PUBLIC_TMF:" to the control guid annotation
# endif
#else // WPP_PUBLIC_ANNOT_Vc4Display_cpp891
# define WPP_ANNOTATE_Vc4Display_cpp891 WPP_ANNOTATE_Vc4Display_cpp891_FINAL( \
    "TMF:", \
    "Vc4Display.cpp", \
    "Vc4Display_cpp891", \
    L"{", \
    L"__FILE__, ItemString -- 10" , \
    L"__LINE__, ItemLong -- 11" , \
    L"status, ItemNTSTATUS -- 12" , \
    L"vidPnTopologyHandle, ItemPtr -- 13" , \
    L"}")
#endif // WPP_PUBLIC_ANNOT_Vc4Display_cpp891

#ifdef WPP_USER_MSG_GUID
# define WPP_ANNOTATE_Vc4Display_cpp901_FINAL(P, File, Name, ...) __annotation( \
    L ## P, \
    WPP_GUID_WTEXT WPP_USER_MSG_GUID L"roskmd // SRC=" _WPPW(File) \
    L" MJ= MN=", \
    L"#typev " _WPPW(Name) \
    L" 56 \"%0 [%10!s! @ %11!u!] TRACE :Returning 'not supported' for a topology that does not contain exactly 1 path. (numPaths = %12!Id!, vidPnTopologyHandle = %13!p!)\" //   LEVEL=TRACE_LEVEL_ERROR FLAGS=ROS_TRACING_VIDPN" \
    WPP_FUNC_NAME, \
    __VA_ARGS__)
#else // WPP_USER_MSG_GUID
# define WPP_ANNOTATE_Vc4Display_cpp901_FINAL(P, File, Name, ...) __annotation( \
    L ## P, \
    L"c0ccd90e-305c-3e36-4951-54eca8ed5fb9 roskmd // SRC=" _WPPW(File) \
    L" MJ= MN=", \
    L"#typev " _WPPW(Name) \
    L" 56 \"%0 [%10!s! @ %11!u!] TRACE :Returning 'not supported' for a topology that does not contain exactly 1 path. (numPaths = %12!Id!, vidPnTopologyHandle = %13!p!)\" //   LEVEL=TRACE_LEVEL_ERROR FLAGS=ROS_TRACING_VIDPN" \
    WPP_FUNC_NAME, \
    __VA_ARGS__)
#endif // WPP_USER_MSG_GUID

#ifdef WPP_PUBLIC_ANNOT_Vc4Display_cpp901
# define WPP_ANNOTATE_Vc4Display_cpp901 WPP_ANNOTATE_Vc4Display_cpp901_FINAL( \
    "TMF:", \
    "Unknown_cxx00", \
    "Unknown_cxx00", \
    L"{", \
    L"Arg, ItemString -- 10" , \
    L"Arg, ItemLong -- 11" , \
    L"Arg, ItemPtr -- 12" , \
    L"Arg, ItemPtr -- 13" , \
    L"}", \
    L"PUBLIC_TMF:")
# ifndef WPP_PUBLIC_TMC
#  define WPP_PUBLIC_TMC // Adds "PUBLIC_TMF:" to the control guid annotation
# endif
#else // WPP_PUBLIC_ANNOT_Vc4Display_cpp901
# define WPP_ANNOTATE_Vc4Display_cpp901 WPP_ANNOTATE_Vc4Display_cpp901_FINAL( \
    "TMF:", \
    "Vc4Display.cpp", \
    "Vc4Display_cpp901", \
    L"{", \
    L"__FILE__, ItemString -- 10" , \
    L"__LINE__, ItemLong -- 11" , \
    L"numPaths, ItemPtr -- 12" , \
    L"vidPnTopologyHandle, ItemPtr -- 13" , \
    L"}")
#endif // WPP_PUBLIC_ANNOT_Vc4Display_cpp901

#ifdef WPP_USER_MSG_GUID
# define WPP_ANNOTATE_Vc4Display_cpp917_FINAL(P, File, Name, ...) __annotation( \
    L ## P, \
    WPP_GUID_WTEXT WPP_USER_MSG_GUID L"roskmd // SRC=" _WPPW(File) \
    L" MJ= MN=", \
    L"#typev " _WPPW(Name) \
    L" 57 \"%0 [%10!s! @ %11!u!] TRACE :Failed to get first path info from vidpn topology. (status = %12!s!, IsSupportedVidPnPtr->hDesiredVidPn = %13!p!, vidPnTopologyHandle = %14!p!)\" //   LEVEL=TRACE_LEVEL_ERROR FLAGS=ROS_TRACING_VIDPN" \
    WPP_FUNC_NAME, \
    __VA_ARGS__)
#else // WPP_USER_MSG_GUID
# define WPP_ANNOTATE_Vc4Display_cpp917_FINAL(P, File, Name, ...) __annotation( \
    L ## P, \
    L"c0ccd90e-305c-3e36-4951-54eca8ed5fb9 roskmd // SRC=" _WPPW(File) \
    L" MJ= MN=", \
    L"#typev " _WPPW(Name) \
    L" 57 \"%0 [%10!s! @ %11!u!] TRACE :Failed to get first path info from vidpn topology. (status = %12!s!, IsSupportedVidPnPtr->hDesiredVidPn = %13!p!, vidPnTopologyHandle = %14!p!)\" //   LEVEL=TRACE_LEVEL_ERROR FLAGS=ROS_TRACING_VIDPN" \
    WPP_FUNC_NAME, \
    __VA_ARGS__)
#endif // WPP_USER_MSG_GUID

#ifdef WPP_PUBLIC_ANNOT_Vc4Display_cpp917
# define WPP_ANNOTATE_Vc4Display_cpp917 WPP_ANNOTATE_Vc4Display_cpp917_FINAL( \
    "TMF:", \
    "Unknown_cxx00", \
    "Unknown_cxx00", \
    L"{", \
    L"Arg, ItemString -- 10" , \
    L"Arg, ItemLong -- 11" , \
    L"Arg, ItemNTSTATUS -- 12" , \
    L"Arg, ItemPtr -- 13" , \
    L"Arg, ItemPtr -- 14" , \
    L"}", \
    L"PUBLIC_TMF:")
# ifndef WPP_PUBLIC_TMC
#  define WPP_PUBLIC_TMC // Adds "PUBLIC_TMF:" to the control guid annotation
# endif
#else // WPP_PUBLIC_ANNOT_Vc4Display_cpp917
# define WPP_ANNOTATE_Vc4Display_cpp917 WPP_ANNOTATE_Vc4Display_cpp917_FINAL( \
    "TMF:", \
    "Vc4Display.cpp", \
    "Vc4Display_cpp917", \
    L"{", \
    L"__FILE__, ItemString -- 10" , \
    L"__LINE__, ItemLong -- 11" , \
    L"status, ItemNTSTATUS -- 12" , \
    L"IsSupportedVidPnPtr->hDesiredVidPn, ItemPtr -- 13" , \
    L"vidPnTopologyHandle, ItemPtr -- 14" , \
    L"}")
#endif // WPP_PUBLIC_ANNOT_Vc4Display_cpp917

#ifdef WPP_USER_MSG_GUID
# define WPP_ANNOTATE_Vc4Display_cpp940_FINAL(P, File, Name, ...) __annotation( \
    L ## P, \
    WPP_GUID_WTEXT WPP_USER_MSG_GUID L"roskmd // SRC=" _WPPW(File) \
    L" MJ= MN=", \
    L"#typev " _WPPW(Name) \
    L" 58 \"%0 [%10!s! @ %11!u!] TRACE :Returning 'not supported' for out of range source or target id. (presentPathPtr->VidPnSourceId = %12!d!, presentPathPtr->VidPnTargetId = %13!d!)\" //   LEVEL=TRACE_LEVEL_ERROR FLAGS=ROS_TRACING_VIDPN" \
    WPP_FUNC_NAME, \
    __VA_ARGS__)
#else // WPP_USER_MSG_GUID
# define WPP_ANNOTATE_Vc4Display_cpp940_FINAL(P, File, Name, ...) __annotation( \
    L ## P, \
    L"c0ccd90e-305c-3e36-4951-54eca8ed5fb9 roskmd // SRC=" _WPPW(File) \
    L" MJ= MN=", \
    L"#typev " _WPPW(Name) \
    L" 58 \"%0 [%10!s! @ %11!u!] TRACE :Returning 'not supported' for out of range source or target id. (presentPathPtr->VidPnSourceId = %12!d!, presentPathPtr->VidPnTargetId = %13!d!)\" //   LEVEL=TRACE_LEVEL_ERROR FLAGS=ROS_TRACING_VIDPN" \
    WPP_FUNC_NAME, \
    __VA_ARGS__)
#endif // WPP_USER_MSG_GUID

#ifdef WPP_PUBLIC_ANNOT_Vc4Display_cpp940
# define WPP_ANNOTATE_Vc4Display_cpp940 WPP_ANNOTATE_Vc4Display_cpp940_FINAL( \
    "TMF:", \
    "Unknown_cxx00", \
    "Unknown_cxx00", \
    L"{", \
    L"Arg, ItemString -- 10" , \
    L"Arg, ItemLong -- 11" , \
    L"Arg, ItemLong -- 12" , \
    L"Arg, ItemLong -- 13" , \
    L"}", \
    L"PUBLIC_TMF:")
# ifndef WPP_PUBLIC_TMC
#  define WPP_PUBLIC_TMC // Adds "PUBLIC_TMF:" to the control guid annotation
# endif
#else // WPP_PUBLIC_ANNOT_Vc4Display_cpp940
# define WPP_ANNOTATE_Vc4Display_cpp940 WPP_ANNOTATE_Vc4Display_cpp940_FINAL( \
    "TMF:", \
    "Vc4Display.cpp", \
    "Vc4Display_cpp940", \
    L"{", \
    L"__FILE__, ItemString -- 10" , \
    L"__LINE__, ItemLong -- 11" , \
    L"presentPathPtr->VidPnSourceId, ItemLong -- 12" , \
    L"presentPathPtr->VidPnTargetId, ItemLong -- 13" , \
    L"}")
#endif // WPP_PUBLIC_ANNOT_Vc4Display_cpp940

#ifdef WPP_USER_MSG_GUID
# define WPP_ANNOTATE_Vc4Display_cpp950_FINAL(P, File, Name, ...) __annotation( \
    L ## P, \
    WPP_GUID_WTEXT WPP_USER_MSG_GUID L"roskmd // SRC=" _WPPW(File) \
    L" MJ= MN=", \
    L"#typev " _WPPW(Name) \
    L" 59 \"%0 [%10!s! @ %11!u!] TRACE :Returning 'supported' for vidpn. (IsSupportedVidPnPtr->hDesiredVidPn = %12!p!)\" //   LEVEL=TRACE_LEVEL_VERBOSE FLAGS=ROS_TRACING_VIDPN" \
    WPP_FUNC_NAME, \
    __VA_ARGS__)
#else // WPP_USER_MSG_GUID
# define WPP_ANNOTATE_Vc4Display_cpp950_FINAL(P, File, Name, ...) __annotation( \
    L ## P, \
    L"c0ccd90e-305c-3e36-4951-54eca8ed5fb9 roskmd // SRC=" _WPPW(File) \
    L" MJ= MN=", \
    L"#typev " _WPPW(Name) \
    L" 59 \"%0 [%10!s! @ %11!u!] TRACE :Returning 'supported' for vidpn. (IsSupportedVidPnPtr->hDesiredVidPn = %12!p!)\" //   LEVEL=TRACE_LEVEL_VERBOSE FLAGS=ROS_TRACING_VIDPN" \
    WPP_FUNC_NAME, \
    __VA_ARGS__)
#endif // WPP_USER_MSG_GUID

#ifdef WPP_PUBLIC_ANNOT_Vc4Display_cpp950
# define WPP_ANNOTATE_Vc4Display_cpp950 WPP_ANNOTATE_Vc4Display_cpp950_FINAL( \
    "TMF:", \
    "Unknown_cxx00", \
    "Unknown_cxx00", \
    L"{", \
    L"Arg, ItemString -- 10" , \
    L"Arg, ItemLong -- 11" , \
    L"Arg, ItemPtr -- 12" , \
    L"}", \
    L"PUBLIC_TMF:")
# ifndef WPP_PUBLIC_TMC
#  define WPP_PUBLIC_TMC // Adds "PUBLIC_TMF:" to the control guid annotation
# endif
#else // WPP_PUBLIC_ANNOT_Vc4Display_cpp950
# define WPP_ANNOTATE_Vc4Display_cpp950 WPP_ANNOTATE_Vc4Display_cpp950_FINAL( \
    "TMF:", \
    "Vc4Display.cpp", \
    "Vc4Display_cpp950", \
    L"{", \
    L"__FILE__, ItemString -- 10" , \
    L"__LINE__, ItemLong -- 11" , \
    L"IsSupportedVidPnPtr->hDesiredVidPn, ItemPtr -- 12" , \
    L"}")
#endif // WPP_PUBLIC_ANNOT_Vc4Display_cpp950

#ifdef WPP_USER_MSG_GUID
# define WPP_ANNOTATE_Vc4Display_cpp968_FINAL(P, File, Name, ...) __annotation( \
    L ## P, \
    WPP_GUID_WTEXT WPP_USER_MSG_GUID L"roskmd // SRC=" _WPPW(File) \
    L" MJ= MN=", \
    L"#typev " _WPPW(Name) \
    L" 60 \"%0 [%10!s! @ %11!u!] ASSERTION :Not implemented\" //   LEVEL=TRACE_LEVEL_ERROR FLAGS=ROS_TRACING_DEBUG" \
    WPP_FUNC_NAME, \
    __VA_ARGS__)
#else // WPP_USER_MSG_GUID
# define WPP_ANNOTATE_Vc4Display_cpp968_FINAL(P, File, Name, ...) __annotation( \
    L ## P, \
    L"c0ccd90e-305c-3e36-4951-54eca8ed5fb9 roskmd // SRC=" _WPPW(File) \
    L" MJ= MN=", \
    L"#typev " _WPPW(Name) \
    L" 60 \"%0 [%10!s! @ %11!u!] ASSERTION :Not implemented\" //   LEVEL=TRACE_LEVEL_ERROR FLAGS=ROS_TRACING_DEBUG" \
    WPP_FUNC_NAME, \
    __VA_ARGS__)
#endif // WPP_USER_MSG_GUID

#ifdef WPP_PUBLIC_ANNOT_Vc4Display_cpp968
# define WPP_ANNOTATE_Vc4Display_cpp968 WPP_ANNOTATE_Vc4Display_cpp968_FINAL( \
    "TMF:", \
    "Unknown_cxx00", \
    "Unknown_cxx00", \
    L"{", \
    L"Arg, ItemString -- 10" , \
    L"Arg, ItemLong -- 11" , \
    L"}", \
    L"PUBLIC_TMF:")
# ifndef WPP_PUBLIC_TMC
#  define WPP_PUBLIC_TMC // Adds "PUBLIC_TMF:" to the control guid annotation
# endif
#else // WPP_PUBLIC_ANNOT_Vc4Display_cpp968
# define WPP_ANNOTATE_Vc4Display_cpp968 WPP_ANNOTATE_Vc4Display_cpp968_FINAL( \
    "TMF:", \
    "Vc4Display.cpp", \
    "Vc4Display_cpp968", \
    L"{", \
    L"__FILE__, ItemString -- 10" , \
    L"__LINE__, ItemLong -- 11" , \
    L"}")
#endif // WPP_PUBLIC_ANNOT_Vc4Display_cpp968

#ifdef WPP_USER_MSG_GUID
# define WPP_ANNOTATE_Vc4Display_cpp987_FINAL(P, File, Name, ...) __annotation( \
    L ## P, \
    WPP_GUID_WTEXT WPP_USER_MSG_GUID L"roskmd // SRC=" _WPPW(File) \
    L" MJ= MN=", \
    L"#typev " _WPPW(Name) \
    L" 61 \"%0 [%10!s! @ %11!u!] TRACE :DxgkCbQueryVidPnInterface() failed. (status = %12!s!, EnumCofuncModalityPtr->hConstrainingVidPn, = %13!p!, this = %14!p!)\" //   LEVEL=TRACE_LEVEL_ERROR FLAGS=ROS_TRACING_VIDPN" \
    WPP_FUNC_NAME, \
    __VA_ARGS__)
#else // WPP_USER_MSG_GUID
# define WPP_ANNOTATE_Vc4Display_cpp987_FINAL(P, File, Name, ...) __annotation( \
    L ## P, \
    L"c0ccd90e-305c-3e36-4951-54eca8ed5fb9 roskmd // SRC=" _WPPW(File) \
    L" MJ= MN=", \
    L"#typev " _WPPW(Name) \
    L" 61 \"%0 [%10!s! @ %11!u!] TRACE :DxgkCbQueryVidPnInterface() failed. (status = %12!s!, EnumCofuncModalityPtr->hConstrainingVidPn, = %13!p!, this = %14!p!)\" //   LEVEL=TRACE_LEVEL_ERROR FLAGS=ROS_TRACING_VIDPN" \
    WPP_FUNC_NAME, \
    __VA_ARGS__)
#endif // WPP_USER_MSG_GUID

#ifdef WPP_PUBLIC_ANNOT_Vc4Display_cpp987
# define WPP_ANNOTATE_Vc4Display_cpp987 WPP_ANNOTATE_Vc4Display_cpp987_FINAL( \
    "TMF:", \
    "Unknown_cxx00", \
    "Unknown_cxx00", \
    L"{", \
    L"Arg, ItemString -- 10" , \
    L"Arg, ItemLong -- 11" , \
    L"Arg, ItemNTSTATUS -- 12" , \
    L"Arg, ItemPtr -- 13" , \
    L"Arg, ItemPtr -- 14" , \
    L"}", \
    L"PUBLIC_TMF:")
# ifndef WPP_PUBLIC_TMC
#  define WPP_PUBLIC_TMC // Adds "PUBLIC_TMF:" to the control guid annotation
# endif
#else // WPP_PUBLIC_ANNOT_Vc4Display_cpp987
# define WPP_ANNOTATE_Vc4Display_cpp987 WPP_ANNOTATE_Vc4Display_cpp987_FINAL( \
    "TMF:", \
    "Vc4Display.cpp", \
    "Vc4Display_cpp987", \
    L"{", \
    L"__FILE__, ItemString -- 10" , \
    L"__LINE__, ItemLong -- 11" , \
    L"status, ItemNTSTATUS -- 12" , \
    L"EnumCofuncModalityPtr->hConstrainingVidPn, ItemPtr -- 13" , \
    L"this, ItemPtr -- 14" , \
    L"}")
#endif // WPP_PUBLIC_ANNOT_Vc4Display_cpp987

#ifdef WPP_USER_MSG_GUID
# define WPP_ANNOTATE_Vc4Display_cpp1005_FINAL(P, File, Name, ...) __annotation( \
    L ## P, \
    WPP_GUID_WTEXT WPP_USER_MSG_GUID L"roskmd // SRC=" _WPPW(File) \
    L" MJ= MN=", \
    L"#typev " _WPPW(Name) \
    L" 62 \"%0 [%10!s! @ %11!u!] TRACE :pfnGetTopology() failed. (status = %12!s!, EnumCofuncModalityPtr->hConstrainingVidPn, = %13!p!, vidPnInterfacePtr = %14!p!)\" //   LEVEL=TRACE_LEVEL_ERROR FLAGS=ROS_TRACING_VIDPN" \
    WPP_FUNC_NAME, \
    __VA_ARGS__)
#else // WPP_USER_MSG_GUID
# define WPP_ANNOTATE_Vc4Display_cpp1005_FINAL(P, File, Name, ...) __annotation( \
    L ## P, \
    L"c0ccd90e-305c-3e36-4951-54eca8ed5fb9 roskmd // SRC=" _WPPW(File) \
    L" MJ= MN=", \
    L"#typev " _WPPW(Name) \
    L" 62 \"%0 [%10!s! @ %11!u!] TRACE :pfnGetTopology() failed. (status = %12!s!, EnumCofuncModalityPtr->hConstrainingVidPn, = %13!p!, vidPnInterfacePtr = %14!p!)\" //   LEVEL=TRACE_LEVEL_ERROR FLAGS=ROS_TRACING_VIDPN" \
    WPP_FUNC_NAME, \
    __VA_ARGS__)
#endif // WPP_USER_MSG_GUID

#ifdef WPP_PUBLIC_ANNOT_Vc4Display_cpp1005
# define WPP_ANNOTATE_Vc4Display_cpp1005 WPP_ANNOTATE_Vc4Display_cpp1005_FINAL( \
    "TMF:", \
    "Unknown_cxx00", \
    "Unknown_cxx00", \
    L"{", \
    L"Arg, ItemString -- 10" , \
    L"Arg, ItemLong -- 11" , \
    L"Arg, ItemNTSTATUS -- 12" , \
    L"Arg, ItemPtr -- 13" , \
    L"Arg, ItemPtr -- 14" , \
    L"}", \
    L"PUBLIC_TMF:")
# ifndef WPP_PUBLIC_TMC
#  define WPP_PUBLIC_TMC // Adds "PUBLIC_TMF:" to the control guid annotation
# endif
#else // WPP_PUBLIC_ANNOT_Vc4Display_cpp1005
# define WPP_ANNOTATE_Vc4Display_cpp1005 WPP_ANNOTATE_Vc4Display_cpp1005_FINAL( \
    "TMF:", \
    "Vc4Display.cpp", \
    "Vc4Display_cpp1005", \
    L"{", \
    L"__FILE__, ItemString -- 10" , \
    L"__LINE__, ItemLong -- 11" , \
    L"status, ItemNTSTATUS -- 12" , \
    L"EnumCofuncModalityPtr->hConstrainingVidPn, ItemPtr -- 13" , \
    L"vidPnInterfacePtr, ItemPtr -- 14" , \
    L"}")
#endif // WPP_PUBLIC_ANNOT_Vc4Display_cpp1005

#ifdef WPP_USER_MSG_GUID
# define WPP_ANNOTATE_Vc4Display_cpp1021_FINAL(P, File, Name, ...) __annotation( \
    L ## P, \
    WPP_GUID_WTEXT WPP_USER_MSG_GUID L"roskmd // SRC=" _WPPW(File) \
    L" MJ= MN=", \
    L"#typev " _WPPW(Name) \
    L" 63 \"%0 [%10!s! @ %11!u!] TRACE :Failed to get first path info from vidpn topology. (status = %12!s!, EnumCofuncModalityPtr->hConstrainingVidPn, = %13!p!, vidPnTopologyHandle = %14!p!)\" //   LEVEL=TRACE_LEVEL_ERROR FLAGS=ROS_TRACING_VIDPN" \
    WPP_FUNC_NAME, \
    __VA_ARGS__)
#else // WPP_USER_MSG_GUID
# define WPP_ANNOTATE_Vc4Display_cpp1021_FINAL(P, File, Name, ...) __annotation( \
    L ## P, \
    L"c0ccd90e-305c-3e36-4951-54eca8ed5fb9 roskmd // SRC=" _WPPW(File) \
    L" MJ= MN=", \
    L"#typev " _WPPW(Name) \
    L" 63 \"%0 [%10!s! @ %11!u!] TRACE :Failed to get first path info from vidpn topology. (status = %12!s!, EnumCofuncModalityPtr->hConstrainingVidPn, = %13!p!, vidPnTopologyHandle = %14!p!)\" //   LEVEL=TRACE_LEVEL_ERROR FLAGS=ROS_TRACING_VIDPN" \
    WPP_FUNC_NAME, \
    __VA_ARGS__)
#endif // WPP_USER_MSG_GUID

#ifdef WPP_PUBLIC_ANNOT_Vc4Display_cpp1021
# define WPP_ANNOTATE_Vc4Display_cpp1021 WPP_ANNOTATE_Vc4Display_cpp1021_FINAL( \
    "TMF:", \
    "Unknown_cxx00", \
    "Unknown_cxx00", \
    L"{", \
    L"Arg, ItemString -- 10" , \
    L"Arg, ItemLong -- 11" , \
    L"Arg, ItemNTSTATUS -- 12" , \
    L"Arg, ItemPtr -- 13" , \
    L"Arg, ItemPtr -- 14" , \
    L"}", \
    L"PUBLIC_TMF:")
# ifndef WPP_PUBLIC_TMC
#  define WPP_PUBLIC_TMC // Adds "PUBLIC_TMF:" to the control guid annotation
# endif
#else // WPP_PUBLIC_ANNOT_Vc4Display_cpp1021
# define WPP_ANNOTATE_Vc4Display_cpp1021 WPP_ANNOTATE_Vc4Display_cpp1021_FINAL( \
    "TMF:", \
    "Vc4Display.cpp", \
    "Vc4Display_cpp1021", \
    L"{", \
    L"__FILE__, ItemString -- 10" , \
    L"__LINE__, ItemLong -- 11" , \
    L"status, ItemNTSTATUS -- 12" , \
    L"EnumCofuncModalityPtr->hConstrainingVidPn, ItemPtr -- 13" , \
    L"vidPnTopologyHandle, ItemPtr -- 14" , \
    L"}")
#endif // WPP_PUBLIC_ANNOT_Vc4Display_cpp1021

#ifdef WPP_USER_MSG_GUID
# define WPP_ANNOTATE_Vc4Display_cpp1057_FINAL(P, File, Name, ...) __annotation( \
    L ## P, \
    WPP_GUID_WTEXT WPP_USER_MSG_GUID L"roskmd // SRC=" _WPPW(File) \
    L" MJ= MN=", \
    L"#typev " _WPPW(Name) \
    L" 64 \"%0 [%10!s! @ %11!u!] TRACE :This source does not have a pinned mode. Creating a new source mode set. (presentPathPtr->VidPnSourceId = %12!d!)\" //   LEVEL=TRACE_LEVEL_VERBOSE FLAGS=ROS_TRACING_VIDPN" \
    WPP_FUNC_NAME, \
    __VA_ARGS__)
#else // WPP_USER_MSG_GUID
# define WPP_ANNOTATE_Vc4Display_cpp1057_FINAL(P, File, Name, ...) __annotation( \
    L ## P, \
    L"c0ccd90e-305c-3e36-4951-54eca8ed5fb9 roskmd // SRC=" _WPPW(File) \
    L" MJ= MN=", \
    L"#typev " _WPPW(Name) \
    L" 64 \"%0 [%10!s! @ %11!u!] TRACE :This source does not have a pinned mode. Creating a new source mode set. (presentPathPtr->VidPnSourceId = %12!d!)\" //   LEVEL=TRACE_LEVEL_VERBOSE FLAGS=ROS_TRACING_VIDPN" \
    WPP_FUNC_NAME, \
    __VA_ARGS__)
#endif // WPP_USER_MSG_GUID

#ifdef WPP_PUBLIC_ANNOT_Vc4Display_cpp1057
# define WPP_ANNOTATE_Vc4Display_cpp1057 WPP_ANNOTATE_Vc4Display_cpp1057_FINAL( \
    "TMF:", \
    "Unknown_cxx00", \
    "Unknown_cxx00", \
    L"{", \
    L"Arg, ItemString -- 10" , \
    L"Arg, ItemLong -- 11" , \
    L"Arg, ItemLong -- 12" , \
    L"}", \
    L"PUBLIC_TMF:")
# ifndef WPP_PUBLIC_TMC
#  define WPP_PUBLIC_TMC // Adds "PUBLIC_TMF:" to the control guid annotation
# endif
#else // WPP_PUBLIC_ANNOT_Vc4Display_cpp1057
# define WPP_ANNOTATE_Vc4Display_cpp1057 WPP_ANNOTATE_Vc4Display_cpp1057_FINAL( \
    "TMF:", \
    "Vc4Display.cpp", \
    "Vc4Display_cpp1057", \
    L"{", \
    L"__FILE__, ItemString -- 10" , \
    L"__LINE__, ItemLong -- 11" , \
    L"presentPathPtr->VidPnSourceId, ItemLong -- 12" , \
    L"}")
#endif // WPP_PUBLIC_ANNOT_Vc4Display_cpp1057

#ifdef WPP_USER_MSG_GUID
# define WPP_ANNOTATE_Vc4Display_cpp1094_FINAL(P, File, Name, ...) __annotation( \
    L ## P, \
    WPP_GUID_WTEXT WPP_USER_MSG_GUID L"roskmd // SRC=" _WPPW(File) \
    L" MJ= MN=", \
    L"#typev " _WPPW(Name) \
    L" 65 \"%0 [%10!s! @ %11!u!] TRACE :This target does not have a pinned mode. Creating a new target mode set. (presentPathPtr->VidPnTargetId = %12!d!)\" //   LEVEL=TRACE_LEVEL_VERBOSE FLAGS=ROS_TRACING_VIDPN" \
    WPP_FUNC_NAME, \
    __VA_ARGS__)
#else // WPP_USER_MSG_GUID
# define WPP_ANNOTATE_Vc4Display_cpp1094_FINAL(P, File, Name, ...) __annotation( \
    L ## P, \
    L"c0ccd90e-305c-3e36-4951-54eca8ed5fb9 roskmd // SRC=" _WPPW(File) \
    L" MJ= MN=", \
    L"#typev " _WPPW(Name) \
    L" 65 \"%0 [%10!s! @ %11!u!] TRACE :This target does not have a pinned mode. Creating a new target mode set. (presentPathPtr->VidPnTargetId = %12!d!)\" //   LEVEL=TRACE_LEVEL_VERBOSE FLAGS=ROS_TRACING_VIDPN" \
    WPP_FUNC_NAME, \
    __VA_ARGS__)
#endif // WPP_USER_MSG_GUID

#ifdef WPP_PUBLIC_ANNOT_Vc4Display_cpp1094
# define WPP_ANNOTATE_Vc4Display_cpp1094 WPP_ANNOTATE_Vc4Display_cpp1094_FINAL( \
    "TMF:", \
    "Unknown_cxx00", \
    "Unknown_cxx00", \
    L"{", \
    L"Arg, ItemString -- 10" , \
    L"Arg, ItemLong -- 11" , \
    L"Arg, ItemLong -- 12" , \
    L"}", \
    L"PUBLIC_TMF:")
# ifndef WPP_PUBLIC_TMC
#  define WPP_PUBLIC_TMC // Adds "PUBLIC_TMF:" to the control guid annotation
# endif
#else // WPP_PUBLIC_ANNOT_Vc4Display_cpp1094
# define WPP_ANNOTATE_Vc4Display_cpp1094 WPP_ANNOTATE_Vc4Display_cpp1094_FINAL( \
    "TMF:", \
    "Vc4Display.cpp", \
    "Vc4Display_cpp1094", \
    L"{", \
    L"__FILE__, ItemString -- 10" , \
    L"__LINE__, ItemLong -- 11" , \
    L"presentPathPtr->VidPnTargetId, ItemLong -- 12" , \
    L"}")
#endif // WPP_PUBLIC_ANNOT_Vc4Display_cpp1094

#ifdef WPP_USER_MSG_GUID
# define WPP_ANNOTATE_Vc4Display_cpp1164_FINAL(P, File, Name, ...) __annotation( \
    L ## P, \
    WPP_GUID_WTEXT WPP_USER_MSG_GUID L"roskmd // SRC=" _WPPW(File) \
    L" MJ= MN=", \
    L"#typev " _WPPW(Name) \
    L" 66 \"%0 [%10!s! @ %11!u!] TRACE :DXGK_VIDPNTOPOLOGY_INTERFACE::pfnUpdatePathSupportInfo() failed. (status = %12!s!)\" //   LEVEL=TRACE_LEVEL_ERROR FLAGS=ROS_TRACING_VIDPN" \
    WPP_FUNC_NAME, \
    __VA_ARGS__)
#else // WPP_USER_MSG_GUID
# define WPP_ANNOTATE_Vc4Display_cpp1164_FINAL(P, File, Name, ...) __annotation( \
    L ## P, \
    L"c0ccd90e-305c-3e36-4951-54eca8ed5fb9 roskmd // SRC=" _WPPW(File) \
    L" MJ= MN=", \
    L"#typev " _WPPW(Name) \
    L" 66 \"%0 [%10!s! @ %11!u!] TRACE :DXGK_VIDPNTOPOLOGY_INTERFACE::pfnUpdatePathSupportInfo() failed. (status = %12!s!)\" //   LEVEL=TRACE_LEVEL_ERROR FLAGS=ROS_TRACING_VIDPN" \
    WPP_FUNC_NAME, \
    __VA_ARGS__)
#endif // WPP_USER_MSG_GUID

#ifdef WPP_PUBLIC_ANNOT_Vc4Display_cpp1164
# define WPP_ANNOTATE_Vc4Display_cpp1164 WPP_ANNOTATE_Vc4Display_cpp1164_FINAL( \
    "TMF:", \
    "Unknown_cxx00", \
    "Unknown_cxx00", \
    L"{", \
    L"Arg, ItemString -- 10" , \
    L"Arg, ItemLong -- 11" , \
    L"Arg, ItemNTSTATUS -- 12" , \
    L"}", \
    L"PUBLIC_TMF:")
# ifndef WPP_PUBLIC_TMC
#  define WPP_PUBLIC_TMC // Adds "PUBLIC_TMF:" to the control guid annotation
# endif
#else // WPP_PUBLIC_ANNOT_Vc4Display_cpp1164
# define WPP_ANNOTATE_Vc4Display_cpp1164 WPP_ANNOTATE_Vc4Display_cpp1164_FINAL( \
    "TMF:", \
    "Vc4Display.cpp", \
    "Vc4Display_cpp1164", \
    L"{", \
    L"__FILE__, ItemString -- 10" , \
    L"__LINE__, ItemLong -- 11" , \
    L"status, ItemNTSTATUS -- 12" , \
    L"}")
#endif // WPP_PUBLIC_ANNOT_Vc4Display_cpp1164

#ifdef WPP_USER_MSG_GUID
# define WPP_ANNOTATE_Vc4Display_cpp1180_FINAL(P, File, Name, ...) __annotation( \
    L ## P, \
    WPP_GUID_WTEXT WPP_USER_MSG_GUID L"roskmd // SRC=" _WPPW(File) \
    L" MJ= MN=", \
    L"#typev " _WPPW(Name) \
    L" 67 \"%0 [%10!s! @ %11!u!] TRACE :pfnAcquireNextPathInfo() failed. (status = %12!s!, EnumCofuncModalityPtr->hConstrainingVidPn, = %13!p!, vidPnTopologyHandle = %14!p!)\" //   LEVEL=TRACE_LEVEL_ERROR FLAGS=ROS_TRACING_VIDPN" \
    WPP_FUNC_NAME, \
    __VA_ARGS__)
#else // WPP_USER_MSG_GUID
# define WPP_ANNOTATE_Vc4Display_cpp1180_FINAL(P, File, Name, ...) __annotation( \
    L ## P, \
    L"c0ccd90e-305c-3e36-4951-54eca8ed5fb9 roskmd // SRC=" _WPPW(File) \
    L" MJ= MN=", \
    L"#typev " _WPPW(Name) \
    L" 67 \"%0 [%10!s! @ %11!u!] TRACE :pfnAcquireNextPathInfo() failed. (status = %12!s!, EnumCofuncModalityPtr->hConstrainingVidPn, = %13!p!, vidPnTopologyHandle = %14!p!)\" //   LEVEL=TRACE_LEVEL_ERROR FLAGS=ROS_TRACING_VIDPN" \
    WPP_FUNC_NAME, \
    __VA_ARGS__)
#endif // WPP_USER_MSG_GUID

#ifdef WPP_PUBLIC_ANNOT_Vc4Display_cpp1180
# define WPP_ANNOTATE_Vc4Display_cpp1180 WPP_ANNOTATE_Vc4Display_cpp1180_FINAL( \
    "TMF:", \
    "Unknown_cxx00", \
    "Unknown_cxx00", \
    L"{", \
    L"Arg, ItemString -- 10" , \
    L"Arg, ItemLong -- 11" , \
    L"Arg, ItemNTSTATUS -- 12" , \
    L"Arg, ItemPtr -- 13" , \
    L"Arg, ItemPtr -- 14" , \
    L"}", \
    L"PUBLIC_TMF:")
# ifndef WPP_PUBLIC_TMC
#  define WPP_PUBLIC_TMC // Adds "PUBLIC_TMF:" to the control guid annotation
# endif
#else // WPP_PUBLIC_ANNOT_Vc4Display_cpp1180
# define WPP_ANNOTATE_Vc4Display_cpp1180 WPP_ANNOTATE_Vc4Display_cpp1180_FINAL( \
    "TMF:", \
    "Vc4Display.cpp", \
    "Vc4Display_cpp1180", \
    L"{", \
    L"__FILE__, ItemString -- 10" , \
    L"__LINE__, ItemLong -- 11" , \
    L"status, ItemNTSTATUS -- 12" , \
    L"EnumCofuncModalityPtr->hConstrainingVidPn, ItemPtr -- 13" , \
    L"vidPnTopologyHandle, ItemPtr -- 14" , \
    L"}")
#endif // WPP_PUBLIC_ANNOT_Vc4Display_cpp1180

#ifdef WPP_USER_MSG_GUID
# define WPP_ANNOTATE_Vc4Display_cpp1204_FINAL(P, File, Name, ...) __annotation( \
    L ## P, \
    WPP_GUID_WTEXT WPP_USER_MSG_GUID L"roskmd // SRC=" _WPPW(File) \
    L" MJ= MN=", \
    L"#typev " _WPPW(Name) \
    L" 68 \"%0 [%10!s! @ %11!u!] TRACE :Received request to set visibility. (VidPnSourceId = %12!d!, Visible = %13!d!)\" //   LEVEL=TRACE_LEVEL_VERBOSE FLAGS=ROS_TRACING_VIDPN" \
    WPP_FUNC_NAME, \
    __VA_ARGS__)
#else // WPP_USER_MSG_GUID
# define WPP_ANNOTATE_Vc4Display_cpp1204_FINAL(P, File, Name, ...) __annotation( \
    L ## P, \
    L"c0ccd90e-305c-3e36-4951-54eca8ed5fb9 roskmd // SRC=" _WPPW(File) \
    L" MJ= MN=", \
    L"#typev " _WPPW(Name) \
    L" 68 \"%0 [%10!s! @ %11!u!] TRACE :Received request to set visibility. (VidPnSourceId = %12!d!, Visible = %13!d!)\" //   LEVEL=TRACE_LEVEL_VERBOSE FLAGS=ROS_TRACING_VIDPN" \
    WPP_FUNC_NAME, \
    __VA_ARGS__)
#endif // WPP_USER_MSG_GUID

#ifdef WPP_PUBLIC_ANNOT_Vc4Display_cpp1204
# define WPP_ANNOTATE_Vc4Display_cpp1204 WPP_ANNOTATE_Vc4Display_cpp1204_FINAL( \
    "TMF:", \
    "Unknown_cxx00", \
    "Unknown_cxx00", \
    L"{", \
    L"Arg, ItemString -- 10" , \
    L"Arg, ItemLong -- 11" , \
    L"Arg, ItemLong -- 12" , \
    L"Arg, ItemLong -- 13" , \
    L"}", \
    L"PUBLIC_TMF:")
# ifndef WPP_PUBLIC_TMC
#  define WPP_PUBLIC_TMC // Adds "PUBLIC_TMF:" to the control guid annotation
# endif
#else // WPP_PUBLIC_ANNOT_Vc4Display_cpp1204
# define WPP_ANNOTATE_Vc4Display_cpp1204 WPP_ANNOTATE_Vc4Display_cpp1204_FINAL( \
    "TMF:", \
    "Vc4Display.cpp", \
    "Vc4Display_cpp1204", \
    L"{", \
    L"__FILE__, ItemString -- 10" , \
    L"__LINE__, ItemLong -- 11" , \
    L"SetVidPnSourceVisibilityPtr->VidPnSourceId, ItemLong -- 12" , \
    L"SetVidPnSourceVisibilityPtr->Visible, ItemLong -- 13" , \
    L"}")
#endif // WPP_PUBLIC_ANNOT_Vc4Display_cpp1204

#ifdef WPP_USER_MSG_GUID
# define WPP_ANNOTATE_Vc4Display_cpp1222_FINAL(P, File, Name, ...) __annotation( \
    L ## P, \
    WPP_GUID_WTEXT WPP_USER_MSG_GUID L"roskmd // SRC=" _WPPW(File) \
    L" MJ= MN=", \
    L"#typev " _WPPW(Name) \
    L" 69 \"%0 [%10!s! @ %11!u!] TRACE :DdiCommitVidPn() was called. (hFunctionalVidPn = %12!p!, AffectedVidPnSourceId = %13!d!, MonitorConnectivityChecks = %14!d!, hPrimaryAllocation = %15!p!, Flags.PathPowerTransition = %16!d!, Flags.PathPoweredOff = %17!d!)\" //   LEVEL=TRACE_LEVEL_VERBOSE FLAGS=ROS_TRACING_VIDPN" \
    WPP_FUNC_NAME, \
    __VA_ARGS__)
#else // WPP_USER_MSG_GUID
# define WPP_ANNOTATE_Vc4Display_cpp1222_FINAL(P, File, Name, ...) __annotation( \
    L ## P, \
    L"c0ccd90e-305c-3e36-4951-54eca8ed5fb9 roskmd // SRC=" _WPPW(File) \
    L" MJ= MN=", \
    L"#typev " _WPPW(Name) \
    L" 69 \"%0 [%10!s! @ %11!u!] TRACE :DdiCommitVidPn() was called. (hFunctionalVidPn = %12!p!, AffectedVidPnSourceId = %13!d!, MonitorConnectivityChecks = %14!d!, hPrimaryAllocation = %15!p!, Flags.PathPowerTransition = %16!d!, Flags.PathPoweredOff = %17!d!)\" //   LEVEL=TRACE_LEVEL_VERBOSE FLAGS=ROS_TRACING_VIDPN" \
    WPP_FUNC_NAME, \
    __VA_ARGS__)
#endif // WPP_USER_MSG_GUID

#ifdef WPP_PUBLIC_ANNOT_Vc4Display_cpp1222
# define WPP_ANNOTATE_Vc4Display_cpp1222 WPP_ANNOTATE_Vc4Display_cpp1222_FINAL( \
    "TMF:", \
    "Unknown_cxx00", \
    "Unknown_cxx00", \
    L"{", \
    L"Arg, ItemString -- 10" , \
    L"Arg, ItemLong -- 11" , \
    L"Arg, ItemPtr -- 12" , \
    L"Arg, ItemLong -- 13" , \
    L"Arg, ItemLong -- 14" , \
    L"Arg, ItemPtr -- 15" , \
    L"Arg, ItemLong -- 16" , \
    L"Arg, ItemLong -- 17" , \
    L"}", \
    L"PUBLIC_TMF:")
# ifndef WPP_PUBLIC_TMC
#  define WPP_PUBLIC_TMC // Adds "PUBLIC_TMF:" to the control guid annotation
# endif
#else // WPP_PUBLIC_ANNOT_Vc4Display_cpp1222
# define WPP_ANNOTATE_Vc4Display_cpp1222 WPP_ANNOTATE_Vc4Display_cpp1222_FINAL( \
    "TMF:", \
    "Vc4Display.cpp", \
    "Vc4Display_cpp1222", \
    L"{", \
    L"__FILE__, ItemString -- 10" , \
    L"__LINE__, ItemLong -- 11" , \
    L"CommitVidPnPtr->hFunctionalVidPn, ItemPtr -- 12" , \
    L"CommitVidPnPtr->AffectedVidPnSourceId, ItemLong -- 13" , \
    L"CommitVidPnPtr->MonitorConnectivityChecks, ItemLong -- 14" , \
    L"CommitVidPnPtr->hPrimaryAllocation, ItemPtr -- 15" , \
    L"CommitVidPnPtr->Flags.PathPowerTransition, ItemLong -- 16" , \
    L"CommitVidPnPtr->Flags.PathPoweredOff, ItemLong -- 17" , \
    L"}")
#endif // WPP_PUBLIC_ANNOT_Vc4Display_cpp1222

#ifdef WPP_USER_MSG_GUID
# define WPP_ANNOTATE_Vc4Display_cpp1244_FINAL(P, File, Name, ...) __annotation( \
    L ## P, \
    WPP_GUID_WTEXT WPP_USER_MSG_GUID L"roskmd // SRC=" _WPPW(File) \
    L" MJ= MN=", \
    L"#typev " _WPPW(Name) \
    L" 70 \"%0 [%10!s! @ %11!u!] TRACE :DxgkCbQueryVidPnInterface() failed. (status = %12!s!, CommitVidPnPtr->hFunctionalVidPn, = %13!p!, this = %14!p!)\" //   LEVEL=TRACE_LEVEL_ERROR FLAGS=ROS_TRACING_VIDPN" \
    WPP_FUNC_NAME, \
    __VA_ARGS__)
#else // WPP_USER_MSG_GUID
# define WPP_ANNOTATE_Vc4Display_cpp1244_FINAL(P, File, Name, ...) __annotation( \
    L ## P, \
    L"c0ccd90e-305c-3e36-4951-54eca8ed5fb9 roskmd // SRC=" _WPPW(File) \
    L" MJ= MN=", \
    L"#typev " _WPPW(Name) \
    L" 70 \"%0 [%10!s! @ %11!u!] TRACE :DxgkCbQueryVidPnInterface() failed. (status = %12!s!, CommitVidPnPtr->hFunctionalVidPn, = %13!p!, this = %14!p!)\" //   LEVEL=TRACE_LEVEL_ERROR FLAGS=ROS_TRACING_VIDPN" \
    WPP_FUNC_NAME, \
    __VA_ARGS__)
#endif // WPP_USER_MSG_GUID

#ifdef WPP_PUBLIC_ANNOT_Vc4Display_cpp1244
# define WPP_ANNOTATE_Vc4Display_cpp1244 WPP_ANNOTATE_Vc4Display_cpp1244_FINAL( \
    "TMF:", \
    "Unknown_cxx00", \
    "Unknown_cxx00", \
    L"{", \
    L"Arg, ItemString -- 10" , \
    L"Arg, ItemLong -- 11" , \
    L"Arg, ItemNTSTATUS -- 12" , \
    L"Arg, ItemPtr -- 13" , \
    L"Arg, ItemPtr -- 14" , \
    L"}", \
    L"PUBLIC_TMF:")
# ifndef WPP_PUBLIC_TMC
#  define WPP_PUBLIC_TMC // Adds "PUBLIC_TMF:" to the control guid annotation
# endif
#else // WPP_PUBLIC_ANNOT_Vc4Display_cpp1244
# define WPP_ANNOTATE_Vc4Display_cpp1244 WPP_ANNOTATE_Vc4Display_cpp1244_FINAL( \
    "TMF:", \
    "Vc4Display.cpp", \
    "Vc4Display_cpp1244", \
    L"{", \
    L"__FILE__, ItemString -- 10" , \
    L"__LINE__, ItemLong -- 11" , \
    L"status, ItemNTSTATUS -- 12" , \
    L"CommitVidPnPtr->hFunctionalVidPn, ItemPtr -- 13" , \
    L"this, ItemPtr -- 14" , \
    L"}")
#endif // WPP_PUBLIC_ANNOT_Vc4Display_cpp1244

#ifdef WPP_USER_MSG_GUID
# define WPP_ANNOTATE_Vc4Display_cpp1262_FINAL(P, File, Name, ...) __annotation( \
    L ## P, \
    WPP_GUID_WTEXT WPP_USER_MSG_GUID L"roskmd // SRC=" _WPPW(File) \
    L" MJ= MN=", \
    L"#typev " _WPPW(Name) \
    L" 71 \"%0 [%10!s! @ %11!u!] TRACE :pfnGetTopology() failed. (status = %12!s!, CommitVidPnPtr->hFunctionalVidPn, = %13!p!, vidPnInterfacePtr = %14!p!)\" //   LEVEL=TRACE_LEVEL_ERROR FLAGS=ROS_TRACING_VIDPN" \
    WPP_FUNC_NAME, \
    __VA_ARGS__)
#else // WPP_USER_MSG_GUID
# define WPP_ANNOTATE_Vc4Display_cpp1262_FINAL(P, File, Name, ...) __annotation( \
    L ## P, \
    L"c0ccd90e-305c-3e36-4951-54eca8ed5fb9 roskmd // SRC=" _WPPW(File) \
    L" MJ= MN=", \
    L"#typev " _WPPW(Name) \
    L" 71 \"%0 [%10!s! @ %11!u!] TRACE :pfnGetTopology() failed. (status = %12!s!, CommitVidPnPtr->hFunctionalVidPn, = %13!p!, vidPnInterfacePtr = %14!p!)\" //   LEVEL=TRACE_LEVEL_ERROR FLAGS=ROS_TRACING_VIDPN" \
    WPP_FUNC_NAME, \
    __VA_ARGS__)
#endif // WPP_USER_MSG_GUID

#ifdef WPP_PUBLIC_ANNOT_Vc4Display_cpp1262
# define WPP_ANNOTATE_Vc4Display_cpp1262 WPP_ANNOTATE_Vc4Display_cpp1262_FINAL( \
    "TMF:", \
    "Unknown_cxx00", \
    "Unknown_cxx00", \
    L"{", \
    L"Arg, ItemString -- 10" , \
    L"Arg, ItemLong -- 11" , \
    L"Arg, ItemNTSTATUS -- 12" , \
    L"Arg, ItemPtr -- 13" , \
    L"Arg, ItemPtr -- 14" , \
    L"}", \
    L"PUBLIC_TMF:")
# ifndef WPP_PUBLIC_TMC
#  define WPP_PUBLIC_TMC // Adds "PUBLIC_TMF:" to the control guid annotation
# endif
#else // WPP_PUBLIC_ANNOT_Vc4Display_cpp1262
# define WPP_ANNOTATE_Vc4Display_cpp1262 WPP_ANNOTATE_Vc4Display_cpp1262_FINAL( \
    "TMF:", \
    "Vc4Display.cpp", \
    "Vc4Display_cpp1262", \
    L"{", \
    L"__FILE__, ItemString -- 10" , \
    L"__LINE__, ItemLong -- 11" , \
    L"status, ItemNTSTATUS -- 12" , \
    L"CommitVidPnPtr->hFunctionalVidPn, ItemPtr -- 13" , \
    L"vidPnInterfacePtr, ItemPtr -- 14" , \
    L"}")
#endif // WPP_PUBLIC_ANNOT_Vc4Display_cpp1262

#ifdef WPP_USER_MSG_GUID
# define WPP_ANNOTATE_Vc4Display_cpp1279_FINAL(P, File, Name, ...) __annotation( \
    L ## P, \
    WPP_GUID_WTEXT WPP_USER_MSG_GUID L"roskmd // SRC=" _WPPW(File) \
    L" MJ= MN=", \
    L"#typev " _WPPW(Name) \
    L" 72 \"%0 [%10!s! @ %11!u!] TRACE :DXGK_VIDPNTOPOLOGY_INTERFACE::pfnGetNumPaths() failed. (status = %12!s!)\" //   LEVEL=TRACE_LEVEL_ERROR FLAGS=ROS_TRACING_VIDPN" \
    WPP_FUNC_NAME, \
    __VA_ARGS__)
#else // WPP_USER_MSG_GUID
# define WPP_ANNOTATE_Vc4Display_cpp1279_FINAL(P, File, Name, ...) __annotation( \
    L ## P, \
    L"c0ccd90e-305c-3e36-4951-54eca8ed5fb9 roskmd // SRC=" _WPPW(File) \
    L" MJ= MN=", \
    L"#typev " _WPPW(Name) \
    L" 72 \"%0 [%10!s! @ %11!u!] TRACE :DXGK_VIDPNTOPOLOGY_INTERFACE::pfnGetNumPaths() failed. (status = %12!s!)\" //   LEVEL=TRACE_LEVEL_ERROR FLAGS=ROS_TRACING_VIDPN" \
    WPP_FUNC_NAME, \
    __VA_ARGS__)
#endif // WPP_USER_MSG_GUID

#ifdef WPP_PUBLIC_ANNOT_Vc4Display_cpp1279
# define WPP_ANNOTATE_Vc4Display_cpp1279 WPP_ANNOTATE_Vc4Display_cpp1279_FINAL( \
    "TMF:", \
    "Unknown_cxx00", \
    "Unknown_cxx00", \
    L"{", \
    L"Arg, ItemString -- 10" , \
    L"Arg, ItemLong -- 11" , \
    L"Arg, ItemNTSTATUS -- 12" , \
    L"}", \
    L"PUBLIC_TMF:")
# ifndef WPP_PUBLIC_TMC
#  define WPP_PUBLIC_TMC // Adds "PUBLIC_TMF:" to the control guid annotation
# endif
#else // WPP_PUBLIC_ANNOT_Vc4Display_cpp1279
# define WPP_ANNOTATE_Vc4Display_cpp1279 WPP_ANNOTATE_Vc4Display_cpp1279_FINAL( \
    "TMF:", \
    "Vc4Display.cpp", \
    "Vc4Display_cpp1279", \
    L"{", \
    L"__FILE__, ItemString -- 10" , \
    L"__LINE__, ItemLong -- 11" , \
    L"status, ItemNTSTATUS -- 12" , \
    L"}")
#endif // WPP_PUBLIC_ANNOT_Vc4Display_cpp1279

#ifdef WPP_USER_MSG_GUID
# define WPP_ANNOTATE_Vc4Display_cpp1288_FINAL(P, File, Name, ...) __annotation( \
    L ## P, \
    WPP_GUID_WTEXT WPP_USER_MSG_GUID L"roskmd // SRC=" _WPPW(File) \
    L" MJ= MN=", \
    L"#typev " _WPPW(Name) \
    L" 73 \"%0 [%10!s! @ %11!u!] TRACE :There are no paths in this topology.\" //   LEVEL=TRACE_LEVEL_VERBOSE FLAGS=ROS_TRACING_VIDPN" \
    WPP_FUNC_NAME, \
    __VA_ARGS__)
#else // WPP_USER_MSG_GUID
# define WPP_ANNOTATE_Vc4Display_cpp1288_FINAL(P, File, Name, ...) __annotation( \
    L ## P, \
    L"c0ccd90e-305c-3e36-4951-54eca8ed5fb9 roskmd // SRC=" _WPPW(File) \
    L" MJ= MN=", \
    L"#typev " _WPPW(Name) \
    L" 73 \"%0 [%10!s! @ %11!u!] TRACE :There are no paths in this topology.\" //   LEVEL=TRACE_LEVEL_VERBOSE FLAGS=ROS_TRACING_VIDPN" \
    WPP_FUNC_NAME, \
    __VA_ARGS__)
#endif // WPP_USER_MSG_GUID

#ifdef WPP_PUBLIC_ANNOT_Vc4Display_cpp1288
# define WPP_ANNOTATE_Vc4Display_cpp1288 WPP_ANNOTATE_Vc4Display_cpp1288_FINAL( \
    "TMF:", \
    "Unknown_cxx00", \
    "Unknown_cxx00", \
    L"{", \
    L"Arg, ItemString -- 10" , \
    L"Arg, ItemLong -- 11" , \
    L"}", \
    L"PUBLIC_TMF:")
# ifndef WPP_PUBLIC_TMC
#  define WPP_PUBLIC_TMC // Adds "PUBLIC_TMF:" to the control guid annotation
# endif
#else // WPP_PUBLIC_ANNOT_Vc4Display_cpp1288
# define WPP_ANNOTATE_Vc4Display_cpp1288 WPP_ANNOTATE_Vc4Display_cpp1288_FINAL( \
    "TMF:", \
    "Vc4Display.cpp", \
    "Vc4Display_cpp1288", \
    L"{", \
    L"__FILE__, ItemString -- 10" , \
    L"__LINE__, ItemLong -- 11" , \
    L"}")
#endif // WPP_PUBLIC_ANNOT_Vc4Display_cpp1288

#ifdef WPP_USER_MSG_GUID
# define WPP_ANNOTATE_Vc4Display_cpp1304_FINAL(P, File, Name, ...) __annotation( \
    L ## P, \
    WPP_GUID_WTEXT WPP_USER_MSG_GUID L"roskmd // SRC=" _WPPW(File) \
    L" MJ= MN=", \
    L"#typev " _WPPW(Name) \
    L" 74 \"%0 [%10!s! @ %11!u!] TRACE :DXGK_VIDPN_INTERFACE::pfnAcquireSourceModeSet() failed. (status = %12!s!)\" //   LEVEL=TRACE_LEVEL_ERROR FLAGS=ROS_TRACING_VIDPN" \
    WPP_FUNC_NAME, \
    __VA_ARGS__)
#else // WPP_USER_MSG_GUID
# define WPP_ANNOTATE_Vc4Display_cpp1304_FINAL(P, File, Name, ...) __annotation( \
    L ## P, \
    L"c0ccd90e-305c-3e36-4951-54eca8ed5fb9 roskmd // SRC=" _WPPW(File) \
    L" MJ= MN=", \
    L"#typev " _WPPW(Name) \
    L" 74 \"%0 [%10!s! @ %11!u!] TRACE :DXGK_VIDPN_INTERFACE::pfnAcquireSourceModeSet() failed. (status = %12!s!)\" //   LEVEL=TRACE_LEVEL_ERROR FLAGS=ROS_TRACING_VIDPN" \
    WPP_FUNC_NAME, \
    __VA_ARGS__)
#endif // WPP_USER_MSG_GUID

#ifdef WPP_PUBLIC_ANNOT_Vc4Display_cpp1304
# define WPP_ANNOTATE_Vc4Display_cpp1304 WPP_ANNOTATE_Vc4Display_cpp1304_FINAL( \
    "TMF:", \
    "Unknown_cxx00", \
    "Unknown_cxx00", \
    L"{", \
    L"Arg, ItemString -- 10" , \
    L"Arg, ItemLong -- 11" , \
    L"Arg, ItemNTSTATUS -- 12" , \
    L"}", \
    L"PUBLIC_TMF:")
# ifndef WPP_PUBLIC_TMC
#  define WPP_PUBLIC_TMC // Adds "PUBLIC_TMF:" to the control guid annotation
# endif
#else // WPP_PUBLIC_ANNOT_Vc4Display_cpp1304
# define WPP_ANNOTATE_Vc4Display_cpp1304 WPP_ANNOTATE_Vc4Display_cpp1304_FINAL( \
    "TMF:", \
    "Vc4Display.cpp", \
    "Vc4Display_cpp1304", \
    L"{", \
    L"__FILE__, ItemString -- 10" , \
    L"__LINE__, ItemLong -- 11" , \
    L"status, ItemNTSTATUS -- 12" , \
    L"}")
#endif // WPP_PUBLIC_ANNOT_Vc4Display_cpp1304

#ifdef WPP_USER_MSG_GUID
# define WPP_ANNOTATE_Vc4Display_cpp1327_FINAL(P, File, Name, ...) __annotation( \
    L ## P, \
    WPP_GUID_WTEXT WPP_USER_MSG_GUID L"roskmd // SRC=" _WPPW(File) \
    L" MJ= MN=", \
    L"#typev " _WPPW(Name) \
    L" 75 \"%0 [%10!s! @ %11!u!] TRACE :DXGK_VIDPNSOURCEMODESET_INTERFACE::pfnAcquirePinnedModeInfo() failed. (status = %12!s!, sourceModeSetHandle = %13!p!)\" //   LEVEL=TRACE_LEVEL_ERROR FLAGS=ROS_TRACING_VIDPN" \
    WPP_FUNC_NAME, \
    __VA_ARGS__)
#else // WPP_USER_MSG_GUID
# define WPP_ANNOTATE_Vc4Display_cpp1327_FINAL(P, File, Name, ...) __annotation( \
    L ## P, \
    L"c0ccd90e-305c-3e36-4951-54eca8ed5fb9 roskmd // SRC=" _WPPW(File) \
    L" MJ= MN=", \
    L"#typev " _WPPW(Name) \
    L" 75 \"%0 [%10!s! @ %11!u!] TRACE :DXGK_VIDPNSOURCEMODESET_INTERFACE::pfnAcquirePinnedModeInfo() failed. (status = %12!s!, sourceModeSetHandle = %13!p!)\" //   LEVEL=TRACE_LEVEL_ERROR FLAGS=ROS_TRACING_VIDPN" \
    WPP_FUNC_NAME, \
    __VA_ARGS__)
#endif // WPP_USER_MSG_GUID

#ifdef WPP_PUBLIC_ANNOT_Vc4Display_cpp1327
# define WPP_ANNOTATE_Vc4Display_cpp1327 WPP_ANNOTATE_Vc4Display_cpp1327_FINAL( \
    "TMF:", \
    "Unknown_cxx00", \
    "Unknown_cxx00", \
    L"{", \
    L"Arg, ItemString -- 10" , \
    L"Arg, ItemLong -- 11" , \
    L"Arg, ItemNTSTATUS -- 12" , \
    L"Arg, ItemPtr -- 13" , \
    L"}", \
    L"PUBLIC_TMF:")
# ifndef WPP_PUBLIC_TMC
#  define WPP_PUBLIC_TMC // Adds "PUBLIC_TMF:" to the control guid annotation
# endif
#else // WPP_PUBLIC_ANNOT_Vc4Display_cpp1327
# define WPP_ANNOTATE_Vc4Display_cpp1327 WPP_ANNOTATE_Vc4Display_cpp1327_FINAL( \
    "TMF:", \
    "Vc4Display.cpp", \
    "Vc4Display_cpp1327", \
    L"{", \
    L"__FILE__, ItemString -- 10" , \
    L"__LINE__, ItemLong -- 11" , \
    L"status, ItemNTSTATUS -- 12" , \
    L"sourceModeSetHandle, ItemPtr -- 13" , \
    L"}")
#endif // WPP_PUBLIC_ANNOT_Vc4Display_cpp1327

#ifdef WPP_USER_MSG_GUID
# define WPP_ANNOTATE_Vc4Display_cpp1364_FINAL(P, File, Name, ...) __annotation( \
    L ## P, \
    WPP_GUID_WTEXT WPP_USER_MSG_GUID L"roskmd // SRC=" _WPPW(File) \
    L" MJ= MN=", \
    L"#typev " _WPPW(Name) \
    L" 76 \"%0 [%10!s! @ %11!u!] TRACE :VidPn source has different size than monitor. (pinnedSourceModeInfoPtr->Format.Graphics.PrimSurfSize = %12!d!,%13!d!, this->dxgkVideoSignalInfo.TotalSize = %14!d!, %15!d!)\" //   LEVEL=TRACE_LEVEL_ERROR FLAGS=ROS_TRACING_VIDPN" \
    WPP_FUNC_NAME, \
    __VA_ARGS__)
#else // WPP_USER_MSG_GUID
# define WPP_ANNOTATE_Vc4Display_cpp1364_FINAL(P, File, Name, ...) __annotation( \
    L ## P, \
    L"c0ccd90e-305c-3e36-4951-54eca8ed5fb9 roskmd // SRC=" _WPPW(File) \
    L" MJ= MN=", \
    L"#typev " _WPPW(Name) \
    L" 76 \"%0 [%10!s! @ %11!u!] TRACE :VidPn source has different size than monitor. (pinnedSourceModeInfoPtr->Format.Graphics.PrimSurfSize = %12!d!,%13!d!, this->dxgkVideoSignalInfo.TotalSize = %14!d!, %15!d!)\" //   LEVEL=TRACE_LEVEL_ERROR FLAGS=ROS_TRACING_VIDPN" \
    WPP_FUNC_NAME, \
    __VA_ARGS__)
#endif // WPP_USER_MSG_GUID

#ifdef WPP_PUBLIC_ANNOT_Vc4Display_cpp1364
# define WPP_ANNOTATE_Vc4Display_cpp1364 WPP_ANNOTATE_Vc4Display_cpp1364_FINAL( \
    "TMF:", \
    "Unknown_cxx00", \
    "Unknown_cxx00", \
    L"{", \
    L"Arg, ItemString -- 10" , \
    L"Arg, ItemLong -- 11" , \
    L"Arg, ItemLong -- 12" , \
    L"Arg, ItemLong -- 13" , \
    L"Arg, ItemLong -- 14" , \
    L"Arg, ItemLong -- 15" , \
    L"}", \
    L"PUBLIC_TMF:")
# ifndef WPP_PUBLIC_TMC
#  define WPP_PUBLIC_TMC // Adds "PUBLIC_TMF:" to the control guid annotation
# endif
#else // WPP_PUBLIC_ANNOT_Vc4Display_cpp1364
# define WPP_ANNOTATE_Vc4Display_cpp1364 WPP_ANNOTATE_Vc4Display_cpp1364_FINAL( \
    "TMF:", \
    "Vc4Display.cpp", \
    "Vc4Display_cpp1364", \
    L"{", \
    L"__FILE__, ItemString -- 10" , \
    L"__LINE__, ItemLong -- 11" , \
    L"pinnedSourceModeInfoPtr->Format.Graphics.PrimSurfSize.cx, ItemLong -- 12" , \
    L"pinnedSourceModeInfoPtr->Format.Graphics.PrimSurfSize.cy, ItemLong -- 13" , \
    L"this->dxgkVideoSignalInfo.TotalSize.cx, ItemLong -- 14" , \
    L"this->dxgkVideoSignalInfo.TotalSize.cy, ItemLong -- 15" , \
    L"}")
#endif // WPP_PUBLIC_ANNOT_Vc4Display_cpp1364

#ifdef WPP_USER_MSG_GUID
# define WPP_ANNOTATE_Vc4Display_cpp1382_FINAL(P, File, Name, ...) __annotation( \
    L ## P, \
    WPP_GUID_WTEXT WPP_USER_MSG_GUID L"roskmd // SRC=" _WPPW(File) \
    L" MJ= MN=", \
    L"#typev " _WPPW(Name) \
    L" 77 \"%0 [%10!s! @ %11!u!] TRACE :DXGK_VIDPNTOPOLOGY_INTERFACE::pfnGetNumPathsFromSource() failed. (status = %12!s!)\" //   LEVEL=TRACE_LEVEL_ERROR FLAGS=ROS_TRACING_VIDPN" \
    WPP_FUNC_NAME, \
    __VA_ARGS__)
#else // WPP_USER_MSG_GUID
# define WPP_ANNOTATE_Vc4Display_cpp1382_FINAL(P, File, Name, ...) __annotation( \
    L ## P, \
    L"c0ccd90e-305c-3e36-4951-54eca8ed5fb9 roskmd // SRC=" _WPPW(File) \
    L" MJ= MN=", \
    L"#typev " _WPPW(Name) \
    L" 77 \"%0 [%10!s! @ %11!u!] TRACE :DXGK_VIDPNTOPOLOGY_INTERFACE::pfnGetNumPathsFromSource() failed. (status = %12!s!)\" //   LEVEL=TRACE_LEVEL_ERROR FLAGS=ROS_TRACING_VIDPN" \
    WPP_FUNC_NAME, \
    __VA_ARGS__)
#endif // WPP_USER_MSG_GUID

#ifdef WPP_PUBLIC_ANNOT_Vc4Display_cpp1382
# define WPP_ANNOTATE_Vc4Display_cpp1382 WPP_ANNOTATE_Vc4Display_cpp1382_FINAL( \
    "TMF:", \
    "Unknown_cxx00", \
    "Unknown_cxx00", \
    L"{", \
    L"Arg, ItemString -- 10" , \
    L"Arg, ItemLong -- 11" , \
    L"Arg, ItemNTSTATUS -- 12" , \
    L"}", \
    L"PUBLIC_TMF:")
# ifndef WPP_PUBLIC_TMC
#  define WPP_PUBLIC_TMC // Adds "PUBLIC_TMF:" to the control guid annotation
# endif
#else // WPP_PUBLIC_ANNOT_Vc4Display_cpp1382
# define WPP_ANNOTATE_Vc4Display_cpp1382 WPP_ANNOTATE_Vc4Display_cpp1382_FINAL( \
    "TMF:", \
    "Vc4Display.cpp", \
    "Vc4Display_cpp1382", \
    L"{", \
    L"__FILE__, ItemString -- 10" , \
    L"__LINE__, ItemLong -- 11" , \
    L"status, ItemNTSTATUS -- 12" , \
    L"}")
#endif // WPP_PUBLIC_ANNOT_Vc4Display_cpp1382

#ifdef WPP_USER_MSG_GUID
# define WPP_ANNOTATE_Vc4Display_cpp1400_FINAL(P, File, Name, ...) __annotation( \
    L ## P, \
    WPP_GUID_WTEXT WPP_USER_MSG_GUID L"roskmd // SRC=" _WPPW(File) \
    L" MJ= MN=", \
    L"#typev " _WPPW(Name) \
    L" 78 \"%0 [%10!s! @ %11!u!] TRACE :DXGK_VIDPNTOPOLOGY_INTERFACE::pfnEnumPathTargetsFromSource() failed. (status = %12!s!)\" //   LEVEL=TRACE_LEVEL_ERROR FLAGS=ROS_TRACING_VIDPN" \
    WPP_FUNC_NAME, \
    __VA_ARGS__)
#else // WPP_USER_MSG_GUID
# define WPP_ANNOTATE_Vc4Display_cpp1400_FINAL(P, File, Name, ...) __annotation( \
    L ## P, \
    L"c0ccd90e-305c-3e36-4951-54eca8ed5fb9 roskmd // SRC=" _WPPW(File) \
    L" MJ= MN=", \
    L"#typev " _WPPW(Name) \
    L" 78 \"%0 [%10!s! @ %11!u!] TRACE :DXGK_VIDPNTOPOLOGY_INTERFACE::pfnEnumPathTargetsFromSource() failed. (status = %12!s!)\" //   LEVEL=TRACE_LEVEL_ERROR FLAGS=ROS_TRACING_VIDPN" \
    WPP_FUNC_NAME, \
    __VA_ARGS__)
#endif // WPP_USER_MSG_GUID

#ifdef WPP_PUBLIC_ANNOT_Vc4Display_cpp1400
# define WPP_ANNOTATE_Vc4Display_cpp1400 WPP_ANNOTATE_Vc4Display_cpp1400_FINAL( \
    "TMF:", \
    "Unknown_cxx00", \
    "Unknown_cxx00", \
    L"{", \
    L"Arg, ItemString -- 10" , \
    L"Arg, ItemLong -- 11" , \
    L"Arg, ItemNTSTATUS -- 12" , \
    L"}", \
    L"PUBLIC_TMF:")
# ifndef WPP_PUBLIC_TMC
#  define WPP_PUBLIC_TMC // Adds "PUBLIC_TMF:" to the control guid annotation
# endif
#else // WPP_PUBLIC_ANNOT_Vc4Display_cpp1400
# define WPP_ANNOTATE_Vc4Display_cpp1400 WPP_ANNOTATE_Vc4Display_cpp1400_FINAL( \
    "TMF:", \
    "Vc4Display.cpp", \
    "Vc4Display_cpp1400", \
    L"{", \
    L"__FILE__, ItemString -- 10" , \
    L"__LINE__, ItemLong -- 11" , \
    L"status, ItemNTSTATUS -- 12" , \
    L"}")
#endif // WPP_PUBLIC_ANNOT_Vc4Display_cpp1400

#ifdef WPP_USER_MSG_GUID
# define WPP_ANNOTATE_Vc4Display_cpp1416_FINAL(P, File, Name, ...) __annotation( \
    L ## P, \
    WPP_GUID_WTEXT WPP_USER_MSG_GUID L"roskmd // SRC=" _WPPW(File) \
    L" MJ= MN=", \
    L"#typev " _WPPW(Name) \
    L" 79 \"%0 [%10!s! @ %11!u!] TRACE :DXGK_VIDPNTOPOLOGY_INTERFACE::pfnAcquirePathInfo() failed. (status = %12!s!, AffectedVidPnSourceId = %13!d!, targetId = %14!d!)\" //   LEVEL=TRACE_LEVEL_ERROR FLAGS=ROS_TRACING_VIDPN" \
    WPP_FUNC_NAME, \
    __VA_ARGS__)
#else // WPP_USER_MSG_GUID
# define WPP_ANNOTATE_Vc4Display_cpp1416_FINAL(P, File, Name, ...) __annotation( \
    L ## P, \
    L"c0ccd90e-305c-3e36-4951-54eca8ed5fb9 roskmd // SRC=" _WPPW(File) \
    L" MJ= MN=", \
    L"#typev " _WPPW(Name) \
    L" 79 \"%0 [%10!s! @ %11!u!] TRACE :DXGK_VIDPNTOPOLOGY_INTERFACE::pfnAcquirePathInfo() failed. (status = %12!s!, AffectedVidPnSourceId = %13!d!, targetId = %14!d!)\" //   LEVEL=TRACE_LEVEL_ERROR FLAGS=ROS_TRACING_VIDPN" \
    WPP_FUNC_NAME, \
    __VA_ARGS__)
#endif // WPP_USER_MSG_GUID

#ifdef WPP_PUBLIC_ANNOT_Vc4Display_cpp1416
# define WPP_ANNOTATE_Vc4Display_cpp1416 WPP_ANNOTATE_Vc4Display_cpp1416_FINAL( \
    "TMF:", \
    "Unknown_cxx00", \
    "Unknown_cxx00", \
    L"{", \
    L"Arg, ItemString -- 10" , \
    L"Arg, ItemLong -- 11" , \
    L"Arg, ItemNTSTATUS -- 12" , \
    L"Arg, ItemLong -- 13" , \
    L"Arg, ItemLong -- 14" , \
    L"}", \
    L"PUBLIC_TMF:")
# ifndef WPP_PUBLIC_TMC
#  define WPP_PUBLIC_TMC // Adds "PUBLIC_TMF:" to the control guid annotation
# endif
#else // WPP_PUBLIC_ANNOT_Vc4Display_cpp1416
# define WPP_ANNOTATE_Vc4Display_cpp1416 WPP_ANNOTATE_Vc4Display_cpp1416_FINAL( \
    "TMF:", \
    "Vc4Display.cpp", \
    "Vc4Display_cpp1416", \
    L"{", \
    L"__FILE__, ItemString -- 10" , \
    L"__LINE__, ItemLong -- 11" , \
    L"status, ItemNTSTATUS -- 12" , \
    L"CommitVidPnPtr->AffectedVidPnSourceId, ItemLong -- 13" , \
    L"targetId, ItemLong -- 14" , \
    L"}")
#endif // WPP_PUBLIC_ANNOT_Vc4Display_cpp1416

#ifdef WPP_USER_MSG_GUID
# define WPP_ANNOTATE_Vc4Display_cpp1444_FINAL(P, File, Name, ...) __annotation( \
    L ## P, \
    WPP_GUID_WTEXT WPP_USER_MSG_GUID L"roskmd // SRC=" _WPPW(File) \
    L" MJ= MN=", \
    L"#typev " _WPPW(Name) \
    L" 80 \"%0 [%10!s! @ %11!u!] TRACE :Successfully committed VidPn. (hFunctionalVidPn = %12!p!, PrimSurfSize = %13!d!, %14!d!, VisibleRegionSize = %15!d!,%16!d!, Stride = %17!d!, PixelFormat = %18!d!, ColorBasis = %19!d!, PixelValueAccessMode = %20!d!)\" //   LEVEL=TRACE_LEVEL_INFORMATION FLAGS=ROS_TRACING_VIDPN" \
    WPP_FUNC_NAME, \
    __VA_ARGS__)
#else // WPP_USER_MSG_GUID
# define WPP_ANNOTATE_Vc4Display_cpp1444_FINAL(P, File, Name, ...) __annotation( \
    L ## P, \
    L"c0ccd90e-305c-3e36-4951-54eca8ed5fb9 roskmd // SRC=" _WPPW(File) \
    L" MJ= MN=", \
    L"#typev " _WPPW(Name) \
    L" 80 \"%0 [%10!s! @ %11!u!] TRACE :Successfully committed VidPn. (hFunctionalVidPn = %12!p!, PrimSurfSize = %13!d!, %14!d!, VisibleRegionSize = %15!d!,%16!d!, Stride = %17!d!, PixelFormat = %18!d!, ColorBasis = %19!d!, PixelValueAccessMode = %20!d!)\" //   LEVEL=TRACE_LEVEL_INFORMATION FLAGS=ROS_TRACING_VIDPN" \
    WPP_FUNC_NAME, \
    __VA_ARGS__)
#endif // WPP_USER_MSG_GUID

#ifdef WPP_PUBLIC_ANNOT_Vc4Display_cpp1444
# define WPP_ANNOTATE_Vc4Display_cpp1444 WPP_ANNOTATE_Vc4Display_cpp1444_FINAL( \
    "TMF:", \
    "Unknown_cxx00", \
    "Unknown_cxx00", \
    L"{", \
    L"Arg, ItemString -- 10" , \
    L"Arg, ItemLong -- 11" , \
    L"Arg, ItemPtr -- 12" , \
    L"Arg, ItemLong -- 13" , \
    L"Arg, ItemLong -- 14" , \
    L"Arg, ItemLong -- 15" , \
    L"Arg, ItemLong -- 16" , \
    L"Arg, ItemLong -- 17" , \
    L"Arg, ItemLong -- 18" , \
    L"Arg, ItemLong -- 19" , \
    L"Arg, ItemLong -- 20" , \
    L"}", \
    L"PUBLIC_TMF:")
# ifndef WPP_PUBLIC_TMC
#  define WPP_PUBLIC_TMC // Adds "PUBLIC_TMF:" to the control guid annotation
# endif
#else // WPP_PUBLIC_ANNOT_Vc4Display_cpp1444
# define WPP_ANNOTATE_Vc4Display_cpp1444 WPP_ANNOTATE_Vc4Display_cpp1444_FINAL( \
    "TMF:", \
    "Vc4Display.cpp", \
    "Vc4Display_cpp1444", \
    L"{", \
    L"__FILE__, ItemString -- 10" , \
    L"__LINE__, ItemLong -- 11" , \
    L"CommitVidPnPtr->hFunctionalVidPn, ItemPtr -- 12" , \
    L"pinnedSourceModeInfoPtr->Format.Graphics.PrimSurfSize.cx, ItemLong -- 13" , \
    L"pinnedSourceModeInfoPtr->Format.Graphics.PrimSurfSize.cy, ItemLong -- 14" , \
    L"pinnedSourceModeInfoPtr->Format.Graphics.VisibleRegionSize.cx, ItemLong -- 15" , \
    L"pinnedSourceModeInfoPtr->Format.Graphics.VisibleRegionSize.cy, ItemLong -- 16" , \
    L"pinnedSourceModeInfoPtr->Format.Graphics.Stride, ItemLong -- 17" , \
    L"pinnedSourceModeInfoPtr->Format.Graphics.PixelFormat, ItemLong -- 18" , \
    L"pinnedSourceModeInfoPtr->Format.Graphics.ColorBasis, ItemLong -- 19" , \
    L"pinnedSourceModeInfoPtr->Format.Graphics.PixelValueAccessMode, ItemLong -- 20" , \
    L"}")
#endif // WPP_PUBLIC_ANNOT_Vc4Display_cpp1444

#ifdef WPP_USER_MSG_GUID
# define WPP_ANNOTATE_Vc4Display_cpp1469_FINAL(P, File, Name, ...) __annotation( \
    L ## P, \
    WPP_GUID_WTEXT WPP_USER_MSG_GUID L"roskmd // SRC=" _WPPW(File) \
    L" MJ= MN=", \
    L"#typev " _WPPW(Name) \
    L" 81 \"%0 [%10!s! @ %11!u!] ASSERTION :Not implemented\" //   LEVEL=TRACE_LEVEL_ERROR FLAGS=ROS_TRACING_DEBUG" \
    WPP_FUNC_NAME, \
    __VA_ARGS__)
#else // WPP_USER_MSG_GUID
# define WPP_ANNOTATE_Vc4Display_cpp1469_FINAL(P, File, Name, ...) __annotation( \
    L ## P, \
    L"c0ccd90e-305c-3e36-4951-54eca8ed5fb9 roskmd // SRC=" _WPPW(File) \
    L" MJ= MN=", \
    L"#typev " _WPPW(Name) \
    L" 81 \"%0 [%10!s! @ %11!u!] ASSERTION :Not implemented\" //   LEVEL=TRACE_LEVEL_ERROR FLAGS=ROS_TRACING_DEBUG" \
    WPP_FUNC_NAME, \
    __VA_ARGS__)
#endif // WPP_USER_MSG_GUID

#ifdef WPP_PUBLIC_ANNOT_Vc4Display_cpp1469
# define WPP_ANNOTATE_Vc4Display_cpp1469 WPP_ANNOTATE_Vc4Display_cpp1469_FINAL( \
    "TMF:", \
    "Unknown_cxx00", \
    "Unknown_cxx00", \
    L"{", \
    L"Arg, ItemString -- 10" , \
    L"Arg, ItemLong -- 11" , \
    L"}", \
    L"PUBLIC_TMF:")
# ifndef WPP_PUBLIC_TMC
#  define WPP_PUBLIC_TMC // Adds "PUBLIC_TMF:" to the control guid annotation
# endif
#else // WPP_PUBLIC_ANNOT_Vc4Display_cpp1469
# define WPP_ANNOTATE_Vc4Display_cpp1469 WPP_ANNOTATE_Vc4Display_cpp1469_FINAL( \
    "TMF:", \
    "Vc4Display.cpp", \
    "Vc4Display_cpp1469", \
    L"{", \
    L"__FILE__, ItemString -- 10" , \
    L"__LINE__, ItemLong -- 11" , \
    L"}")
#endif // WPP_PUBLIC_ANNOT_Vc4Display_cpp1469

#ifdef WPP_USER_MSG_GUID
# define WPP_ANNOTATE_Vc4Display_cpp1498_FINAL(P, File, Name, ...) __annotation( \
    L ## P, \
    WPP_GUID_WTEXT WPP_USER_MSG_GUID L"roskmd // SRC=" _WPPW(File) \
    L" MJ= MN=", \
    L"#typev " _WPPW(Name) \
    L" 82 \"%0 [%10!s! @ %11!u!] TRACE :pfnCreateNewModeInfo() failed. (status = %12!s!)\" //   LEVEL=TRACE_LEVEL_ERROR FLAGS=ROS_TRACING_VIDPN" \
    WPP_FUNC_NAME, \
    __VA_ARGS__)
#else // WPP_USER_MSG_GUID
# define WPP_ANNOTATE_Vc4Display_cpp1498_FINAL(P, File, Name, ...) __annotation( \
    L ## P, \
    L"c0ccd90e-305c-3e36-4951-54eca8ed5fb9 roskmd // SRC=" _WPPW(File) \
    L" MJ= MN=", \
    L"#typev " _WPPW(Name) \
    L" 82 \"%0 [%10!s! @ %11!u!] TRACE :pfnCreateNewModeInfo() failed. (status = %12!s!)\" //   LEVEL=TRACE_LEVEL_ERROR FLAGS=ROS_TRACING_VIDPN" \
    WPP_FUNC_NAME, \
    __VA_ARGS__)
#endif // WPP_USER_MSG_GUID

#ifdef WPP_PUBLIC_ANNOT_Vc4Display_cpp1498
# define WPP_ANNOTATE_Vc4Display_cpp1498 WPP_ANNOTATE_Vc4Display_cpp1498_FINAL( \
    "TMF:", \
    "Unknown_cxx00", \
    "Unknown_cxx00", \
    L"{", \
    L"Arg, ItemString -- 10" , \
    L"Arg, ItemLong -- 11" , \
    L"Arg, ItemNTSTATUS -- 12" , \
    L"}", \
    L"PUBLIC_TMF:")
# ifndef WPP_PUBLIC_TMC
#  define WPP_PUBLIC_TMC // Adds "PUBLIC_TMF:" to the control guid annotation
# endif
#else // WPP_PUBLIC_ANNOT_Vc4Display_cpp1498
# define WPP_ANNOTATE_Vc4Display_cpp1498 WPP_ANNOTATE_Vc4Display_cpp1498_FINAL( \
    "TMF:", \
    "Vc4Display.cpp", \
    "Vc4Display_cpp1498", \
    L"{", \
    L"__FILE__, ItemString -- 10" , \
    L"__LINE__, ItemLong -- 11" , \
    L"status, ItemNTSTATUS -- 12" , \
    L"}")
#endif // WPP_PUBLIC_ANNOT_Vc4Display_cpp1498

#ifdef WPP_USER_MSG_GUID
# define WPP_ANNOTATE_Vc4Display_cpp1533_FINAL(P, File, Name, ...) __annotation( \
    L ## P, \
    WPP_GUID_WTEXT WPP_USER_MSG_GUID L"roskmd // SRC=" _WPPW(File) \
    L" MJ= MN=", \
    L"#typev " _WPPW(Name) \
    L" 83 \"%0 [%10!s! @ %11!u!] TRACE :pfnAddMode failed. (status = %12!s!, RecommendMonitorModesPtr->hMonitorSourceModeSet = %13!p!, monitorModePtr = %14!p!)\" //   LEVEL=TRACE_LEVEL_ERROR FLAGS=ROS_TRACING_VIDPN" \
    WPP_FUNC_NAME, \
    __VA_ARGS__)
#else // WPP_USER_MSG_GUID
# define WPP_ANNOTATE_Vc4Display_cpp1533_FINAL(P, File, Name, ...) __annotation( \
    L ## P, \
    L"c0ccd90e-305c-3e36-4951-54eca8ed5fb9 roskmd // SRC=" _WPPW(File) \
    L" MJ= MN=", \
    L"#typev " _WPPW(Name) \
    L" 83 \"%0 [%10!s! @ %11!u!] TRACE :pfnAddMode failed. (status = %12!s!, RecommendMonitorModesPtr->hMonitorSourceModeSet = %13!p!, monitorModePtr = %14!p!)\" //   LEVEL=TRACE_LEVEL_ERROR FLAGS=ROS_TRACING_VIDPN" \
    WPP_FUNC_NAME, \
    __VA_ARGS__)
#endif // WPP_USER_MSG_GUID

#ifdef WPP_PUBLIC_ANNOT_Vc4Display_cpp1533
# define WPP_ANNOTATE_Vc4Display_cpp1533 WPP_ANNOTATE_Vc4Display_cpp1533_FINAL( \
    "TMF:", \
    "Unknown_cxx00", \
    "Unknown_cxx00", \
    L"{", \
    L"Arg, ItemString -- 10" , \
    L"Arg, ItemLong -- 11" , \
    L"Arg, ItemNTSTATUS -- 12" , \
    L"Arg, ItemPtr -- 13" , \
    L"Arg, ItemPtr -- 14" , \
    L"}", \
    L"PUBLIC_TMF:")
# ifndef WPP_PUBLIC_TMC
#  define WPP_PUBLIC_TMC // Adds "PUBLIC_TMF:" to the control guid annotation
# endif
#else // WPP_PUBLIC_ANNOT_Vc4Display_cpp1533
# define WPP_ANNOTATE_Vc4Display_cpp1533 WPP_ANNOTATE_Vc4Display_cpp1533_FINAL( \
    "TMF:", \
    "Vc4Display.cpp", \
    "Vc4Display_cpp1533", \
    L"{", \
    L"__FILE__, ItemString -- 10" , \
    L"__LINE__, ItemLong -- 11" , \
    L"status, ItemNTSTATUS -- 12" , \
    L"RecommendMonitorModesPtr->hMonitorSourceModeSet, ItemPtr -- 13" , \
    L"monitorModePtr, ItemPtr -- 14" , \
    L"}")
#endif // WPP_PUBLIC_ANNOT_Vc4Display_cpp1533

#ifdef WPP_USER_MSG_GUID
# define WPP_ANNOTATE_Vc4Display_cpp1545_FINAL(P, File, Name, ...) __annotation( \
    L ## P, \
    WPP_GUID_WTEXT WPP_USER_MSG_GUID L"roskmd // SRC=" _WPPW(File) \
    L" MJ= MN=", \
    L"#typev " _WPPW(Name) \
    L" 84 \"%0 [%10!s! @ %11!u!] TRACE :Added single monitor mode. (...TotalSize = %12!d!,%13!d!)\" //   LEVEL=TRACE_LEVEL_VERBOSE FLAGS=ROS_TRACING_DEFAULT" \
    WPP_FUNC_NAME, \
    __VA_ARGS__)
#else // WPP_USER_MSG_GUID
# define WPP_ANNOTATE_Vc4Display_cpp1545_FINAL(P, File, Name, ...) __annotation( \
    L ## P, \
    L"c0ccd90e-305c-3e36-4951-54eca8ed5fb9 roskmd // SRC=" _WPPW(File) \
    L" MJ= MN=", \
    L"#typev " _WPPW(Name) \
    L" 84 \"%0 [%10!s! @ %11!u!] TRACE :Added single monitor mode. (...TotalSize = %12!d!,%13!d!)\" //   LEVEL=TRACE_LEVEL_VERBOSE FLAGS=ROS_TRACING_DEFAULT" \
    WPP_FUNC_NAME, \
    __VA_ARGS__)
#endif // WPP_USER_MSG_GUID

#ifdef WPP_PUBLIC_ANNOT_Vc4Display_cpp1545
# define WPP_ANNOTATE_Vc4Display_cpp1545 WPP_ANNOTATE_Vc4Display_cpp1545_FINAL( \
    "TMF:", \
    "Unknown_cxx00", \
    "Unknown_cxx00", \
    L"{", \
    L"Arg, ItemString -- 10" , \
    L"Arg, ItemLong -- 11" , \
    L"Arg, ItemLong -- 12" , \
    L"Arg, ItemLong -- 13" , \
    L"}", \
    L"PUBLIC_TMF:")
# ifndef WPP_PUBLIC_TMC
#  define WPP_PUBLIC_TMC // Adds "PUBLIC_TMF:" to the control guid annotation
# endif
#else // WPP_PUBLIC_ANNOT_Vc4Display_cpp1545
# define WPP_ANNOTATE_Vc4Display_cpp1545 WPP_ANNOTATE_Vc4Display_cpp1545_FINAL( \
    "TMF:", \
    "Vc4Display.cpp", \
    "Vc4Display_cpp1545", \
    L"{", \
    L"__FILE__, ItemString -- 10" , \
    L"__LINE__, ItemLong -- 11" , \
    L"monitorModePtr->VideoSignalInfo.TotalSize.cx, ItemLong -- 12" , \
    L"monitorModePtr->VideoSignalInfo.TotalSize.cy, ItemLong -- 13" , \
    L"}")
#endif // WPP_PUBLIC_ANNOT_Vc4Display_cpp1545

#ifdef WPP_USER_MSG_GUID
# define WPP_ANNOTATE_Vc4Display_cpp1564_FINAL(P, File, Name, ...) __annotation( \
    L ## P, \
    WPP_GUID_WTEXT WPP_USER_MSG_GUID L"roskmd // SRC=" _WPPW(File) \
    L" MJ= MN=", \
    L"#typev " _WPPW(Name) \
    L" 85 \"%0 [%10!s! @ %11!u!] TRACE :Enabling CRTC_VSYNC interrupt\" //   LEVEL=TRACE_LEVEL_VERBOSE FLAGS=ROS_TRACING_DEFAULT" \
    WPP_FUNC_NAME, \
    __VA_ARGS__)
#else // WPP_USER_MSG_GUID
# define WPP_ANNOTATE_Vc4Display_cpp1564_FINAL(P, File, Name, ...) __annotation( \
    L ## P, \
    L"c0ccd90e-305c-3e36-4951-54eca8ed5fb9 roskmd // SRC=" _WPPW(File) \
    L" MJ= MN=", \
    L"#typev " _WPPW(Name) \
    L" 85 \"%0 [%10!s! @ %11!u!] TRACE :Enabling CRTC_VSYNC interrupt\" //   LEVEL=TRACE_LEVEL_VERBOSE FLAGS=ROS_TRACING_DEFAULT" \
    WPP_FUNC_NAME, \
    __VA_ARGS__)
#endif // WPP_USER_MSG_GUID

#ifdef WPP_PUBLIC_ANNOT_Vc4Display_cpp1564
# define WPP_ANNOTATE_Vc4Display_cpp1564 WPP_ANNOTATE_Vc4Display_cpp1564_FINAL( \
    "TMF:", \
    "Unknown_cxx00", \
    "Unknown_cxx00", \
    L"{", \
    L"Arg, ItemString -- 10" , \
    L"Arg, ItemLong -- 11" , \
    L"}", \
    L"PUBLIC_TMF:")
# ifndef WPP_PUBLIC_TMC
#  define WPP_PUBLIC_TMC // Adds "PUBLIC_TMF:" to the control guid annotation
# endif
#else // WPP_PUBLIC_ANNOT_Vc4Display_cpp1564
# define WPP_ANNOTATE_Vc4Display_cpp1564 WPP_ANNOTATE_Vc4Display_cpp1564_FINAL( \
    "TMF:", \
    "Vc4Display.cpp", \
    "Vc4Display_cpp1564", \
    L"{", \
    L"__FILE__, ItemString -- 10" , \
    L"__LINE__, ItemLong -- 11" , \
    L"}")
#endif // WPP_PUBLIC_ANNOT_Vc4Display_cpp1564

#ifdef WPP_USER_MSG_GUID
# define WPP_ANNOTATE_Vc4Display_cpp1578_FINAL(P, File, Name, ...) __annotation( \
    L ## P, \
    WPP_GUID_WTEXT WPP_USER_MSG_GUID L"roskmd // SRC=" _WPPW(File) \
    L" MJ= MN=", \
    L"#typev " _WPPW(Name) \
    L" 86 \"%0 [%10!s! @ %11!u!] TRACE :Disabling CRTC_VSYNC interrupt\" //   LEVEL=TRACE_LEVEL_VERBOSE FLAGS=ROS_TRACING_DEFAULT" \
    WPP_FUNC_NAME, \
    __VA_ARGS__)
#else // WPP_USER_MSG_GUID
# define WPP_ANNOTATE_Vc4Display_cpp1578_FINAL(P, File, Name, ...) __annotation( \
    L ## P, \
    L"c0ccd90e-305c-3e36-4951-54eca8ed5fb9 roskmd // SRC=" _WPPW(File) \
    L" MJ= MN=", \
    L"#typev " _WPPW(Name) \
    L" 86 \"%0 [%10!s! @ %11!u!] TRACE :Disabling CRTC_VSYNC interrupt\" //   LEVEL=TRACE_LEVEL_VERBOSE FLAGS=ROS_TRACING_DEFAULT" \
    WPP_FUNC_NAME, \
    __VA_ARGS__)
#endif // WPP_USER_MSG_GUID

#ifdef WPP_PUBLIC_ANNOT_Vc4Display_cpp1578
# define WPP_ANNOTATE_Vc4Display_cpp1578 WPP_ANNOTATE_Vc4Display_cpp1578_FINAL( \
    "TMF:", \
    "Unknown_cxx00", \
    "Unknown_cxx00", \
    L"{", \
    L"Arg, ItemString -- 10" , \
    L"Arg, ItemLong -- 11" , \
    L"}", \
    L"PUBLIC_TMF:")
# ifndef WPP_PUBLIC_TMC
#  define WPP_PUBLIC_TMC // Adds "PUBLIC_TMF:" to the control guid annotation
# endif
#else // WPP_PUBLIC_ANNOT_Vc4Display_cpp1578
# define WPP_ANNOTATE_Vc4Display_cpp1578 WPP_ANNOTATE_Vc4Display_cpp1578_FINAL( \
    "TMF:", \
    "Vc4Display.cpp", \
    "Vc4Display_cpp1578", \
    L"{", \
    L"__FILE__, ItemString -- 10" , \
    L"__LINE__, ItemLong -- 11" , \
    L"}")
#endif // WPP_PUBLIC_ANNOT_Vc4Display_cpp1578

#ifdef WPP_USER_MSG_GUID
# define WPP_ANNOTATE_Vc4Display_cpp1601_FINAL(P, File, Name, ...) __annotation( \
    L ## P, \
    WPP_GUID_WTEXT WPP_USER_MSG_GUID L"roskmd // SRC=" _WPPW(File) \
    L" MJ= MN=", \
    L"#typev " _WPPW(Name) \
    L" 87 \"%0 [%10!s! @ %11!u!] ASSERTION :Interrupt type not supported. (InterruptType=%12!d!, EnableInterrupt=%13!d!)\" //   LEVEL=TRACE_LEVEL_ERROR FLAGS=ROS_TRACING_DEBUG" \
    WPP_FUNC_NAME, \
    __VA_ARGS__)
#else // WPP_USER_MSG_GUID
# define WPP_ANNOTATE_Vc4Display_cpp1601_FINAL(P, File, Name, ...) __annotation( \
    L ## P, \
    L"c0ccd90e-305c-3e36-4951-54eca8ed5fb9 roskmd // SRC=" _WPPW(File) \
    L" MJ= MN=", \
    L"#typev " _WPPW(Name) \
    L" 87 \"%0 [%10!s! @ %11!u!] ASSERTION :Interrupt type not supported. (InterruptType=%12!d!, EnableInterrupt=%13!d!)\" //   LEVEL=TRACE_LEVEL_ERROR FLAGS=ROS_TRACING_DEBUG" \
    WPP_FUNC_NAME, \
    __VA_ARGS__)
#endif // WPP_USER_MSG_GUID

#ifdef WPP_PUBLIC_ANNOT_Vc4Display_cpp1601
# define WPP_ANNOTATE_Vc4Display_cpp1601 WPP_ANNOTATE_Vc4Display_cpp1601_FINAL( \
    "TMF:", \
    "Unknown_cxx00", \
    "Unknown_cxx00", \
    L"{", \
    L"Arg, ItemString -- 10" , \
    L"Arg, ItemLong -- 11" , \
    L"Arg, ItemLong -- 12" , \
    L"Arg, ItemLong -- 13" , \
    L"}", \
    L"PUBLIC_TMF:")
# ifndef WPP_PUBLIC_TMC
#  define WPP_PUBLIC_TMC // Adds "PUBLIC_TMF:" to the control guid annotation
# endif
#else // WPP_PUBLIC_ANNOT_Vc4Display_cpp1601
# define WPP_ANNOTATE_Vc4Display_cpp1601 WPP_ANNOTATE_Vc4Display_cpp1601_FINAL( \
    "TMF:", \
    "Vc4Display.cpp", \
    "Vc4Display_cpp1601", \
    L"{", \
    L"__FILE__, ItemString -- 10" , \
    L"__LINE__, ItemLong -- 11" , \
    L"InterruptType, ItemLong -- 12" , \
    L"EnableInterrupt, ItemLong -- 13" , \
    L"}")
#endif // WPP_PUBLIC_ANNOT_Vc4Display_cpp1601

#ifdef WPP_USER_MSG_GUID
# define WPP_ANNOTATE_Vc4Display_cpp1617_FINAL(P, File, Name, ...) __annotation( \
    L ## P, \
    WPP_GUID_WTEXT WPP_USER_MSG_GUID L"roskmd // SRC=" _WPPW(File) \
    L" MJ= MN=", \
    L"#typev " _WPPW(Name) \
    L" 88 \"%0 [%10!s! @ %11!u!] TRACE :DdiQueryVidPnHWCapability() was called. (hFunctionalVidPn = %12!p!, SourceId = %13!d!, TargetId = %14!d!)\" //   LEVEL=TRACE_LEVEL_VERBOSE FLAGS=ROS_TRACING_VIDPN" \
    WPP_FUNC_NAME, \
    __VA_ARGS__)
#else // WPP_USER_MSG_GUID
# define WPP_ANNOTATE_Vc4Display_cpp1617_FINAL(P, File, Name, ...) __annotation( \
    L ## P, \
    L"c0ccd90e-305c-3e36-4951-54eca8ed5fb9 roskmd // SRC=" _WPPW(File) \
    L" MJ= MN=", \
    L"#typev " _WPPW(Name) \
    L" 88 \"%0 [%10!s! @ %11!u!] TRACE :DdiQueryVidPnHWCapability() was called. (hFunctionalVidPn = %12!p!, SourceId = %13!d!, TargetId = %14!d!)\" //   LEVEL=TRACE_LEVEL_VERBOSE FLAGS=ROS_TRACING_VIDPN" \
    WPP_FUNC_NAME, \
    __VA_ARGS__)
#endif // WPP_USER_MSG_GUID

#ifdef WPP_PUBLIC_ANNOT_Vc4Display_cpp1617
# define WPP_ANNOTATE_Vc4Display_cpp1617 WPP_ANNOTATE_Vc4Display_cpp1617_FINAL( \
    "TMF:", \
    "Unknown_cxx00", \
    "Unknown_cxx00", \
    L"{", \
    L"Arg, ItemString -- 10" , \
    L"Arg, ItemLong -- 11" , \
    L"Arg, ItemPtr -- 12" , \
    L"Arg, ItemLong -- 13" , \
    L"Arg, ItemLong -- 14" , \
    L"}", \
    L"PUBLIC_TMF:")
# ifndef WPP_PUBLIC_TMC
#  define WPP_PUBLIC_TMC // Adds "PUBLIC_TMF:" to the control guid annotation
# endif
#else // WPP_PUBLIC_ANNOT_Vc4Display_cpp1617
# define WPP_ANNOTATE_Vc4Display_cpp1617 WPP_ANNOTATE_Vc4Display_cpp1617_FINAL( \
    "TMF:", \
    "Vc4Display.cpp", \
    "Vc4Display_cpp1617", \
    L"{", \
    L"__FILE__, ItemString -- 10" , \
    L"__LINE__, ItemLong -- 11" , \
    L"VidPnHWCapsPtr->hFunctionalVidPn, ItemPtr -- 12" , \
    L"VidPnHWCapsPtr->SourceId, ItemLong -- 13" , \
    L"VidPnHWCapsPtr->TargetId, ItemLong -- 14" , \
    L"}")
#endif // WPP_PUBLIC_ANNOT_Vc4Display_cpp1617

#ifdef WPP_USER_MSG_GUID
# define WPP_ANNOTATE_Vc4Display_cpp1648_FINAL(P, File, Name, ...) __annotation( \
    L ## P, \
    WPP_GUID_WTEXT WPP_USER_MSG_GUID L"roskmd // SRC=" _WPPW(File) \
    L" MJ= MN=", \
    L"#typev " _WPPW(Name) \
    L" 89 \"%0 [%10!s! @ %11!u!] ASSERTION :Not implemented\" //   LEVEL=TRACE_LEVEL_ERROR FLAGS=ROS_TRACING_DEBUG" \
    WPP_FUNC_NAME, \
    __VA_ARGS__)
#else // WPP_USER_MSG_GUID
# define WPP_ANNOTATE_Vc4Display_cpp1648_FINAL(P, File, Name, ...) __annotation( \
    L ## P, \
    L"c0ccd90e-305c-3e36-4951-54eca8ed5fb9 roskmd // SRC=" _WPPW(File) \
    L" MJ= MN=", \
    L"#typev " _WPPW(Name) \
    L" 89 \"%0 [%10!s! @ %11!u!] ASSERTION :Not implemented\" //   LEVEL=TRACE_LEVEL_ERROR FLAGS=ROS_TRACING_DEBUG" \
    WPP_FUNC_NAME, \
    __VA_ARGS__)
#endif // WPP_USER_MSG_GUID

#ifdef WPP_PUBLIC_ANNOT_Vc4Display_cpp1648
# define WPP_ANNOTATE_Vc4Display_cpp1648 WPP_ANNOTATE_Vc4Display_cpp1648_FINAL( \
    "TMF:", \
    "Unknown_cxx00", \
    "Unknown_cxx00", \
    L"{", \
    L"Arg, ItemString -- 10" , \
    L"Arg, ItemLong -- 11" , \
    L"}", \
    L"PUBLIC_TMF:")
# ifndef WPP_PUBLIC_TMC
#  define WPP_PUBLIC_TMC // Adds "PUBLIC_TMF:" to the control guid annotation
# endif
#else // WPP_PUBLIC_ANNOT_Vc4Display_cpp1648
# define WPP_ANNOTATE_Vc4Display_cpp1648 WPP_ANNOTATE_Vc4Display_cpp1648_FINAL( \
    "TMF:", \
    "Vc4Display.cpp", \
    "Vc4Display_cpp1648", \
    L"{", \
    L"__FILE__, ItemString -- 10" , \
    L"__LINE__, ItemLong -- 11" , \
    L"}")
#endif // WPP_PUBLIC_ANNOT_Vc4Display_cpp1648

#ifdef WPP_USER_MSG_GUID
# define WPP_ANNOTATE_Vc4Display_cpp1675_FINAL(P, File, Name, ...) __annotation( \
    L ## P, \
    WPP_GUID_WTEXT WPP_USER_MSG_GUID L"roskmd // SRC=" _WPPW(File) \
    L" MJ= MN=", \
    L"#typev " _WPPW(Name) \
    L" 90 \"%0 [%10!s! @ %11!u!] TRACE :DXGK_VIDPN_INTERFACE::pfnAcquireSourceModeSet() failed. (status = %12!s!)\" //   LEVEL=TRACE_LEVEL_ERROR FLAGS=ROS_TRACING_VIDPN" \
    WPP_FUNC_NAME, \
    __VA_ARGS__)
#else // WPP_USER_MSG_GUID
# define WPP_ANNOTATE_Vc4Display_cpp1675_FINAL(P, File, Name, ...) __annotation( \
    L ## P, \
    L"c0ccd90e-305c-3e36-4951-54eca8ed5fb9 roskmd // SRC=" _WPPW(File) \
    L" MJ= MN=", \
    L"#typev " _WPPW(Name) \
    L" 90 \"%0 [%10!s! @ %11!u!] TRACE :DXGK_VIDPN_INTERFACE::pfnAcquireSourceModeSet() failed. (status = %12!s!)\" //   LEVEL=TRACE_LEVEL_ERROR FLAGS=ROS_TRACING_VIDPN" \
    WPP_FUNC_NAME, \
    __VA_ARGS__)
#endif // WPP_USER_MSG_GUID

#ifdef WPP_PUBLIC_ANNOT_Vc4Display_cpp1675
# define WPP_ANNOTATE_Vc4Display_cpp1675 WPP_ANNOTATE_Vc4Display_cpp1675_FINAL( \
    "TMF:", \
    "Unknown_cxx00", \
    "Unknown_cxx00", \
    L"{", \
    L"Arg, ItemString -- 10" , \
    L"Arg, ItemLong -- 11" , \
    L"Arg, ItemNTSTATUS -- 12" , \
    L"}", \
    L"PUBLIC_TMF:")
# ifndef WPP_PUBLIC_TMC
#  define WPP_PUBLIC_TMC // Adds "PUBLIC_TMF:" to the control guid annotation
# endif
#else // WPP_PUBLIC_ANNOT_Vc4Display_cpp1675
# define WPP_ANNOTATE_Vc4Display_cpp1675 WPP_ANNOTATE_Vc4Display_cpp1675_FINAL( \
    "TMF:", \
    "Vc4Display.cpp", \
    "Vc4Display_cpp1675", \
    L"{", \
    L"__FILE__, ItemString -- 10" , \
    L"__LINE__, ItemLong -- 11" , \
    L"status, ItemNTSTATUS -- 12" , \
    L"}")
#endif // WPP_PUBLIC_ANNOT_Vc4Display_cpp1675

#ifdef WPP_USER_MSG_GUID
# define WPP_ANNOTATE_Vc4Display_cpp1698_FINAL(P, File, Name, ...) __annotation( \
    L ## P, \
    WPP_GUID_WTEXT WPP_USER_MSG_GUID L"roskmd // SRC=" _WPPW(File) \
    L" MJ= MN=", \
    L"#typev " _WPPW(Name) \
    L" 91 \"%0 [%10!s! @ %11!u!] TRACE :DXGK_VIDPNSOURCEMODESET_INTERFACE::pfnAcquirePinnedModeInfo() failed. (status = %12!s!, sourceModeSetHandle = %13!p!)\" //   LEVEL=TRACE_LEVEL_ERROR FLAGS=ROS_TRACING_VIDPN" \
    WPP_FUNC_NAME, \
    __VA_ARGS__)
#else // WPP_USER_MSG_GUID
# define WPP_ANNOTATE_Vc4Display_cpp1698_FINAL(P, File, Name, ...) __annotation( \
    L ## P, \
    L"c0ccd90e-305c-3e36-4951-54eca8ed5fb9 roskmd // SRC=" _WPPW(File) \
    L" MJ= MN=", \
    L"#typev " _WPPW(Name) \
    L" 91 \"%0 [%10!s! @ %11!u!] TRACE :DXGK_VIDPNSOURCEMODESET_INTERFACE::pfnAcquirePinnedModeInfo() failed. (status = %12!s!, sourceModeSetHandle = %13!p!)\" //   LEVEL=TRACE_LEVEL_ERROR FLAGS=ROS_TRACING_VIDPN" \
    WPP_FUNC_NAME, \
    __VA_ARGS__)
#endif // WPP_USER_MSG_GUID

#ifdef WPP_PUBLIC_ANNOT_Vc4Display_cpp1698
# define WPP_ANNOTATE_Vc4Display_cpp1698 WPP_ANNOTATE_Vc4Display_cpp1698_FINAL( \
    "TMF:", \
    "Unknown_cxx00", \
    "Unknown_cxx00", \
    L"{", \
    L"Arg, ItemString -- 10" , \
    L"Arg, ItemLong -- 11" , \
    L"Arg, ItemNTSTATUS -- 12" , \
    L"Arg, ItemPtr -- 13" , \
    L"}", \
    L"PUBLIC_TMF:")
# ifndef WPP_PUBLIC_TMC
#  define WPP_PUBLIC_TMC // Adds "PUBLIC_TMF:" to the control guid annotation
# endif
#else // WPP_PUBLIC_ANNOT_Vc4Display_cpp1698
# define WPP_ANNOTATE_Vc4Display_cpp1698 WPP_ANNOTATE_Vc4Display_cpp1698_FINAL( \
    "TMF:", \
    "Vc4Display.cpp", \
    "Vc4Display_cpp1698", \
    L"{", \
    L"__FILE__, ItemString -- 10" , \
    L"__LINE__, ItemLong -- 11" , \
    L"status, ItemNTSTATUS -- 12" , \
    L"sourceModeSetHandle, ItemPtr -- 13" , \
    L"}")
#endif // WPP_PUBLIC_ANNOT_Vc4Display_cpp1698

#ifdef WPP_USER_MSG_GUID
# define WPP_ANNOTATE_Vc4Display_cpp1748_FINAL(P, File, Name, ...) __annotation( \
    L ## P, \
    WPP_GUID_WTEXT WPP_USER_MSG_GUID L"roskmd // SRC=" _WPPW(File) \
    L" MJ= MN=", \
    L"#typev " _WPPW(Name) \
    L" 92 \"%0 [%10!s! @ %11!u!] TRACE :DXGK_VIDPN_INTERFACE::pfnCreateNewSourceModeSet failed. (status = %12!s!)\" //   LEVEL=TRACE_LEVEL_ERROR FLAGS=ROS_TRACING_VIDPN" \
    WPP_FUNC_NAME, \
    __VA_ARGS__)
#else // WPP_USER_MSG_GUID
# define WPP_ANNOTATE_Vc4Display_cpp1748_FINAL(P, File, Name, ...) __annotation( \
    L ## P, \
    L"c0ccd90e-305c-3e36-4951-54eca8ed5fb9 roskmd // SRC=" _WPPW(File) \
    L" MJ= MN=", \
    L"#typev " _WPPW(Name) \
    L" 92 \"%0 [%10!s! @ %11!u!] TRACE :DXGK_VIDPN_INTERFACE::pfnCreateNewSourceModeSet failed. (status = %12!s!)\" //   LEVEL=TRACE_LEVEL_ERROR FLAGS=ROS_TRACING_VIDPN" \
    WPP_FUNC_NAME, \
    __VA_ARGS__)
#endif // WPP_USER_MSG_GUID

#ifdef WPP_PUBLIC_ANNOT_Vc4Display_cpp1748
# define WPP_ANNOTATE_Vc4Display_cpp1748 WPP_ANNOTATE_Vc4Display_cpp1748_FINAL( \
    "TMF:", \
    "Unknown_cxx00", \
    "Unknown_cxx00", \
    L"{", \
    L"Arg, ItemString -- 10" , \
    L"Arg, ItemLong -- 11" , \
    L"Arg, ItemNTSTATUS -- 12" , \
    L"}", \
    L"PUBLIC_TMF:")
# ifndef WPP_PUBLIC_TMC
#  define WPP_PUBLIC_TMC // Adds "PUBLIC_TMF:" to the control guid annotation
# endif
#else // WPP_PUBLIC_ANNOT_Vc4Display_cpp1748
# define WPP_ANNOTATE_Vc4Display_cpp1748 WPP_ANNOTATE_Vc4Display_cpp1748_FINAL( \
    "TMF:", \
    "Vc4Display.cpp", \
    "Vc4Display_cpp1748", \
    L"{", \
    L"__FILE__, ItemString -- 10" , \
    L"__LINE__, ItemLong -- 11" , \
    L"status, ItemNTSTATUS -- 12" , \
    L"}")
#endif // WPP_PUBLIC_ANNOT_Vc4Display_cpp1748

#ifdef WPP_USER_MSG_GUID
# define WPP_ANNOTATE_Vc4Display_cpp1772_FINAL(P, File, Name, ...) __annotation( \
    L ## P, \
    WPP_GUID_WTEXT WPP_USER_MSG_GUID L"roskmd // SRC=" _WPPW(File) \
    L" MJ= MN=", \
    L"#typev " _WPPW(Name) \
    L" 93 \"%0 [%10!s! @ %11!u!] TRACE :DXGK_VIDPNSOURCEMODESET_INTERFACE::pfnCreateNewModeInfo() failed. (status = %12!s!)\" //   LEVEL=TRACE_LEVEL_ERROR FLAGS=ROS_TRACING_VIDPN" \
    WPP_FUNC_NAME, \
    __VA_ARGS__)
#else // WPP_USER_MSG_GUID
# define WPP_ANNOTATE_Vc4Display_cpp1772_FINAL(P, File, Name, ...) __annotation( \
    L ## P, \
    L"c0ccd90e-305c-3e36-4951-54eca8ed5fb9 roskmd // SRC=" _WPPW(File) \
    L" MJ= MN=", \
    L"#typev " _WPPW(Name) \
    L" 93 \"%0 [%10!s! @ %11!u!] TRACE :DXGK_VIDPNSOURCEMODESET_INTERFACE::pfnCreateNewModeInfo() failed. (status = %12!s!)\" //   LEVEL=TRACE_LEVEL_ERROR FLAGS=ROS_TRACING_VIDPN" \
    WPP_FUNC_NAME, \
    __VA_ARGS__)
#endif // WPP_USER_MSG_GUID

#ifdef WPP_PUBLIC_ANNOT_Vc4Display_cpp1772
# define WPP_ANNOTATE_Vc4Display_cpp1772 WPP_ANNOTATE_Vc4Display_cpp1772_FINAL( \
    "TMF:", \
    "Unknown_cxx00", \
    "Unknown_cxx00", \
    L"{", \
    L"Arg, ItemString -- 10" , \
    L"Arg, ItemLong -- 11" , \
    L"Arg, ItemNTSTATUS -- 12" , \
    L"}", \
    L"PUBLIC_TMF:")
# ifndef WPP_PUBLIC_TMC
#  define WPP_PUBLIC_TMC // Adds "PUBLIC_TMF:" to the control guid annotation
# endif
#else // WPP_PUBLIC_ANNOT_Vc4Display_cpp1772
# define WPP_ANNOTATE_Vc4Display_cpp1772 WPP_ANNOTATE_Vc4Display_cpp1772_FINAL( \
    "TMF:", \
    "Vc4Display.cpp", \
    "Vc4Display_cpp1772", \
    L"{", \
    L"__FILE__, ItemString -- 10" , \
    L"__LINE__, ItemLong -- 11" , \
    L"status, ItemNTSTATUS -- 12" , \
    L"}")
#endif // WPP_PUBLIC_ANNOT_Vc4Display_cpp1772

#ifdef WPP_USER_MSG_GUID
# define WPP_ANNOTATE_Vc4Display_cpp1801_FINAL(P, File, Name, ...) __annotation( \
    L ## P, \
    WPP_GUID_WTEXT WPP_USER_MSG_GUID L"roskmd // SRC=" _WPPW(File) \
    L" MJ= MN=", \
    L"#typev " _WPPW(Name) \
    L" 94 \"%0 [%10!s! @ %11!u!] TRACE :Adding source mode. (PrimSurfSize = %12!d!,%13!d!, Stride = %14!d!, PixelFormat = %15!d!, ColorBasis = %16!d!, PixelValueAccessMode = %17!d!)\" //   LEVEL=TRACE_LEVEL_VERBOSE FLAGS=ROS_TRACING_VIDPN" \
    WPP_FUNC_NAME, \
    __VA_ARGS__)
#else // WPP_USER_MSG_GUID
# define WPP_ANNOTATE_Vc4Display_cpp1801_FINAL(P, File, Name, ...) __annotation( \
    L ## P, \
    L"c0ccd90e-305c-3e36-4951-54eca8ed5fb9 roskmd // SRC=" _WPPW(File) \
    L" MJ= MN=", \
    L"#typev " _WPPW(Name) \
    L" 94 \"%0 [%10!s! @ %11!u!] TRACE :Adding source mode. (PrimSurfSize = %12!d!,%13!d!, Stride = %14!d!, PixelFormat = %15!d!, ColorBasis = %16!d!, PixelValueAccessMode = %17!d!)\" //   LEVEL=TRACE_LEVEL_VERBOSE FLAGS=ROS_TRACING_VIDPN" \
    WPP_FUNC_NAME, \
    __VA_ARGS__)
#endif // WPP_USER_MSG_GUID

#ifdef WPP_PUBLIC_ANNOT_Vc4Display_cpp1801
# define WPP_ANNOTATE_Vc4Display_cpp1801 WPP_ANNOTATE_Vc4Display_cpp1801_FINAL( \
    "TMF:", \
    "Unknown_cxx00", \
    "Unknown_cxx00", \
    L"{", \
    L"Arg, ItemString -- 10" , \
    L"Arg, ItemLong -- 11" , \
    L"Arg, ItemLong -- 12" , \
    L"Arg, ItemLong -- 13" , \
    L"Arg, ItemLong -- 14" , \
    L"Arg, ItemLong -- 15" , \
    L"Arg, ItemLong -- 16" , \
    L"Arg, ItemLong -- 17" , \
    L"}", \
    L"PUBLIC_TMF:")
# ifndef WPP_PUBLIC_TMC
#  define WPP_PUBLIC_TMC // Adds "PUBLIC_TMF:" to the control guid annotation
# endif
#else // WPP_PUBLIC_ANNOT_Vc4Display_cpp1801
# define WPP_ANNOTATE_Vc4Display_cpp1801 WPP_ANNOTATE_Vc4Display_cpp1801_FINAL( \
    "TMF:", \
    "Vc4Display.cpp", \
    "Vc4Display_cpp1801", \
    L"{", \
    L"__FILE__, ItemString -- 10" , \
    L"__LINE__, ItemLong -- 11" , \
    L"sourceModeInfoPtr->Format.Graphics.PrimSurfSize.cx, ItemLong -- 12" , \
    L"sourceModeInfoPtr->Format.Graphics.PrimSurfSize.cy, ItemLong -- 13" , \
    L"sourceModeInfoPtr->Format.Graphics.Stride, ItemLong -- 14" , \
    L"sourceModeInfoPtr->Format.Graphics.PixelFormat, ItemLong -- 15" , \
    L"sourceModeInfoPtr->Format.Graphics.ColorBasis, ItemLong -- 16" , \
    L"sourceModeInfoPtr->Format.Graphics.PixelValueAccessMode, ItemLong -- 17" , \
    L"}")
#endif // WPP_PUBLIC_ANNOT_Vc4Display_cpp1801

#ifdef WPP_USER_MSG_GUID
# define WPP_ANNOTATE_Vc4Display_cpp1817_FINAL(P, File, Name, ...) __annotation( \
    L ## P, \
    WPP_GUID_WTEXT WPP_USER_MSG_GUID L"roskmd // SRC=" _WPPW(File) \
    L" MJ= MN=", \
    L"#typev " _WPPW(Name) \
    L" 95 \"%0 [%10!s! @ %11!u!] TRACE :DXGK_VIDPNSOURCEMODESET_INTERFACE::pfnAddMode() failed. (status = %12!s!)\" //   LEVEL=TRACE_LEVEL_ERROR FLAGS=ROS_TRACING_VIDPN" \
    WPP_FUNC_NAME, \
    __VA_ARGS__)
#else // WPP_USER_MSG_GUID
# define WPP_ANNOTATE_Vc4Display_cpp1817_FINAL(P, File, Name, ...) __annotation( \
    L ## P, \
    L"c0ccd90e-305c-3e36-4951-54eca8ed5fb9 roskmd // SRC=" _WPPW(File) \
    L" MJ= MN=", \
    L"#typev " _WPPW(Name) \
    L" 95 \"%0 [%10!s! @ %11!u!] TRACE :DXGK_VIDPNSOURCEMODESET_INTERFACE::pfnAddMode() failed. (status = %12!s!)\" //   LEVEL=TRACE_LEVEL_ERROR FLAGS=ROS_TRACING_VIDPN" \
    WPP_FUNC_NAME, \
    __VA_ARGS__)
#endif // WPP_USER_MSG_GUID

#ifdef WPP_PUBLIC_ANNOT_Vc4Display_cpp1817
# define WPP_ANNOTATE_Vc4Display_cpp1817 WPP_ANNOTATE_Vc4Display_cpp1817_FINAL( \
    "TMF:", \
    "Unknown_cxx00", \
    "Unknown_cxx00", \
    L"{", \
    L"Arg, ItemString -- 10" , \
    L"Arg, ItemLong -- 11" , \
    L"Arg, ItemNTSTATUS -- 12" , \
    L"}", \
    L"PUBLIC_TMF:")
# ifndef WPP_PUBLIC_TMC
#  define WPP_PUBLIC_TMC // Adds "PUBLIC_TMF:" to the control guid annotation
# endif
#else // WPP_PUBLIC_ANNOT_Vc4Display_cpp1817
# define WPP_ANNOTATE_Vc4Display_cpp1817 WPP_ANNOTATE_Vc4Display_cpp1817_FINAL( \
    "TMF:", \
    "Vc4Display.cpp", \
    "Vc4Display_cpp1817", \
    L"{", \
    L"__FILE__, ItemString -- 10" , \
    L"__LINE__, ItemLong -- 11" , \
    L"status, ItemNTSTATUS -- 12" , \
    L"}")
#endif // WPP_PUBLIC_ANNOT_Vc4Display_cpp1817

#ifdef WPP_USER_MSG_GUID
# define WPP_ANNOTATE_Vc4Display_cpp1833_FINAL(P, File, Name, ...) __annotation( \
    L ## P, \
    WPP_GUID_WTEXT WPP_USER_MSG_GUID L"roskmd // SRC=" _WPPW(File) \
    L" MJ= MN=", \
    L"#typev " _WPPW(Name) \
    L" 96 \"%0 [%10!s! @ %11!u!] TRACE :DXGK_VIDPN_INTERFACE::pfnAssignSourceModeSet() failed. (status = %12!s!)\" //   LEVEL=TRACE_LEVEL_ERROR FLAGS=ROS_TRACING_VIDPN" \
    WPP_FUNC_NAME, \
    __VA_ARGS__)
#else // WPP_USER_MSG_GUID
# define WPP_ANNOTATE_Vc4Display_cpp1833_FINAL(P, File, Name, ...) __annotation( \
    L ## P, \
    L"c0ccd90e-305c-3e36-4951-54eca8ed5fb9 roskmd // SRC=" _WPPW(File) \
    L" MJ= MN=", \
    L"#typev " _WPPW(Name) \
    L" 96 \"%0 [%10!s! @ %11!u!] TRACE :DXGK_VIDPN_INTERFACE::pfnAssignSourceModeSet() failed. (status = %12!s!)\" //   LEVEL=TRACE_LEVEL_ERROR FLAGS=ROS_TRACING_VIDPN" \
    WPP_FUNC_NAME, \
    __VA_ARGS__)
#endif // WPP_USER_MSG_GUID

#ifdef WPP_PUBLIC_ANNOT_Vc4Display_cpp1833
# define WPP_ANNOTATE_Vc4Display_cpp1833 WPP_ANNOTATE_Vc4Display_cpp1833_FINAL( \
    "TMF:", \
    "Unknown_cxx00", \
    "Unknown_cxx00", \
    L"{", \
    L"Arg, ItemString -- 10" , \
    L"Arg, ItemLong -- 11" , \
    L"Arg, ItemNTSTATUS -- 12" , \
    L"}", \
    L"PUBLIC_TMF:")
# ifndef WPP_PUBLIC_TMC
#  define WPP_PUBLIC_TMC // Adds "PUBLIC_TMF:" to the control guid annotation
# endif
#else // WPP_PUBLIC_ANNOT_Vc4Display_cpp1833
# define WPP_ANNOTATE_Vc4Display_cpp1833 WPP_ANNOTATE_Vc4Display_cpp1833_FINAL( \
    "TMF:", \
    "Vc4Display.cpp", \
    "Vc4Display_cpp1833", \
    L"{", \
    L"__FILE__, ItemString -- 10" , \
    L"__LINE__, ItemLong -- 11" , \
    L"status, ItemNTSTATUS -- 12" , \
    L"}")
#endif // WPP_PUBLIC_ANNOT_Vc4Display_cpp1833

#ifdef WPP_USER_MSG_GUID
# define WPP_ANNOTATE_Vc4Display_cpp1868_FINAL(P, File, Name, ...) __annotation( \
    L ## P, \
    WPP_GUID_WTEXT WPP_USER_MSG_GUID L"roskmd // SRC=" _WPPW(File) \
    L" MJ= MN=", \
    L"#typev " _WPPW(Name) \
    L" 97 \"%0 [%10!s! @ %11!u!] TRACE :DXGK_VIDPN_INTERFACE::pfnAcquireTargetModeSet() failed. (status = %12!s!)\" //   LEVEL=TRACE_LEVEL_ERROR FLAGS=ROS_TRACING_VIDPN" \
    WPP_FUNC_NAME, \
    __VA_ARGS__)
#else // WPP_USER_MSG_GUID
# define WPP_ANNOTATE_Vc4Display_cpp1868_FINAL(P, File, Name, ...) __annotation( \
    L ## P, \
    L"c0ccd90e-305c-3e36-4951-54eca8ed5fb9 roskmd // SRC=" _WPPW(File) \
    L" MJ= MN=", \
    L"#typev " _WPPW(Name) \
    L" 97 \"%0 [%10!s! @ %11!u!] TRACE :DXGK_VIDPN_INTERFACE::pfnAcquireTargetModeSet() failed. (status = %12!s!)\" //   LEVEL=TRACE_LEVEL_ERROR FLAGS=ROS_TRACING_VIDPN" \
    WPP_FUNC_NAME, \
    __VA_ARGS__)
#endif // WPP_USER_MSG_GUID

#ifdef WPP_PUBLIC_ANNOT_Vc4Display_cpp1868
# define WPP_ANNOTATE_Vc4Display_cpp1868 WPP_ANNOTATE_Vc4Display_cpp1868_FINAL( \
    "TMF:", \
    "Unknown_cxx00", \
    "Unknown_cxx00", \
    L"{", \
    L"Arg, ItemString -- 10" , \
    L"Arg, ItemLong -- 11" , \
    L"Arg, ItemNTSTATUS -- 12" , \
    L"}", \
    L"PUBLIC_TMF:")
# ifndef WPP_PUBLIC_TMC
#  define WPP_PUBLIC_TMC // Adds "PUBLIC_TMF:" to the control guid annotation
# endif
#else // WPP_PUBLIC_ANNOT_Vc4Display_cpp1868
# define WPP_ANNOTATE_Vc4Display_cpp1868 WPP_ANNOTATE_Vc4Display_cpp1868_FINAL( \
    "TMF:", \
    "Vc4Display.cpp", \
    "Vc4Display_cpp1868", \
    L"{", \
    L"__FILE__, ItemString -- 10" , \
    L"__LINE__, ItemLong -- 11" , \
    L"status, ItemNTSTATUS -- 12" , \
    L"}")
#endif // WPP_PUBLIC_ANNOT_Vc4Display_cpp1868

#ifdef WPP_USER_MSG_GUID
# define WPP_ANNOTATE_Vc4Display_cpp1891_FINAL(P, File, Name, ...) __annotation( \
    L ## P, \
    WPP_GUID_WTEXT WPP_USER_MSG_GUID L"roskmd // SRC=" _WPPW(File) \
    L" MJ= MN=", \
    L"#typev " _WPPW(Name) \
    L" 98 \"%0 [%10!s! @ %11!u!] TRACE :DXGK_VIDPNTARGETMODESET_INTERFACE::pfnAcquirePinnedModeInfo() failed. (status = %12!s!, targetModeSetHandle = %13!p!)\" //   LEVEL=TRACE_LEVEL_ERROR FLAGS=ROS_TRACING_VIDPN" \
    WPP_FUNC_NAME, \
    __VA_ARGS__)
#else // WPP_USER_MSG_GUID
# define WPP_ANNOTATE_Vc4Display_cpp1891_FINAL(P, File, Name, ...) __annotation( \
    L ## P, \
    L"c0ccd90e-305c-3e36-4951-54eca8ed5fb9 roskmd // SRC=" _WPPW(File) \
    L" MJ= MN=", \
    L"#typev " _WPPW(Name) \
    L" 98 \"%0 [%10!s! @ %11!u!] TRACE :DXGK_VIDPNTARGETMODESET_INTERFACE::pfnAcquirePinnedModeInfo() failed. (status = %12!s!, targetModeSetHandle = %13!p!)\" //   LEVEL=TRACE_LEVEL_ERROR FLAGS=ROS_TRACING_VIDPN" \
    WPP_FUNC_NAME, \
    __VA_ARGS__)
#endif // WPP_USER_MSG_GUID

#ifdef WPP_PUBLIC_ANNOT_Vc4Display_cpp1891
# define WPP_ANNOTATE_Vc4Display_cpp1891 WPP_ANNOTATE_Vc4Display_cpp1891_FINAL( \
    "TMF:", \
    "Unknown_cxx00", \
    "Unknown_cxx00", \
    L"{", \
    L"Arg, ItemString -- 10" , \
    L"Arg, ItemLong -- 11" , \
    L"Arg, ItemNTSTATUS -- 12" , \
    L"Arg, ItemPtr -- 13" , \
    L"}", \
    L"PUBLIC_TMF:")
# ifndef WPP_PUBLIC_TMC
#  define WPP_PUBLIC_TMC // Adds "PUBLIC_TMF:" to the control guid annotation
# endif
#else // WPP_PUBLIC_ANNOT_Vc4Display_cpp1891
# define WPP_ANNOTATE_Vc4Display_cpp1891 WPP_ANNOTATE_Vc4Display_cpp1891_FINAL( \
    "TMF:", \
    "Vc4Display.cpp", \
    "Vc4Display_cpp1891", \
    L"{", \
    L"__FILE__, ItemString -- 10" , \
    L"__LINE__, ItemLong -- 11" , \
    L"status, ItemNTSTATUS -- 12" , \
    L"targetModeSetHandle, ItemPtr -- 13" , \
    L"}")
#endif // WPP_PUBLIC_ANNOT_Vc4Display_cpp1891

#ifdef WPP_USER_MSG_GUID
# define WPP_ANNOTATE_Vc4Display_cpp1940_FINAL(P, File, Name, ...) __annotation( \
    L ## P, \
    WPP_GUID_WTEXT WPP_USER_MSG_GUID L"roskmd // SRC=" _WPPW(File) \
    L" MJ= MN=", \
    L"#typev " _WPPW(Name) \
    L" 99 \"%0 [%10!s! @ %11!u!] TRACE :DXGK_VIDPN_INTERFACE::pfnCreateNewTargetModeSet failed. (status = %12!s!)\" //   LEVEL=TRACE_LEVEL_ERROR FLAGS=ROS_TRACING_VIDPN" \
    WPP_FUNC_NAME, \
    __VA_ARGS__)
#else // WPP_USER_MSG_GUID
# define WPP_ANNOTATE_Vc4Display_cpp1940_FINAL(P, File, Name, ...) __annotation( \
    L ## P, \
    L"c0ccd90e-305c-3e36-4951-54eca8ed5fb9 roskmd // SRC=" _WPPW(File) \
    L" MJ= MN=", \
    L"#typev " _WPPW(Name) \
    L" 99 \"%0 [%10!s! @ %11!u!] TRACE :DXGK_VIDPN_INTERFACE::pfnCreateNewTargetModeSet failed. (status = %12!s!)\" //   LEVEL=TRACE_LEVEL_ERROR FLAGS=ROS_TRACING_VIDPN" \
    WPP_FUNC_NAME, \
    __VA_ARGS__)
#endif // WPP_USER_MSG_GUID

#ifdef WPP_PUBLIC_ANNOT_Vc4Display_cpp1940
# define WPP_ANNOTATE_Vc4Display_cpp1940 WPP_ANNOTATE_Vc4Display_cpp1940_FINAL( \
    "TMF:", \
    "Unknown_cxx00", \
    "Unknown_cxx00", \
    L"{", \
    L"Arg, ItemString -- 10" , \
    L"Arg, ItemLong -- 11" , \
    L"Arg, ItemNTSTATUS -- 12" , \
    L"}", \
    L"PUBLIC_TMF:")
# ifndef WPP_PUBLIC_TMC
#  define WPP_PUBLIC_TMC // Adds "PUBLIC_TMF:" to the control guid annotation
# endif
#else // WPP_PUBLIC_ANNOT_Vc4Display_cpp1940
# define WPP_ANNOTATE_Vc4Display_cpp1940 WPP_ANNOTATE_Vc4Display_cpp1940_FINAL( \
    "TMF:", \
    "Vc4Display.cpp", \
    "Vc4Display_cpp1940", \
    L"{", \
    L"__FILE__, ItemString -- 10" , \
    L"__LINE__, ItemLong -- 11" , \
    L"status, ItemNTSTATUS -- 12" , \
    L"}")
#endif // WPP_PUBLIC_ANNOT_Vc4Display_cpp1940

#ifdef WPP_USER_MSG_GUID
# define WPP_ANNOTATE_Vc4Display_cpp1964_FINAL(P, File, Name, ...) __annotation( \
    L ## P, \
    WPP_GUID_WTEXT WPP_USER_MSG_GUID L"roskmd // SRC=" _WPPW(File) \
    L" MJ= MN=", \
    L"#typev " _WPPW(Name) \
    L" 100 \"%0 [%10!s! @ %11!u!] TRACE :DXGK_VIDPNTARGETMODESET_INTERFACE::pfnCreateNewModeInfo() failed. (status = %12!s!)\" //   LEVEL=TRACE_LEVEL_ERROR FLAGS=ROS_TRACING_VIDPN" \
    WPP_FUNC_NAME, \
    __VA_ARGS__)
#else // WPP_USER_MSG_GUID
# define WPP_ANNOTATE_Vc4Display_cpp1964_FINAL(P, File, Name, ...) __annotation( \
    L ## P, \
    L"c0ccd90e-305c-3e36-4951-54eca8ed5fb9 roskmd // SRC=" _WPPW(File) \
    L" MJ= MN=", \
    L"#typev " _WPPW(Name) \
    L" 100 \"%0 [%10!s! @ %11!u!] TRACE :DXGK_VIDPNTARGETMODESET_INTERFACE::pfnCreateNewModeInfo() failed. (status = %12!s!)\" //   LEVEL=TRACE_LEVEL_ERROR FLAGS=ROS_TRACING_VIDPN" \
    WPP_FUNC_NAME, \
    __VA_ARGS__)
#endif // WPP_USER_MSG_GUID

#ifdef WPP_PUBLIC_ANNOT_Vc4Display_cpp1964
# define WPP_ANNOTATE_Vc4Display_cpp1964 WPP_ANNOTATE_Vc4Display_cpp1964_FINAL( \
    "TMF:", \
    "Unknown_cxx00", \
    "Unknown_cxx00", \
    L"{", \
    L"Arg, ItemString -- 10" , \
    L"Arg, ItemLong -- 11" , \
    L"Arg, ItemNTSTATUS -- 12" , \
    L"}", \
    L"PUBLIC_TMF:")
# ifndef WPP_PUBLIC_TMC
#  define WPP_PUBLIC_TMC // Adds "PUBLIC_TMF:" to the control guid annotation
# endif
#else // WPP_PUBLIC_ANNOT_Vc4Display_cpp1964
# define WPP_ANNOTATE_Vc4Display_cpp1964 WPP_ANNOTATE_Vc4Display_cpp1964_FINAL( \
    "TMF:", \
    "Vc4Display.cpp", \
    "Vc4Display_cpp1964", \
    L"{", \
    L"__FILE__, ItemString -- 10" , \
    L"__LINE__, ItemLong -- 11" , \
    L"status, ItemNTSTATUS -- 12" , \
    L"}")
#endif // WPP_PUBLIC_ANNOT_Vc4Display_cpp1964

#ifdef WPP_USER_MSG_GUID
# define WPP_ANNOTATE_Vc4Display_cpp1991_FINAL(P, File, Name, ...) __annotation( \
    L ## P, \
    WPP_GUID_WTEXT WPP_USER_MSG_GUID L"roskmd // SRC=" _WPPW(File) \
    L" MJ= MN=", \
    L"#typev " _WPPW(Name) \
    L" 101 \"%0 [%10!s! @ %11!u!] TRACE :DXGK_VIDPNTARGETMODESET_INTERFACE::pfnAddMode() failed. (status = %12!s!)\" //   LEVEL=TRACE_LEVEL_ERROR FLAGS=ROS_TRACING_VIDPN" \
    WPP_FUNC_NAME, \
    __VA_ARGS__)
#else // WPP_USER_MSG_GUID
# define WPP_ANNOTATE_Vc4Display_cpp1991_FINAL(P, File, Name, ...) __annotation( \
    L ## P, \
    L"c0ccd90e-305c-3e36-4951-54eca8ed5fb9 roskmd // SRC=" _WPPW(File) \
    L" MJ= MN=", \
    L"#typev " _WPPW(Name) \
    L" 101 \"%0 [%10!s! @ %11!u!] TRACE :DXGK_VIDPNTARGETMODESET_INTERFACE::pfnAddMode() failed. (status = %12!s!)\" //   LEVEL=TRACE_LEVEL_ERROR FLAGS=ROS_TRACING_VIDPN" \
    WPP_FUNC_NAME, \
    __VA_ARGS__)
#endif // WPP_USER_MSG_GUID

#ifdef WPP_PUBLIC_ANNOT_Vc4Display_cpp1991
# define WPP_ANNOTATE_Vc4Display_cpp1991 WPP_ANNOTATE_Vc4Display_cpp1991_FINAL( \
    "TMF:", \
    "Unknown_cxx00", \
    "Unknown_cxx00", \
    L"{", \
    L"Arg, ItemString -- 10" , \
    L"Arg, ItemLong -- 11" , \
    L"Arg, ItemNTSTATUS -- 12" , \
    L"}", \
    L"PUBLIC_TMF:")
# ifndef WPP_PUBLIC_TMC
#  define WPP_PUBLIC_TMC // Adds "PUBLIC_TMF:" to the control guid annotation
# endif
#else // WPP_PUBLIC_ANNOT_Vc4Display_cpp1991
# define WPP_ANNOTATE_Vc4Display_cpp1991 WPP_ANNOTATE_Vc4Display_cpp1991_FINAL( \
    "TMF:", \
    "Vc4Display.cpp", \
    "Vc4Display_cpp1991", \
    L"{", \
    L"__FILE__, ItemString -- 10" , \
    L"__LINE__, ItemLong -- 11" , \
    L"status, ItemNTSTATUS -- 12" , \
    L"}")
#endif // WPP_PUBLIC_ANNOT_Vc4Display_cpp1991

#ifdef WPP_USER_MSG_GUID
# define WPP_ANNOTATE_Vc4Display_cpp2007_FINAL(P, File, Name, ...) __annotation( \
    L ## P, \
    WPP_GUID_WTEXT WPP_USER_MSG_GUID L"roskmd // SRC=" _WPPW(File) \
    L" MJ= MN=", \
    L"#typev " _WPPW(Name) \
    L" 102 \"%0 [%10!s! @ %11!u!] TRACE :DXGK_VIDPN_INTERFACE::pfnAssignTargetModeSet() failed. (status = %12!s!)\" //   LEVEL=TRACE_LEVEL_ERROR FLAGS=ROS_TRACING_VIDPN" \
    WPP_FUNC_NAME, \
    __VA_ARGS__)
#else // WPP_USER_MSG_GUID
# define WPP_ANNOTATE_Vc4Display_cpp2007_FINAL(P, File, Name, ...) __annotation( \
    L ## P, \
    L"c0ccd90e-305c-3e36-4951-54eca8ed5fb9 roskmd // SRC=" _WPPW(File) \
    L" MJ= MN=", \
    L"#typev " _WPPW(Name) \
    L" 102 \"%0 [%10!s! @ %11!u!] TRACE :DXGK_VIDPN_INTERFACE::pfnAssignTargetModeSet() failed. (status = %12!s!)\" //   LEVEL=TRACE_LEVEL_ERROR FLAGS=ROS_TRACING_VIDPN" \
    WPP_FUNC_NAME, \
    __VA_ARGS__)
#endif // WPP_USER_MSG_GUID

#ifdef WPP_PUBLIC_ANNOT_Vc4Display_cpp2007
# define WPP_ANNOTATE_Vc4Display_cpp2007 WPP_ANNOTATE_Vc4Display_cpp2007_FINAL( \
    "TMF:", \
    "Unknown_cxx00", \
    "Unknown_cxx00", \
    L"{", \
    L"Arg, ItemString -- 10" , \
    L"Arg, ItemLong -- 11" , \
    L"Arg, ItemNTSTATUS -- 12" , \
    L"}", \
    L"PUBLIC_TMF:")
# ifndef WPP_PUBLIC_TMC
#  define WPP_PUBLIC_TMC // Adds "PUBLIC_TMF:" to the control guid annotation
# endif
#else // WPP_PUBLIC_ANNOT_Vc4Display_cpp2007
# define WPP_ANNOTATE_Vc4Display_cpp2007 WPP_ANNOTATE_Vc4Display_cpp2007_FINAL( \
    "TMF:", \
    "Vc4Display.cpp", \
    "Vc4Display_cpp2007", \
    L"{", \
    L"__FILE__, ItemString -- 10" , \
    L"__LINE__, ItemLong -- 11" , \
    L"status, ItemNTSTATUS -- 12" , \
    L"}")
#endif // WPP_PUBLIC_ANNOT_Vc4Display_cpp2007

#ifdef WPP_USER_MSG_GUID
# define WPP_ANNOTATE_Vc4Display_cpp2028_FINAL(P, File, Name, ...) __annotation( \
    L ## P, \
    WPP_GUID_WTEXT WPP_USER_MSG_GUID L"roskmd // SRC=" _WPPW(File) \
    L" MJ= MN=", \
    L"#typev " _WPPW(Name) \
    L" 103 \"%0 [%10!s! @ %11!u!] TRACE :Pinned source mode is not a graphics mode. (SourceModePtr->Type = %12!d!)\" //   LEVEL=TRACE_LEVEL_ERROR FLAGS=ROS_TRACING_VIDPN" \
    WPP_FUNC_NAME, \
    __VA_ARGS__)
#else // WPP_USER_MSG_GUID
# define WPP_ANNOTATE_Vc4Display_cpp2028_FINAL(P, File, Name, ...) __annotation( \
    L ## P, \
    L"c0ccd90e-305c-3e36-4951-54eca8ed5fb9 roskmd // SRC=" _WPPW(File) \
    L" MJ= MN=", \
    L"#typev " _WPPW(Name) \
    L" 103 \"%0 [%10!s! @ %11!u!] TRACE :Pinned source mode is not a graphics mode. (SourceModePtr->Type = %12!d!)\" //   LEVEL=TRACE_LEVEL_ERROR FLAGS=ROS_TRACING_VIDPN" \
    WPP_FUNC_NAME, \
    __VA_ARGS__)
#endif // WPP_USER_MSG_GUID

#ifdef WPP_PUBLIC_ANNOT_Vc4Display_cpp2028
# define WPP_ANNOTATE_Vc4Display_cpp2028 WPP_ANNOTATE_Vc4Display_cpp2028_FINAL( \
    "TMF:", \
    "Unknown_cxx00", \
    "Unknown_cxx00", \
    L"{", \
    L"Arg, ItemString -- 10" , \
    L"Arg, ItemLong -- 11" , \
    L"Arg, ItemLong -- 12" , \
    L"}", \
    L"PUBLIC_TMF:")
# ifndef WPP_PUBLIC_TMC
#  define WPP_PUBLIC_TMC // Adds "PUBLIC_TMF:" to the control guid annotation
# endif
#else // WPP_PUBLIC_ANNOT_Vc4Display_cpp2028
# define WPP_ANNOTATE_Vc4Display_cpp2028 WPP_ANNOTATE_Vc4Display_cpp2028_FINAL( \
    "TMF:", \
    "Vc4Display.cpp", \
    "Vc4Display_cpp2028", \
    L"{", \
    L"__FILE__, ItemString -- 10" , \
    L"__LINE__, ItemLong -- 11" , \
    L"SourceModePtr->Type, ItemLong -- 12" , \
    L"}")
#endif // WPP_PUBLIC_ANNOT_Vc4Display_cpp2028

#ifdef WPP_USER_MSG_GUID
# define WPP_ANNOTATE_Vc4Display_cpp2039_FINAL(P, File, Name, ...) __annotation( \
    L ## P, \
    WPP_GUID_WTEXT WPP_USER_MSG_GUID L"roskmd // SRC=" _WPPW(File) \
    L" MJ= MN=", \
    L"#typev " _WPPW(Name) \
    L" 104 \"%0 [%10!s! @ %11!u!] TRACE :Pinned source mode has a non-linear RGB color basis (ColorBasis = %12!d!)\" //   LEVEL=TRACE_LEVEL_ERROR FLAGS=ROS_TRACING_VIDPN" \
    WPP_FUNC_NAME, \
    __VA_ARGS__)
#else // WPP_USER_MSG_GUID
# define WPP_ANNOTATE_Vc4Display_cpp2039_FINAL(P, File, Name, ...) __annotation( \
    L ## P, \
    L"c0ccd90e-305c-3e36-4951-54eca8ed5fb9 roskmd // SRC=" _WPPW(File) \
    L" MJ= MN=", \
    L"#typev " _WPPW(Name) \
    L" 104 \"%0 [%10!s! @ %11!u!] TRACE :Pinned source mode has a non-linear RGB color basis (ColorBasis = %12!d!)\" //   LEVEL=TRACE_LEVEL_ERROR FLAGS=ROS_TRACING_VIDPN" \
    WPP_FUNC_NAME, \
    __VA_ARGS__)
#endif // WPP_USER_MSG_GUID

#ifdef WPP_PUBLIC_ANNOT_Vc4Display_cpp2039
# define WPP_ANNOTATE_Vc4Display_cpp2039 WPP_ANNOTATE_Vc4Display_cpp2039_FINAL( \
    "TMF:", \
    "Unknown_cxx00", \
    "Unknown_cxx00", \
    L"{", \
    L"Arg, ItemString -- 10" , \
    L"Arg, ItemLong -- 11" , \
    L"Arg, ItemLong -- 12" , \
    L"}", \
    L"PUBLIC_TMF:")
# ifndef WPP_PUBLIC_TMC
#  define WPP_PUBLIC_TMC // Adds "PUBLIC_TMF:" to the control guid annotation
# endif
#else // WPP_PUBLIC_ANNOT_Vc4Display_cpp2039
# define WPP_ANNOTATE_Vc4Display_cpp2039 WPP_ANNOTATE_Vc4Display_cpp2039_FINAL( \
    "TMF:", \
    "Vc4Display.cpp", \
    "Vc4Display_cpp2039", \
    L"{", \
    L"__FILE__, ItemString -- 10" , \
    L"__LINE__, ItemLong -- 11" , \
    L"SourceModePtr->Format.Graphics.ColorBasis, ItemLong -- 12" , \
    L"}")
#endif // WPP_PUBLIC_ANNOT_Vc4Display_cpp2039

#ifdef WPP_USER_MSG_GUID
# define WPP_ANNOTATE_Vc4Display_cpp2048_FINAL(P, File, Name, ...) __annotation( \
    L ## P, \
    WPP_GUID_WTEXT WPP_USER_MSG_GUID L"roskmd // SRC=" _WPPW(File) \
    L" MJ= MN=", \
    L"#typev " _WPPW(Name) \
    L" 105 \"%0 [%10!s! @ %11!u!] TRACE :Pinned source mode has a palettized access mode. (PixelValueAccessMode = %12!d!)\" //   LEVEL=TRACE_LEVEL_ERROR FLAGS=ROS_TRACING_VIDPN" \
    WPP_FUNC_NAME, \
    __VA_ARGS__)
#else // WPP_USER_MSG_GUID
# define WPP_ANNOTATE_Vc4Display_cpp2048_FINAL(P, File, Name, ...) __annotation( \
    L ## P, \
    L"c0ccd90e-305c-3e36-4951-54eca8ed5fb9 roskmd // SRC=" _WPPW(File) \
    L" MJ= MN=", \
    L"#typev " _WPPW(Name) \
    L" 105 \"%0 [%10!s! @ %11!u!] TRACE :Pinned source mode has a palettized access mode. (PixelValueAccessMode = %12!d!)\" //   LEVEL=TRACE_LEVEL_ERROR FLAGS=ROS_TRACING_VIDPN" \
    WPP_FUNC_NAME, \
    __VA_ARGS__)
#endif // WPP_USER_MSG_GUID

#ifdef WPP_PUBLIC_ANNOT_Vc4Display_cpp2048
# define WPP_ANNOTATE_Vc4Display_cpp2048 WPP_ANNOTATE_Vc4Display_cpp2048_FINAL( \
    "TMF:", \
    "Unknown_cxx00", \
    "Unknown_cxx00", \
    L"{", \
    L"Arg, ItemString -- 10" , \
    L"Arg, ItemLong -- 11" , \
    L"Arg, ItemLong -- 12" , \
    L"}", \
    L"PUBLIC_TMF:")
# ifndef WPP_PUBLIC_TMC
#  define WPP_PUBLIC_TMC // Adds "PUBLIC_TMF:" to the control guid annotation
# endif
#else // WPP_PUBLIC_ANNOT_Vc4Display_cpp2048
# define WPP_ANNOTATE_Vc4Display_cpp2048 WPP_ANNOTATE_Vc4Display_cpp2048_FINAL( \
    "TMF:", \
    "Vc4Display.cpp", \
    "Vc4Display_cpp2048", \
    L"{", \
    L"__FILE__, ItemString -- 10" , \
    L"__LINE__, ItemLong -- 11" , \
    L"SourceModePtr->Format.Graphics.PixelValueAccessMode, ItemLong -- 12" , \
    L"}")
#endif // WPP_PUBLIC_ANNOT_Vc4Display_cpp2048

#ifdef WPP_USER_MSG_GUID
# define WPP_ANNOTATE_Vc4Display_cpp2057_FINAL(P, File, Name, ...) __annotation( \
    L ## P, \
    WPP_GUID_WTEXT WPP_USER_MSG_GUID L"roskmd // SRC=" _WPPW(File) \
    L" MJ= MN=", \
    L"#typev " _WPPW(Name) \
    L" 106 \"%0 [%10!s! @ %11!u!] TRACE :Pinned source mode has invalid pixel format. (SourceModePtr->Format.Graphics.PixelFormat = %12!d!, D3DDDIFMT_A8R8G8B8 = %13!d!)\" //   LEVEL=TRACE_LEVEL_ERROR FLAGS=ROS_TRACING_VIDPN" \
    WPP_FUNC_NAME, \
    __VA_ARGS__)
#else // WPP_USER_MSG_GUID
# define WPP_ANNOTATE_Vc4Display_cpp2057_FINAL(P, File, Name, ...) __annotation( \
    L ## P, \
    L"c0ccd90e-305c-3e36-4951-54eca8ed5fb9 roskmd // SRC=" _WPPW(File) \
    L" MJ= MN=", \
    L"#typev " _WPPW(Name) \
    L" 106 \"%0 [%10!s! @ %11!u!] TRACE :Pinned source mode has invalid pixel format. (SourceModePtr->Format.Graphics.PixelFormat = %12!d!, D3DDDIFMT_A8R8G8B8 = %13!d!)\" //   LEVEL=TRACE_LEVEL_ERROR FLAGS=ROS_TRACING_VIDPN" \
    WPP_FUNC_NAME, \
    __VA_ARGS__)
#endif // WPP_USER_MSG_GUID

#ifdef WPP_PUBLIC_ANNOT_Vc4Display_cpp2057
# define WPP_ANNOTATE_Vc4Display_cpp2057 WPP_ANNOTATE_Vc4Display_cpp2057_FINAL( \
    "TMF:", \
    "Unknown_cxx00", \
    "Unknown_cxx00", \
    L"{", \
    L"Arg, ItemString -- 10" , \
    L"Arg, ItemLong -- 11" , \
    L"Arg, ItemLong -- 12" , \
    L"Arg, ItemLong -- 13" , \
    L"}", \
    L"PUBLIC_TMF:")
# ifndef WPP_PUBLIC_TMC
#  define WPP_PUBLIC_TMC // Adds "PUBLIC_TMF:" to the control guid annotation
# endif
#else // WPP_PUBLIC_ANNOT_Vc4Display_cpp2057
# define WPP_ANNOTATE_Vc4Display_cpp2057 WPP_ANNOTATE_Vc4Display_cpp2057_FINAL( \
    "TMF:", \
    "Vc4Display.cpp", \
    "Vc4Display_cpp2057", \
    L"{", \
    L"__FILE__, ItemString -- 10" , \
    L"__LINE__, ItemLong -- 11" , \
    L"SourceModePtr->Format.Graphics.PixelFormat, ItemLong -- 12" , \
    L"D3DDDIFMT_A8R8G8B8, ItemLong -- 13" , \
    L"}")
#endif // WPP_PUBLIC_ANNOT_Vc4Display_cpp2057

#ifdef WPP_USER_MSG_GUID
# define WPP_ANNOTATE_Vc4Display_cpp2078_FINAL(P, File, Name, ...) __annotation( \
    L ## P, \
    WPP_GUID_WTEXT WPP_USER_MSG_GUID L"roskmd // SRC=" _WPPW(File) \
    L" MJ= MN=", \
    L"#typev " _WPPW(Name) \
    L" 107 \"%0 [%10!s! @ %11!u!] TRACE :Path contains invalid source id. (VidPnSourceId = %12!d!)\" //   LEVEL=TRACE_LEVEL_ERROR FLAGS=ROS_TRACING_VIDPN" \
    WPP_FUNC_NAME, \
    __VA_ARGS__)
#else // WPP_USER_MSG_GUID
# define WPP_ANNOTATE_Vc4Display_cpp2078_FINAL(P, File, Name, ...) __annotation( \
    L ## P, \
    L"c0ccd90e-305c-3e36-4951-54eca8ed5fb9 roskmd // SRC=" _WPPW(File) \
    L" MJ= MN=", \
    L"#typev " _WPPW(Name) \
    L" 107 \"%0 [%10!s! @ %11!u!] TRACE :Path contains invalid source id. (VidPnSourceId = %12!d!)\" //   LEVEL=TRACE_LEVEL_ERROR FLAGS=ROS_TRACING_VIDPN" \
    WPP_FUNC_NAME, \
    __VA_ARGS__)
#endif // WPP_USER_MSG_GUID

#ifdef WPP_PUBLIC_ANNOT_Vc4Display_cpp2078
# define WPP_ANNOTATE_Vc4Display_cpp2078 WPP_ANNOTATE_Vc4Display_cpp2078_FINAL( \
    "TMF:", \
    "Unknown_cxx00", \
    "Unknown_cxx00", \
    L"{", \
    L"Arg, ItemString -- 10" , \
    L"Arg, ItemLong -- 11" , \
    L"Arg, ItemLong -- 12" , \
    L"}", \
    L"PUBLIC_TMF:")
# ifndef WPP_PUBLIC_TMC
#  define WPP_PUBLIC_TMC // Adds "PUBLIC_TMF:" to the control guid annotation
# endif
#else // WPP_PUBLIC_ANNOT_Vc4Display_cpp2078
# define WPP_ANNOTATE_Vc4Display_cpp2078 WPP_ANNOTATE_Vc4Display_cpp2078_FINAL( \
    "TMF:", \
    "Vc4Display.cpp", \
    "Vc4Display_cpp2078", \
    L"{", \
    L"__FILE__, ItemString -- 10" , \
    L"__LINE__, ItemLong -- 11" , \
    L"PathPtr->VidPnSourceId, ItemLong -- 12" , \
    L"}")
#endif // WPP_PUBLIC_ANNOT_Vc4Display_cpp2078

#ifdef WPP_USER_MSG_GUID
# define WPP_ANNOTATE_Vc4Display_cpp2087_FINAL(P, File, Name, ...) __annotation( \
    L ## P, \
    WPP_GUID_WTEXT WPP_USER_MSG_GUID L"roskmd // SRC=" _WPPW(File) \
    L" MJ= MN=", \
    L"#typev " _WPPW(Name) \
    L" 108 \"%0 [%10!s! @ %11!u!] TRACE :Path contains invalid target id. (VidPnTargetId = %12!d!)\" //   LEVEL=TRACE_LEVEL_ERROR FLAGS=ROS_TRACING_VIDPN" \
    WPP_FUNC_NAME, \
    __VA_ARGS__)
#else // WPP_USER_MSG_GUID
# define WPP_ANNOTATE_Vc4Display_cpp2087_FINAL(P, File, Name, ...) __annotation( \
    L ## P, \
    L"c0ccd90e-305c-3e36-4951-54eca8ed5fb9 roskmd // SRC=" _WPPW(File) \
    L" MJ= MN=", \
    L"#typev " _WPPW(Name) \
    L" 108 \"%0 [%10!s! @ %11!u!] TRACE :Path contains invalid target id. (VidPnTargetId = %12!d!)\" //   LEVEL=TRACE_LEVEL_ERROR FLAGS=ROS_TRACING_VIDPN" \
    WPP_FUNC_NAME, \
    __VA_ARGS__)
#endif // WPP_USER_MSG_GUID

#ifdef WPP_PUBLIC_ANNOT_Vc4Display_cpp2087
# define WPP_ANNOTATE_Vc4Display_cpp2087 WPP_ANNOTATE_Vc4Display_cpp2087_FINAL( \
    "TMF:", \
    "Unknown_cxx00", \
    "Unknown_cxx00", \
    L"{", \
    L"Arg, ItemString -- 10" , \
    L"Arg, ItemLong -- 11" , \
    L"Arg, ItemLong -- 12" , \
    L"}", \
    L"PUBLIC_TMF:")
# ifndef WPP_PUBLIC_TMC
#  define WPP_PUBLIC_TMC // Adds "PUBLIC_TMF:" to the control guid annotation
# endif
#else // WPP_PUBLIC_ANNOT_Vc4Display_cpp2087
# define WPP_ANNOTATE_Vc4Display_cpp2087 WPP_ANNOTATE_Vc4Display_cpp2087_FINAL( \
    "TMF:", \
    "Vc4Display.cpp", \
    "Vc4Display_cpp2087", \
    L"{", \
    L"__FILE__, ItemString -- 10" , \
    L"__LINE__, ItemLong -- 11" , \
    L"PathPtr->VidPnTargetId, ItemLong -- 12" , \
    L"}")
#endif // WPP_PUBLIC_ANNOT_Vc4Display_cpp2087

#ifdef WPP_USER_MSG_GUID
# define WPP_ANNOTATE_Vc4Display_cpp2097_FINAL(P, File, Name, ...) __annotation( \
    L ## P, \
    WPP_GUID_WTEXT WPP_USER_MSG_GUID L"roskmd // SRC=" _WPPW(File) \
    L" MJ= MN=", \
    L"#typev " _WPPW(Name) \
    L" 109 \"%0 [%10!s! @ %11!u!] TRACE :Path contains a gamma ramp. (GammaRamp.Type = %12!d!)\" //   LEVEL=TRACE_LEVEL_ERROR FLAGS=ROS_TRACING_VIDPN" \
    WPP_FUNC_NAME, \
    __VA_ARGS__)
#else // WPP_USER_MSG_GUID
# define WPP_ANNOTATE_Vc4Display_cpp2097_FINAL(P, File, Name, ...) __annotation( \
    L ## P, \
    L"c0ccd90e-305c-3e36-4951-54eca8ed5fb9 roskmd // SRC=" _WPPW(File) \
    L" MJ= MN=", \
    L"#typev " _WPPW(Name) \
    L" 109 \"%0 [%10!s! @ %11!u!] TRACE :Path contains a gamma ramp. (GammaRamp.Type = %12!d!)\" //   LEVEL=TRACE_LEVEL_ERROR FLAGS=ROS_TRACING_VIDPN" \
    WPP_FUNC_NAME, \
    __VA_ARGS__)
#endif // WPP_USER_MSG_GUID

#ifdef WPP_PUBLIC_ANNOT_Vc4Display_cpp2097
# define WPP_ANNOTATE_Vc4Display_cpp2097 WPP_ANNOTATE_Vc4Display_cpp2097_FINAL( \
    "TMF:", \
    "Unknown_cxx00", \
    "Unknown_cxx00", \
    L"{", \
    L"Arg, ItemString -- 10" , \
    L"Arg, ItemLong -- 11" , \
    L"Arg, ItemLong -- 12" , \
    L"}", \
    L"PUBLIC_TMF:")
# ifndef WPP_PUBLIC_TMC
#  define WPP_PUBLIC_TMC // Adds "PUBLIC_TMF:" to the control guid annotation
# endif
#else // WPP_PUBLIC_ANNOT_Vc4Display_cpp2097
# define WPP_ANNOTATE_Vc4Display_cpp2097 WPP_ANNOTATE_Vc4Display_cpp2097_FINAL( \
    "TMF:", \
    "Vc4Display.cpp", \
    "Vc4Display_cpp2097", \
    L"{", \
    L"__FILE__, ItemString -- 10" , \
    L"__LINE__, ItemLong -- 11" , \
    L"PathPtr->GammaRamp.Type, ItemLong -- 12" , \
    L"}")
#endif // WPP_PUBLIC_ANNOT_Vc4Display_cpp2097

#ifdef WPP_USER_MSG_GUID
# define WPP_ANNOTATE_Vc4Display_cpp2109_FINAL(P, File, Name, ...) __annotation( \
    L ## P, \
    WPP_GUID_WTEXT WPP_USER_MSG_GUID L"roskmd // SRC=" _WPPW(File) \
    L" MJ= MN=", \
    L"#typev " _WPPW(Name) \
    L" 110 \"%0 [%10!s! @ %11!u!] TRACE :Path contains a non-identity scaling. (ContentTransformation.Scaling = %12!d!)\" //   LEVEL=TRACE_LEVEL_ERROR FLAGS=ROS_TRACING_VIDPN" \
    WPP_FUNC_NAME, \
    __VA_ARGS__)
#else // WPP_USER_MSG_GUID
# define WPP_ANNOTATE_Vc4Display_cpp2109_FINAL(P, File, Name, ...) __annotation( \
    L ## P, \
    L"c0ccd90e-305c-3e36-4951-54eca8ed5fb9 roskmd // SRC=" _WPPW(File) \
    L" MJ= MN=", \
    L"#typev " _WPPW(Name) \
    L" 110 \"%0 [%10!s! @ %11!u!] TRACE :Path contains a non-identity scaling. (ContentTransformation.Scaling = %12!d!)\" //   LEVEL=TRACE_LEVEL_ERROR FLAGS=ROS_TRACING_VIDPN" \
    WPP_FUNC_NAME, \
    __VA_ARGS__)
#endif // WPP_USER_MSG_GUID

#ifdef WPP_PUBLIC_ANNOT_Vc4Display_cpp2109
# define WPP_ANNOTATE_Vc4Display_cpp2109 WPP_ANNOTATE_Vc4Display_cpp2109_FINAL( \
    "TMF:", \
    "Unknown_cxx00", \
    "Unknown_cxx00", \
    L"{", \
    L"Arg, ItemString -- 10" , \
    L"Arg, ItemLong -- 11" , \
    L"Arg, ItemLong -- 12" , \
    L"}", \
    L"PUBLIC_TMF:")
# ifndef WPP_PUBLIC_TMC
#  define WPP_PUBLIC_TMC // Adds "PUBLIC_TMF:" to the control guid annotation
# endif
#else // WPP_PUBLIC_ANNOT_Vc4Display_cpp2109
# define WPP_ANNOTATE_Vc4Display_cpp2109 WPP_ANNOTATE_Vc4Display_cpp2109_FINAL( \
    "TMF:", \
    "Vc4Display.cpp", \
    "Vc4Display_cpp2109", \
    L"{", \
    L"__FILE__, ItemString -- 10" , \
    L"__LINE__, ItemLong -- 11" , \
    L"PathPtr->ContentTransformation.Scaling, ItemLong -- 12" , \
    L"}")
#endif // WPP_PUBLIC_ANNOT_Vc4Display_cpp2109

#ifdef WPP_USER_MSG_GUID
# define WPP_ANNOTATE_Vc4Display_cpp2121_FINAL(P, File, Name, ...) __annotation( \
    L ## P, \
    WPP_GUID_WTEXT WPP_USER_MSG_GUID L"roskmd // SRC=" _WPPW(File) \
    L" MJ= MN=", \
    L"#typev " _WPPW(Name) \
    L" 111 \"%0 [%10!s! @ %11!u!] TRACE :Path contains a not-identity rotation (ContentTransformation.Rotation = %12!d!)\" //   LEVEL=TRACE_LEVEL_ERROR FLAGS=ROS_TRACING_VIDPN" \
    WPP_FUNC_NAME, \
    __VA_ARGS__)
#else // WPP_USER_MSG_GUID
# define WPP_ANNOTATE_Vc4Display_cpp2121_FINAL(P, File, Name, ...) __annotation( \
    L ## P, \
    L"c0ccd90e-305c-3e36-4951-54eca8ed5fb9 roskmd // SRC=" _WPPW(File) \
    L" MJ= MN=", \
    L"#typev " _WPPW(Name) \
    L" 111 \"%0 [%10!s! @ %11!u!] TRACE :Path contains a not-identity rotation (ContentTransformation.Rotation = %12!d!)\" //   LEVEL=TRACE_LEVEL_ERROR FLAGS=ROS_TRACING_VIDPN" \
    WPP_FUNC_NAME, \
    __VA_ARGS__)
#endif // WPP_USER_MSG_GUID

#ifdef WPP_PUBLIC_ANNOT_Vc4Display_cpp2121
# define WPP_ANNOTATE_Vc4Display_cpp2121 WPP_ANNOTATE_Vc4Display_cpp2121_FINAL( \
    "TMF:", \
    "Unknown_cxx00", \
    "Unknown_cxx00", \
    L"{", \
    L"Arg, ItemString -- 10" , \
    L"Arg, ItemLong -- 11" , \
    L"Arg, ItemLong -- 12" , \
    L"}", \
    L"PUBLIC_TMF:")
# ifndef WPP_PUBLIC_TMC
#  define WPP_PUBLIC_TMC // Adds "PUBLIC_TMF:" to the control guid annotation
# endif
#else // WPP_PUBLIC_ANNOT_Vc4Display_cpp2121
# define WPP_ANNOTATE_Vc4Display_cpp2121 WPP_ANNOTATE_Vc4Display_cpp2121_FINAL( \
    "TMF:", \
    "Vc4Display.cpp", \
    "Vc4Display_cpp2121", \
    L"{", \
    L"__FILE__, ItemString -- 10" , \
    L"__LINE__, ItemLong -- 11" , \
    L"PathPtr->ContentTransformation.Rotation, ItemLong -- 12" , \
    L"}")
#endif // WPP_PUBLIC_ANNOT_Vc4Display_cpp2121

#ifdef WPP_USER_MSG_GUID
# define WPP_ANNOTATE_Vc4Display_cpp2132_FINAL(P, File, Name, ...) __annotation( \
    L ## P, \
    WPP_GUID_WTEXT WPP_USER_MSG_GUID L"roskmd // SRC=" _WPPW(File) \
    L" MJ= MN=", \
    L"#typev " _WPPW(Name) \
    L" 112 \"%0 [%10!s! @ %11!u!] TRACE :Path has a non-linear RGB color basis. (VidPnTargetColorBasis = %12!d!)\" //   LEVEL=TRACE_LEVEL_ERROR FLAGS=ROS_TRACING_VIDPN" \
    WPP_FUNC_NAME, \
    __VA_ARGS__)
#else // WPP_USER_MSG_GUID
# define WPP_ANNOTATE_Vc4Display_cpp2132_FINAL(P, File, Name, ...) __annotation( \
    L ## P, \
    L"c0ccd90e-305c-3e36-4951-54eca8ed5fb9 roskmd // SRC=" _WPPW(File) \
    L" MJ= MN=", \
    L"#typev " _WPPW(Name) \
    L" 112 \"%0 [%10!s! @ %11!u!] TRACE :Path has a non-linear RGB color basis. (VidPnTargetColorBasis = %12!d!)\" //   LEVEL=TRACE_LEVEL_ERROR FLAGS=ROS_TRACING_VIDPN" \
    WPP_FUNC_NAME, \
    __VA_ARGS__)
#endif // WPP_USER_MSG_GUID

#ifdef WPP_PUBLIC_ANNOT_Vc4Display_cpp2132
# define WPP_ANNOTATE_Vc4Display_cpp2132 WPP_ANNOTATE_Vc4Display_cpp2132_FINAL( \
    "TMF:", \
    "Unknown_cxx00", \
    "Unknown_cxx00", \
    L"{", \
    L"Arg, ItemString -- 10" , \
    L"Arg, ItemLong -- 11" , \
    L"Arg, ItemLong -- 12" , \
    L"}", \
    L"PUBLIC_TMF:")
# ifndef WPP_PUBLIC_TMC
#  define WPP_PUBLIC_TMC // Adds "PUBLIC_TMF:" to the control guid annotation
# endif
#else // WPP_PUBLIC_ANNOT_Vc4Display_cpp2132
# define WPP_ANNOTATE_Vc4Display_cpp2132 WPP_ANNOTATE_Vc4Display_cpp2132_FINAL( \
    "TMF:", \
    "Vc4Display.cpp", \
    "Vc4Display_cpp2132", \
    L"{", \
    L"__FILE__, ItemString -- 10" , \
    L"__LINE__, ItemLong -- 11" , \
    L"PathPtr->VidPnTargetColorBasis, ItemLong -- 12" , \
    L"}")
#endif // WPP_PUBLIC_ANNOT_Vc4Display_cpp2132

# define WPP_ANNOTATE(x) WPP_ANNOTATE_ ## x,

#endif // WPP_NO_ANNOTATIONS

#ifdef WPP_USER_MSG_GUID

#define WPP_LOCAL_MSG_VAR(Guid) WPP_XGLUE3(WPP_, WPP_GUID_NORM Guid, _Traceguids)

#define WPP_LOCAL_MSG_GUID(Guid) \
extern const __declspec(selectany) GUID WPP_LOCAL_MSG_VAR(Guid)[] = { WPP_GUID_STRUCT Guid }

WPP_LOCAL_MSG_GUID(WPP_USER_MSG_GUID);
#define WPP_LOCAL_TraceGuids WPP_LOCAL_MSG_VAR(WPP_USER_MSG_GUID)

#else // WPP_USER_MSG_GUID

#define WPP_LOCAL_TraceGuids WPP_c0ccd90e305c3e36495154eca8ed5fb9_Traceguids
extern const __declspec(selectany) GUID WPP_LOCAL_TraceGuids[] = { {0xc0ccd90e,0x305c,0x3e36,{0x49,0x51,0x54,0xec,0xa8,0xed,0x5f,0xb9}}, };

#endif // WPP_USER_MSG_GUID

#ifndef WPP_ALREADY_INCLUDED

#ifndef WPP_TRACE_OPTIONS
enum { WPP_TRACE_OPTIONS =
    TRACE_MESSAGE_SEQUENCE   |
    TRACE_MESSAGE_GUID       |
    TRACE_MESSAGE_SYSTEMINFO |
    TRACE_MESSAGE_TIMESTAMP };
#endif // WPP_TRACE_OPTIONS

#ifndef WPP_LOGPAIR_SEPARATOR
# define WPP_LOGPAIR_SEPARATOR ,
#endif
#ifndef WPP_LOGPAIR_SIZET
# define WPP_LOGPAIR_SIZET SIZE_T
#endif
#ifndef WPP_LOGPAIR
# define WPP_LOGPAIR(_Size, _Addr)     (_Addr),((WPP_LOGPAIR_SIZET)(_Size))WPP_LOGPAIR_SEPARATOR
#endif

#define WPP_LOGTYPEVAL(_Type, _Value) WPP_LOGPAIR(sizeof(_Type), &(_Value))
#define WPP_LOGTYPEPTR(_Value)        WPP_LOGPAIR(sizeof(*(_Value)), (_Value))

// Marshalling macros.

#ifndef WPP_LOGASTR
# ifdef WPP_CHECK_FOR_NULL_STRING
#  define WPP_LOGASTR(_value)  WPP_LOGPAIR( \
    (_value) ? strlen(_value) + 1 : 5, \
    (_value) ?       (_value)     : "NULL" )
# else // WPP_CHECK_FOR_NULL_STRING
#  define WPP_LOGASTR(_value)  WPP_LOGPAIR( \
    strlen(_value) + 1, \
    _value )
# endif // WPP_CHECK_FOR_NULL_STRING
#endif // WPP_LOGASTR

#ifndef WPP_LOGWSTR
# ifdef WPP_CHECK_FOR_NULL_STRING
#  define WPP_LOGWSTR(_value)  WPP_LOGPAIR( \
    ((_value) ? wcslen(_value) + 1 : 5) * sizeof(WCHAR), \
     (_value) ?       (_value)     : L"NULL" )
# else // WPP_CHECK_FOR_NULL_STRING
#  define WPP_LOGWSTR(_value)  WPP_LOGPAIR( \
    (wcslen(_value) + 1) * sizeof(WCHAR), \
    _value )
# endif // WPP_CHECK_FOR_NULL_STRING
#endif // WPP_LOGWSTR

#ifndef WPP_LOGPGUID
# define WPP_LOGPGUID(_value) WPP_LOGPAIR( sizeof(GUID), (_value) )
#endif // WPP_LOGPGUID

#ifndef WPP_LOGPSID
# ifdef WPP_CHECK_FOR_NULL_STRING
# define WPP_LOGPSID(_value)  WPP_LOGPAIR( \
    (_value) && WPP_IsValidSid(_value) ? WPP_GetLengthSid(_value) : 5, \
    (_value) && WPP_IsValidSid(_value) ? (_value) : (void const*)"NULL")
# else // WPP_CHECK_FOR_NULL_STRING
# define WPP_LOGPSID(_value)  WPP_LOGPAIR( \
    WPP_GetLengthSid(_value), \
    (_value) )
#endif // WPP_CHECK_FOR_NULL_STRING
#endif // WPP_LOGPSID

#ifndef WPP_LOGCSTR
# define WPP_LOGCSTR(_x) \
    WPP_LOGPAIR( sizeof(USHORT),      &(_x).Length ) \
    WPP_LOGPAIR( (USHORT)(_x).Length, (USHORT)(_x).Length ? (_x).Buffer : "" )
#endif // WPP_LOGCSTR

#ifndef WPP_LOGUSTR
# define WPP_LOGUSTR(_x) \
    WPP_LOGPAIR( sizeof(USHORT),      &(_x).Length ) \
    WPP_LOGPAIR( (USHORT)(_x).Length, (USHORT)(_x).Length ? (_x).Buffer : L"" )
#endif // WPP_LOGUSTR

#ifndef WPP_LOGPUSTR
#ifdef WPP_CHECK_FOR_NULL_STRING
# define WPP_LOGPUSTR(_x) \
    WPP_LOGPAIR( \
        sizeof(USHORT), \
        (_x) ? &(_x)->Length : (void const*)L"\x08" ) \
    WPP_LOGPAIR( \
        (_x)                         ? (USHORT)(_x)->Length : 0x08, \
        (_x) && (USHORT)(_x)->Length ? (_x)->Buffer         : L"NULL" )
#else // WPP_CHECK_FOR_NULL_STRING
# define WPP_LOGPUSTR(_x) WPP_LOGUSTR(*(_x))
#endif // WPP_CHECK_FOR_NULL_STRING
#endif // WPP_LOGPUSTR

#ifndef WPP_LOGPCSTR
#ifdef WPP_CHECK_FOR_NULL_STRING
# define WPP_LOGPCSTR(_x) \
    WPP_LOGPAIR( \
        sizeof(USHORT), \
        (_x) ? &(_x)->Length : (void const*)L"\x04" ) \
    WPP_LOGPAIR( \
        (_x)                         ? (USHORT)(_x)->Length : 0x04, \
        (_x) && (USHORT)(_x)->Length ? (_x)->Buffer         : "NULL" )
#else // WPP_CHECK_FOR_NULL_STRING
# define WPP_LOGPCSTR(_x) WPP_LOGCSTR(*(_x))
#endif // WPP_CHECK_FOR_NULL_STRING
#endif // WPP_LOGPCSTR

#ifdef __cplusplus

#ifndef WPP_POINTER_TO_USHORT
struct WppPointerToUshort
{
    USHORT m_val;
    WPP_FORCEINLINE explicit WppPointerToUshort(USHORT val) : m_val(val) {}
    WPP_FORCEINLINE USHORT const* get() const { return &m_val; }
};
#define WPP_POINTER_TO_USHORT(val) (WppPointerToUshort((val)).get())
#endif // WPP_POINTER_TO_USHORT

#ifndef WPP_LOGCPPSTR
#define WPP_LOGCPPSTR(_value) \
    WPP_LOGPAIR( \
        sizeof(USHORT), \
        WPP_POINTER_TO_USHORT((USHORT)((_value).size()*sizeof(*(_value).c_str()))) ) \
    WPP_LOGPAIR( \
        (USHORT)((_value).size()*sizeof(*(_value).c_str())), \
        (_value).c_str() )
#endif // WPP_LOGCPPSTR

#ifndef WPP_LOGCPPVEC
#define WPP_LOGCPPVEC(_value) \
    WPP_LOGPAIR( \
        sizeof(USHORT), \
        WPP_POINTER_TO_USHORT((USHORT)((_value).size()*sizeof(*(_value).data()))) ) \
    WPP_LOGPAIR( \
        (USHORT)((_value).size()*sizeof(*(_value).data())), \
        (_value).data() + ((_value).data() == NULL) )
#endif // WPP_LOGCPPVEC

#endif // __cplusplus

#ifndef WPP_BINARY_def
# define WPP_BINARY_def
typedef struct tagWPP_BINARY
{
    _Field_size_bytes_(Length) void const* Buffer;
    USHORT Length;
} WPP_BINARY;
#endif // WPP_BINARY_def

#ifndef WPP_BINARY_func
# define WPP_BINARY_func
WPP_FORCEINLINE WPP_BINARY
WppBinary(_In_reads_bytes_(Length) void const* Buffer, USHORT Length)
{
    WPP_BINARY data;
    data.Buffer = Buffer;
    data.Length = Length;
    return data;
}
#endif // WPP_BINARY_func

#endif // WPP_ALREADY_INCLUDED

#ifndef WPP_ENABLE_FLAG_BIT
#define WPP_ENABLE_FLAG_BIT(flag) (WPP_CB[((flag) >> 16)].Control).Flags[( (0xFFFF & ((flag)-1) ) / 32)] & (1 << ( ((flag)-1) & 31 ))
#endif

#ifndef WPP_SF_sD_def
# define WPP_SF_sD_def
WPP_INLINE void WPP_SF_sD(WPP_LOGGER_ARG unsigned short id, LPCGUID TraceGuid, LPCSTR _a1, unsigned int _a2)
{ WPP_TRACE(WPP_GET_LOGGER, WPP_TRACE_OPTIONS, (LPGUID)TraceGuid, id, WPP_LOGASTR(_a1) WPP_LOGTYPEVAL(unsigned int, _a2)  (void*)0); }
#endif // WPP_SF_sD_def

#if ENABLE_WPP_RECORDER

#if ENABLE_WPP_TRACE_FILTERING_WITH_WPP_RECORDER

//
// Generate the WPP_RECORDER_AND_TRACE_SF_sD function
//
#ifndef WPP_RECORDER_AND_TRACE_SF_sD_def
#define WPP_RECORDER_AND_TRACE_SF_sD_def
WPP_INLINE
VOID
WPP_RECORDER_AND_TRACE_SF_sD(
    WPP_LOGGER_ARG
    BOOLEAN  wppEnabled,
    BOOLEAN  recorderEnabled,
    PVOID    AutoLogContext,
    UCHAR    level,
    ULONG    flags,
    USHORT   id,
    LPCGUID  traceGuid
    , LPCSTR _a1, unsigned int _a2
    )
{
    if (wppEnabled)
    {
        WPP_TRACE( WPP_GET_LOGGER,
                   WPP_TRACE_OPTIONS,
                   (LPGUID)traceGuid,
                   id,
                   WPP_LOGASTR(_a1) WPP_LOGTYPEVAL(unsigned int, _a2)  (void*)0);
    }

    if (recorderEnabled)
    {
        WPP_RECORDER( AutoLogContext, level, flags, (LPGUID) traceGuid, id, WPP_LOGASTR(_a1) WPP_LOGTYPEVAL(unsigned int, _a2)  (void*)0 );
    }
}
#endif // WPP_RECORDER_AND_TRACE_SF_sD_def

#else  // ENABLE_WPP_TRACE_FILTERING_WITH_WPP_RECORDER

//
// Generate the WPP_RECORDER_SP_sD function
//
#ifndef WPP_RECORDER_SF_sD_def
#define WPP_RECORDER_SF_sD_def
WPP_INLINE
VOID
WPP_RECORDER_SF_sD(
    PVOID    AutoLogContext,
    UCHAR    level,
    ULONG    flags,
    USHORT   id,
    LPCGUID  traceGuid
    , LPCSTR _a1, unsigned int _a2
    )
{
    if (WPP_ENABLE_FLAG_BIT(flags) &&
        (WPP_CONTROL(flags).Level >= level))
    {
        WPP_TRACE(
            WPP_CONTROL(flags).Logger,
            WPP_TRACE_OPTIONS,
            (LPGUID)traceGuid,
            id,
            WPP_LOGASTR(_a1) WPP_LOGTYPEVAL(unsigned int, _a2)  (void*)0);
    }

    WPP_RECORDER(AutoLogContext, level, flags, (LPGUID) traceGuid, id, WPP_LOGASTR(_a1) WPP_LOGTYPEVAL(unsigned int, _a2)  (void*)0);
}
#endif // WPP_RECORDER_SF_sD_def

#endif // ENABLE_WPP_TRACE_FILTERING_WITH_WPP_RECORDER

#endif // ENABLE_WPP_RECORDER

#ifndef WPP_SF_sDD_def
# define WPP_SF_sDD_def
WPP_INLINE void WPP_SF_sDD(WPP_LOGGER_ARG unsigned short id, LPCGUID TraceGuid, LPCSTR _a1, unsigned int _a2, unsigned int _a3)
{ WPP_TRACE(WPP_GET_LOGGER, WPP_TRACE_OPTIONS, (LPGUID)TraceGuid, id, WPP_LOGASTR(_a1) WPP_LOGTYPEVAL(unsigned int, _a2) WPP_LOGTYPEVAL(unsigned int, _a3)  (void*)0); }
#endif // WPP_SF_sDD_def

#if ENABLE_WPP_RECORDER

#if ENABLE_WPP_TRACE_FILTERING_WITH_WPP_RECORDER

//
// Generate the WPP_RECORDER_AND_TRACE_SF_sDD function
//
#ifndef WPP_RECORDER_AND_TRACE_SF_sDD_def
#define WPP_RECORDER_AND_TRACE_SF_sDD_def
WPP_INLINE
VOID
WPP_RECORDER_AND_TRACE_SF_sDD(
    WPP_LOGGER_ARG
    BOOLEAN  wppEnabled,
    BOOLEAN  recorderEnabled,
    PVOID    AutoLogContext,
    UCHAR    level,
    ULONG    flags,
    USHORT   id,
    LPCGUID  traceGuid
    , LPCSTR _a1, unsigned int _a2, unsigned int _a3
    )
{
    if (wppEnabled)
    {
        WPP_TRACE( WPP_GET_LOGGER,
                   WPP_TRACE_OPTIONS,
                   (LPGUID)traceGuid,
                   id,
                   WPP_LOGASTR(_a1) WPP_LOGTYPEVAL(unsigned int, _a2) WPP_LOGTYPEVAL(unsigned int, _a3)  (void*)0);
    }

    if (recorderEnabled)
    {
        WPP_RECORDER( AutoLogContext, level, flags, (LPGUID) traceGuid, id, WPP_LOGASTR(_a1) WPP_LOGTYPEVAL(unsigned int, _a2) WPP_LOGTYPEVAL(unsigned int, _a3)  (void*)0 );
    }
}
#endif // WPP_RECORDER_AND_TRACE_SF_sDD_def

#else  // ENABLE_WPP_TRACE_FILTERING_WITH_WPP_RECORDER

//
// Generate the WPP_RECORDER_SP_sDD function
//
#ifndef WPP_RECORDER_SF_sDD_def
#define WPP_RECORDER_SF_sDD_def
WPP_INLINE
VOID
WPP_RECORDER_SF_sDD(
    PVOID    AutoLogContext,
    UCHAR    level,
    ULONG    flags,
    USHORT   id,
    LPCGUID  traceGuid
    , LPCSTR _a1, unsigned int _a2, unsigned int _a3
    )
{
    if (WPP_ENABLE_FLAG_BIT(flags) &&
        (WPP_CONTROL(flags).Level >= level))
    {
        WPP_TRACE(
            WPP_CONTROL(flags).Logger,
            WPP_TRACE_OPTIONS,
            (LPGUID)traceGuid,
            id,
            WPP_LOGASTR(_a1) WPP_LOGTYPEVAL(unsigned int, _a2) WPP_LOGTYPEVAL(unsigned int, _a3)  (void*)0);
    }

    WPP_RECORDER(AutoLogContext, level, flags, (LPGUID) traceGuid, id, WPP_LOGASTR(_a1) WPP_LOGTYPEVAL(unsigned int, _a2) WPP_LOGTYPEVAL(unsigned int, _a3)  (void*)0);
}
#endif // WPP_RECORDER_SF_sDD_def

#endif // ENABLE_WPP_TRACE_FILTERING_WITH_WPP_RECORDER

#endif // ENABLE_WPP_RECORDER

#ifndef WPP_SF_sDDD_def
# define WPP_SF_sDDD_def
WPP_INLINE void WPP_SF_sDDD(WPP_LOGGER_ARG unsigned short id, LPCGUID TraceGuid, LPCSTR _a1, unsigned int _a2, unsigned int _a3, unsigned int _a4)
{ WPP_TRACE(WPP_GET_LOGGER, WPP_TRACE_OPTIONS, (LPGUID)TraceGuid, id, WPP_LOGASTR(_a1) WPP_LOGTYPEVAL(unsigned int, _a2) WPP_LOGTYPEVAL(unsigned int, _a3) WPP_LOGTYPEVAL(unsigned int, _a4)  (void*)0); }
#endif // WPP_SF_sDDD_def

#if ENABLE_WPP_RECORDER

#if ENABLE_WPP_TRACE_FILTERING_WITH_WPP_RECORDER

//
// Generate the WPP_RECORDER_AND_TRACE_SF_sDDD function
//
#ifndef WPP_RECORDER_AND_TRACE_SF_sDDD_def
#define WPP_RECORDER_AND_TRACE_SF_sDDD_def
WPP_INLINE
VOID
WPP_RECORDER_AND_TRACE_SF_sDDD(
    WPP_LOGGER_ARG
    BOOLEAN  wppEnabled,
    BOOLEAN  recorderEnabled,
    PVOID    AutoLogContext,
    UCHAR    level,
    ULONG    flags,
    USHORT   id,
    LPCGUID  traceGuid
    , LPCSTR _a1, unsigned int _a2, unsigned int _a3, unsigned int _a4
    )
{
    if (wppEnabled)
    {
        WPP_TRACE( WPP_GET_LOGGER,
                   WPP_TRACE_OPTIONS,
                   (LPGUID)traceGuid,
                   id,
                   WPP_LOGASTR(_a1) WPP_LOGTYPEVAL(unsigned int, _a2) WPP_LOGTYPEVAL(unsigned int, _a3) WPP_LOGTYPEVAL(unsigned int, _a4)  (void*)0);
    }

    if (recorderEnabled)
    {
        WPP_RECORDER( AutoLogContext, level, flags, (LPGUID) traceGuid, id, WPP_LOGASTR(_a1) WPP_LOGTYPEVAL(unsigned int, _a2) WPP_LOGTYPEVAL(unsigned int, _a3) WPP_LOGTYPEVAL(unsigned int, _a4)  (void*)0 );
    }
}
#endif // WPP_RECORDER_AND_TRACE_SF_sDDD_def

#else  // ENABLE_WPP_TRACE_FILTERING_WITH_WPP_RECORDER

//
// Generate the WPP_RECORDER_SP_sDDD function
//
#ifndef WPP_RECORDER_SF_sDDD_def
#define WPP_RECORDER_SF_sDDD_def
WPP_INLINE
VOID
WPP_RECORDER_SF_sDDD(
    PVOID    AutoLogContext,
    UCHAR    level,
    ULONG    flags,
    USHORT   id,
    LPCGUID  traceGuid
    , LPCSTR _a1, unsigned int _a2, unsigned int _a3, unsigned int _a4
    )
{
    if (WPP_ENABLE_FLAG_BIT(flags) &&
        (WPP_CONTROL(flags).Level >= level))
    {
        WPP_TRACE(
            WPP_CONTROL(flags).Logger,
            WPP_TRACE_OPTIONS,
            (LPGUID)traceGuid,
            id,
            WPP_LOGASTR(_a1) WPP_LOGTYPEVAL(unsigned int, _a2) WPP_LOGTYPEVAL(unsigned int, _a3) WPP_LOGTYPEVAL(unsigned int, _a4)  (void*)0);
    }

    WPP_RECORDER(AutoLogContext, level, flags, (LPGUID) traceGuid, id, WPP_LOGASTR(_a1) WPP_LOGTYPEVAL(unsigned int, _a2) WPP_LOGTYPEVAL(unsigned int, _a3) WPP_LOGTYPEVAL(unsigned int, _a4)  (void*)0);
}
#endif // WPP_RECORDER_SF_sDDD_def

#endif // ENABLE_WPP_TRACE_FILTERING_WITH_WPP_RECORDER

#endif // ENABLE_WPP_RECORDER

#ifndef WPP_SF_sDDDD_def
# define WPP_SF_sDDDD_def
WPP_INLINE void WPP_SF_sDDDD(WPP_LOGGER_ARG unsigned short id, LPCGUID TraceGuid, LPCSTR _a1, unsigned int _a2, unsigned int _a3, unsigned int _a4, unsigned int _a5)
{ WPP_TRACE(WPP_GET_LOGGER, WPP_TRACE_OPTIONS, (LPGUID)TraceGuid, id, WPP_LOGASTR(_a1) WPP_LOGTYPEVAL(unsigned int, _a2) WPP_LOGTYPEVAL(unsigned int, _a3) WPP_LOGTYPEVAL(unsigned int, _a4) WPP_LOGTYPEVAL(unsigned int, _a5)  (void*)0); }
#endif // WPP_SF_sDDDD_def

#if ENABLE_WPP_RECORDER

#if ENABLE_WPP_TRACE_FILTERING_WITH_WPP_RECORDER

//
// Generate the WPP_RECORDER_AND_TRACE_SF_sDDDD function
//
#ifndef WPP_RECORDER_AND_TRACE_SF_sDDDD_def
#define WPP_RECORDER_AND_TRACE_SF_sDDDD_def
WPP_INLINE
VOID
WPP_RECORDER_AND_TRACE_SF_sDDDD(
    WPP_LOGGER_ARG
    BOOLEAN  wppEnabled,
    BOOLEAN  recorderEnabled,
    PVOID    AutoLogContext,
    UCHAR    level,
    ULONG    flags,
    USHORT   id,
    LPCGUID  traceGuid
    , LPCSTR _a1, unsigned int _a2, unsigned int _a3, unsigned int _a4, unsigned int _a5
    )
{
    if (wppEnabled)
    {
        WPP_TRACE( WPP_GET_LOGGER,
                   WPP_TRACE_OPTIONS,
                   (LPGUID)traceGuid,
                   id,
                   WPP_LOGASTR(_a1) WPP_LOGTYPEVAL(unsigned int, _a2) WPP_LOGTYPEVAL(unsigned int, _a3) WPP_LOGTYPEVAL(unsigned int, _a4) WPP_LOGTYPEVAL(unsigned int, _a5)  (void*)0);
    }

    if (recorderEnabled)
    {
        WPP_RECORDER( AutoLogContext, level, flags, (LPGUID) traceGuid, id, WPP_LOGASTR(_a1) WPP_LOGTYPEVAL(unsigned int, _a2) WPP_LOGTYPEVAL(unsigned int, _a3) WPP_LOGTYPEVAL(unsigned int, _a4) WPP_LOGTYPEVAL(unsigned int, _a5)  (void*)0 );
    }
}
#endif // WPP_RECORDER_AND_TRACE_SF_sDDDD_def

#else  // ENABLE_WPP_TRACE_FILTERING_WITH_WPP_RECORDER

//
// Generate the WPP_RECORDER_SP_sDDDD function
//
#ifndef WPP_RECORDER_SF_sDDDD_def
#define WPP_RECORDER_SF_sDDDD_def
WPP_INLINE
VOID
WPP_RECORDER_SF_sDDDD(
    PVOID    AutoLogContext,
    UCHAR    level,
    ULONG    flags,
    USHORT   id,
    LPCGUID  traceGuid
    , LPCSTR _a1, unsigned int _a2, unsigned int _a3, unsigned int _a4, unsigned int _a5
    )
{
    if (WPP_ENABLE_FLAG_BIT(flags) &&
        (WPP_CONTROL(flags).Level >= level))
    {
        WPP_TRACE(
            WPP_CONTROL(flags).Logger,
            WPP_TRACE_OPTIONS,
            (LPGUID)traceGuid,
            id,
            WPP_LOGASTR(_a1) WPP_LOGTYPEVAL(unsigned int, _a2) WPP_LOGTYPEVAL(unsigned int, _a3) WPP_LOGTYPEVAL(unsigned int, _a4) WPP_LOGTYPEVAL(unsigned int, _a5)  (void*)0);
    }

    WPP_RECORDER(AutoLogContext, level, flags, (LPGUID) traceGuid, id, WPP_LOGASTR(_a1) WPP_LOGTYPEVAL(unsigned int, _a2) WPP_LOGTYPEVAL(unsigned int, _a3) WPP_LOGTYPEVAL(unsigned int, _a4) WPP_LOGTYPEVAL(unsigned int, _a5)  (void*)0);
}
#endif // WPP_RECORDER_SF_sDDDD_def

#endif // ENABLE_WPP_TRACE_FILTERING_WITH_WPP_RECORDER

#endif // ENABLE_WPP_RECORDER

#ifndef WPP_SF_sDDq_def
# define WPP_SF_sDDq_def
WPP_INLINE void WPP_SF_sDDq(WPP_LOGGER_ARG unsigned short id, LPCGUID TraceGuid, LPCSTR _a1, unsigned int _a2, unsigned int _a3, const void* _a4)
{ WPP_TRACE(WPP_GET_LOGGER, WPP_TRACE_OPTIONS, (LPGUID)TraceGuid, id, WPP_LOGASTR(_a1) WPP_LOGTYPEVAL(unsigned int, _a2) WPP_LOGTYPEVAL(unsigned int, _a3) WPP_LOGTYPEVAL(const void*, _a4)  (void*)0); }
#endif // WPP_SF_sDDq_def

#if ENABLE_WPP_RECORDER

#if ENABLE_WPP_TRACE_FILTERING_WITH_WPP_RECORDER

//
// Generate the WPP_RECORDER_AND_TRACE_SF_sDDq function
//
#ifndef WPP_RECORDER_AND_TRACE_SF_sDDq_def
#define WPP_RECORDER_AND_TRACE_SF_sDDq_def
WPP_INLINE
VOID
WPP_RECORDER_AND_TRACE_SF_sDDq(
    WPP_LOGGER_ARG
    BOOLEAN  wppEnabled,
    BOOLEAN  recorderEnabled,
    PVOID    AutoLogContext,
    UCHAR    level,
    ULONG    flags,
    USHORT   id,
    LPCGUID  traceGuid
    , LPCSTR _a1, unsigned int _a2, unsigned int _a3, const void* _a4
    )
{
    if (wppEnabled)
    {
        WPP_TRACE( WPP_GET_LOGGER,
                   WPP_TRACE_OPTIONS,
                   (LPGUID)traceGuid,
                   id,
                   WPP_LOGASTR(_a1) WPP_LOGTYPEVAL(unsigned int, _a2) WPP_LOGTYPEVAL(unsigned int, _a3) WPP_LOGTYPEVAL(const void*, _a4)  (void*)0);
    }

    if (recorderEnabled)
    {
        WPP_RECORDER( AutoLogContext, level, flags, (LPGUID) traceGuid, id, WPP_LOGASTR(_a1) WPP_LOGTYPEVAL(unsigned int, _a2) WPP_LOGTYPEVAL(unsigned int, _a3) WPP_LOGTYPEVAL(const void*, _a4)  (void*)0 );
    }
}
#endif // WPP_RECORDER_AND_TRACE_SF_sDDq_def

#else  // ENABLE_WPP_TRACE_FILTERING_WITH_WPP_RECORDER

//
// Generate the WPP_RECORDER_SP_sDDq function
//
#ifndef WPP_RECORDER_SF_sDDq_def
#define WPP_RECORDER_SF_sDDq_def
WPP_INLINE
VOID
WPP_RECORDER_SF_sDDq(
    PVOID    AutoLogContext,
    UCHAR    level,
    ULONG    flags,
    USHORT   id,
    LPCGUID  traceGuid
    , LPCSTR _a1, unsigned int _a2, unsigned int _a3, const void* _a4
    )
{
    if (WPP_ENABLE_FLAG_BIT(flags) &&
        (WPP_CONTROL(flags).Level >= level))
    {
        WPP_TRACE(
            WPP_CONTROL(flags).Logger,
            WPP_TRACE_OPTIONS,
            (LPGUID)traceGuid,
            id,
            WPP_LOGASTR(_a1) WPP_LOGTYPEVAL(unsigned int, _a2) WPP_LOGTYPEVAL(unsigned int, _a3) WPP_LOGTYPEVAL(const void*, _a4)  (void*)0);
    }

    WPP_RECORDER(AutoLogContext, level, flags, (LPGUID) traceGuid, id, WPP_LOGASTR(_a1) WPP_LOGTYPEVAL(unsigned int, _a2) WPP_LOGTYPEVAL(unsigned int, _a3) WPP_LOGTYPEVAL(const void*, _a4)  (void*)0);
}
#endif // WPP_RECORDER_SF_sDDq_def

#endif // ENABLE_WPP_TRACE_FILTERING_WITH_WPP_RECORDER

#endif // ENABLE_WPP_RECORDER

#ifndef WPP_SF_sDL_def
# define WPP_SF_sDL_def
WPP_INLINE void WPP_SF_sDL(WPP_LOGGER_ARG unsigned short id, LPCGUID TraceGuid, LPCSTR _a1, unsigned int _a2, unsigned long _a3)
{ WPP_TRACE(WPP_GET_LOGGER, WPP_TRACE_OPTIONS, (LPGUID)TraceGuid, id, WPP_LOGASTR(_a1) WPP_LOGTYPEVAL(unsigned int, _a2) WPP_LOGTYPEVAL(unsigned long, _a3)  (void*)0); }
#endif // WPP_SF_sDL_def

#if ENABLE_WPP_RECORDER

#if ENABLE_WPP_TRACE_FILTERING_WITH_WPP_RECORDER

//
// Generate the WPP_RECORDER_AND_TRACE_SF_sDL function
//
#ifndef WPP_RECORDER_AND_TRACE_SF_sDL_def
#define WPP_RECORDER_AND_TRACE_SF_sDL_def
WPP_INLINE
VOID
WPP_RECORDER_AND_TRACE_SF_sDL(
    WPP_LOGGER_ARG
    BOOLEAN  wppEnabled,
    BOOLEAN  recorderEnabled,
    PVOID    AutoLogContext,
    UCHAR    level,
    ULONG    flags,
    USHORT   id,
    LPCGUID  traceGuid
    , LPCSTR _a1, unsigned int _a2, unsigned long _a3
    )
{
    if (wppEnabled)
    {
        WPP_TRACE( WPP_GET_LOGGER,
                   WPP_TRACE_OPTIONS,
                   (LPGUID)traceGuid,
                   id,
                   WPP_LOGASTR(_a1) WPP_LOGTYPEVAL(unsigned int, _a2) WPP_LOGTYPEVAL(unsigned long, _a3)  (void*)0);
    }

    if (recorderEnabled)
    {
        WPP_RECORDER( AutoLogContext, level, flags, (LPGUID) traceGuid, id, WPP_LOGASTR(_a1) WPP_LOGTYPEVAL(unsigned int, _a2) WPP_LOGTYPEVAL(unsigned long, _a3)  (void*)0 );
    }
}
#endif // WPP_RECORDER_AND_TRACE_SF_sDL_def

#else  // ENABLE_WPP_TRACE_FILTERING_WITH_WPP_RECORDER

//
// Generate the WPP_RECORDER_SP_sDL function
//
#ifndef WPP_RECORDER_SF_sDL_def
#define WPP_RECORDER_SF_sDL_def
WPP_INLINE
VOID
WPP_RECORDER_SF_sDL(
    PVOID    AutoLogContext,
    UCHAR    level,
    ULONG    flags,
    USHORT   id,
    LPCGUID  traceGuid
    , LPCSTR _a1, unsigned int _a2, unsigned long _a3
    )
{
    if (WPP_ENABLE_FLAG_BIT(flags) &&
        (WPP_CONTROL(flags).Level >= level))
    {
        WPP_TRACE(
            WPP_CONTROL(flags).Logger,
            WPP_TRACE_OPTIONS,
            (LPGUID)traceGuid,
            id,
            WPP_LOGASTR(_a1) WPP_LOGTYPEVAL(unsigned int, _a2) WPP_LOGTYPEVAL(unsigned long, _a3)  (void*)0);
    }

    WPP_RECORDER(AutoLogContext, level, flags, (LPGUID) traceGuid, id, WPP_LOGASTR(_a1) WPP_LOGTYPEVAL(unsigned int, _a2) WPP_LOGTYPEVAL(unsigned long, _a3)  (void*)0);
}
#endif // WPP_RECORDER_SF_sDL_def

#endif // ENABLE_WPP_TRACE_FILTERING_WITH_WPP_RECORDER

#endif // ENABLE_WPP_RECORDER

#ifndef WPP_SF_sDLLq_def
# define WPP_SF_sDLLq_def
WPP_INLINE void WPP_SF_sDLLq(WPP_LOGGER_ARG unsigned short id, LPCGUID TraceGuid, LPCSTR _a1, unsigned int _a2, unsigned long _a3, unsigned long _a4, const void* _a5)
{ WPP_TRACE(WPP_GET_LOGGER, WPP_TRACE_OPTIONS, (LPGUID)TraceGuid, id, WPP_LOGASTR(_a1) WPP_LOGTYPEVAL(unsigned int, _a2) WPP_LOGTYPEVAL(unsigned long, _a3) WPP_LOGTYPEVAL(unsigned long, _a4) WPP_LOGTYPEVAL(const void*, _a5)  (void*)0); }
#endif // WPP_SF_sDLLq_def

#if ENABLE_WPP_RECORDER

#if ENABLE_WPP_TRACE_FILTERING_WITH_WPP_RECORDER

//
// Generate the WPP_RECORDER_AND_TRACE_SF_sDLLq function
//
#ifndef WPP_RECORDER_AND_TRACE_SF_sDLLq_def
#define WPP_RECORDER_AND_TRACE_SF_sDLLq_def
WPP_INLINE
VOID
WPP_RECORDER_AND_TRACE_SF_sDLLq(
    WPP_LOGGER_ARG
    BOOLEAN  wppEnabled,
    BOOLEAN  recorderEnabled,
    PVOID    AutoLogContext,
    UCHAR    level,
    ULONG    flags,
    USHORT   id,
    LPCGUID  traceGuid
    , LPCSTR _a1, unsigned int _a2, unsigned long _a3, unsigned long _a4, const void* _a5
    )
{
    if (wppEnabled)
    {
        WPP_TRACE( WPP_GET_LOGGER,
                   WPP_TRACE_OPTIONS,
                   (LPGUID)traceGuid,
                   id,
                   WPP_LOGASTR(_a1) WPP_LOGTYPEVAL(unsigned int, _a2) WPP_LOGTYPEVAL(unsigned long, _a3) WPP_LOGTYPEVAL(unsigned long, _a4) WPP_LOGTYPEVAL(const void*, _a5)  (void*)0);
    }

    if (recorderEnabled)
    {
        WPP_RECORDER( AutoLogContext, level, flags, (LPGUID) traceGuid, id, WPP_LOGASTR(_a1) WPP_LOGTYPEVAL(unsigned int, _a2) WPP_LOGTYPEVAL(unsigned long, _a3) WPP_LOGTYPEVAL(unsigned long, _a4) WPP_LOGTYPEVAL(const void*, _a5)  (void*)0 );
    }
}
#endif // WPP_RECORDER_AND_TRACE_SF_sDLLq_def

#else  // ENABLE_WPP_TRACE_FILTERING_WITH_WPP_RECORDER

//
// Generate the WPP_RECORDER_SP_sDLLq function
//
#ifndef WPP_RECORDER_SF_sDLLq_def
#define WPP_RECORDER_SF_sDLLq_def
WPP_INLINE
VOID
WPP_RECORDER_SF_sDLLq(
    PVOID    AutoLogContext,
    UCHAR    level,
    ULONG    flags,
    USHORT   id,
    LPCGUID  traceGuid
    , LPCSTR _a1, unsigned int _a2, unsigned long _a3, unsigned long _a4, const void* _a5
    )
{
    if (WPP_ENABLE_FLAG_BIT(flags) &&
        (WPP_CONTROL(flags).Level >= level))
    {
        WPP_TRACE(
            WPP_CONTROL(flags).Logger,
            WPP_TRACE_OPTIONS,
            (LPGUID)traceGuid,
            id,
            WPP_LOGASTR(_a1) WPP_LOGTYPEVAL(unsigned int, _a2) WPP_LOGTYPEVAL(unsigned long, _a3) WPP_LOGTYPEVAL(unsigned long, _a4) WPP_LOGTYPEVAL(const void*, _a5)  (void*)0);
    }

    WPP_RECORDER(AutoLogContext, level, flags, (LPGUID) traceGuid, id, WPP_LOGASTR(_a1) WPP_LOGTYPEVAL(unsigned int, _a2) WPP_LOGTYPEVAL(unsigned long, _a3) WPP_LOGTYPEVAL(unsigned long, _a4) WPP_LOGTYPEVAL(const void*, _a5)  (void*)0);
}
#endif // WPP_RECORDER_SF_sDLLq_def

#endif // ENABLE_WPP_TRACE_FILTERING_WITH_WPP_RECORDER

#endif // ENABLE_WPP_RECORDER

#ifndef WPP_SF_sDPq_def
# define WPP_SF_sDPq_def
WPP_INLINE void WPP_SF_sDPq(WPP_LOGGER_ARG unsigned short id, LPCGUID TraceGuid, LPCSTR _a1, unsigned int _a2, ULONG_PTR _a3, const void* _a4)
{ WPP_TRACE(WPP_GET_LOGGER, WPP_TRACE_OPTIONS, (LPGUID)TraceGuid, id, WPP_LOGASTR(_a1) WPP_LOGTYPEVAL(unsigned int, _a2) WPP_LOGTYPEVAL(ULONG_PTR, _a3) WPP_LOGTYPEVAL(const void*, _a4)  (void*)0); }
#endif // WPP_SF_sDPq_def

#if ENABLE_WPP_RECORDER

#if ENABLE_WPP_TRACE_FILTERING_WITH_WPP_RECORDER

//
// Generate the WPP_RECORDER_AND_TRACE_SF_sDPq function
//
#ifndef WPP_RECORDER_AND_TRACE_SF_sDPq_def
#define WPP_RECORDER_AND_TRACE_SF_sDPq_def
WPP_INLINE
VOID
WPP_RECORDER_AND_TRACE_SF_sDPq(
    WPP_LOGGER_ARG
    BOOLEAN  wppEnabled,
    BOOLEAN  recorderEnabled,
    PVOID    AutoLogContext,
    UCHAR    level,
    ULONG    flags,
    USHORT   id,
    LPCGUID  traceGuid
    , LPCSTR _a1, unsigned int _a2, ULONG_PTR _a3, const void* _a4
    )
{
    if (wppEnabled)
    {
        WPP_TRACE( WPP_GET_LOGGER,
                   WPP_TRACE_OPTIONS,
                   (LPGUID)traceGuid,
                   id,
                   WPP_LOGASTR(_a1) WPP_LOGTYPEVAL(unsigned int, _a2) WPP_LOGTYPEVAL(ULONG_PTR, _a3) WPP_LOGTYPEVAL(const void*, _a4)  (void*)0);
    }

    if (recorderEnabled)
    {
        WPP_RECORDER( AutoLogContext, level, flags, (LPGUID) traceGuid, id, WPP_LOGASTR(_a1) WPP_LOGTYPEVAL(unsigned int, _a2) WPP_LOGTYPEVAL(ULONG_PTR, _a3) WPP_LOGTYPEVAL(const void*, _a4)  (void*)0 );
    }
}
#endif // WPP_RECORDER_AND_TRACE_SF_sDPq_def

#else  // ENABLE_WPP_TRACE_FILTERING_WITH_WPP_RECORDER

//
// Generate the WPP_RECORDER_SP_sDPq function
//
#ifndef WPP_RECORDER_SF_sDPq_def
#define WPP_RECORDER_SF_sDPq_def
WPP_INLINE
VOID
WPP_RECORDER_SF_sDPq(
    PVOID    AutoLogContext,
    UCHAR    level,
    ULONG    flags,
    USHORT   id,
    LPCGUID  traceGuid
    , LPCSTR _a1, unsigned int _a2, ULONG_PTR _a3, const void* _a4
    )
{
    if (WPP_ENABLE_FLAG_BIT(flags) &&
        (WPP_CONTROL(flags).Level >= level))
    {
        WPP_TRACE(
            WPP_CONTROL(flags).Logger,
            WPP_TRACE_OPTIONS,
            (LPGUID)traceGuid,
            id,
            WPP_LOGASTR(_a1) WPP_LOGTYPEVAL(unsigned int, _a2) WPP_LOGTYPEVAL(ULONG_PTR, _a3) WPP_LOGTYPEVAL(const void*, _a4)  (void*)0);
    }

    WPP_RECORDER(AutoLogContext, level, flags, (LPGUID) traceGuid, id, WPP_LOGASTR(_a1) WPP_LOGTYPEVAL(unsigned int, _a2) WPP_LOGTYPEVAL(ULONG_PTR, _a3) WPP_LOGTYPEVAL(const void*, _a4)  (void*)0);
}
#endif // WPP_RECORDER_SF_sDPq_def

#endif // ENABLE_WPP_TRACE_FILTERING_WITH_WPP_RECORDER

#endif // ENABLE_WPP_RECORDER

#ifndef WPP_SF_sDd_def
# define WPP_SF_sDd_def
WPP_INLINE void WPP_SF_sDd(WPP_LOGGER_ARG unsigned short id, LPCGUID TraceGuid, LPCSTR _a1, unsigned int _a2, signed int _a3)
{ WPP_TRACE(WPP_GET_LOGGER, WPP_TRACE_OPTIONS, (LPGUID)TraceGuid, id, WPP_LOGASTR(_a1) WPP_LOGTYPEVAL(unsigned int, _a2) WPP_LOGTYPEVAL(signed int, _a3)  (void*)0); }
#endif // WPP_SF_sDd_def

#if ENABLE_WPP_RECORDER

#if ENABLE_WPP_TRACE_FILTERING_WITH_WPP_RECORDER

//
// Generate the WPP_RECORDER_AND_TRACE_SF_sDd function
//
#ifndef WPP_RECORDER_AND_TRACE_SF_sDd_def
#define WPP_RECORDER_AND_TRACE_SF_sDd_def
WPP_INLINE
VOID
WPP_RECORDER_AND_TRACE_SF_sDd(
    WPP_LOGGER_ARG
    BOOLEAN  wppEnabled,
    BOOLEAN  recorderEnabled,
    PVOID    AutoLogContext,
    UCHAR    level,
    ULONG    flags,
    USHORT   id,
    LPCGUID  traceGuid
    , LPCSTR _a1, unsigned int _a2, signed int _a3
    )
{
    if (wppEnabled)
    {
        WPP_TRACE( WPP_GET_LOGGER,
                   WPP_TRACE_OPTIONS,
                   (LPGUID)traceGuid,
                   id,
                   WPP_LOGASTR(_a1) WPP_LOGTYPEVAL(unsigned int, _a2) WPP_LOGTYPEVAL(signed int, _a3)  (void*)0);
    }

    if (recorderEnabled)
    {
        WPP_RECORDER( AutoLogContext, level, flags, (LPGUID) traceGuid, id, WPP_LOGASTR(_a1) WPP_LOGTYPEVAL(unsigned int, _a2) WPP_LOGTYPEVAL(signed int, _a3)  (void*)0 );
    }
}
#endif // WPP_RECORDER_AND_TRACE_SF_sDd_def

#else  // ENABLE_WPP_TRACE_FILTERING_WITH_WPP_RECORDER

//
// Generate the WPP_RECORDER_SP_sDd function
//
#ifndef WPP_RECORDER_SF_sDd_def
#define WPP_RECORDER_SF_sDd_def
WPP_INLINE
VOID
WPP_RECORDER_SF_sDd(
    PVOID    AutoLogContext,
    UCHAR    level,
    ULONG    flags,
    USHORT   id,
    LPCGUID  traceGuid
    , LPCSTR _a1, unsigned int _a2, signed int _a3
    )
{
    if (WPP_ENABLE_FLAG_BIT(flags) &&
        (WPP_CONTROL(flags).Level >= level))
    {
        WPP_TRACE(
            WPP_CONTROL(flags).Logger,
            WPP_TRACE_OPTIONS,
            (LPGUID)traceGuid,
            id,
            WPP_LOGASTR(_a1) WPP_LOGTYPEVAL(unsigned int, _a2) WPP_LOGTYPEVAL(signed int, _a3)  (void*)0);
    }

    WPP_RECORDER(AutoLogContext, level, flags, (LPGUID) traceGuid, id, WPP_LOGASTR(_a1) WPP_LOGTYPEVAL(unsigned int, _a2) WPP_LOGTYPEVAL(signed int, _a3)  (void*)0);
}
#endif // WPP_RECORDER_SF_sDd_def

#endif // ENABLE_WPP_TRACE_FILTERING_WITH_WPP_RECORDER

#endif // ENABLE_WPP_RECORDER

#ifndef WPP_SF_sDdd_def
# define WPP_SF_sDdd_def
WPP_INLINE void WPP_SF_sDdd(WPP_LOGGER_ARG unsigned short id, LPCGUID TraceGuid, LPCSTR _a1, unsigned int _a2, signed int _a3, signed int _a4)
{ WPP_TRACE(WPP_GET_LOGGER, WPP_TRACE_OPTIONS, (LPGUID)TraceGuid, id, WPP_LOGASTR(_a1) WPP_LOGTYPEVAL(unsigned int, _a2) WPP_LOGTYPEVAL(signed int, _a3) WPP_LOGTYPEVAL(signed int, _a4)  (void*)0); }
#endif // WPP_SF_sDdd_def

#if ENABLE_WPP_RECORDER

#if ENABLE_WPP_TRACE_FILTERING_WITH_WPP_RECORDER

//
// Generate the WPP_RECORDER_AND_TRACE_SF_sDdd function
//
#ifndef WPP_RECORDER_AND_TRACE_SF_sDdd_def
#define WPP_RECORDER_AND_TRACE_SF_sDdd_def
WPP_INLINE
VOID
WPP_RECORDER_AND_TRACE_SF_sDdd(
    WPP_LOGGER_ARG
    BOOLEAN  wppEnabled,
    BOOLEAN  recorderEnabled,
    PVOID    AutoLogContext,
    UCHAR    level,
    ULONG    flags,
    USHORT   id,
    LPCGUID  traceGuid
    , LPCSTR _a1, unsigned int _a2, signed int _a3, signed int _a4
    )
{
    if (wppEnabled)
    {
        WPP_TRACE( WPP_GET_LOGGER,
                   WPP_TRACE_OPTIONS,
                   (LPGUID)traceGuid,
                   id,
                   WPP_LOGASTR(_a1) WPP_LOGTYPEVAL(unsigned int, _a2) WPP_LOGTYPEVAL(signed int, _a3) WPP_LOGTYPEVAL(signed int, _a4)  (void*)0);
    }

    if (recorderEnabled)
    {
        WPP_RECORDER( AutoLogContext, level, flags, (LPGUID) traceGuid, id, WPP_LOGASTR(_a1) WPP_LOGTYPEVAL(unsigned int, _a2) WPP_LOGTYPEVAL(signed int, _a3) WPP_LOGTYPEVAL(signed int, _a4)  (void*)0 );
    }
}
#endif // WPP_RECORDER_AND_TRACE_SF_sDdd_def

#else  // ENABLE_WPP_TRACE_FILTERING_WITH_WPP_RECORDER

//
// Generate the WPP_RECORDER_SP_sDdd function
//
#ifndef WPP_RECORDER_SF_sDdd_def
#define WPP_RECORDER_SF_sDdd_def
WPP_INLINE
VOID
WPP_RECORDER_SF_sDdd(
    PVOID    AutoLogContext,
    UCHAR    level,
    ULONG    flags,
    USHORT   id,
    LPCGUID  traceGuid
    , LPCSTR _a1, unsigned int _a2, signed int _a3, signed int _a4
    )
{
    if (WPP_ENABLE_FLAG_BIT(flags) &&
        (WPP_CONTROL(flags).Level >= level))
    {
        WPP_TRACE(
            WPP_CONTROL(flags).Logger,
            WPP_TRACE_OPTIONS,
            (LPGUID)traceGuid,
            id,
            WPP_LOGASTR(_a1) WPP_LOGTYPEVAL(unsigned int, _a2) WPP_LOGTYPEVAL(signed int, _a3) WPP_LOGTYPEVAL(signed int, _a4)  (void*)0);
    }

    WPP_RECORDER(AutoLogContext, level, flags, (LPGUID) traceGuid, id, WPP_LOGASTR(_a1) WPP_LOGTYPEVAL(unsigned int, _a2) WPP_LOGTYPEVAL(signed int, _a3) WPP_LOGTYPEVAL(signed int, _a4)  (void*)0);
}
#endif // WPP_RECORDER_SF_sDdd_def

#endif // ENABLE_WPP_TRACE_FILTERING_WITH_WPP_RECORDER

#endif // ENABLE_WPP_RECORDER

#ifndef WPP_SF_sDddd_def
# define WPP_SF_sDddd_def
WPP_INLINE void WPP_SF_sDddd(WPP_LOGGER_ARG unsigned short id, LPCGUID TraceGuid, LPCSTR _a1, unsigned int _a2, signed int _a3, signed int _a4, signed int _a5)
{ WPP_TRACE(WPP_GET_LOGGER, WPP_TRACE_OPTIONS, (LPGUID)TraceGuid, id, WPP_LOGASTR(_a1) WPP_LOGTYPEVAL(unsigned int, _a2) WPP_LOGTYPEVAL(signed int, _a3) WPP_LOGTYPEVAL(signed int, _a4) WPP_LOGTYPEVAL(signed int, _a5)  (void*)0); }
#endif // WPP_SF_sDddd_def

#if ENABLE_WPP_RECORDER

#if ENABLE_WPP_TRACE_FILTERING_WITH_WPP_RECORDER

//
// Generate the WPP_RECORDER_AND_TRACE_SF_sDddd function
//
#ifndef WPP_RECORDER_AND_TRACE_SF_sDddd_def
#define WPP_RECORDER_AND_TRACE_SF_sDddd_def
WPP_INLINE
VOID
WPP_RECORDER_AND_TRACE_SF_sDddd(
    WPP_LOGGER_ARG
    BOOLEAN  wppEnabled,
    BOOLEAN  recorderEnabled,
    PVOID    AutoLogContext,
    UCHAR    level,
    ULONG    flags,
    USHORT   id,
    LPCGUID  traceGuid
    , LPCSTR _a1, unsigned int _a2, signed int _a3, signed int _a4, signed int _a5
    )
{
    if (wppEnabled)
    {
        WPP_TRACE( WPP_GET_LOGGER,
                   WPP_TRACE_OPTIONS,
                   (LPGUID)traceGuid,
                   id,
                   WPP_LOGASTR(_a1) WPP_LOGTYPEVAL(unsigned int, _a2) WPP_LOGTYPEVAL(signed int, _a3) WPP_LOGTYPEVAL(signed int, _a4) WPP_LOGTYPEVAL(signed int, _a5)  (void*)0);
    }

    if (recorderEnabled)
    {
        WPP_RECORDER( AutoLogContext, level, flags, (LPGUID) traceGuid, id, WPP_LOGASTR(_a1) WPP_LOGTYPEVAL(unsigned int, _a2) WPP_LOGTYPEVAL(signed int, _a3) WPP_LOGTYPEVAL(signed int, _a4) WPP_LOGTYPEVAL(signed int, _a5)  (void*)0 );
    }
}
#endif // WPP_RECORDER_AND_TRACE_SF_sDddd_def

#else  // ENABLE_WPP_TRACE_FILTERING_WITH_WPP_RECORDER

//
// Generate the WPP_RECORDER_SP_sDddd function
//
#ifndef WPP_RECORDER_SF_sDddd_def
#define WPP_RECORDER_SF_sDddd_def
WPP_INLINE
VOID
WPP_RECORDER_SF_sDddd(
    PVOID    AutoLogContext,
    UCHAR    level,
    ULONG    flags,
    USHORT   id,
    LPCGUID  traceGuid
    , LPCSTR _a1, unsigned int _a2, signed int _a3, signed int _a4, signed int _a5
    )
{
    if (WPP_ENABLE_FLAG_BIT(flags) &&
        (WPP_CONTROL(flags).Level >= level))
    {
        WPP_TRACE(
            WPP_CONTROL(flags).Logger,
            WPP_TRACE_OPTIONS,
            (LPGUID)traceGuid,
            id,
            WPP_LOGASTR(_a1) WPP_LOGTYPEVAL(unsigned int, _a2) WPP_LOGTYPEVAL(signed int, _a3) WPP_LOGTYPEVAL(signed int, _a4) WPP_LOGTYPEVAL(signed int, _a5)  (void*)0);
    }

    WPP_RECORDER(AutoLogContext, level, flags, (LPGUID) traceGuid, id, WPP_LOGASTR(_a1) WPP_LOGTYPEVAL(unsigned int, _a2) WPP_LOGTYPEVAL(signed int, _a3) WPP_LOGTYPEVAL(signed int, _a4) WPP_LOGTYPEVAL(signed int, _a5)  (void*)0);
}
#endif // WPP_RECORDER_SF_sDddd_def

#endif // ENABLE_WPP_TRACE_FILTERING_WITH_WPP_RECORDER

#endif // ENABLE_WPP_RECORDER

#ifndef WPP_SF_sDdddd_def
# define WPP_SF_sDdddd_def
WPP_INLINE void WPP_SF_sDdddd(WPP_LOGGER_ARG unsigned short id, LPCGUID TraceGuid, LPCSTR _a1, unsigned int _a2, signed int _a3, signed int _a4, signed int _a5, signed int _a6)
{ WPP_TRACE(WPP_GET_LOGGER, WPP_TRACE_OPTIONS, (LPGUID)TraceGuid, id, WPP_LOGASTR(_a1) WPP_LOGTYPEVAL(unsigned int, _a2) WPP_LOGTYPEVAL(signed int, _a3) WPP_LOGTYPEVAL(signed int, _a4) WPP_LOGTYPEVAL(signed int, _a5) WPP_LOGTYPEVAL(signed int, _a6)  (void*)0); }
#endif // WPP_SF_sDdddd_def

#if ENABLE_WPP_RECORDER

#if ENABLE_WPP_TRACE_FILTERING_WITH_WPP_RECORDER

//
// Generate the WPP_RECORDER_AND_TRACE_SF_sDdddd function
//
#ifndef WPP_RECORDER_AND_TRACE_SF_sDdddd_def
#define WPP_RECORDER_AND_TRACE_SF_sDdddd_def
WPP_INLINE
VOID
WPP_RECORDER_AND_TRACE_SF_sDdddd(
    WPP_LOGGER_ARG
    BOOLEAN  wppEnabled,
    BOOLEAN  recorderEnabled,
    PVOID    AutoLogContext,
    UCHAR    level,
    ULONG    flags,
    USHORT   id,
    LPCGUID  traceGuid
    , LPCSTR _a1, unsigned int _a2, signed int _a3, signed int _a4, signed int _a5, signed int _a6
    )
{
    if (wppEnabled)
    {
        WPP_TRACE( WPP_GET_LOGGER,
                   WPP_TRACE_OPTIONS,
                   (LPGUID)traceGuid,
                   id,
                   WPP_LOGASTR(_a1) WPP_LOGTYPEVAL(unsigned int, _a2) WPP_LOGTYPEVAL(signed int, _a3) WPP_LOGTYPEVAL(signed int, _a4) WPP_LOGTYPEVAL(signed int, _a5) WPP_LOGTYPEVAL(signed int, _a6)  (void*)0);
    }

    if (recorderEnabled)
    {
        WPP_RECORDER( AutoLogContext, level, flags, (LPGUID) traceGuid, id, WPP_LOGASTR(_a1) WPP_LOGTYPEVAL(unsigned int, _a2) WPP_LOGTYPEVAL(signed int, _a3) WPP_LOGTYPEVAL(signed int, _a4) WPP_LOGTYPEVAL(signed int, _a5) WPP_LOGTYPEVAL(signed int, _a6)  (void*)0 );
    }
}
#endif // WPP_RECORDER_AND_TRACE_SF_sDdddd_def

#else  // ENABLE_WPP_TRACE_FILTERING_WITH_WPP_RECORDER

//
// Generate the WPP_RECORDER_SP_sDdddd function
//
#ifndef WPP_RECORDER_SF_sDdddd_def
#define WPP_RECORDER_SF_sDdddd_def
WPP_INLINE
VOID
WPP_RECORDER_SF_sDdddd(
    PVOID    AutoLogContext,
    UCHAR    level,
    ULONG    flags,
    USHORT   id,
    LPCGUID  traceGuid
    , LPCSTR _a1, unsigned int _a2, signed int _a3, signed int _a4, signed int _a5, signed int _a6
    )
{
    if (WPP_ENABLE_FLAG_BIT(flags) &&
        (WPP_CONTROL(flags).Level >= level))
    {
        WPP_TRACE(
            WPP_CONTROL(flags).Logger,
            WPP_TRACE_OPTIONS,
            (LPGUID)traceGuid,
            id,
            WPP_LOGASTR(_a1) WPP_LOGTYPEVAL(unsigned int, _a2) WPP_LOGTYPEVAL(signed int, _a3) WPP_LOGTYPEVAL(signed int, _a4) WPP_LOGTYPEVAL(signed int, _a5) WPP_LOGTYPEVAL(signed int, _a6)  (void*)0);
    }

    WPP_RECORDER(AutoLogContext, level, flags, (LPGUID) traceGuid, id, WPP_LOGASTR(_a1) WPP_LOGTYPEVAL(unsigned int, _a2) WPP_LOGTYPEVAL(signed int, _a3) WPP_LOGTYPEVAL(signed int, _a4) WPP_LOGTYPEVAL(signed int, _a5) WPP_LOGTYPEVAL(signed int, _a6)  (void*)0);
}
#endif // WPP_RECORDER_SF_sDdddd_def

#endif // ENABLE_WPP_TRACE_FILTERING_WITH_WPP_RECORDER

#endif // ENABLE_WPP_RECORDER

#ifndef WPP_SF_sDdddddd_def
# define WPP_SF_sDdddddd_def
WPP_INLINE void WPP_SF_sDdddddd(WPP_LOGGER_ARG unsigned short id, LPCGUID TraceGuid, LPCSTR _a1, unsigned int _a2, signed int _a3, signed int _a4, signed int _a5, signed int _a6, signed int _a7, signed int _a8)
{ WPP_TRACE(WPP_GET_LOGGER, WPP_TRACE_OPTIONS, (LPGUID)TraceGuid, id, WPP_LOGASTR(_a1) WPP_LOGTYPEVAL(unsigned int, _a2) WPP_LOGTYPEVAL(signed int, _a3) WPP_LOGTYPEVAL(signed int, _a4) WPP_LOGTYPEVAL(signed int, _a5) WPP_LOGTYPEVAL(signed int, _a6) WPP_LOGTYPEVAL(signed int, _a7) WPP_LOGTYPEVAL(signed int, _a8)  (void*)0); }
#endif // WPP_SF_sDdddddd_def

#if ENABLE_WPP_RECORDER

#if ENABLE_WPP_TRACE_FILTERING_WITH_WPP_RECORDER

//
// Generate the WPP_RECORDER_AND_TRACE_SF_sDdddddd function
//
#ifndef WPP_RECORDER_AND_TRACE_SF_sDdddddd_def
#define WPP_RECORDER_AND_TRACE_SF_sDdddddd_def
WPP_INLINE
VOID
WPP_RECORDER_AND_TRACE_SF_sDdddddd(
    WPP_LOGGER_ARG
    BOOLEAN  wppEnabled,
    BOOLEAN  recorderEnabled,
    PVOID    AutoLogContext,
    UCHAR    level,
    ULONG    flags,
    USHORT   id,
    LPCGUID  traceGuid
    , LPCSTR _a1, unsigned int _a2, signed int _a3, signed int _a4, signed int _a5, signed int _a6, signed int _a7, signed int _a8
    )
{
    if (wppEnabled)
    {
        WPP_TRACE( WPP_GET_LOGGER,
                   WPP_TRACE_OPTIONS,
                   (LPGUID)traceGuid,
                   id,
                   WPP_LOGASTR(_a1) WPP_LOGTYPEVAL(unsigned int, _a2) WPP_LOGTYPEVAL(signed int, _a3) WPP_LOGTYPEVAL(signed int, _a4) WPP_LOGTYPEVAL(signed int, _a5) WPP_LOGTYPEVAL(signed int, _a6) WPP_LOGTYPEVAL(signed int, _a7) WPP_LOGTYPEVAL(signed int, _a8)  (void*)0);
    }

    if (recorderEnabled)
    {
        WPP_RECORDER( AutoLogContext, level, flags, (LPGUID) traceGuid, id, WPP_LOGASTR(_a1) WPP_LOGTYPEVAL(unsigned int, _a2) WPP_LOGTYPEVAL(signed int, _a3) WPP_LOGTYPEVAL(signed int, _a4) WPP_LOGTYPEVAL(signed int, _a5) WPP_LOGTYPEVAL(signed int, _a6) WPP_LOGTYPEVAL(signed int, _a7) WPP_LOGTYPEVAL(signed int, _a8)  (void*)0 );
    }
}
#endif // WPP_RECORDER_AND_TRACE_SF_sDdddddd_def

#else  // ENABLE_WPP_TRACE_FILTERING_WITH_WPP_RECORDER

//
// Generate the WPP_RECORDER_SP_sDdddddd function
//
#ifndef WPP_RECORDER_SF_sDdddddd_def
#define WPP_RECORDER_SF_sDdddddd_def
WPP_INLINE
VOID
WPP_RECORDER_SF_sDdddddd(
    PVOID    AutoLogContext,
    UCHAR    level,
    ULONG    flags,
    USHORT   id,
    LPCGUID  traceGuid
    , LPCSTR _a1, unsigned int _a2, signed int _a3, signed int _a4, signed int _a5, signed int _a6, signed int _a7, signed int _a8
    )
{
    if (WPP_ENABLE_FLAG_BIT(flags) &&
        (WPP_CONTROL(flags).Level >= level))
    {
        WPP_TRACE(
            WPP_CONTROL(flags).Logger,
            WPP_TRACE_OPTIONS,
            (LPGUID)traceGuid,
            id,
            WPP_LOGASTR(_a1) WPP_LOGTYPEVAL(unsigned int, _a2) WPP_LOGTYPEVAL(signed int, _a3) WPP_LOGTYPEVAL(signed int, _a4) WPP_LOGTYPEVAL(signed int, _a5) WPP_LOGTYPEVAL(signed int, _a6) WPP_LOGTYPEVAL(signed int, _a7) WPP_LOGTYPEVAL(signed int, _a8)  (void*)0);
    }

    WPP_RECORDER(AutoLogContext, level, flags, (LPGUID) traceGuid, id, WPP_LOGASTR(_a1) WPP_LOGTYPEVAL(unsigned int, _a2) WPP_LOGTYPEVAL(signed int, _a3) WPP_LOGTYPEVAL(signed int, _a4) WPP_LOGTYPEVAL(signed int, _a5) WPP_LOGTYPEVAL(signed int, _a6) WPP_LOGTYPEVAL(signed int, _a7) WPP_LOGTYPEVAL(signed int, _a8)  (void*)0);
}
#endif // WPP_RECORDER_SF_sDdddddd_def

#endif // ENABLE_WPP_TRACE_FILTERING_WITH_WPP_RECORDER

#endif // ENABLE_WPP_RECORDER

#ifndef WPP_SF_sDddi_def
# define WPP_SF_sDddi_def
WPP_INLINE void WPP_SF_sDddi(WPP_LOGGER_ARG unsigned short id, LPCGUID TraceGuid, LPCSTR _a1, unsigned int _a2, signed int _a3, signed int _a4, signed __int64 _a5)
{ WPP_TRACE(WPP_GET_LOGGER, WPP_TRACE_OPTIONS, (LPGUID)TraceGuid, id, WPP_LOGASTR(_a1) WPP_LOGTYPEVAL(unsigned int, _a2) WPP_LOGTYPEVAL(signed int, _a3) WPP_LOGTYPEVAL(signed int, _a4) WPP_LOGTYPEVAL(signed __int64, _a5)  (void*)0); }
#endif // WPP_SF_sDddi_def

#if ENABLE_WPP_RECORDER

#if ENABLE_WPP_TRACE_FILTERING_WITH_WPP_RECORDER

//
// Generate the WPP_RECORDER_AND_TRACE_SF_sDddi function
//
#ifndef WPP_RECORDER_AND_TRACE_SF_sDddi_def
#define WPP_RECORDER_AND_TRACE_SF_sDddi_def
WPP_INLINE
VOID
WPP_RECORDER_AND_TRACE_SF_sDddi(
    WPP_LOGGER_ARG
    BOOLEAN  wppEnabled,
    BOOLEAN  recorderEnabled,
    PVOID    AutoLogContext,
    UCHAR    level,
    ULONG    flags,
    USHORT   id,
    LPCGUID  traceGuid
    , LPCSTR _a1, unsigned int _a2, signed int _a3, signed int _a4, signed __int64 _a5
    )
{
    if (wppEnabled)
    {
        WPP_TRACE( WPP_GET_LOGGER,
                   WPP_TRACE_OPTIONS,
                   (LPGUID)traceGuid,
                   id,
                   WPP_LOGASTR(_a1) WPP_LOGTYPEVAL(unsigned int, _a2) WPP_LOGTYPEVAL(signed int, _a3) WPP_LOGTYPEVAL(signed int, _a4) WPP_LOGTYPEVAL(signed __int64, _a5)  (void*)0);
    }

    if (recorderEnabled)
    {
        WPP_RECORDER( AutoLogContext, level, flags, (LPGUID) traceGuid, id, WPP_LOGASTR(_a1) WPP_LOGTYPEVAL(unsigned int, _a2) WPP_LOGTYPEVAL(signed int, _a3) WPP_LOGTYPEVAL(signed int, _a4) WPP_LOGTYPEVAL(signed __int64, _a5)  (void*)0 );
    }
}
#endif // WPP_RECORDER_AND_TRACE_SF_sDddi_def

#else  // ENABLE_WPP_TRACE_FILTERING_WITH_WPP_RECORDER

//
// Generate the WPP_RECORDER_SP_sDddi function
//
#ifndef WPP_RECORDER_SF_sDddi_def
#define WPP_RECORDER_SF_sDddi_def
WPP_INLINE
VOID
WPP_RECORDER_SF_sDddi(
    PVOID    AutoLogContext,
    UCHAR    level,
    ULONG    flags,
    USHORT   id,
    LPCGUID  traceGuid
    , LPCSTR _a1, unsigned int _a2, signed int _a3, signed int _a4, signed __int64 _a5
    )
{
    if (WPP_ENABLE_FLAG_BIT(flags) &&
        (WPP_CONTROL(flags).Level >= level))
    {
        WPP_TRACE(
            WPP_CONTROL(flags).Logger,
            WPP_TRACE_OPTIONS,
            (LPGUID)traceGuid,
            id,
            WPP_LOGASTR(_a1) WPP_LOGTYPEVAL(unsigned int, _a2) WPP_LOGTYPEVAL(signed int, _a3) WPP_LOGTYPEVAL(signed int, _a4) WPP_LOGTYPEVAL(signed __int64, _a5)  (void*)0);
    }

    WPP_RECORDER(AutoLogContext, level, flags, (LPGUID) traceGuid, id, WPP_LOGASTR(_a1) WPP_LOGTYPEVAL(unsigned int, _a2) WPP_LOGTYPEVAL(signed int, _a3) WPP_LOGTYPEVAL(signed int, _a4) WPP_LOGTYPEVAL(signed __int64, _a5)  (void*)0);
}
#endif // WPP_RECORDER_SF_sDddi_def

#endif // ENABLE_WPP_TRACE_FILTERING_WITH_WPP_RECORDER

#endif // ENABLE_WPP_RECORDER

#ifndef WPP_SF_sDdid_def
# define WPP_SF_sDdid_def
WPP_INLINE void WPP_SF_sDdid(WPP_LOGGER_ARG unsigned short id, LPCGUID TraceGuid, LPCSTR _a1, unsigned int _a2, signed int _a3, signed __int64 _a4, signed int _a5)
{ WPP_TRACE(WPP_GET_LOGGER, WPP_TRACE_OPTIONS, (LPGUID)TraceGuid, id, WPP_LOGASTR(_a1) WPP_LOGTYPEVAL(unsigned int, _a2) WPP_LOGTYPEVAL(signed int, _a3) WPP_LOGTYPEVAL(signed __int64, _a4) WPP_LOGTYPEVAL(signed int, _a5)  (void*)0); }
#endif // WPP_SF_sDdid_def

#if ENABLE_WPP_RECORDER

#if ENABLE_WPP_TRACE_FILTERING_WITH_WPP_RECORDER

//
// Generate the WPP_RECORDER_AND_TRACE_SF_sDdid function
//
#ifndef WPP_RECORDER_AND_TRACE_SF_sDdid_def
#define WPP_RECORDER_AND_TRACE_SF_sDdid_def
WPP_INLINE
VOID
WPP_RECORDER_AND_TRACE_SF_sDdid(
    WPP_LOGGER_ARG
    BOOLEAN  wppEnabled,
    BOOLEAN  recorderEnabled,
    PVOID    AutoLogContext,
    UCHAR    level,
    ULONG    flags,
    USHORT   id,
    LPCGUID  traceGuid
    , LPCSTR _a1, unsigned int _a2, signed int _a3, signed __int64 _a4, signed int _a5
    )
{
    if (wppEnabled)
    {
        WPP_TRACE( WPP_GET_LOGGER,
                   WPP_TRACE_OPTIONS,
                   (LPGUID)traceGuid,
                   id,
                   WPP_LOGASTR(_a1) WPP_LOGTYPEVAL(unsigned int, _a2) WPP_LOGTYPEVAL(signed int, _a3) WPP_LOGTYPEVAL(signed __int64, _a4) WPP_LOGTYPEVAL(signed int, _a5)  (void*)0);
    }

    if (recorderEnabled)
    {
        WPP_RECORDER( AutoLogContext, level, flags, (LPGUID) traceGuid, id, WPP_LOGASTR(_a1) WPP_LOGTYPEVAL(unsigned int, _a2) WPP_LOGTYPEVAL(signed int, _a3) WPP_LOGTYPEVAL(signed __int64, _a4) WPP_LOGTYPEVAL(signed int, _a5)  (void*)0 );
    }
}
#endif // WPP_RECORDER_AND_TRACE_SF_sDdid_def

#else  // ENABLE_WPP_TRACE_FILTERING_WITH_WPP_RECORDER

//
// Generate the WPP_RECORDER_SP_sDdid function
//
#ifndef WPP_RECORDER_SF_sDdid_def
#define WPP_RECORDER_SF_sDdid_def
WPP_INLINE
VOID
WPP_RECORDER_SF_sDdid(
    PVOID    AutoLogContext,
    UCHAR    level,
    ULONG    flags,
    USHORT   id,
    LPCGUID  traceGuid
    , LPCSTR _a1, unsigned int _a2, signed int _a3, signed __int64 _a4, signed int _a5
    )
{
    if (WPP_ENABLE_FLAG_BIT(flags) &&
        (WPP_CONTROL(flags).Level >= level))
    {
        WPP_TRACE(
            WPP_CONTROL(flags).Logger,
            WPP_TRACE_OPTIONS,
            (LPGUID)traceGuid,
            id,
            WPP_LOGASTR(_a1) WPP_LOGTYPEVAL(unsigned int, _a2) WPP_LOGTYPEVAL(signed int, _a3) WPP_LOGTYPEVAL(signed __int64, _a4) WPP_LOGTYPEVAL(signed int, _a5)  (void*)0);
    }

    WPP_RECORDER(AutoLogContext, level, flags, (LPGUID) traceGuid, id, WPP_LOGASTR(_a1) WPP_LOGTYPEVAL(unsigned int, _a2) WPP_LOGTYPEVAL(signed int, _a3) WPP_LOGTYPEVAL(signed __int64, _a4) WPP_LOGTYPEVAL(signed int, _a5)  (void*)0);
}
#endif // WPP_RECORDER_SF_sDdid_def

#endif // ENABLE_WPP_TRACE_FILTERING_WITH_WPP_RECORDER

#endif // ENABLE_WPP_RECORDER

#ifndef WPP_SF_sDdq_def
# define WPP_SF_sDdq_def
WPP_INLINE void WPP_SF_sDdq(WPP_LOGGER_ARG unsigned short id, LPCGUID TraceGuid, LPCSTR _a1, unsigned int _a2, signed int _a3, const void* _a4)
{ WPP_TRACE(WPP_GET_LOGGER, WPP_TRACE_OPTIONS, (LPGUID)TraceGuid, id, WPP_LOGASTR(_a1) WPP_LOGTYPEVAL(unsigned int, _a2) WPP_LOGTYPEVAL(signed int, _a3) WPP_LOGTYPEVAL(const void*, _a4)  (void*)0); }
#endif // WPP_SF_sDdq_def

#if ENABLE_WPP_RECORDER

#if ENABLE_WPP_TRACE_FILTERING_WITH_WPP_RECORDER

//
// Generate the WPP_RECORDER_AND_TRACE_SF_sDdq function
//
#ifndef WPP_RECORDER_AND_TRACE_SF_sDdq_def
#define WPP_RECORDER_AND_TRACE_SF_sDdq_def
WPP_INLINE
VOID
WPP_RECORDER_AND_TRACE_SF_sDdq(
    WPP_LOGGER_ARG
    BOOLEAN  wppEnabled,
    BOOLEAN  recorderEnabled,
    PVOID    AutoLogContext,
    UCHAR    level,
    ULONG    flags,
    USHORT   id,
    LPCGUID  traceGuid
    , LPCSTR _a1, unsigned int _a2, signed int _a3, const void* _a4
    )
{
    if (wppEnabled)
    {
        WPP_TRACE( WPP_GET_LOGGER,
                   WPP_TRACE_OPTIONS,
                   (LPGUID)traceGuid,
                   id,
                   WPP_LOGASTR(_a1) WPP_LOGTYPEVAL(unsigned int, _a2) WPP_LOGTYPEVAL(signed int, _a3) WPP_LOGTYPEVAL(const void*, _a4)  (void*)0);
    }

    if (recorderEnabled)
    {
        WPP_RECORDER( AutoLogContext, level, flags, (LPGUID) traceGuid, id, WPP_LOGASTR(_a1) WPP_LOGTYPEVAL(unsigned int, _a2) WPP_LOGTYPEVAL(signed int, _a3) WPP_LOGTYPEVAL(const void*, _a4)  (void*)0 );
    }
}
#endif // WPP_RECORDER_AND_TRACE_SF_sDdq_def

#else  // ENABLE_WPP_TRACE_FILTERING_WITH_WPP_RECORDER

//
// Generate the WPP_RECORDER_SP_sDdq function
//
#ifndef WPP_RECORDER_SF_sDdq_def
#define WPP_RECORDER_SF_sDdq_def
WPP_INLINE
VOID
WPP_RECORDER_SF_sDdq(
    PVOID    AutoLogContext,
    UCHAR    level,
    ULONG    flags,
    USHORT   id,
    LPCGUID  traceGuid
    , LPCSTR _a1, unsigned int _a2, signed int _a3, const void* _a4
    )
{
    if (WPP_ENABLE_FLAG_BIT(flags) &&
        (WPP_CONTROL(flags).Level >= level))
    {
        WPP_TRACE(
            WPP_CONTROL(flags).Logger,
            WPP_TRACE_OPTIONS,
            (LPGUID)traceGuid,
            id,
            WPP_LOGASTR(_a1) WPP_LOGTYPEVAL(unsigned int, _a2) WPP_LOGTYPEVAL(signed int, _a3) WPP_LOGTYPEVAL(const void*, _a4)  (void*)0);
    }

    WPP_RECORDER(AutoLogContext, level, flags, (LPGUID) traceGuid, id, WPP_LOGASTR(_a1) WPP_LOGTYPEVAL(unsigned int, _a2) WPP_LOGTYPEVAL(signed int, _a3) WPP_LOGTYPEVAL(const void*, _a4)  (void*)0);
}
#endif // WPP_RECORDER_SF_sDdq_def

#endif // ENABLE_WPP_TRACE_FILTERING_WITH_WPP_RECORDER

#endif // ENABLE_WPP_RECORDER

#ifndef WPP_SF_sDdqd_def
# define WPP_SF_sDdqd_def
WPP_INLINE void WPP_SF_sDdqd(WPP_LOGGER_ARG unsigned short id, LPCGUID TraceGuid, LPCSTR _a1, unsigned int _a2, signed int _a3, const void* _a4, signed int _a5)
{ WPP_TRACE(WPP_GET_LOGGER, WPP_TRACE_OPTIONS, (LPGUID)TraceGuid, id, WPP_LOGASTR(_a1) WPP_LOGTYPEVAL(unsigned int, _a2) WPP_LOGTYPEVAL(signed int, _a3) WPP_LOGTYPEVAL(const void*, _a4) WPP_LOGTYPEVAL(signed int, _a5)  (void*)0); }
#endif // WPP_SF_sDdqd_def

#if ENABLE_WPP_RECORDER

#if ENABLE_WPP_TRACE_FILTERING_WITH_WPP_RECORDER

//
// Generate the WPP_RECORDER_AND_TRACE_SF_sDdqd function
//
#ifndef WPP_RECORDER_AND_TRACE_SF_sDdqd_def
#define WPP_RECORDER_AND_TRACE_SF_sDdqd_def
WPP_INLINE
VOID
WPP_RECORDER_AND_TRACE_SF_sDdqd(
    WPP_LOGGER_ARG
    BOOLEAN  wppEnabled,
    BOOLEAN  recorderEnabled,
    PVOID    AutoLogContext,
    UCHAR    level,
    ULONG    flags,
    USHORT   id,
    LPCGUID  traceGuid
    , LPCSTR _a1, unsigned int _a2, signed int _a3, const void* _a4, signed int _a5
    )
{
    if (wppEnabled)
    {
        WPP_TRACE( WPP_GET_LOGGER,
                   WPP_TRACE_OPTIONS,
                   (LPGUID)traceGuid,
                   id,
                   WPP_LOGASTR(_a1) WPP_LOGTYPEVAL(unsigned int, _a2) WPP_LOGTYPEVAL(signed int, _a3) WPP_LOGTYPEVAL(const void*, _a4) WPP_LOGTYPEVAL(signed int, _a5)  (void*)0);
    }

    if (recorderEnabled)
    {
        WPP_RECORDER( AutoLogContext, level, flags, (LPGUID) traceGuid, id, WPP_LOGASTR(_a1) WPP_LOGTYPEVAL(unsigned int, _a2) WPP_LOGTYPEVAL(signed int, _a3) WPP_LOGTYPEVAL(const void*, _a4) WPP_LOGTYPEVAL(signed int, _a5)  (void*)0 );
    }
}
#endif // WPP_RECORDER_AND_TRACE_SF_sDdqd_def

#else  // ENABLE_WPP_TRACE_FILTERING_WITH_WPP_RECORDER

//
// Generate the WPP_RECORDER_SP_sDdqd function
//
#ifndef WPP_RECORDER_SF_sDdqd_def
#define WPP_RECORDER_SF_sDdqd_def
WPP_INLINE
VOID
WPP_RECORDER_SF_sDdqd(
    PVOID    AutoLogContext,
    UCHAR    level,
    ULONG    flags,
    USHORT   id,
    LPCGUID  traceGuid
    , LPCSTR _a1, unsigned int _a2, signed int _a3, const void* _a4, signed int _a5
    )
{
    if (WPP_ENABLE_FLAG_BIT(flags) &&
        (WPP_CONTROL(flags).Level >= level))
    {
        WPP_TRACE(
            WPP_CONTROL(flags).Logger,
            WPP_TRACE_OPTIONS,
            (LPGUID)traceGuid,
            id,
            WPP_LOGASTR(_a1) WPP_LOGTYPEVAL(unsigned int, _a2) WPP_LOGTYPEVAL(signed int, _a3) WPP_LOGTYPEVAL(const void*, _a4) WPP_LOGTYPEVAL(signed int, _a5)  (void*)0);
    }

    WPP_RECORDER(AutoLogContext, level, flags, (LPGUID) traceGuid, id, WPP_LOGASTR(_a1) WPP_LOGTYPEVAL(unsigned int, _a2) WPP_LOGTYPEVAL(signed int, _a3) WPP_LOGTYPEVAL(const void*, _a4) WPP_LOGTYPEVAL(signed int, _a5)  (void*)0);
}
#endif // WPP_RECORDER_SF_sDdqd_def

#endif // ENABLE_WPP_TRACE_FILTERING_WITH_WPP_RECORDER

#endif // ENABLE_WPP_RECORDER

#ifndef WPP_SF_sDdqq_def
# define WPP_SF_sDdqq_def
WPP_INLINE void WPP_SF_sDdqq(WPP_LOGGER_ARG unsigned short id, LPCGUID TraceGuid, LPCSTR _a1, unsigned int _a2, signed int _a3, const void* _a4, const void* _a5)
{ WPP_TRACE(WPP_GET_LOGGER, WPP_TRACE_OPTIONS, (LPGUID)TraceGuid, id, WPP_LOGASTR(_a1) WPP_LOGTYPEVAL(unsigned int, _a2) WPP_LOGTYPEVAL(signed int, _a3) WPP_LOGTYPEVAL(const void*, _a4) WPP_LOGTYPEVAL(const void*, _a5)  (void*)0); }
#endif // WPP_SF_sDdqq_def

#if ENABLE_WPP_RECORDER

#if ENABLE_WPP_TRACE_FILTERING_WITH_WPP_RECORDER

//
// Generate the WPP_RECORDER_AND_TRACE_SF_sDdqq function
//
#ifndef WPP_RECORDER_AND_TRACE_SF_sDdqq_def
#define WPP_RECORDER_AND_TRACE_SF_sDdqq_def
WPP_INLINE
VOID
WPP_RECORDER_AND_TRACE_SF_sDdqq(
    WPP_LOGGER_ARG
    BOOLEAN  wppEnabled,
    BOOLEAN  recorderEnabled,
    PVOID    AutoLogContext,
    UCHAR    level,
    ULONG    flags,
    USHORT   id,
    LPCGUID  traceGuid
    , LPCSTR _a1, unsigned int _a2, signed int _a3, const void* _a4, const void* _a5
    )
{
    if (wppEnabled)
    {
        WPP_TRACE( WPP_GET_LOGGER,
                   WPP_TRACE_OPTIONS,
                   (LPGUID)traceGuid,
                   id,
                   WPP_LOGASTR(_a1) WPP_LOGTYPEVAL(unsigned int, _a2) WPP_LOGTYPEVAL(signed int, _a3) WPP_LOGTYPEVAL(const void*, _a4) WPP_LOGTYPEVAL(const void*, _a5)  (void*)0);
    }

    if (recorderEnabled)
    {
        WPP_RECORDER( AutoLogContext, level, flags, (LPGUID) traceGuid, id, WPP_LOGASTR(_a1) WPP_LOGTYPEVAL(unsigned int, _a2) WPP_LOGTYPEVAL(signed int, _a3) WPP_LOGTYPEVAL(const void*, _a4) WPP_LOGTYPEVAL(const void*, _a5)  (void*)0 );
    }
}
#endif // WPP_RECORDER_AND_TRACE_SF_sDdqq_def

#else  // ENABLE_WPP_TRACE_FILTERING_WITH_WPP_RECORDER

//
// Generate the WPP_RECORDER_SP_sDdqq function
//
#ifndef WPP_RECORDER_SF_sDdqq_def
#define WPP_RECORDER_SF_sDdqq_def
WPP_INLINE
VOID
WPP_RECORDER_SF_sDdqq(
    PVOID    AutoLogContext,
    UCHAR    level,
    ULONG    flags,
    USHORT   id,
    LPCGUID  traceGuid
    , LPCSTR _a1, unsigned int _a2, signed int _a3, const void* _a4, const void* _a5
    )
{
    if (WPP_ENABLE_FLAG_BIT(flags) &&
        (WPP_CONTROL(flags).Level >= level))
    {
        WPP_TRACE(
            WPP_CONTROL(flags).Logger,
            WPP_TRACE_OPTIONS,
            (LPGUID)traceGuid,
            id,
            WPP_LOGASTR(_a1) WPP_LOGTYPEVAL(unsigned int, _a2) WPP_LOGTYPEVAL(signed int, _a3) WPP_LOGTYPEVAL(const void*, _a4) WPP_LOGTYPEVAL(const void*, _a5)  (void*)0);
    }

    WPP_RECORDER(AutoLogContext, level, flags, (LPGUID) traceGuid, id, WPP_LOGASTR(_a1) WPP_LOGTYPEVAL(unsigned int, _a2) WPP_LOGTYPEVAL(signed int, _a3) WPP_LOGTYPEVAL(const void*, _a4) WPP_LOGTYPEVAL(const void*, _a5)  (void*)0);
}
#endif // WPP_RECORDER_SF_sDdqq_def

#endif // ENABLE_WPP_TRACE_FILTERING_WITH_WPP_RECORDER

#endif // ENABLE_WPP_RECORDER

#ifndef WPP_SF_sDid_def
# define WPP_SF_sDid_def
WPP_INLINE void WPP_SF_sDid(WPP_LOGGER_ARG unsigned short id, LPCGUID TraceGuid, LPCSTR _a1, unsigned int _a2, signed __int64 _a3, signed int _a4)
{ WPP_TRACE(WPP_GET_LOGGER, WPP_TRACE_OPTIONS, (LPGUID)TraceGuid, id, WPP_LOGASTR(_a1) WPP_LOGTYPEVAL(unsigned int, _a2) WPP_LOGTYPEVAL(signed __int64, _a3) WPP_LOGTYPEVAL(signed int, _a4)  (void*)0); }
#endif // WPP_SF_sDid_def

#if ENABLE_WPP_RECORDER

#if ENABLE_WPP_TRACE_FILTERING_WITH_WPP_RECORDER

//
// Generate the WPP_RECORDER_AND_TRACE_SF_sDid function
//
#ifndef WPP_RECORDER_AND_TRACE_SF_sDid_def
#define WPP_RECORDER_AND_TRACE_SF_sDid_def
WPP_INLINE
VOID
WPP_RECORDER_AND_TRACE_SF_sDid(
    WPP_LOGGER_ARG
    BOOLEAN  wppEnabled,
    BOOLEAN  recorderEnabled,
    PVOID    AutoLogContext,
    UCHAR    level,
    ULONG    flags,
    USHORT   id,
    LPCGUID  traceGuid
    , LPCSTR _a1, unsigned int _a2, signed __int64 _a3, signed int _a4
    )
{
    if (wppEnabled)
    {
        WPP_TRACE( WPP_GET_LOGGER,
                   WPP_TRACE_OPTIONS,
                   (LPGUID)traceGuid,
                   id,
                   WPP_LOGASTR(_a1) WPP_LOGTYPEVAL(unsigned int, _a2) WPP_LOGTYPEVAL(signed __int64, _a3) WPP_LOGTYPEVAL(signed int, _a4)  (void*)0);
    }

    if (recorderEnabled)
    {
        WPP_RECORDER( AutoLogContext, level, flags, (LPGUID) traceGuid, id, WPP_LOGASTR(_a1) WPP_LOGTYPEVAL(unsigned int, _a2) WPP_LOGTYPEVAL(signed __int64, _a3) WPP_LOGTYPEVAL(signed int, _a4)  (void*)0 );
    }
}
#endif // WPP_RECORDER_AND_TRACE_SF_sDid_def

#else  // ENABLE_WPP_TRACE_FILTERING_WITH_WPP_RECORDER

//
// Generate the WPP_RECORDER_SP_sDid function
//
#ifndef WPP_RECORDER_SF_sDid_def
#define WPP_RECORDER_SF_sDid_def
WPP_INLINE
VOID
WPP_RECORDER_SF_sDid(
    PVOID    AutoLogContext,
    UCHAR    level,
    ULONG    flags,
    USHORT   id,
    LPCGUID  traceGuid
    , LPCSTR _a1, unsigned int _a2, signed __int64 _a3, signed int _a4
    )
{
    if (WPP_ENABLE_FLAG_BIT(flags) &&
        (WPP_CONTROL(flags).Level >= level))
    {
        WPP_TRACE(
            WPP_CONTROL(flags).Logger,
            WPP_TRACE_OPTIONS,
            (LPGUID)traceGuid,
            id,
            WPP_LOGASTR(_a1) WPP_LOGTYPEVAL(unsigned int, _a2) WPP_LOGTYPEVAL(signed __int64, _a3) WPP_LOGTYPEVAL(signed int, _a4)  (void*)0);
    }

    WPP_RECORDER(AutoLogContext, level, flags, (LPGUID) traceGuid, id, WPP_LOGASTR(_a1) WPP_LOGTYPEVAL(unsigned int, _a2) WPP_LOGTYPEVAL(signed __int64, _a3) WPP_LOGTYPEVAL(signed int, _a4)  (void*)0);
}
#endif // WPP_RECORDER_SF_sDid_def

#endif // ENABLE_WPP_TRACE_FILTERING_WITH_WPP_RECORDER

#endif // ENABLE_WPP_RECORDER

#ifndef WPP_SF_sDq_def
# define WPP_SF_sDq_def
WPP_INLINE void WPP_SF_sDq(WPP_LOGGER_ARG unsigned short id, LPCGUID TraceGuid, LPCSTR _a1, unsigned int _a2, const void* _a3)
{ WPP_TRACE(WPP_GET_LOGGER, WPP_TRACE_OPTIONS, (LPGUID)TraceGuid, id, WPP_LOGASTR(_a1) WPP_LOGTYPEVAL(unsigned int, _a2) WPP_LOGTYPEVAL(const void*, _a3)  (void*)0); }
#endif // WPP_SF_sDq_def

#if ENABLE_WPP_RECORDER

#if ENABLE_WPP_TRACE_FILTERING_WITH_WPP_RECORDER

//
// Generate the WPP_RECORDER_AND_TRACE_SF_sDq function
//
#ifndef WPP_RECORDER_AND_TRACE_SF_sDq_def
#define WPP_RECORDER_AND_TRACE_SF_sDq_def
WPP_INLINE
VOID
WPP_RECORDER_AND_TRACE_SF_sDq(
    WPP_LOGGER_ARG
    BOOLEAN  wppEnabled,
    BOOLEAN  recorderEnabled,
    PVOID    AutoLogContext,
    UCHAR    level,
    ULONG    flags,
    USHORT   id,
    LPCGUID  traceGuid
    , LPCSTR _a1, unsigned int _a2, const void* _a3
    )
{
    if (wppEnabled)
    {
        WPP_TRACE( WPP_GET_LOGGER,
                   WPP_TRACE_OPTIONS,
                   (LPGUID)traceGuid,
                   id,
                   WPP_LOGASTR(_a1) WPP_LOGTYPEVAL(unsigned int, _a2) WPP_LOGTYPEVAL(const void*, _a3)  (void*)0);
    }

    if (recorderEnabled)
    {
        WPP_RECORDER( AutoLogContext, level, flags, (LPGUID) traceGuid, id, WPP_LOGASTR(_a1) WPP_LOGTYPEVAL(unsigned int, _a2) WPP_LOGTYPEVAL(const void*, _a3)  (void*)0 );
    }
}
#endif // WPP_RECORDER_AND_TRACE_SF_sDq_def

#else  // ENABLE_WPP_TRACE_FILTERING_WITH_WPP_RECORDER

//
// Generate the WPP_RECORDER_SP_sDq function
//
#ifndef WPP_RECORDER_SF_sDq_def
#define WPP_RECORDER_SF_sDq_def
WPP_INLINE
VOID
WPP_RECORDER_SF_sDq(
    PVOID    AutoLogContext,
    UCHAR    level,
    ULONG    flags,
    USHORT   id,
    LPCGUID  traceGuid
    , LPCSTR _a1, unsigned int _a2, const void* _a3
    )
{
    if (WPP_ENABLE_FLAG_BIT(flags) &&
        (WPP_CONTROL(flags).Level >= level))
    {
        WPP_TRACE(
            WPP_CONTROL(flags).Logger,
            WPP_TRACE_OPTIONS,
            (LPGUID)traceGuid,
            id,
            WPP_LOGASTR(_a1) WPP_LOGTYPEVAL(unsigned int, _a2) WPP_LOGTYPEVAL(const void*, _a3)  (void*)0);
    }

    WPP_RECORDER(AutoLogContext, level, flags, (LPGUID) traceGuid, id, WPP_LOGASTR(_a1) WPP_LOGTYPEVAL(unsigned int, _a2) WPP_LOGTYPEVAL(const void*, _a3)  (void*)0);
}
#endif // WPP_RECORDER_SF_sDq_def

#endif // ENABLE_WPP_TRACE_FILTERING_WITH_WPP_RECORDER

#endif // ENABLE_WPP_RECORDER

#ifndef WPP_SF_sDqdd_def
# define WPP_SF_sDqdd_def
WPP_INLINE void WPP_SF_sDqdd(WPP_LOGGER_ARG unsigned short id, LPCGUID TraceGuid, LPCSTR _a1, unsigned int _a2, const void* _a3, signed int _a4, signed int _a5)
{ WPP_TRACE(WPP_GET_LOGGER, WPP_TRACE_OPTIONS, (LPGUID)TraceGuid, id, WPP_LOGASTR(_a1) WPP_LOGTYPEVAL(unsigned int, _a2) WPP_LOGTYPEVAL(const void*, _a3) WPP_LOGTYPEVAL(signed int, _a4) WPP_LOGTYPEVAL(signed int, _a5)  (void*)0); }
#endif // WPP_SF_sDqdd_def

#if ENABLE_WPP_RECORDER

#if ENABLE_WPP_TRACE_FILTERING_WITH_WPP_RECORDER

//
// Generate the WPP_RECORDER_AND_TRACE_SF_sDqdd function
//
#ifndef WPP_RECORDER_AND_TRACE_SF_sDqdd_def
#define WPP_RECORDER_AND_TRACE_SF_sDqdd_def
WPP_INLINE
VOID
WPP_RECORDER_AND_TRACE_SF_sDqdd(
    WPP_LOGGER_ARG
    BOOLEAN  wppEnabled,
    BOOLEAN  recorderEnabled,
    PVOID    AutoLogContext,
    UCHAR    level,
    ULONG    flags,
    USHORT   id,
    LPCGUID  traceGuid
    , LPCSTR _a1, unsigned int _a2, const void* _a3, signed int _a4, signed int _a5
    )
{
    if (wppEnabled)
    {
        WPP_TRACE( WPP_GET_LOGGER,
                   WPP_TRACE_OPTIONS,
                   (LPGUID)traceGuid,
                   id,
                   WPP_LOGASTR(_a1) WPP_LOGTYPEVAL(unsigned int, _a2) WPP_LOGTYPEVAL(const void*, _a3) WPP_LOGTYPEVAL(signed int, _a4) WPP_LOGTYPEVAL(signed int, _a5)  (void*)0);
    }

    if (recorderEnabled)
    {
        WPP_RECORDER( AutoLogContext, level, flags, (LPGUID) traceGuid, id, WPP_LOGASTR(_a1) WPP_LOGTYPEVAL(unsigned int, _a2) WPP_LOGTYPEVAL(const void*, _a3) WPP_LOGTYPEVAL(signed int, _a4) WPP_LOGTYPEVAL(signed int, _a5)  (void*)0 );
    }
}
#endif // WPP_RECORDER_AND_TRACE_SF_sDqdd_def

#else  // ENABLE_WPP_TRACE_FILTERING_WITH_WPP_RECORDER

//
// Generate the WPP_RECORDER_SP_sDqdd function
//
#ifndef WPP_RECORDER_SF_sDqdd_def
#define WPP_RECORDER_SF_sDqdd_def
WPP_INLINE
VOID
WPP_RECORDER_SF_sDqdd(
    PVOID    AutoLogContext,
    UCHAR    level,
    ULONG    flags,
    USHORT   id,
    LPCGUID  traceGuid
    , LPCSTR _a1, unsigned int _a2, const void* _a3, signed int _a4, signed int _a5
    )
{
    if (WPP_ENABLE_FLAG_BIT(flags) &&
        (WPP_CONTROL(flags).Level >= level))
    {
        WPP_TRACE(
            WPP_CONTROL(flags).Logger,
            WPP_TRACE_OPTIONS,
            (LPGUID)traceGuid,
            id,
            WPP_LOGASTR(_a1) WPP_LOGTYPEVAL(unsigned int, _a2) WPP_LOGTYPEVAL(const void*, _a3) WPP_LOGTYPEVAL(signed int, _a4) WPP_LOGTYPEVAL(signed int, _a5)  (void*)0);
    }

    WPP_RECORDER(AutoLogContext, level, flags, (LPGUID) traceGuid, id, WPP_LOGASTR(_a1) WPP_LOGTYPEVAL(unsigned int, _a2) WPP_LOGTYPEVAL(const void*, _a3) WPP_LOGTYPEVAL(signed int, _a4) WPP_LOGTYPEVAL(signed int, _a5)  (void*)0);
}
#endif // WPP_RECORDER_SF_sDqdd_def

#endif // ENABLE_WPP_TRACE_FILTERING_WITH_WPP_RECORDER

#endif // ENABLE_WPP_RECORDER

#ifndef WPP_SF_sDqdddddddd_def
# define WPP_SF_sDqdddddddd_def
WPP_INLINE void WPP_SF_sDqdddddddd(WPP_LOGGER_ARG unsigned short id, LPCGUID TraceGuid, LPCSTR _a1, unsigned int _a2, const void* _a3, signed int _a4, signed int _a5, signed int _a6, signed int _a7, signed int _a8, signed int _a9, signed int _a10, signed int _a11)
{ WPP_TRACE(WPP_GET_LOGGER, WPP_TRACE_OPTIONS, (LPGUID)TraceGuid, id, WPP_LOGASTR(_a1) WPP_LOGTYPEVAL(unsigned int, _a2) WPP_LOGTYPEVAL(const void*, _a3) WPP_LOGTYPEVAL(signed int, _a4) WPP_LOGTYPEVAL(signed int, _a5) WPP_LOGTYPEVAL(signed int, _a6) WPP_LOGTYPEVAL(signed int, _a7) WPP_LOGTYPEVAL(signed int, _a8) WPP_LOGTYPEVAL(signed int, _a9) WPP_LOGTYPEVAL(signed int, _a10) WPP_LOGTYPEVAL(signed int, _a11)  (void*)0); }
#endif // WPP_SF_sDqdddddddd_def

#if ENABLE_WPP_RECORDER

#if ENABLE_WPP_TRACE_FILTERING_WITH_WPP_RECORDER

//
// Generate the WPP_RECORDER_AND_TRACE_SF_sDqdddddddd function
//
#ifndef WPP_RECORDER_AND_TRACE_SF_sDqdddddddd_def
#define WPP_RECORDER_AND_TRACE_SF_sDqdddddddd_def
WPP_INLINE
VOID
WPP_RECORDER_AND_TRACE_SF_sDqdddddddd(
    WPP_LOGGER_ARG
    BOOLEAN  wppEnabled,
    BOOLEAN  recorderEnabled,
    PVOID    AutoLogContext,
    UCHAR    level,
    ULONG    flags,
    USHORT   id,
    LPCGUID  traceGuid
    , LPCSTR _a1, unsigned int _a2, const void* _a3, signed int _a4, signed int _a5, signed int _a6, signed int _a7, signed int _a8, signed int _a9, signed int _a10, signed int _a11
    )
{
    if (wppEnabled)
    {
        WPP_TRACE( WPP_GET_LOGGER,
                   WPP_TRACE_OPTIONS,
                   (LPGUID)traceGuid,
                   id,
                   WPP_LOGASTR(_a1) WPP_LOGTYPEVAL(unsigned int, _a2) WPP_LOGTYPEVAL(const void*, _a3) WPP_LOGTYPEVAL(signed int, _a4) WPP_LOGTYPEVAL(signed int, _a5) WPP_LOGTYPEVAL(signed int, _a6) WPP_LOGTYPEVAL(signed int, _a7) WPP_LOGTYPEVAL(signed int, _a8) WPP_LOGTYPEVAL(signed int, _a9) WPP_LOGTYPEVAL(signed int, _a10) WPP_LOGTYPEVAL(signed int, _a11)  (void*)0);
    }

    if (recorderEnabled)
    {
        WPP_RECORDER( AutoLogContext, level, flags, (LPGUID) traceGuid, id, WPP_LOGASTR(_a1) WPP_LOGTYPEVAL(unsigned int, _a2) WPP_LOGTYPEVAL(const void*, _a3) WPP_LOGTYPEVAL(signed int, _a4) WPP_LOGTYPEVAL(signed int, _a5) WPP_LOGTYPEVAL(signed int, _a6) WPP_LOGTYPEVAL(signed int, _a7) WPP_LOGTYPEVAL(signed int, _a8) WPP_LOGTYPEVAL(signed int, _a9) WPP_LOGTYPEVAL(signed int, _a10) WPP_LOGTYPEVAL(signed int, _a11)  (void*)0 );
    }
}
#endif // WPP_RECORDER_AND_TRACE_SF_sDqdddddddd_def

#else  // ENABLE_WPP_TRACE_FILTERING_WITH_WPP_RECORDER

//
// Generate the WPP_RECORDER_SP_sDqdddddddd function
//
#ifndef WPP_RECORDER_SF_sDqdddddddd_def
#define WPP_RECORDER_SF_sDqdddddddd_def
WPP_INLINE
VOID
WPP_RECORDER_SF_sDqdddddddd(
    PVOID    AutoLogContext,
    UCHAR    level,
    ULONG    flags,
    USHORT   id,
    LPCGUID  traceGuid
    , LPCSTR _a1, unsigned int _a2, const void* _a3, signed int _a4, signed int _a5, signed int _a6, signed int _a7, signed int _a8, signed int _a9, signed int _a10, signed int _a11
    )
{
    if (WPP_ENABLE_FLAG_BIT(flags) &&
        (WPP_CONTROL(flags).Level >= level))
    {
        WPP_TRACE(
            WPP_CONTROL(flags).Logger,
            WPP_TRACE_OPTIONS,
            (LPGUID)traceGuid,
            id,
            WPP_LOGASTR(_a1) WPP_LOGTYPEVAL(unsigned int, _a2) WPP_LOGTYPEVAL(const void*, _a3) WPP_LOGTYPEVAL(signed int, _a4) WPP_LOGTYPEVAL(signed int, _a5) WPP_LOGTYPEVAL(signed int, _a6) WPP_LOGTYPEVAL(signed int, _a7) WPP_LOGTYPEVAL(signed int, _a8) WPP_LOGTYPEVAL(signed int, _a9) WPP_LOGTYPEVAL(signed int, _a10) WPP_LOGTYPEVAL(signed int, _a11)  (void*)0);
    }

    WPP_RECORDER(AutoLogContext, level, flags, (LPGUID) traceGuid, id, WPP_LOGASTR(_a1) WPP_LOGTYPEVAL(unsigned int, _a2) WPP_LOGTYPEVAL(const void*, _a3) WPP_LOGTYPEVAL(signed int, _a4) WPP_LOGTYPEVAL(signed int, _a5) WPP_LOGTYPEVAL(signed int, _a6) WPP_LOGTYPEVAL(signed int, _a7) WPP_LOGTYPEVAL(signed int, _a8) WPP_LOGTYPEVAL(signed int, _a9) WPP_LOGTYPEVAL(signed int, _a10) WPP_LOGTYPEVAL(signed int, _a11)  (void*)0);
}
#endif // WPP_RECORDER_SF_sDqdddddddd_def

#endif // ENABLE_WPP_TRACE_FILTERING_WITH_WPP_RECORDER

#endif // ENABLE_WPP_RECORDER

#ifndef WPP_SF_sDqddqdd_def
# define WPP_SF_sDqddqdd_def
WPP_INLINE void WPP_SF_sDqddqdd(WPP_LOGGER_ARG unsigned short id, LPCGUID TraceGuid, LPCSTR _a1, unsigned int _a2, const void* _a3, signed int _a4, signed int _a5, const void* _a6, signed int _a7, signed int _a8)
{ WPP_TRACE(WPP_GET_LOGGER, WPP_TRACE_OPTIONS, (LPGUID)TraceGuid, id, WPP_LOGASTR(_a1) WPP_LOGTYPEVAL(unsigned int, _a2) WPP_LOGTYPEVAL(const void*, _a3) WPP_LOGTYPEVAL(signed int, _a4) WPP_LOGTYPEVAL(signed int, _a5) WPP_LOGTYPEVAL(const void*, _a6) WPP_LOGTYPEVAL(signed int, _a7) WPP_LOGTYPEVAL(signed int, _a8)  (void*)0); }
#endif // WPP_SF_sDqddqdd_def

#if ENABLE_WPP_RECORDER

#if ENABLE_WPP_TRACE_FILTERING_WITH_WPP_RECORDER

//
// Generate the WPP_RECORDER_AND_TRACE_SF_sDqddqdd function
//
#ifndef WPP_RECORDER_AND_TRACE_SF_sDqddqdd_def
#define WPP_RECORDER_AND_TRACE_SF_sDqddqdd_def
WPP_INLINE
VOID
WPP_RECORDER_AND_TRACE_SF_sDqddqdd(
    WPP_LOGGER_ARG
    BOOLEAN  wppEnabled,
    BOOLEAN  recorderEnabled,
    PVOID    AutoLogContext,
    UCHAR    level,
    ULONG    flags,
    USHORT   id,
    LPCGUID  traceGuid
    , LPCSTR _a1, unsigned int _a2, const void* _a3, signed int _a4, signed int _a5, const void* _a6, signed int _a7, signed int _a8
    )
{
    if (wppEnabled)
    {
        WPP_TRACE( WPP_GET_LOGGER,
                   WPP_TRACE_OPTIONS,
                   (LPGUID)traceGuid,
                   id,
                   WPP_LOGASTR(_a1) WPP_LOGTYPEVAL(unsigned int, _a2) WPP_LOGTYPEVAL(const void*, _a3) WPP_LOGTYPEVAL(signed int, _a4) WPP_LOGTYPEVAL(signed int, _a5) WPP_LOGTYPEVAL(const void*, _a6) WPP_LOGTYPEVAL(signed int, _a7) WPP_LOGTYPEVAL(signed int, _a8)  (void*)0);
    }

    if (recorderEnabled)
    {
        WPP_RECORDER( AutoLogContext, level, flags, (LPGUID) traceGuid, id, WPP_LOGASTR(_a1) WPP_LOGTYPEVAL(unsigned int, _a2) WPP_LOGTYPEVAL(const void*, _a3) WPP_LOGTYPEVAL(signed int, _a4) WPP_LOGTYPEVAL(signed int, _a5) WPP_LOGTYPEVAL(const void*, _a6) WPP_LOGTYPEVAL(signed int, _a7) WPP_LOGTYPEVAL(signed int, _a8)  (void*)0 );
    }
}
#endif // WPP_RECORDER_AND_TRACE_SF_sDqddqdd_def

#else  // ENABLE_WPP_TRACE_FILTERING_WITH_WPP_RECORDER

//
// Generate the WPP_RECORDER_SP_sDqddqdd function
//
#ifndef WPP_RECORDER_SF_sDqddqdd_def
#define WPP_RECORDER_SF_sDqddqdd_def
WPP_INLINE
VOID
WPP_RECORDER_SF_sDqddqdd(
    PVOID    AutoLogContext,
    UCHAR    level,
    ULONG    flags,
    USHORT   id,
    LPCGUID  traceGuid
    , LPCSTR _a1, unsigned int _a2, const void* _a3, signed int _a4, signed int _a5, const void* _a6, signed int _a7, signed int _a8
    )
{
    if (WPP_ENABLE_FLAG_BIT(flags) &&
        (WPP_CONTROL(flags).Level >= level))
    {
        WPP_TRACE(
            WPP_CONTROL(flags).Logger,
            WPP_TRACE_OPTIONS,
            (LPGUID)traceGuid,
            id,
            WPP_LOGASTR(_a1) WPP_LOGTYPEVAL(unsigned int, _a2) WPP_LOGTYPEVAL(const void*, _a3) WPP_LOGTYPEVAL(signed int, _a4) WPP_LOGTYPEVAL(signed int, _a5) WPP_LOGTYPEVAL(const void*, _a6) WPP_LOGTYPEVAL(signed int, _a7) WPP_LOGTYPEVAL(signed int, _a8)  (void*)0);
    }

    WPP_RECORDER(AutoLogContext, level, flags, (LPGUID) traceGuid, id, WPP_LOGASTR(_a1) WPP_LOGTYPEVAL(unsigned int, _a2) WPP_LOGTYPEVAL(const void*, _a3) WPP_LOGTYPEVAL(signed int, _a4) WPP_LOGTYPEVAL(signed int, _a5) WPP_LOGTYPEVAL(const void*, _a6) WPP_LOGTYPEVAL(signed int, _a7) WPP_LOGTYPEVAL(signed int, _a8)  (void*)0);
}
#endif // WPP_RECORDER_SF_sDqddqdd_def

#endif // ENABLE_WPP_TRACE_FILTERING_WITH_WPP_RECORDER

#endif // ENABLE_WPP_RECORDER

#ifndef WPP_SF_sDqdqqqd_def
# define WPP_SF_sDqdqqqd_def
WPP_INLINE void WPP_SF_sDqdqqqd(WPP_LOGGER_ARG unsigned short id, LPCGUID TraceGuid, LPCSTR _a1, unsigned int _a2, const void* _a3, signed int _a4, const void* _a5, const void* _a6, const void* _a7, signed int _a8)
{ WPP_TRACE(WPP_GET_LOGGER, WPP_TRACE_OPTIONS, (LPGUID)TraceGuid, id, WPP_LOGASTR(_a1) WPP_LOGTYPEVAL(unsigned int, _a2) WPP_LOGTYPEVAL(const void*, _a3) WPP_LOGTYPEVAL(signed int, _a4) WPP_LOGTYPEVAL(const void*, _a5) WPP_LOGTYPEVAL(const void*, _a6) WPP_LOGTYPEVAL(const void*, _a7) WPP_LOGTYPEVAL(signed int, _a8)  (void*)0); }
#endif // WPP_SF_sDqdqqqd_def

#if ENABLE_WPP_RECORDER

#if ENABLE_WPP_TRACE_FILTERING_WITH_WPP_RECORDER

//
// Generate the WPP_RECORDER_AND_TRACE_SF_sDqdqqqd function
//
#ifndef WPP_RECORDER_AND_TRACE_SF_sDqdqqqd_def
#define WPP_RECORDER_AND_TRACE_SF_sDqdqqqd_def
WPP_INLINE
VOID
WPP_RECORDER_AND_TRACE_SF_sDqdqqqd(
    WPP_LOGGER_ARG
    BOOLEAN  wppEnabled,
    BOOLEAN  recorderEnabled,
    PVOID    AutoLogContext,
    UCHAR    level,
    ULONG    flags,
    USHORT   id,
    LPCGUID  traceGuid
    , LPCSTR _a1, unsigned int _a2, const void* _a3, signed int _a4, const void* _a5, const void* _a6, const void* _a7, signed int _a8
    )
{
    if (wppEnabled)
    {
        WPP_TRACE( WPP_GET_LOGGER,
                   WPP_TRACE_OPTIONS,
                   (LPGUID)traceGuid,
                   id,
                   WPP_LOGASTR(_a1) WPP_LOGTYPEVAL(unsigned int, _a2) WPP_LOGTYPEVAL(const void*, _a3) WPP_LOGTYPEVAL(signed int, _a4) WPP_LOGTYPEVAL(const void*, _a5) WPP_LOGTYPEVAL(const void*, _a6) WPP_LOGTYPEVAL(const void*, _a7) WPP_LOGTYPEVAL(signed int, _a8)  (void*)0);
    }

    if (recorderEnabled)
    {
        WPP_RECORDER( AutoLogContext, level, flags, (LPGUID) traceGuid, id, WPP_LOGASTR(_a1) WPP_LOGTYPEVAL(unsigned int, _a2) WPP_LOGTYPEVAL(const void*, _a3) WPP_LOGTYPEVAL(signed int, _a4) WPP_LOGTYPEVAL(const void*, _a5) WPP_LOGTYPEVAL(const void*, _a6) WPP_LOGTYPEVAL(const void*, _a7) WPP_LOGTYPEVAL(signed int, _a8)  (void*)0 );
    }
}
#endif // WPP_RECORDER_AND_TRACE_SF_sDqdqqqd_def

#else  // ENABLE_WPP_TRACE_FILTERING_WITH_WPP_RECORDER

//
// Generate the WPP_RECORDER_SP_sDqdqqqd function
//
#ifndef WPP_RECORDER_SF_sDqdqqqd_def
#define WPP_RECORDER_SF_sDqdqqqd_def
WPP_INLINE
VOID
WPP_RECORDER_SF_sDqdqqqd(
    PVOID    AutoLogContext,
    UCHAR    level,
    ULONG    flags,
    USHORT   id,
    LPCGUID  traceGuid
    , LPCSTR _a1, unsigned int _a2, const void* _a3, signed int _a4, const void* _a5, const void* _a6, const void* _a7, signed int _a8
    )
{
    if (WPP_ENABLE_FLAG_BIT(flags) &&
        (WPP_CONTROL(flags).Level >= level))
    {
        WPP_TRACE(
            WPP_CONTROL(flags).Logger,
            WPP_TRACE_OPTIONS,
            (LPGUID)traceGuid,
            id,
            WPP_LOGASTR(_a1) WPP_LOGTYPEVAL(unsigned int, _a2) WPP_LOGTYPEVAL(const void*, _a3) WPP_LOGTYPEVAL(signed int, _a4) WPP_LOGTYPEVAL(const void*, _a5) WPP_LOGTYPEVAL(const void*, _a6) WPP_LOGTYPEVAL(const void*, _a7) WPP_LOGTYPEVAL(signed int, _a8)  (void*)0);
    }

    WPP_RECORDER(AutoLogContext, level, flags, (LPGUID) traceGuid, id, WPP_LOGASTR(_a1) WPP_LOGTYPEVAL(unsigned int, _a2) WPP_LOGTYPEVAL(const void*, _a3) WPP_LOGTYPEVAL(signed int, _a4) WPP_LOGTYPEVAL(const void*, _a5) WPP_LOGTYPEVAL(const void*, _a6) WPP_LOGTYPEVAL(const void*, _a7) WPP_LOGTYPEVAL(signed int, _a8)  (void*)0);
}
#endif // WPP_RECORDER_SF_sDqdqqqd_def

#endif // ENABLE_WPP_TRACE_FILTERING_WITH_WPP_RECORDER

#endif // ENABLE_WPP_RECORDER

#ifndef WPP_SF_sDqq_def
# define WPP_SF_sDqq_def
WPP_INLINE void WPP_SF_sDqq(WPP_LOGGER_ARG unsigned short id, LPCGUID TraceGuid, LPCSTR _a1, unsigned int _a2, const void* _a3, const void* _a4)
{ WPP_TRACE(WPP_GET_LOGGER, WPP_TRACE_OPTIONS, (LPGUID)TraceGuid, id, WPP_LOGASTR(_a1) WPP_LOGTYPEVAL(unsigned int, _a2) WPP_LOGTYPEVAL(const void*, _a3) WPP_LOGTYPEVAL(const void*, _a4)  (void*)0); }
#endif // WPP_SF_sDqq_def

#if ENABLE_WPP_RECORDER

#if ENABLE_WPP_TRACE_FILTERING_WITH_WPP_RECORDER

//
// Generate the WPP_RECORDER_AND_TRACE_SF_sDqq function
//
#ifndef WPP_RECORDER_AND_TRACE_SF_sDqq_def
#define WPP_RECORDER_AND_TRACE_SF_sDqq_def
WPP_INLINE
VOID
WPP_RECORDER_AND_TRACE_SF_sDqq(
    WPP_LOGGER_ARG
    BOOLEAN  wppEnabled,
    BOOLEAN  recorderEnabled,
    PVOID    AutoLogContext,
    UCHAR    level,
    ULONG    flags,
    USHORT   id,
    LPCGUID  traceGuid
    , LPCSTR _a1, unsigned int _a2, const void* _a3, const void* _a4
    )
{
    if (wppEnabled)
    {
        WPP_TRACE( WPP_GET_LOGGER,
                   WPP_TRACE_OPTIONS,
                   (LPGUID)traceGuid,
                   id,
                   WPP_LOGASTR(_a1) WPP_LOGTYPEVAL(unsigned int, _a2) WPP_LOGTYPEVAL(const void*, _a3) WPP_LOGTYPEVAL(const void*, _a4)  (void*)0);
    }

    if (recorderEnabled)
    {
        WPP_RECORDER( AutoLogContext, level, flags, (LPGUID) traceGuid, id, WPP_LOGASTR(_a1) WPP_LOGTYPEVAL(unsigned int, _a2) WPP_LOGTYPEVAL(const void*, _a3) WPP_LOGTYPEVAL(const void*, _a4)  (void*)0 );
    }
}
#endif // WPP_RECORDER_AND_TRACE_SF_sDqq_def

#else  // ENABLE_WPP_TRACE_FILTERING_WITH_WPP_RECORDER

//
// Generate the WPP_RECORDER_SP_sDqq function
//
#ifndef WPP_RECORDER_SF_sDqq_def
#define WPP_RECORDER_SF_sDqq_def
WPP_INLINE
VOID
WPP_RECORDER_SF_sDqq(
    PVOID    AutoLogContext,
    UCHAR    level,
    ULONG    flags,
    USHORT   id,
    LPCGUID  traceGuid
    , LPCSTR _a1, unsigned int _a2, const void* _a3, const void* _a4
    )
{
    if (WPP_ENABLE_FLAG_BIT(flags) &&
        (WPP_CONTROL(flags).Level >= level))
    {
        WPP_TRACE(
            WPP_CONTROL(flags).Logger,
            WPP_TRACE_OPTIONS,
            (LPGUID)traceGuid,
            id,
            WPP_LOGASTR(_a1) WPP_LOGTYPEVAL(unsigned int, _a2) WPP_LOGTYPEVAL(const void*, _a3) WPP_LOGTYPEVAL(const void*, _a4)  (void*)0);
    }

    WPP_RECORDER(AutoLogContext, level, flags, (LPGUID) traceGuid, id, WPP_LOGASTR(_a1) WPP_LOGTYPEVAL(unsigned int, _a2) WPP_LOGTYPEVAL(const void*, _a3) WPP_LOGTYPEVAL(const void*, _a4)  (void*)0);
}
#endif // WPP_RECORDER_SF_sDqq_def

#endif // ENABLE_WPP_TRACE_FILTERING_WITH_WPP_RECORDER

#endif // ENABLE_WPP_RECORDER

// WPP_LOG_ALWAYS:
// Called for each event: WPP_LOG_ALWAYS(EX, MSG, arg1, arg2, arg3...) Other()
// If defined, the definition needs to include a trailing comma or semicolon.
// In addition, you will need to define a WPP_EX_[args](args...) macro to
// extract any needed information from the other arguments (e.g. LEVEL).
#ifndef WPP_LOG_ALWAYS
#define WPP_LOG_ALWAYS(...)
#endif

// WPP_DEBUG:
// Called for each enabled event: WPP_DEBUG((MSG, arg1, arg2, arg3...)), Other()
// Potential definition: printf MsgArgs
// Definition should not include any trailing comma or semicolon.
#ifdef WPP_DEBUG
#define WPP_INVOKE_WPP_DEBUG(MsgArgs) WPP_DEBUG(MsgArgs)
#else // WPP_DEBUG
#define WPP_INVOKE_WPP_DEBUG(MsgArgs) (void)0
#endif // WPP_DEBUG

// WPP_CALL_Vc4Display_cpp24
#ifndef WPP_LEVEL_FLAGS_PRE
#  define WPP_LEVEL_FLAGS_PRE(LEVEL,FLAGS)
#endif
#ifndef WPP_LEVEL_FLAGS_POST
#  define WPP_LEVEL_FLAGS_POST(LEVEL,FLAGS)
#endif
#if ENABLE_WPP_RECORDER
#if ENABLE_WPP_TRACE_FILTERING_WITH_WPP_RECORDER
#define WPP_CALL_Vc4Display_cpp24(MSG) \
    WPP_LOG_ALWAYS(WPP_EX_LEVEL_FLAGS(TRACE_LEVEL_ERROR, ROS_TRACING_DEFAULT), MSG) \
    WPP_LEVEL_FLAGS_PRE(TRACE_LEVEL_ERROR, ROS_TRACING_DEFAULT) \
    do {\
        WPP_ANNOTATE(Vc4Display_cpp24) 0; \
        BOOLEAN wppEnabled = WPP_CHECK_INIT WPP_LEVEL_FLAGS_ENABLED(TRACE_LEVEL_ERROR, ROS_TRACING_DEFAULT); \
        BOOLEAN recorderEnabled = WPP_RECORDER_CHECK_INIT WPP_RECORDER_LEVEL_FLAGS_FILTER(TRACE_LEVEL_ERROR, ROS_TRACING_DEFAULT); \
        if (wppEnabled || recorderEnabled) { \
            WPP_INVOKE_WPP_DEBUG((MSG)); \
            WPP_RECORDER_AND_TRACE_SF_sD( \
                     WPP_LEVEL_FLAGS_LOGGER(TRACE_LEVEL_ERROR, ROS_TRACING_DEFAULT) \
                     wppEnabled, recorderEnabled, \
                     WPP_RECORDER_LEVEL_FLAGS_ARGS(TRACE_LEVEL_ERROR, ROS_TRACING_DEFAULT), \
                     10, \
                     WPP_LOCAL_TraceGuids+0, __FILE__, __LINE__);\
        } \
    } \
    while(0) \
    WPP_LEVEL_FLAGS_POST(TRACE_LEVEL_ERROR, ROS_TRACING_DEFAULT)
#else // ENABLE_WPP_TRACE_FILTERING_WITH_WPP_RECORDER
#define WPP_CALL_Vc4Display_cpp24(MSG) \
    WPP_LOG_ALWAYS(WPP_EX_LEVEL_FLAGS(TRACE_LEVEL_ERROR, ROS_TRACING_DEFAULT), MSG) \
    WPP_LEVEL_FLAGS_PRE(TRACE_LEVEL_ERROR, ROS_TRACING_DEFAULT) \
    WPP_ANNOTATE(Vc4Display_cpp24) \
    (( \
        WPP_RECORDER_CHECK_INIT WPP_RECORDER_LEVEL_FLAGS_FILTER(TRACE_LEVEL_ERROR, ROS_TRACING_DEFAULT) \
        ?   WPP_INVOKE_WPP_DEBUG((MSG)), \
            WPP_RECORDER_SF_sD( \
                WPP_RECORDER_LEVEL_FLAGS_ARGS(TRACE_LEVEL_ERROR, ROS_TRACING_DEFAULT), \
                10, \
                WPP_LOCAL_TraceGuids+0, __FILE__, __LINE__), \
            1 \
        :   0 \
    )) \
    WPP_LEVEL_FLAGS_POST(TRACE_LEVEL_ERROR, ROS_TRACING_DEFAULT)
#endif // ENABLE_WPP_TRACE_FILTERING_WITH_WPP_RECORDER
#else  // ENABLE_WPP_RECORDER
#define WPP_CALL_Vc4Display_cpp24(MSG) \
    WPP_LOG_ALWAYS(WPP_EX_LEVEL_FLAGS(TRACE_LEVEL_ERROR, ROS_TRACING_DEFAULT), MSG) \
    WPP_LEVEL_FLAGS_PRE(TRACE_LEVEL_ERROR, ROS_TRACING_DEFAULT) \
    WPP_ANNOTATE(Vc4Display_cpp24) \
    (( \
        WPP_CHECK_INIT WPP_LEVEL_FLAGS_ENABLED(TRACE_LEVEL_ERROR, ROS_TRACING_DEFAULT) \
        ?   WPP_INVOKE_WPP_DEBUG((MSG)), \
            WPP_SF_sD( \
                WPP_LEVEL_FLAGS_LOGGER(TRACE_LEVEL_ERROR, ROS_TRACING_DEFAULT) \
                10, \
                WPP_LOCAL_TraceGuids+0, __FILE__, __LINE__), \
            1 \
        :   0 \
    )) \
    WPP_LEVEL_FLAGS_POST(TRACE_LEVEL_ERROR, ROS_TRACING_DEFAULT)
#endif // ENABLE_WPP_RECORDER

// WPP_CALL_Vc4Display_cpp36
#ifndef WPP_LEVEL_FLAGS_PRE
#  define WPP_LEVEL_FLAGS_PRE(LEVEL,FLAGS)
#endif
#ifndef WPP_LEVEL_FLAGS_POST
#  define WPP_LEVEL_FLAGS_POST(LEVEL,FLAGS)
#endif
#if ENABLE_WPP_RECORDER
#if ENABLE_WPP_TRACE_FILTERING_WITH_WPP_RECORDER
#define WPP_CALL_Vc4Display_cpp36(MSG) \
    WPP_LOG_ALWAYS(WPP_EX_LEVEL_FLAGS(TRACE_LEVEL_ERROR, ROS_TRACING_DEBUG), MSG) \
    WPP_LEVEL_FLAGS_PRE(TRACE_LEVEL_ERROR, ROS_TRACING_DEBUG) \
    do {\
        WPP_ANNOTATE(Vc4Display_cpp36) 0; \
        BOOLEAN wppEnabled = WPP_CHECK_INIT WPP_LEVEL_FLAGS_ENABLED(TRACE_LEVEL_ERROR, ROS_TRACING_DEBUG); \
        BOOLEAN recorderEnabled = WPP_RECORDER_CHECK_INIT WPP_RECORDER_LEVEL_FLAGS_FILTER(TRACE_LEVEL_ERROR, ROS_TRACING_DEBUG); \
        if (wppEnabled || recorderEnabled) { \
            WPP_INVOKE_WPP_DEBUG((MSG)); \
            WPP_RECORDER_AND_TRACE_SF_sD( \
                     WPP_LEVEL_FLAGS_LOGGER(TRACE_LEVEL_ERROR, ROS_TRACING_DEBUG) \
                     wppEnabled, recorderEnabled, \
                     WPP_RECORDER_LEVEL_FLAGS_ARGS(TRACE_LEVEL_ERROR, ROS_TRACING_DEBUG), \
                     11, \
                     WPP_LOCAL_TraceGuids+0, __FILE__, __LINE__);\
        } \
    } \
    while(0) \
    WPP_LEVEL_FLAGS_POST(TRACE_LEVEL_ERROR, ROS_TRACING_DEBUG)
#else // ENABLE_WPP_TRACE_FILTERING_WITH_WPP_RECORDER
#define WPP_CALL_Vc4Display_cpp36(MSG) \
    WPP_LOG_ALWAYS(WPP_EX_LEVEL_FLAGS(TRACE_LEVEL_ERROR, ROS_TRACING_DEBUG), MSG) \
    WPP_LEVEL_FLAGS_PRE(TRACE_LEVEL_ERROR, ROS_TRACING_DEBUG) \
    WPP_ANNOTATE(Vc4Display_cpp36) \
    (( \
        WPP_RECORDER_CHECK_INIT WPP_RECORDER_LEVEL_FLAGS_FILTER(TRACE_LEVEL_ERROR, ROS_TRACING_DEBUG) \
        ?   WPP_INVOKE_WPP_DEBUG((MSG)), \
            WPP_RECORDER_SF_sD( \
                WPP_RECORDER_LEVEL_FLAGS_ARGS(TRACE_LEVEL_ERROR, ROS_TRACING_DEBUG), \
                11, \
                WPP_LOCAL_TraceGuids+0, __FILE__, __LINE__), \
            1 \
        :   0 \
    )) \
    WPP_LEVEL_FLAGS_POST(TRACE_LEVEL_ERROR, ROS_TRACING_DEBUG)
#endif // ENABLE_WPP_TRACE_FILTERING_WITH_WPP_RECORDER
#else  // ENABLE_WPP_RECORDER
#define WPP_CALL_Vc4Display_cpp36(MSG) \
    WPP_LOG_ALWAYS(WPP_EX_LEVEL_FLAGS(TRACE_LEVEL_ERROR, ROS_TRACING_DEBUG), MSG) \
    WPP_LEVEL_FLAGS_PRE(TRACE_LEVEL_ERROR, ROS_TRACING_DEBUG) \
    WPP_ANNOTATE(Vc4Display_cpp36) \
    (( \
        WPP_CHECK_INIT WPP_LEVEL_FLAGS_ENABLED(TRACE_LEVEL_ERROR, ROS_TRACING_DEBUG) \
        ?   WPP_INVOKE_WPP_DEBUG((MSG)), \
            WPP_SF_sD( \
                WPP_LEVEL_FLAGS_LOGGER(TRACE_LEVEL_ERROR, ROS_TRACING_DEBUG) \
                11, \
                WPP_LOCAL_TraceGuids+0, __FILE__, __LINE__), \
            1 \
        :   0 \
    )) \
    WPP_LEVEL_FLAGS_POST(TRACE_LEVEL_ERROR, ROS_TRACING_DEBUG)
#endif // ENABLE_WPP_RECORDER

// WPP_CALL_Vc4Display_cpp50
#ifndef WPP_LEVEL_FLAGS_PRE
#  define WPP_LEVEL_FLAGS_PRE(LEVEL,FLAGS)
#endif
#ifndef WPP_LEVEL_FLAGS_POST
#  define WPP_LEVEL_FLAGS_POST(LEVEL,FLAGS)
#endif
#if ENABLE_WPP_RECORDER
#if ENABLE_WPP_TRACE_FILTERING_WITH_WPP_RECORDER
#define WPP_CALL_Vc4Display_cpp50(MSG) \
    WPP_LOG_ALWAYS(WPP_EX_LEVEL_FLAGS(TRACE_LEVEL_ERROR, ROS_TRACING_DEBUG), MSG) \
    WPP_LEVEL_FLAGS_PRE(TRACE_LEVEL_ERROR, ROS_TRACING_DEBUG) \
    do {\
        WPP_ANNOTATE(Vc4Display_cpp50) 0; \
        BOOLEAN wppEnabled = WPP_CHECK_INIT WPP_LEVEL_FLAGS_ENABLED(TRACE_LEVEL_ERROR, ROS_TRACING_DEBUG); \
        BOOLEAN recorderEnabled = WPP_RECORDER_CHECK_INIT WPP_RECORDER_LEVEL_FLAGS_FILTER(TRACE_LEVEL_ERROR, ROS_TRACING_DEBUG); \
        if (wppEnabled || recorderEnabled) { \
            WPP_INVOKE_WPP_DEBUG((MSG)); \
            WPP_RECORDER_AND_TRACE_SF_sD( \
                     WPP_LEVEL_FLAGS_LOGGER(TRACE_LEVEL_ERROR, ROS_TRACING_DEBUG) \
                     wppEnabled, recorderEnabled, \
                     WPP_RECORDER_LEVEL_FLAGS_ARGS(TRACE_LEVEL_ERROR, ROS_TRACING_DEBUG), \
                     12, \
                     WPP_LOCAL_TraceGuids+0, __FILE__, __LINE__);\
        } \
    } \
    while(0) \
    WPP_LEVEL_FLAGS_POST(TRACE_LEVEL_ERROR, ROS_TRACING_DEBUG)
#else // ENABLE_WPP_TRACE_FILTERING_WITH_WPP_RECORDER
#define WPP_CALL_Vc4Display_cpp50(MSG) \
    WPP_LOG_ALWAYS(WPP_EX_LEVEL_FLAGS(TRACE_LEVEL_ERROR, ROS_TRACING_DEBUG), MSG) \
    WPP_LEVEL_FLAGS_PRE(TRACE_LEVEL_ERROR, ROS_TRACING_DEBUG) \
    WPP_ANNOTATE(Vc4Display_cpp50) \
    (( \
        WPP_RECORDER_CHECK_INIT WPP_RECORDER_LEVEL_FLAGS_FILTER(TRACE_LEVEL_ERROR, ROS_TRACING_DEBUG) \
        ?   WPP_INVOKE_WPP_DEBUG((MSG)), \
            WPP_RECORDER_SF_sD( \
                WPP_RECORDER_LEVEL_FLAGS_ARGS(TRACE_LEVEL_ERROR, ROS_TRACING_DEBUG), \
                12, \
                WPP_LOCAL_TraceGuids+0, __FILE__, __LINE__), \
            1 \
        :   0 \
    )) \
    WPP_LEVEL_FLAGS_POST(TRACE_LEVEL_ERROR, ROS_TRACING_DEBUG)
#endif // ENABLE_WPP_TRACE_FILTERING_WITH_WPP_RECORDER
#else  // ENABLE_WPP_RECORDER
#define WPP_CALL_Vc4Display_cpp50(MSG) \
    WPP_LOG_ALWAYS(WPP_EX_LEVEL_FLAGS(TRACE_LEVEL_ERROR, ROS_TRACING_DEBUG), MSG) \
    WPP_LEVEL_FLAGS_PRE(TRACE_LEVEL_ERROR, ROS_TRACING_DEBUG) \
    WPP_ANNOTATE(Vc4Display_cpp50) \
    (( \
        WPP_CHECK_INIT WPP_LEVEL_FLAGS_ENABLED(TRACE_LEVEL_ERROR, ROS_TRACING_DEBUG) \
        ?   WPP_INVOKE_WPP_DEBUG((MSG)), \
            WPP_SF_sD( \
                WPP_LEVEL_FLAGS_LOGGER(TRACE_LEVEL_ERROR, ROS_TRACING_DEBUG) \
                12, \
                WPP_LOCAL_TraceGuids+0, __FILE__, __LINE__), \
            1 \
        :   0 \
    )) \
    WPP_LEVEL_FLAGS_POST(TRACE_LEVEL_ERROR, ROS_TRACING_DEBUG)
#endif // ENABLE_WPP_RECORDER

// WPP_CALL_Vc4Display_cpp81
#ifndef WPP_LEVEL_FLAGS_PRE
#  define WPP_LEVEL_FLAGS_PRE(LEVEL,FLAGS)
#endif
#ifndef WPP_LEVEL_FLAGS_POST
#  define WPP_LEVEL_FLAGS_POST(LEVEL,FLAGS)
#endif
#if ENABLE_WPP_RECORDER
#if ENABLE_WPP_TRACE_FILTERING_WITH_WPP_RECORDER
#define WPP_CALL_Vc4Display_cpp81(MSG, _a12, _a13, _a14, _a15, _a16, _a17) \
    WPP_LOG_ALWAYS(WPP_EX_LEVEL_FLAGS(TRACE_LEVEL_ERROR, ROS_TRACING_DEBUG), MSG, _a12, _a13, _a14, _a15, _a16, _a17) \
    WPP_LEVEL_FLAGS_PRE(TRACE_LEVEL_ERROR, ROS_TRACING_DEBUG) \
    do {\
        WPP_ANNOTATE(Vc4Display_cpp81) 0; \
        BOOLEAN wppEnabled = WPP_CHECK_INIT WPP_LEVEL_FLAGS_ENABLED(TRACE_LEVEL_ERROR, ROS_TRACING_DEBUG); \
        BOOLEAN recorderEnabled = WPP_RECORDER_CHECK_INIT WPP_RECORDER_LEVEL_FLAGS_FILTER(TRACE_LEVEL_ERROR, ROS_TRACING_DEBUG); \
        if (wppEnabled || recorderEnabled) { \
            WPP_INVOKE_WPP_DEBUG((MSG, _a12, _a13, _a14, _a15, _a16, _a17)); \
            WPP_RECORDER_AND_TRACE_SF_sDdddddd( \
                     WPP_LEVEL_FLAGS_LOGGER(TRACE_LEVEL_ERROR, ROS_TRACING_DEBUG) \
                     wppEnabled, recorderEnabled, \
                     WPP_RECORDER_LEVEL_FLAGS_ARGS(TRACE_LEVEL_ERROR, ROS_TRACING_DEBUG), \
                     13, \
                     WPP_LOCAL_TraceGuids+0, __FILE__, __LINE__, _a12, _a13, _a14, _a15, _a16, _a17);\
        } \
    } \
    while(0) \
    WPP_LEVEL_FLAGS_POST(TRACE_LEVEL_ERROR, ROS_TRACING_DEBUG)
#else // ENABLE_WPP_TRACE_FILTERING_WITH_WPP_RECORDER
#define WPP_CALL_Vc4Display_cpp81(MSG, _a12, _a13, _a14, _a15, _a16, _a17) \
    WPP_LOG_ALWAYS(WPP_EX_LEVEL_FLAGS(TRACE_LEVEL_ERROR, ROS_TRACING_DEBUG), MSG, _a12, _a13, _a14, _a15, _a16, _a17) \
    WPP_LEVEL_FLAGS_PRE(TRACE_LEVEL_ERROR, ROS_TRACING_DEBUG) \
    WPP_ANNOTATE(Vc4Display_cpp81) \
    (( \
        WPP_RECORDER_CHECK_INIT WPP_RECORDER_LEVEL_FLAGS_FILTER(TRACE_LEVEL_ERROR, ROS_TRACING_DEBUG) \
        ?   WPP_INVOKE_WPP_DEBUG((MSG, _a12, _a13, _a14, _a15, _a16, _a17)), \
            WPP_RECORDER_SF_sDdddddd( \
                WPP_RECORDER_LEVEL_FLAGS_ARGS(TRACE_LEVEL_ERROR, ROS_TRACING_DEBUG), \
                13, \
                WPP_LOCAL_TraceGuids+0, __FILE__, __LINE__, _a12, _a13, _a14, _a15, _a16, _a17), \
            1 \
        :   0 \
    )) \
    WPP_LEVEL_FLAGS_POST(TRACE_LEVEL_ERROR, ROS_TRACING_DEBUG)
#endif // ENABLE_WPP_TRACE_FILTERING_WITH_WPP_RECORDER
#else  // ENABLE_WPP_RECORDER
#define WPP_CALL_Vc4Display_cpp81(MSG, _a12, _a13, _a14, _a15, _a16, _a17) \
    WPP_LOG_ALWAYS(WPP_EX_LEVEL_FLAGS(TRACE_LEVEL_ERROR, ROS_TRACING_DEBUG), MSG, _a12, _a13, _a14, _a15, _a16, _a17) \
    WPP_LEVEL_FLAGS_PRE(TRACE_LEVEL_ERROR, ROS_TRACING_DEBUG) \
    WPP_ANNOTATE(Vc4Display_cpp81) \
    (( \
        WPP_CHECK_INIT WPP_LEVEL_FLAGS_ENABLED(TRACE_LEVEL_ERROR, ROS_TRACING_DEBUG) \
        ?   WPP_INVOKE_WPP_DEBUG((MSG, _a12, _a13, _a14, _a15, _a16, _a17)), \
            WPP_SF_sDdddddd( \
                WPP_LEVEL_FLAGS_LOGGER(TRACE_LEVEL_ERROR, ROS_TRACING_DEBUG) \
                13, \
                WPP_LOCAL_TraceGuids+0, __FILE__, __LINE__, _a12, _a13, _a14, _a15, _a16, _a17), \
            1 \
        :   0 \
    )) \
    WPP_LEVEL_FLAGS_POST(TRACE_LEVEL_ERROR, ROS_TRACING_DEBUG)
#endif // ENABLE_WPP_RECORDER

// WPP_CALL_Vc4Display_cpp110
#ifndef WPP_LEVEL_FLAGS_PRE
#  define WPP_LEVEL_FLAGS_PRE(LEVEL,FLAGS)
#endif
#ifndef WPP_LEVEL_FLAGS_POST
#  define WPP_LEVEL_FLAGS_POST(LEVEL,FLAGS)
#endif
#if ENABLE_WPP_RECORDER
#if ENABLE_WPP_TRACE_FILTERING_WITH_WPP_RECORDER
#define WPP_CALL_Vc4Display_cpp110(MSG) \
    WPP_LOG_ALWAYS(WPP_EX_LEVEL_FLAGS(TRACE_LEVEL_WARNING, ROS_TRACING_DEFAULT), MSG) \
    WPP_LEVEL_FLAGS_PRE(TRACE_LEVEL_WARNING, ROS_TRACING_DEFAULT) \
    do {\
        WPP_ANNOTATE(Vc4Display_cpp110) 0; \
        BOOLEAN wppEnabled = WPP_CHECK_INIT WPP_LEVEL_FLAGS_ENABLED(TRACE_LEVEL_WARNING, ROS_TRACING_DEFAULT); \
        BOOLEAN recorderEnabled = WPP_RECORDER_CHECK_INIT WPP_RECORDER_LEVEL_FLAGS_FILTER(TRACE_LEVEL_WARNING, ROS_TRACING_DEFAULT); \
        if (wppEnabled || recorderEnabled) { \
            WPP_INVOKE_WPP_DEBUG((MSG)); \
            WPP_RECORDER_AND_TRACE_SF_sD( \
                     WPP_LEVEL_FLAGS_LOGGER(TRACE_LEVEL_WARNING, ROS_TRACING_DEFAULT) \
                     wppEnabled, recorderEnabled, \
                     WPP_RECORDER_LEVEL_FLAGS_ARGS(TRACE_LEVEL_WARNING, ROS_TRACING_DEFAULT), \
                     14, \
                     WPP_LOCAL_TraceGuids+0, __FILE__, __LINE__);\
        } \
    } \
    while(0) \
    WPP_LEVEL_FLAGS_POST(TRACE_LEVEL_WARNING, ROS_TRACING_DEFAULT)
#else // ENABLE_WPP_TRACE_FILTERING_WITH_WPP_RECORDER
#define WPP_CALL_Vc4Display_cpp110(MSG) \
    WPP_LOG_ALWAYS(WPP_EX_LEVEL_FLAGS(TRACE_LEVEL_WARNING, ROS_TRACING_DEFAULT), MSG) \
    WPP_LEVEL_FLAGS_PRE(TRACE_LEVEL_WARNING, ROS_TRACING_DEFAULT) \
    WPP_ANNOTATE(Vc4Display_cpp110) \
    (( \
        WPP_RECORDER_CHECK_INIT WPP_RECORDER_LEVEL_FLAGS_FILTER(TRACE_LEVEL_WARNING, ROS_TRACING_DEFAULT) \
        ?   WPP_INVOKE_WPP_DEBUG((MSG)), \
            WPP_RECORDER_SF_sD( \
                WPP_RECORDER_LEVEL_FLAGS_ARGS(TRACE_LEVEL_WARNING, ROS_TRACING_DEFAULT), \
                14, \
                WPP_LOCAL_TraceGuids+0, __FILE__, __LINE__), \
            1 \
        :   0 \
    )) \
    WPP_LEVEL_FLAGS_POST(TRACE_LEVEL_WARNING, ROS_TRACING_DEFAULT)
#endif // ENABLE_WPP_TRACE_FILTERING_WITH_WPP_RECORDER
#else  // ENABLE_WPP_RECORDER
#define WPP_CALL_Vc4Display_cpp110(MSG) \
    WPP_LOG_ALWAYS(WPP_EX_LEVEL_FLAGS(TRACE_LEVEL_WARNING, ROS_TRACING_DEFAULT), MSG) \
    WPP_LEVEL_FLAGS_PRE(TRACE_LEVEL_WARNING, ROS_TRACING_DEFAULT) \
    WPP_ANNOTATE(Vc4Display_cpp110) \
    (( \
        WPP_CHECK_INIT WPP_LEVEL_FLAGS_ENABLED(TRACE_LEVEL_WARNING, ROS_TRACING_DEFAULT) \
        ?   WPP_INVOKE_WPP_DEBUG((MSG)), \
            WPP_SF_sD( \
                WPP_LEVEL_FLAGS_LOGGER(TRACE_LEVEL_WARNING, ROS_TRACING_DEFAULT) \
                14, \
                WPP_LOCAL_TraceGuids+0, __FILE__, __LINE__), \
            1 \
        :   0 \
    )) \
    WPP_LEVEL_FLAGS_POST(TRACE_LEVEL_WARNING, ROS_TRACING_DEFAULT)
#endif // ENABLE_WPP_RECORDER

// WPP_CALL_Vc4Display_cpp114
#ifndef WPP_LEVEL_FLAGS_PRE
#  define WPP_LEVEL_FLAGS_PRE(LEVEL,FLAGS)
#endif
#ifndef WPP_LEVEL_FLAGS_POST
#  define WPP_LEVEL_FLAGS_POST(LEVEL,FLAGS)
#endif
#if ENABLE_WPP_RECORDER
#if ENABLE_WPP_TRACE_FILTERING_WITH_WPP_RECORDER
#define WPP_CALL_Vc4Display_cpp114(MSG) \
    WPP_LOG_ALWAYS(WPP_EX_LEVEL_FLAGS(TRACE_LEVEL_ERROR, ROS_TRACING_DEBUG), MSG) \
    WPP_LEVEL_FLAGS_PRE(TRACE_LEVEL_ERROR, ROS_TRACING_DEBUG) \
    do {\
        WPP_ANNOTATE(Vc4Display_cpp114) 0; \
        BOOLEAN wppEnabled = WPP_CHECK_INIT WPP_LEVEL_FLAGS_ENABLED(TRACE_LEVEL_ERROR, ROS_TRACING_DEBUG); \
        BOOLEAN recorderEnabled = WPP_RECORDER_CHECK_INIT WPP_RECORDER_LEVEL_FLAGS_FILTER(TRACE_LEVEL_ERROR, ROS_TRACING_DEBUG); \
        if (wppEnabled || recorderEnabled) { \
            WPP_INVOKE_WPP_DEBUG((MSG)); \
            WPP_RECORDER_AND_TRACE_SF_sD( \
                     WPP_LEVEL_FLAGS_LOGGER(TRACE_LEVEL_ERROR, ROS_TRACING_DEBUG) \
                     wppEnabled, recorderEnabled, \
                     WPP_RECORDER_LEVEL_FLAGS_ARGS(TRACE_LEVEL_ERROR, ROS_TRACING_DEBUG), \
                     15, \
                     WPP_LOCAL_TraceGuids+0, __FILE__, __LINE__);\
        } \
    } \
    while(0) \
    WPP_LEVEL_FLAGS_POST(TRACE_LEVEL_ERROR, ROS_TRACING_DEBUG)
#else // ENABLE_WPP_TRACE_FILTERING_WITH_WPP_RECORDER
#define WPP_CALL_Vc4Display_cpp114(MSG) \
    WPP_LOG_ALWAYS(WPP_EX_LEVEL_FLAGS(TRACE_LEVEL_ERROR, ROS_TRACING_DEBUG), MSG) \
    WPP_LEVEL_FLAGS_PRE(TRACE_LEVEL_ERROR, ROS_TRACING_DEBUG) \
    WPP_ANNOTATE(Vc4Display_cpp114) \
    (( \
        WPP_RECORDER_CHECK_INIT WPP_RECORDER_LEVEL_FLAGS_FILTER(TRACE_LEVEL_ERROR, ROS_TRACING_DEBUG) \
        ?   WPP_INVOKE_WPP_DEBUG((MSG)), \
            WPP_RECORDER_SF_sD( \
                WPP_RECORDER_LEVEL_FLAGS_ARGS(TRACE_LEVEL_ERROR, ROS_TRACING_DEBUG), \
                15, \
                WPP_LOCAL_TraceGuids+0, __FILE__, __LINE__), \
            1 \
        :   0 \
    )) \
    WPP_LEVEL_FLAGS_POST(TRACE_LEVEL_ERROR, ROS_TRACING_DEBUG)
#endif // ENABLE_WPP_TRACE_FILTERING_WITH_WPP_RECORDER
#else  // ENABLE_WPP_RECORDER
#define WPP_CALL_Vc4Display_cpp114(MSG) \
    WPP_LOG_ALWAYS(WPP_EX_LEVEL_FLAGS(TRACE_LEVEL_ERROR, ROS_TRACING_DEBUG), MSG) \
    WPP_LEVEL_FLAGS_PRE(TRACE_LEVEL_ERROR, ROS_TRACING_DEBUG) \
    WPP_ANNOTATE(Vc4Display_cpp114) \
    (( \
        WPP_CHECK_INIT WPP_LEVEL_FLAGS_ENABLED(TRACE_LEVEL_ERROR, ROS_TRACING_DEBUG) \
        ?   WPP_INVOKE_WPP_DEBUG((MSG)), \
            WPP_SF_sD( \
                WPP_LEVEL_FLAGS_LOGGER(TRACE_LEVEL_ERROR, ROS_TRACING_DEBUG) \
                15, \
                WPP_LOCAL_TraceGuids+0, __FILE__, __LINE__), \
            1 \
        :   0 \
    )) \
    WPP_LEVEL_FLAGS_POST(TRACE_LEVEL_ERROR, ROS_TRACING_DEBUG)
#endif // ENABLE_WPP_RECORDER

// WPP_CALL_Vc4Display_cpp143
#ifndef WPP_LEVEL_FLAGS_PRE
#  define WPP_LEVEL_FLAGS_PRE(LEVEL,FLAGS)
#endif
#ifndef WPP_LEVEL_FLAGS_POST
#  define WPP_LEVEL_FLAGS_POST(LEVEL,FLAGS)
#endif
#if ENABLE_WPP_RECORDER
#if ENABLE_WPP_TRACE_FILTERING_WITH_WPP_RECORDER
#define WPP_CALL_Vc4Display_cpp143(LEVEL, FLAGS, MSG, _a12, _a13, _a14) \
    WPP_LOG_ALWAYS(WPP_EX_LEVEL_FLAGS(LEVEL, FLAGS), MSG, _a12, _a13, _a14) \
    WPP_LEVEL_FLAGS_PRE(LEVEL, FLAGS) \
    do {\
        WPP_ANNOTATE(Vc4Display_cpp143) 0; \
        BOOLEAN wppEnabled = WPP_CHECK_INIT WPP_LEVEL_FLAGS_ENABLED(LEVEL, FLAGS); \
        BOOLEAN recorderEnabled = WPP_RECORDER_CHECK_INIT WPP_RECORDER_LEVEL_FLAGS_FILTER(LEVEL, FLAGS); \
        if (wppEnabled || recorderEnabled) { \
            WPP_INVOKE_WPP_DEBUG((MSG, _a12, _a13, _a14)); \
            WPP_RECORDER_AND_TRACE_SF_sDLLq( \
                     WPP_LEVEL_FLAGS_LOGGER(LEVEL, FLAGS) \
                     wppEnabled, recorderEnabled, \
                     WPP_RECORDER_LEVEL_FLAGS_ARGS(LEVEL, FLAGS), \
                     16, \
                     WPP_LOCAL_TraceGuids+0, __FILE__, __LINE__, _a12, _a13, _a14);\
        } \
    } \
    while(0) \
    WPP_LEVEL_FLAGS_POST(LEVEL, FLAGS)
#else // ENABLE_WPP_TRACE_FILTERING_WITH_WPP_RECORDER
#define WPP_CALL_Vc4Display_cpp143(LEVEL, FLAGS, MSG, _a12, _a13, _a14) \
    WPP_LOG_ALWAYS(WPP_EX_LEVEL_FLAGS(LEVEL, FLAGS), MSG, _a12, _a13, _a14) \
    WPP_LEVEL_FLAGS_PRE(LEVEL, FLAGS) \
    WPP_ANNOTATE(Vc4Display_cpp143) \
    (( \
        WPP_RECORDER_CHECK_INIT WPP_RECORDER_LEVEL_FLAGS_FILTER(LEVEL, FLAGS) \
        ?   WPP_INVOKE_WPP_DEBUG((MSG, _a12, _a13, _a14)), \
            WPP_RECORDER_SF_sDLLq( \
                WPP_RECORDER_LEVEL_FLAGS_ARGS(LEVEL, FLAGS), \
                16, \
                WPP_LOCAL_TraceGuids+0, __FILE__, __LINE__, _a12, _a13, _a14), \
            1 \
        :   0 \
    )) \
    WPP_LEVEL_FLAGS_POST(LEVEL, FLAGS)
#endif // ENABLE_WPP_TRACE_FILTERING_WITH_WPP_RECORDER
#else  // ENABLE_WPP_RECORDER
#define WPP_CALL_Vc4Display_cpp143(LEVEL, FLAGS, MSG, _a12, _a13, _a14) \
    WPP_LOG_ALWAYS(WPP_EX_LEVEL_FLAGS(LEVEL, FLAGS), MSG, _a12, _a13, _a14) \
    WPP_LEVEL_FLAGS_PRE(LEVEL, FLAGS) \
    WPP_ANNOTATE(Vc4Display_cpp143) \
    (( \
        WPP_CHECK_INIT WPP_LEVEL_FLAGS_ENABLED(LEVEL, FLAGS) \
        ?   WPP_INVOKE_WPP_DEBUG((MSG, _a12, _a13, _a14)), \
            WPP_SF_sDLLq( \
                WPP_LEVEL_FLAGS_LOGGER(LEVEL, FLAGS) \
                16, \
                WPP_LOCAL_TraceGuids+0, __FILE__, __LINE__, _a12, _a13, _a14), \
            1 \
        :   0 \
    )) \
    WPP_LEVEL_FLAGS_POST(LEVEL, FLAGS)
#endif // ENABLE_WPP_RECORDER

// WPP_CALL_Vc4Display_cpp183
#ifndef WPP_LEVEL_FLAGS_PRE
#  define WPP_LEVEL_FLAGS_PRE(LEVEL,FLAGS)
#endif
#ifndef WPP_LEVEL_FLAGS_POST
#  define WPP_LEVEL_FLAGS_POST(LEVEL,FLAGS)
#endif
#if ENABLE_WPP_RECORDER
#if ENABLE_WPP_TRACE_FILTERING_WITH_WPP_RECORDER
#define WPP_CALL_Vc4Display_cpp183(MSG) \
    WPP_LOG_ALWAYS(WPP_EX_LEVEL_FLAGS(TRACE_LEVEL_ERROR, ROS_TRACING_DEBUG), MSG) \
    WPP_LEVEL_FLAGS_PRE(TRACE_LEVEL_ERROR, ROS_TRACING_DEBUG) \
    do {\
        WPP_ANNOTATE(Vc4Display_cpp183) 0; \
        BOOLEAN wppEnabled = WPP_CHECK_INIT WPP_LEVEL_FLAGS_ENABLED(TRACE_LEVEL_ERROR, ROS_TRACING_DEBUG); \
        BOOLEAN recorderEnabled = WPP_RECORDER_CHECK_INIT WPP_RECORDER_LEVEL_FLAGS_FILTER(TRACE_LEVEL_ERROR, ROS_TRACING_DEBUG); \
        if (wppEnabled || recorderEnabled) { \
            WPP_INVOKE_WPP_DEBUG((MSG)); \
            WPP_RECORDER_AND_TRACE_SF_sD( \
                     WPP_LEVEL_FLAGS_LOGGER(TRACE_LEVEL_ERROR, ROS_TRACING_DEBUG) \
                     wppEnabled, recorderEnabled, \
                     WPP_RECORDER_LEVEL_FLAGS_ARGS(TRACE_LEVEL_ERROR, ROS_TRACING_DEBUG), \
                     17, \
                     WPP_LOCAL_TraceGuids+0, __FILE__, __LINE__);\
        } \
    } \
    while(0) \
    WPP_LEVEL_FLAGS_POST(TRACE_LEVEL_ERROR, ROS_TRACING_DEBUG)
#else // ENABLE_WPP_TRACE_FILTERING_WITH_WPP_RECORDER
#define WPP_CALL_Vc4Display_cpp183(MSG) \
    WPP_LOG_ALWAYS(WPP_EX_LEVEL_FLAGS(TRACE_LEVEL_ERROR, ROS_TRACING_DEBUG), MSG) \
    WPP_LEVEL_FLAGS_PRE(TRACE_LEVEL_ERROR, ROS_TRACING_DEBUG) \
    WPP_ANNOTATE(Vc4Display_cpp183) \
    (( \
        WPP_RECORDER_CHECK_INIT WPP_RECORDER_LEVEL_FLAGS_FILTER(TRACE_LEVEL_ERROR, ROS_TRACING_DEBUG) \
        ?   WPP_INVOKE_WPP_DEBUG((MSG)), \
            WPP_RECORDER_SF_sD( \
                WPP_RECORDER_LEVEL_FLAGS_ARGS(TRACE_LEVEL_ERROR, ROS_TRACING_DEBUG), \
                17, \
                WPP_LOCAL_TraceGuids+0, __FILE__, __LINE__), \
            1 \
        :   0 \
    )) \
    WPP_LEVEL_FLAGS_POST(TRACE_LEVEL_ERROR, ROS_TRACING_DEBUG)
#endif // ENABLE_WPP_TRACE_FILTERING_WITH_WPP_RECORDER
#else  // ENABLE_WPP_RECORDER
#define WPP_CALL_Vc4Display_cpp183(MSG) \
    WPP_LOG_ALWAYS(WPP_EX_LEVEL_FLAGS(TRACE_LEVEL_ERROR, ROS_TRACING_DEBUG), MSG) \
    WPP_LEVEL_FLAGS_PRE(TRACE_LEVEL_ERROR, ROS_TRACING_DEBUG) \
    WPP_ANNOTATE(Vc4Display_cpp183) \
    (( \
        WPP_CHECK_INIT WPP_LEVEL_FLAGS_ENABLED(TRACE_LEVEL_ERROR, ROS_TRACING_DEBUG) \
        ?   WPP_INVOKE_WPP_DEBUG((MSG)), \
            WPP_SF_sD( \
                WPP_LEVEL_FLAGS_LOGGER(TRACE_LEVEL_ERROR, ROS_TRACING_DEBUG) \
                17, \
                WPP_LOCAL_TraceGuids+0, __FILE__, __LINE__), \
            1 \
        :   0 \
    )) \
    WPP_LEVEL_FLAGS_POST(TRACE_LEVEL_ERROR, ROS_TRACING_DEBUG)
#endif // ENABLE_WPP_RECORDER

// WPP_CALL_Vc4Display_cpp230
#ifndef WPP_LEVEL_FLAGS_PRE
#  define WPP_LEVEL_FLAGS_PRE(LEVEL,FLAGS)
#endif
#ifndef WPP_LEVEL_FLAGS_POST
#  define WPP_LEVEL_FLAGS_POST(LEVEL,FLAGS)
#endif
#if ENABLE_WPP_RECORDER
#if ENABLE_WPP_TRACE_FILTERING_WITH_WPP_RECORDER
#define WPP_CALL_Vc4Display_cpp230(MSG, _a12, _a13) \
    WPP_LOG_ALWAYS(WPP_EX_LEVEL_FLAGS(TRACE_LEVEL_VERBOSE, ROS_TRACING_DEFAULT), MSG, _a12, _a13) \
    WPP_LEVEL_FLAGS_PRE(TRACE_LEVEL_VERBOSE, ROS_TRACING_DEFAULT) \
    do {\
        WPP_ANNOTATE(Vc4Display_cpp230) 0; \
        BOOLEAN wppEnabled = WPP_CHECK_INIT WPP_LEVEL_FLAGS_ENABLED(TRACE_LEVEL_VERBOSE, ROS_TRACING_DEFAULT); \
        BOOLEAN recorderEnabled = WPP_RECORDER_CHECK_INIT WPP_RECORDER_LEVEL_FLAGS_FILTER(TRACE_LEVEL_VERBOSE, ROS_TRACING_DEFAULT); \
        if (wppEnabled || recorderEnabled) { \
            WPP_INVOKE_WPP_DEBUG((MSG, _a12, _a13)); \
            WPP_RECORDER_AND_TRACE_SF_sDqq( \
                     WPP_LEVEL_FLAGS_LOGGER(TRACE_LEVEL_VERBOSE, ROS_TRACING_DEFAULT) \
                     wppEnabled, recorderEnabled, \
                     WPP_RECORDER_LEVEL_FLAGS_ARGS(TRACE_LEVEL_VERBOSE, ROS_TRACING_DEFAULT), \
                     18, \
                     WPP_LOCAL_TraceGuids+0, __FILE__, __LINE__, _a12, _a13);\
        } \
    } \
    while(0) \
    WPP_LEVEL_FLAGS_POST(TRACE_LEVEL_VERBOSE, ROS_TRACING_DEFAULT)
#else // ENABLE_WPP_TRACE_FILTERING_WITH_WPP_RECORDER
#define WPP_CALL_Vc4Display_cpp230(MSG, _a12, _a13) \
    WPP_LOG_ALWAYS(WPP_EX_LEVEL_FLAGS(TRACE_LEVEL_VERBOSE, ROS_TRACING_DEFAULT), MSG, _a12, _a13) \
    WPP_LEVEL_FLAGS_PRE(TRACE_LEVEL_VERBOSE, ROS_TRACING_DEFAULT) \
    WPP_ANNOTATE(Vc4Display_cpp230) \
    (( \
        WPP_RECORDER_CHECK_INIT WPP_RECORDER_LEVEL_FLAGS_FILTER(TRACE_LEVEL_VERBOSE, ROS_TRACING_DEFAULT) \
        ?   WPP_INVOKE_WPP_DEBUG((MSG, _a12, _a13)), \
            WPP_RECORDER_SF_sDqq( \
                WPP_RECORDER_LEVEL_FLAGS_ARGS(TRACE_LEVEL_VERBOSE, ROS_TRACING_DEFAULT), \
                18, \
                WPP_LOCAL_TraceGuids+0, __FILE__, __LINE__, _a12, _a13), \
            1 \
        :   0 \
    )) \
    WPP_LEVEL_FLAGS_POST(TRACE_LEVEL_VERBOSE, ROS_TRACING_DEFAULT)
#endif // ENABLE_WPP_TRACE_FILTERING_WITH_WPP_RECORDER
#else  // ENABLE_WPP_RECORDER
#define WPP_CALL_Vc4Display_cpp230(MSG, _a12, _a13) \
    WPP_LOG_ALWAYS(WPP_EX_LEVEL_FLAGS(TRACE_LEVEL_VERBOSE, ROS_TRACING_DEFAULT), MSG, _a12, _a13) \
    WPP_LEVEL_FLAGS_PRE(TRACE_LEVEL_VERBOSE, ROS_TRACING_DEFAULT) \
    WPP_ANNOTATE(Vc4Display_cpp230) \
    (( \
        WPP_CHECK_INIT WPP_LEVEL_FLAGS_ENABLED(TRACE_LEVEL_VERBOSE, ROS_TRACING_DEFAULT) \
        ?   WPP_INVOKE_WPP_DEBUG((MSG, _a12, _a13)), \
            WPP_SF_sDqq( \
                WPP_LEVEL_FLAGS_LOGGER(TRACE_LEVEL_VERBOSE, ROS_TRACING_DEFAULT) \
                18, \
                WPP_LOCAL_TraceGuids+0, __FILE__, __LINE__, _a12, _a13), \
            1 \
        :   0 \
    )) \
    WPP_LEVEL_FLAGS_POST(TRACE_LEVEL_VERBOSE, ROS_TRACING_DEFAULT)
#endif // ENABLE_WPP_RECORDER

// WPP_CALL_Vc4Display_cpp281
#ifndef WPP_LEVEL_FLAGS_PRE
#  define WPP_LEVEL_FLAGS_PRE(LEVEL,FLAGS)
#endif
#ifndef WPP_LEVEL_FLAGS_POST
#  define WPP_LEVEL_FLAGS_POST(LEVEL,FLAGS)
#endif
#if ENABLE_WPP_RECORDER
#if ENABLE_WPP_TRACE_FILTERING_WITH_WPP_RECORDER
#define WPP_CALL_Vc4Display_cpp281(MSG, _a12, _a13, _a14) \
    WPP_LOG_ALWAYS(WPP_EX_LEVEL_FLAGS(TRACE_LEVEL_WARNING, ROS_TRACING_DEFAULT), MSG, _a12, _a13, _a14) \
    WPP_LEVEL_FLAGS_PRE(TRACE_LEVEL_WARNING, ROS_TRACING_DEFAULT) \
    do {\
        WPP_ANNOTATE(Vc4Display_cpp281) 0; \
        BOOLEAN wppEnabled = WPP_CHECK_INIT WPP_LEVEL_FLAGS_ENABLED(TRACE_LEVEL_WARNING, ROS_TRACING_DEFAULT); \
        BOOLEAN recorderEnabled = WPP_RECORDER_CHECK_INIT WPP_RECORDER_LEVEL_FLAGS_FILTER(TRACE_LEVEL_WARNING, ROS_TRACING_DEFAULT); \
        if (wppEnabled || recorderEnabled) { \
            WPP_INVOKE_WPP_DEBUG((MSG, _a12, _a13, _a14)); \
            WPP_RECORDER_AND_TRACE_SF_sDdqd( \
                     WPP_LEVEL_FLAGS_LOGGER(TRACE_LEVEL_WARNING, ROS_TRACING_DEFAULT) \
                     wppEnabled, recorderEnabled, \
                     WPP_RECORDER_LEVEL_FLAGS_ARGS(TRACE_LEVEL_WARNING, ROS_TRACING_DEFAULT), \
                     19, \
                     WPP_LOCAL_TraceGuids+0, __FILE__, __LINE__, _a12, _a13, _a14);\
        } \
    } \
    while(0) \
    WPP_LEVEL_FLAGS_POST(TRACE_LEVEL_WARNING, ROS_TRACING_DEFAULT)
#else // ENABLE_WPP_TRACE_FILTERING_WITH_WPP_RECORDER
#define WPP_CALL_Vc4Display_cpp281(MSG, _a12, _a13, _a14) \
    WPP_LOG_ALWAYS(WPP_EX_LEVEL_FLAGS(TRACE_LEVEL_WARNING, ROS_TRACING_DEFAULT), MSG, _a12, _a13, _a14) \
    WPP_LEVEL_FLAGS_PRE(TRACE_LEVEL_WARNING, ROS_TRACING_DEFAULT) \
    WPP_ANNOTATE(Vc4Display_cpp281) \
    (( \
        WPP_RECORDER_CHECK_INIT WPP_RECORDER_LEVEL_FLAGS_FILTER(TRACE_LEVEL_WARNING, ROS_TRACING_DEFAULT) \
        ?   WPP_INVOKE_WPP_DEBUG((MSG, _a12, _a13, _a14)), \
            WPP_RECORDER_SF_sDdqd( \
                WPP_RECORDER_LEVEL_FLAGS_ARGS(TRACE_LEVEL_WARNING, ROS_TRACING_DEFAULT), \
                19, \
                WPP_LOCAL_TraceGuids+0, __FILE__, __LINE__, _a12, _a13, _a14), \
            1 \
        :   0 \
    )) \
    WPP_LEVEL_FLAGS_POST(TRACE_LEVEL_WARNING, ROS_TRACING_DEFAULT)
#endif // ENABLE_WPP_TRACE_FILTERING_WITH_WPP_RECORDER
#else  // ENABLE_WPP_RECORDER
#define WPP_CALL_Vc4Display_cpp281(MSG, _a12, _a13, _a14) \
    WPP_LOG_ALWAYS(WPP_EX_LEVEL_FLAGS(TRACE_LEVEL_WARNING, ROS_TRACING_DEFAULT), MSG, _a12, _a13, _a14) \
    WPP_LEVEL_FLAGS_PRE(TRACE_LEVEL_WARNING, ROS_TRACING_DEFAULT) \
    WPP_ANNOTATE(Vc4Display_cpp281) \
    (( \
        WPP_CHECK_INIT WPP_LEVEL_FLAGS_ENABLED(TRACE_LEVEL_WARNING, ROS_TRACING_DEFAULT) \
        ?   WPP_INVOKE_WPP_DEBUG((MSG, _a12, _a13, _a14)), \
            WPP_SF_sDdqd( \
                WPP_LEVEL_FLAGS_LOGGER(TRACE_LEVEL_WARNING, ROS_TRACING_DEFAULT) \
                19, \
                WPP_LOCAL_TraceGuids+0, __FILE__, __LINE__, _a12, _a13, _a14), \
            1 \
        :   0 \
    )) \
    WPP_LEVEL_FLAGS_POST(TRACE_LEVEL_WARNING, ROS_TRACING_DEFAULT)
#endif // ENABLE_WPP_RECORDER

// WPP_CALL_Vc4Display_cpp296
#ifndef WPP_LEVEL_FLAGS_PRE
#  define WPP_LEVEL_FLAGS_PRE(LEVEL,FLAGS)
#endif
#ifndef WPP_LEVEL_FLAGS_POST
#  define WPP_LEVEL_FLAGS_POST(LEVEL,FLAGS)
#endif
#if ENABLE_WPP_RECORDER
#if ENABLE_WPP_TRACE_FILTERING_WITH_WPP_RECORDER
#define WPP_CALL_Vc4Display_cpp296(MSG, _a12, _a13, _a14) \
    WPP_LOG_ALWAYS(WPP_EX_LEVEL_FLAGS(TRACE_LEVEL_WARNING, ROS_TRACING_DEFAULT), MSG, _a12, _a13, _a14) \
    WPP_LEVEL_FLAGS_PRE(TRACE_LEVEL_WARNING, ROS_TRACING_DEFAULT) \
    do {\
        WPP_ANNOTATE(Vc4Display_cpp296) 0; \
        BOOLEAN wppEnabled = WPP_CHECK_INIT WPP_LEVEL_FLAGS_ENABLED(TRACE_LEVEL_WARNING, ROS_TRACING_DEFAULT); \
        BOOLEAN recorderEnabled = WPP_RECORDER_CHECK_INIT WPP_RECORDER_LEVEL_FLAGS_FILTER(TRACE_LEVEL_WARNING, ROS_TRACING_DEFAULT); \
        if (wppEnabled || recorderEnabled) { \
            WPP_INVOKE_WPP_DEBUG((MSG, _a12, _a13, _a14)); \
            WPP_RECORDER_AND_TRACE_SF_sDdqd( \
                     WPP_LEVEL_FLAGS_LOGGER(TRACE_LEVEL_WARNING, ROS_TRACING_DEFAULT) \
                     wppEnabled, recorderEnabled, \
                     WPP_RECORDER_LEVEL_FLAGS_ARGS(TRACE_LEVEL_WARNING, ROS_TRACING_DEFAULT), \
                     20, \
                     WPP_LOCAL_TraceGuids+0, __FILE__, __LINE__, _a12, _a13, _a14);\
        } \
    } \
    while(0) \
    WPP_LEVEL_FLAGS_POST(TRACE_LEVEL_WARNING, ROS_TRACING_DEFAULT)
#else // ENABLE_WPP_TRACE_FILTERING_WITH_WPP_RECORDER
#define WPP_CALL_Vc4Display_cpp296(MSG, _a12, _a13, _a14) \
    WPP_LOG_ALWAYS(WPP_EX_LEVEL_FLAGS(TRACE_LEVEL_WARNING, ROS_TRACING_DEFAULT), MSG, _a12, _a13, _a14) \
    WPP_LEVEL_FLAGS_PRE(TRACE_LEVEL_WARNING, ROS_TRACING_DEFAULT) \
    WPP_ANNOTATE(Vc4Display_cpp296) \
    (( \
        WPP_RECORDER_CHECK_INIT WPP_RECORDER_LEVEL_FLAGS_FILTER(TRACE_LEVEL_WARNING, ROS_TRACING_DEFAULT) \
        ?   WPP_INVOKE_WPP_DEBUG((MSG, _a12, _a13, _a14)), \
            WPP_RECORDER_SF_sDdqd( \
                WPP_RECORDER_LEVEL_FLAGS_ARGS(TRACE_LEVEL_WARNING, ROS_TRACING_DEFAULT), \
                20, \
                WPP_LOCAL_TraceGuids+0, __FILE__, __LINE__, _a12, _a13, _a14), \
            1 \
        :   0 \
    )) \
    WPP_LEVEL_FLAGS_POST(TRACE_LEVEL_WARNING, ROS_TRACING_DEFAULT)
#endif // ENABLE_WPP_TRACE_FILTERING_WITH_WPP_RECORDER
#else  // ENABLE_WPP_RECORDER
#define WPP_CALL_Vc4Display_cpp296(MSG, _a12, _a13, _a14) \
    WPP_LOG_ALWAYS(WPP_EX_LEVEL_FLAGS(TRACE_LEVEL_WARNING, ROS_TRACING_DEFAULT), MSG, _a12, _a13, _a14) \
    WPP_LEVEL_FLAGS_PRE(TRACE_LEVEL_WARNING, ROS_TRACING_DEFAULT) \
    WPP_ANNOTATE(Vc4Display_cpp296) \
    (( \
        WPP_CHECK_INIT WPP_LEVEL_FLAGS_ENABLED(TRACE_LEVEL_WARNING, ROS_TRACING_DEFAULT) \
        ?   WPP_INVOKE_WPP_DEBUG((MSG, _a12, _a13, _a14)), \
            WPP_SF_sDdqd( \
                WPP_LEVEL_FLAGS_LOGGER(TRACE_LEVEL_WARNING, ROS_TRACING_DEFAULT) \
                20, \
                WPP_LOCAL_TraceGuids+0, __FILE__, __LINE__, _a12, _a13, _a14), \
            1 \
        :   0 \
    )) \
    WPP_LEVEL_FLAGS_POST(TRACE_LEVEL_WARNING, ROS_TRACING_DEFAULT)
#endif // ENABLE_WPP_RECORDER

// WPP_CALL_Vc4Display_cpp309
#ifndef WPP_LEVEL_FLAGS_PRE
#  define WPP_LEVEL_FLAGS_PRE(LEVEL,FLAGS)
#endif
#ifndef WPP_LEVEL_FLAGS_POST
#  define WPP_LEVEL_FLAGS_POST(LEVEL,FLAGS)
#endif
#if ENABLE_WPP_RECORDER
#if ENABLE_WPP_TRACE_FILTERING_WITH_WPP_RECORDER
#define WPP_CALL_Vc4Display_cpp309(MSG, _a12, _a13, _a14) \
    WPP_LOG_ALWAYS(WPP_EX_LEVEL_FLAGS(TRACE_LEVEL_VERBOSE, ROS_TRACING_DEFAULT), MSG, _a12, _a13, _a14) \
    WPP_LEVEL_FLAGS_PRE(TRACE_LEVEL_VERBOSE, ROS_TRACING_DEFAULT) \
    do {\
        WPP_ANNOTATE(Vc4Display_cpp309) 0; \
        BOOLEAN wppEnabled = WPP_CHECK_INIT WPP_LEVEL_FLAGS_ENABLED(TRACE_LEVEL_VERBOSE, ROS_TRACING_DEFAULT); \
        BOOLEAN recorderEnabled = WPP_RECORDER_CHECK_INIT WPP_RECORDER_LEVEL_FLAGS_FILTER(TRACE_LEVEL_VERBOSE, ROS_TRACING_DEFAULT); \
        if (wppEnabled || recorderEnabled) { \
            WPP_INVOKE_WPP_DEBUG((MSG, _a12, _a13, _a14)); \
            WPP_RECORDER_AND_TRACE_SF_sDdqd( \
                     WPP_LEVEL_FLAGS_LOGGER(TRACE_LEVEL_VERBOSE, ROS_TRACING_DEFAULT) \
                     wppEnabled, recorderEnabled, \
                     WPP_RECORDER_LEVEL_FLAGS_ARGS(TRACE_LEVEL_VERBOSE, ROS_TRACING_DEFAULT), \
                     21, \
                     WPP_LOCAL_TraceGuids+0, __FILE__, __LINE__, _a12, _a13, _a14);\
        } \
    } \
    while(0) \
    WPP_LEVEL_FLAGS_POST(TRACE_LEVEL_VERBOSE, ROS_TRACING_DEFAULT)
#else // ENABLE_WPP_TRACE_FILTERING_WITH_WPP_RECORDER
#define WPP_CALL_Vc4Display_cpp309(MSG, _a12, _a13, _a14) \
    WPP_LOG_ALWAYS(WPP_EX_LEVEL_FLAGS(TRACE_LEVEL_VERBOSE, ROS_TRACING_DEFAULT), MSG, _a12, _a13, _a14) \
    WPP_LEVEL_FLAGS_PRE(TRACE_LEVEL_VERBOSE, ROS_TRACING_DEFAULT) \
    WPP_ANNOTATE(Vc4Display_cpp309) \
    (( \
        WPP_RECORDER_CHECK_INIT WPP_RECORDER_LEVEL_FLAGS_FILTER(TRACE_LEVEL_VERBOSE, ROS_TRACING_DEFAULT) \
        ?   WPP_INVOKE_WPP_DEBUG((MSG, _a12, _a13, _a14)), \
            WPP_RECORDER_SF_sDdqd( \
                WPP_RECORDER_LEVEL_FLAGS_ARGS(TRACE_LEVEL_VERBOSE, ROS_TRACING_DEFAULT), \
                21, \
                WPP_LOCAL_TraceGuids+0, __FILE__, __LINE__, _a12, _a13, _a14), \
            1 \
        :   0 \
    )) \
    WPP_LEVEL_FLAGS_POST(TRACE_LEVEL_VERBOSE, ROS_TRACING_DEFAULT)
#endif // ENABLE_WPP_TRACE_FILTERING_WITH_WPP_RECORDER
#else  // ENABLE_WPP_RECORDER
#define WPP_CALL_Vc4Display_cpp309(MSG, _a12, _a13, _a14) \
    WPP_LOG_ALWAYS(WPP_EX_LEVEL_FLAGS(TRACE_LEVEL_VERBOSE, ROS_TRACING_DEFAULT), MSG, _a12, _a13, _a14) \
    WPP_LEVEL_FLAGS_PRE(TRACE_LEVEL_VERBOSE, ROS_TRACING_DEFAULT) \
    WPP_ANNOTATE(Vc4Display_cpp309) \
    (( \
        WPP_CHECK_INIT WPP_LEVEL_FLAGS_ENABLED(TRACE_LEVEL_VERBOSE, ROS_TRACING_DEFAULT) \
        ?   WPP_INVOKE_WPP_DEBUG((MSG, _a12, _a13, _a14)), \
            WPP_SF_sDdqd( \
                WPP_LEVEL_FLAGS_LOGGER(TRACE_LEVEL_VERBOSE, ROS_TRACING_DEFAULT) \
                21, \
                WPP_LOCAL_TraceGuids+0, __FILE__, __LINE__, _a12, _a13, _a14), \
            1 \
        :   0 \
    )) \
    WPP_LEVEL_FLAGS_POST(TRACE_LEVEL_VERBOSE, ROS_TRACING_DEFAULT)
#endif // ENABLE_WPP_RECORDER

// WPP_CALL_Vc4Display_cpp325
#ifndef WPP_LEVEL_FLAGS_PRE
#  define WPP_LEVEL_FLAGS_PRE(LEVEL,FLAGS)
#endif
#ifndef WPP_LEVEL_FLAGS_POST
#  define WPP_LEVEL_FLAGS_POST(LEVEL,FLAGS)
#endif
#if ENABLE_WPP_RECORDER
#if ENABLE_WPP_TRACE_FILTERING_WITH_WPP_RECORDER
#define WPP_CALL_Vc4Display_cpp325(MSG, _a12, _a13, _a14, _a15, _a16, _a17) \
    WPP_LOG_ALWAYS(WPP_EX_LEVEL_FLAGS(TRACE_LEVEL_ERROR, ROS_TRACING_DEFAULT), MSG, _a12, _a13, _a14, _a15, _a16, _a17) \
    WPP_LEVEL_FLAGS_PRE(TRACE_LEVEL_ERROR, ROS_TRACING_DEFAULT) \
    do {\
        WPP_ANNOTATE(Vc4Display_cpp325) 0; \
        BOOLEAN wppEnabled = WPP_CHECK_INIT WPP_LEVEL_FLAGS_ENABLED(TRACE_LEVEL_ERROR, ROS_TRACING_DEFAULT); \
        BOOLEAN recorderEnabled = WPP_RECORDER_CHECK_INIT WPP_RECORDER_LEVEL_FLAGS_FILTER(TRACE_LEVEL_ERROR, ROS_TRACING_DEFAULT); \
        if (wppEnabled || recorderEnabled) { \
            WPP_INVOKE_WPP_DEBUG((MSG, _a12, _a13, _a14, _a15, _a16, _a17)); \
            WPP_RECORDER_AND_TRACE_SF_sDqdqqqd( \
                     WPP_LEVEL_FLAGS_LOGGER(TRACE_LEVEL_ERROR, ROS_TRACING_DEFAULT) \
                     wppEnabled, recorderEnabled, \
                     WPP_RECORDER_LEVEL_FLAGS_ARGS(TRACE_LEVEL_ERROR, ROS_TRACING_DEFAULT), \
                     22, \
                     WPP_LOCAL_TraceGuids+0, __FILE__, __LINE__, _a12, _a13, _a14, _a15, _a16, _a17);\
        } \
    } \
    while(0) \
    WPP_LEVEL_FLAGS_POST(TRACE_LEVEL_ERROR, ROS_TRACING_DEFAULT)
#else // ENABLE_WPP_TRACE_FILTERING_WITH_WPP_RECORDER
#define WPP_CALL_Vc4Display_cpp325(MSG, _a12, _a13, _a14, _a15, _a16, _a17) \
    WPP_LOG_ALWAYS(WPP_EX_LEVEL_FLAGS(TRACE_LEVEL_ERROR, ROS_TRACING_DEFAULT), MSG, _a12, _a13, _a14, _a15, _a16, _a17) \
    WPP_LEVEL_FLAGS_PRE(TRACE_LEVEL_ERROR, ROS_TRACING_DEFAULT) \
    WPP_ANNOTATE(Vc4Display_cpp325) \
    (( \
        WPP_RECORDER_CHECK_INIT WPP_RECORDER_LEVEL_FLAGS_FILTER(TRACE_LEVEL_ERROR, ROS_TRACING_DEFAULT) \
        ?   WPP_INVOKE_WPP_DEBUG((MSG, _a12, _a13, _a14, _a15, _a16, _a17)), \
            WPP_RECORDER_SF_sDqdqqqd( \
                WPP_RECORDER_LEVEL_FLAGS_ARGS(TRACE_LEVEL_ERROR, ROS_TRACING_DEFAULT), \
                22, \
                WPP_LOCAL_TraceGuids+0, __FILE__, __LINE__, _a12, _a13, _a14, _a15, _a16, _a17), \
            1 \
        :   0 \
    )) \
    WPP_LEVEL_FLAGS_POST(TRACE_LEVEL_ERROR, ROS_TRACING_DEFAULT)
#endif // ENABLE_WPP_TRACE_FILTERING_WITH_WPP_RECORDER
#else  // ENABLE_WPP_RECORDER
#define WPP_CALL_Vc4Display_cpp325(MSG, _a12, _a13, _a14, _a15, _a16, _a17) \
    WPP_LOG_ALWAYS(WPP_EX_LEVEL_FLAGS(TRACE_LEVEL_ERROR, ROS_TRACING_DEFAULT), MSG, _a12, _a13, _a14, _a15, _a16, _a17) \
    WPP_LEVEL_FLAGS_PRE(TRACE_LEVEL_ERROR, ROS_TRACING_DEFAULT) \
    WPP_ANNOTATE(Vc4Display_cpp325) \
    (( \
        WPP_CHECK_INIT WPP_LEVEL_FLAGS_ENABLED(TRACE_LEVEL_ERROR, ROS_TRACING_DEFAULT) \
        ?   WPP_INVOKE_WPP_DEBUG((MSG, _a12, _a13, _a14, _a15, _a16, _a17)), \
            WPP_SF_sDqdqqqd( \
                WPP_LEVEL_FLAGS_LOGGER(TRACE_LEVEL_ERROR, ROS_TRACING_DEFAULT) \
                22, \
                WPP_LOCAL_TraceGuids+0, __FILE__, __LINE__, _a12, _a13, _a14, _a15, _a16, _a17), \
            1 \
        :   0 \
    )) \
    WPP_LEVEL_FLAGS_POST(TRACE_LEVEL_ERROR, ROS_TRACING_DEFAULT)
#endif // ENABLE_WPP_RECORDER

// WPP_CALL_Vc4Display_cpp337
#ifndef WPP_LEVEL_FLAGS_PRE
#  define WPP_LEVEL_FLAGS_PRE(LEVEL,FLAGS)
#endif
#ifndef WPP_LEVEL_FLAGS_POST
#  define WPP_LEVEL_FLAGS_POST(LEVEL,FLAGS)
#endif
#if ENABLE_WPP_RECORDER
#if ENABLE_WPP_TRACE_FILTERING_WITH_WPP_RECORDER
#define WPP_CALL_Vc4Display_cpp337(MSG, _a12) \
    WPP_LOG_ALWAYS(WPP_EX_LEVEL_FLAGS(TRACE_LEVEL_ERROR, ROS_TRACING_DEFAULT), MSG, _a12) \
    WPP_LEVEL_FLAGS_PRE(TRACE_LEVEL_ERROR, ROS_TRACING_DEFAULT) \
    do {\
        WPP_ANNOTATE(Vc4Display_cpp337) 0; \
        BOOLEAN wppEnabled = WPP_CHECK_INIT WPP_LEVEL_FLAGS_ENABLED(TRACE_LEVEL_ERROR, ROS_TRACING_DEFAULT); \
        BOOLEAN recorderEnabled = WPP_RECORDER_CHECK_INIT WPP_RECORDER_LEVEL_FLAGS_FILTER(TRACE_LEVEL_ERROR, ROS_TRACING_DEFAULT); \
        if (wppEnabled || recorderEnabled) { \
            WPP_INVOKE_WPP_DEBUG((MSG, _a12)); \
            WPP_RECORDER_AND_TRACE_SF_sDq( \
                     WPP_LEVEL_FLAGS_LOGGER(TRACE_LEVEL_ERROR, ROS_TRACING_DEFAULT) \
                     wppEnabled, recorderEnabled, \
                     WPP_RECORDER_LEVEL_FLAGS_ARGS(TRACE_LEVEL_ERROR, ROS_TRACING_DEFAULT), \
                     23, \
                     WPP_LOCAL_TraceGuids+0, __FILE__, __LINE__, _a12);\
        } \
    } \
    while(0) \
    WPP_LEVEL_FLAGS_POST(TRACE_LEVEL_ERROR, ROS_TRACING_DEFAULT)
#else // ENABLE_WPP_TRACE_FILTERING_WITH_WPP_RECORDER
#define WPP_CALL_Vc4Display_cpp337(MSG, _a12) \
    WPP_LOG_ALWAYS(WPP_EX_LEVEL_FLAGS(TRACE_LEVEL_ERROR, ROS_TRACING_DEFAULT), MSG, _a12) \
    WPP_LEVEL_FLAGS_PRE(TRACE_LEVEL_ERROR, ROS_TRACING_DEFAULT) \
    WPP_ANNOTATE(Vc4Display_cpp337) \
    (( \
        WPP_RECORDER_CHECK_INIT WPP_RECORDER_LEVEL_FLAGS_FILTER(TRACE_LEVEL_ERROR, ROS_TRACING_DEFAULT) \
        ?   WPP_INVOKE_WPP_DEBUG((MSG, _a12)), \
            WPP_RECORDER_SF_sDq( \
                WPP_RECORDER_LEVEL_FLAGS_ARGS(TRACE_LEVEL_ERROR, ROS_TRACING_DEFAULT), \
                23, \
                WPP_LOCAL_TraceGuids+0, __FILE__, __LINE__, _a12), \
            1 \
        :   0 \
    )) \
    WPP_LEVEL_FLAGS_POST(TRACE_LEVEL_ERROR, ROS_TRACING_DEFAULT)
#endif // ENABLE_WPP_TRACE_FILTERING_WITH_WPP_RECORDER
#else  // ENABLE_WPP_RECORDER
#define WPP_CALL_Vc4Display_cpp337(MSG, _a12) \
    WPP_LOG_ALWAYS(WPP_EX_LEVEL_FLAGS(TRACE_LEVEL_ERROR, ROS_TRACING_DEFAULT), MSG, _a12) \
    WPP_LEVEL_FLAGS_PRE(TRACE_LEVEL_ERROR, ROS_TRACING_DEFAULT) \
    WPP_ANNOTATE(Vc4Display_cpp337) \
    (( \
        WPP_CHECK_INIT WPP_LEVEL_FLAGS_ENABLED(TRACE_LEVEL_ERROR, ROS_TRACING_DEFAULT) \
        ?   WPP_INVOKE_WPP_DEBUG((MSG, _a12)), \
            WPP_SF_sDq( \
                WPP_LEVEL_FLAGS_LOGGER(TRACE_LEVEL_ERROR, ROS_TRACING_DEFAULT) \
                23, \
                WPP_LOCAL_TraceGuids+0, __FILE__, __LINE__, _a12), \
            1 \
        :   0 \
    )) \
    WPP_LEVEL_FLAGS_POST(TRACE_LEVEL_ERROR, ROS_TRACING_DEFAULT)
#endif // ENABLE_WPP_RECORDER

// WPP_CALL_Vc4Display_cpp344
#ifndef WPP_LEVEL_FLAGS_PRE
#  define WPP_LEVEL_FLAGS_PRE(LEVEL,FLAGS)
#endif
#ifndef WPP_LEVEL_FLAGS_POST
#  define WPP_LEVEL_FLAGS_POST(LEVEL,FLAGS)
#endif
#if ENABLE_WPP_RECORDER
#if ENABLE_WPP_TRACE_FILTERING_WITH_WPP_RECORDER
#define WPP_CALL_Vc4Display_cpp344(MSG, _a12) \
    WPP_LOG_ALWAYS(WPP_EX_LEVEL_FLAGS(TRACE_LEVEL_ERROR, ROS_TRACING_DEFAULT), MSG, _a12) \
    WPP_LEVEL_FLAGS_PRE(TRACE_LEVEL_ERROR, ROS_TRACING_DEFAULT) \
    do {\
        WPP_ANNOTATE(Vc4Display_cpp344) 0; \
        BOOLEAN wppEnabled = WPP_CHECK_INIT WPP_LEVEL_FLAGS_ENABLED(TRACE_LEVEL_ERROR, ROS_TRACING_DEFAULT); \
        BOOLEAN recorderEnabled = WPP_RECORDER_CHECK_INIT WPP_RECORDER_LEVEL_FLAGS_FILTER(TRACE_LEVEL_ERROR, ROS_TRACING_DEFAULT); \
        if (wppEnabled || recorderEnabled) { \
            WPP_INVOKE_WPP_DEBUG((MSG, _a12)); \
            WPP_RECORDER_AND_TRACE_SF_sDq( \
                     WPP_LEVEL_FLAGS_LOGGER(TRACE_LEVEL_ERROR, ROS_TRACING_DEFAULT) \
                     wppEnabled, recorderEnabled, \
                     WPP_RECORDER_LEVEL_FLAGS_ARGS(TRACE_LEVEL_ERROR, ROS_TRACING_DEFAULT), \
                     24, \
                     WPP_LOCAL_TraceGuids+0, __FILE__, __LINE__, _a12);\
        } \
    } \
    while(0) \
    WPP_LEVEL_FLAGS_POST(TRACE_LEVEL_ERROR, ROS_TRACING_DEFAULT)
#else // ENABLE_WPP_TRACE_FILTERING_WITH_WPP_RECORDER
#define WPP_CALL_Vc4Display_cpp344(MSG, _a12) \
    WPP_LOG_ALWAYS(WPP_EX_LEVEL_FLAGS(TRACE_LEVEL_ERROR, ROS_TRACING_DEFAULT), MSG, _a12) \
    WPP_LEVEL_FLAGS_PRE(TRACE_LEVEL_ERROR, ROS_TRACING_DEFAULT) \
    WPP_ANNOTATE(Vc4Display_cpp344) \
    (( \
        WPP_RECORDER_CHECK_INIT WPP_RECORDER_LEVEL_FLAGS_FILTER(TRACE_LEVEL_ERROR, ROS_TRACING_DEFAULT) \
        ?   WPP_INVOKE_WPP_DEBUG((MSG, _a12)), \
            WPP_RECORDER_SF_sDq( \
                WPP_RECORDER_LEVEL_FLAGS_ARGS(TRACE_LEVEL_ERROR, ROS_TRACING_DEFAULT), \
                24, \
                WPP_LOCAL_TraceGuids+0, __FILE__, __LINE__, _a12), \
            1 \
        :   0 \
    )) \
    WPP_LEVEL_FLAGS_POST(TRACE_LEVEL_ERROR, ROS_TRACING_DEFAULT)
#endif // ENABLE_WPP_TRACE_FILTERING_WITH_WPP_RECORDER
#else  // ENABLE_WPP_RECORDER
#define WPP_CALL_Vc4Display_cpp344(MSG, _a12) \
    WPP_LOG_ALWAYS(WPP_EX_LEVEL_FLAGS(TRACE_LEVEL_ERROR, ROS_TRACING_DEFAULT), MSG, _a12) \
    WPP_LEVEL_FLAGS_PRE(TRACE_LEVEL_ERROR, ROS_TRACING_DEFAULT) \
    WPP_ANNOTATE(Vc4Display_cpp344) \
    (( \
        WPP_CHECK_INIT WPP_LEVEL_FLAGS_ENABLED(TRACE_LEVEL_ERROR, ROS_TRACING_DEFAULT) \
        ?   WPP_INVOKE_WPP_DEBUG((MSG, _a12)), \
            WPP_SF_sDq( \
                WPP_LEVEL_FLAGS_LOGGER(TRACE_LEVEL_ERROR, ROS_TRACING_DEFAULT) \
                24, \
                WPP_LOCAL_TraceGuids+0, __FILE__, __LINE__, _a12), \
            1 \
        :   0 \
    )) \
    WPP_LEVEL_FLAGS_POST(TRACE_LEVEL_ERROR, ROS_TRACING_DEFAULT)
#endif // ENABLE_WPP_RECORDER

// WPP_CALL_Vc4Display_cpp366
#ifndef WPP_LEVEL_FLAGS_PRE
#  define WPP_LEVEL_FLAGS_PRE(LEVEL,FLAGS)
#endif
#ifndef WPP_LEVEL_FLAGS_POST
#  define WPP_LEVEL_FLAGS_POST(LEVEL,FLAGS)
#endif
#if ENABLE_WPP_RECORDER
#if ENABLE_WPP_TRACE_FILTERING_WITH_WPP_RECORDER
#define WPP_CALL_Vc4Display_cpp366(MSG, _a12, _a13, _a14) \
    WPP_LOG_ALWAYS(WPP_EX_LEVEL_FLAGS(TRACE_LEVEL_ERROR, ROS_TRACING_DEFAULT), MSG, _a12, _a13, _a14) \
    WPP_LEVEL_FLAGS_PRE(TRACE_LEVEL_ERROR, ROS_TRACING_DEFAULT) \
    do {\
        WPP_ANNOTATE(Vc4Display_cpp366) 0; \
        BOOLEAN wppEnabled = WPP_CHECK_INIT WPP_LEVEL_FLAGS_ENABLED(TRACE_LEVEL_ERROR, ROS_TRACING_DEFAULT); \
        BOOLEAN recorderEnabled = WPP_RECORDER_CHECK_INIT WPP_RECORDER_LEVEL_FLAGS_FILTER(TRACE_LEVEL_ERROR, ROS_TRACING_DEFAULT); \
        if (wppEnabled || recorderEnabled) { \
            WPP_INVOKE_WPP_DEBUG((MSG, _a12, _a13, _a14)); \
            WPP_RECORDER_AND_TRACE_SF_sDdid( \
                     WPP_LEVEL_FLAGS_LOGGER(TRACE_LEVEL_ERROR, ROS_TRACING_DEFAULT) \
                     wppEnabled, recorderEnabled, \
                     WPP_RECORDER_LEVEL_FLAGS_ARGS(TRACE_LEVEL_ERROR, ROS_TRACING_DEFAULT), \
                     25, \
                     WPP_LOCAL_TraceGuids+0, __FILE__, __LINE__, _a12, _a13, _a14);\
        } \
    } \
    while(0) \
    WPP_LEVEL_FLAGS_POST(TRACE_LEVEL_ERROR, ROS_TRACING_DEFAULT)
#else // ENABLE_WPP_TRACE_FILTERING_WITH_WPP_RECORDER
#define WPP_CALL_Vc4Display_cpp366(MSG, _a12, _a13, _a14) \
    WPP_LOG_ALWAYS(WPP_EX_LEVEL_FLAGS(TRACE_LEVEL_ERROR, ROS_TRACING_DEFAULT), MSG, _a12, _a13, _a14) \
    WPP_LEVEL_FLAGS_PRE(TRACE_LEVEL_ERROR, ROS_TRACING_DEFAULT) \
    WPP_ANNOTATE(Vc4Display_cpp366) \
    (( \
        WPP_RECORDER_CHECK_INIT WPP_RECORDER_LEVEL_FLAGS_FILTER(TRACE_LEVEL_ERROR, ROS_TRACING_DEFAULT) \
        ?   WPP_INVOKE_WPP_DEBUG((MSG, _a12, _a13, _a14)), \
            WPP_RECORDER_SF_sDdid( \
                WPP_RECORDER_LEVEL_FLAGS_ARGS(TRACE_LEVEL_ERROR, ROS_TRACING_DEFAULT), \
                25, \
                WPP_LOCAL_TraceGuids+0, __FILE__, __LINE__, _a12, _a13, _a14), \
            1 \
        :   0 \
    )) \
    WPP_LEVEL_FLAGS_POST(TRACE_LEVEL_ERROR, ROS_TRACING_DEFAULT)
#endif // ENABLE_WPP_TRACE_FILTERING_WITH_WPP_RECORDER
#else  // ENABLE_WPP_RECORDER
#define WPP_CALL_Vc4Display_cpp366(MSG, _a12, _a13, _a14) \
    WPP_LOG_ALWAYS(WPP_EX_LEVEL_FLAGS(TRACE_LEVEL_ERROR, ROS_TRACING_DEFAULT), MSG, _a12, _a13, _a14) \
    WPP_LEVEL_FLAGS_PRE(TRACE_LEVEL_ERROR, ROS_TRACING_DEFAULT) \
    WPP_ANNOTATE(Vc4Display_cpp366) \
    (( \
        WPP_CHECK_INIT WPP_LEVEL_FLAGS_ENABLED(TRACE_LEVEL_ERROR, ROS_TRACING_DEFAULT) \
        ?   WPP_INVOKE_WPP_DEBUG((MSG, _a12, _a13, _a14)), \
            WPP_SF_sDdid( \
                WPP_LEVEL_FLAGS_LOGGER(TRACE_LEVEL_ERROR, ROS_TRACING_DEFAULT) \
                25, \
                WPP_LOCAL_TraceGuids+0, __FILE__, __LINE__, _a12, _a13, _a14), \
            1 \
        :   0 \
    )) \
    WPP_LEVEL_FLAGS_POST(TRACE_LEVEL_ERROR, ROS_TRACING_DEFAULT)
#endif // ENABLE_WPP_RECORDER

// WPP_CALL_Vc4Display_cpp397
#ifndef WPP_LEVEL_FLAGS_PRE
#  define WPP_LEVEL_FLAGS_PRE(LEVEL,FLAGS)
#endif
#ifndef WPP_LEVEL_FLAGS_POST
#  define WPP_LEVEL_FLAGS_POST(LEVEL,FLAGS)
#endif
#if ENABLE_WPP_RECORDER
#if ENABLE_WPP_TRACE_FILTERING_WITH_WPP_RECORDER
#define WPP_CALL_Vc4Display_cpp397(MSG, _a12, _a13, _a14) \
    WPP_LOG_ALWAYS(WPP_EX_LEVEL_FLAGS(TRACE_LEVEL_ERROR, ROS_TRACING_DEFAULT), MSG, _a12, _a13, _a14) \
    WPP_LEVEL_FLAGS_PRE(TRACE_LEVEL_ERROR, ROS_TRACING_DEFAULT) \
    do {\
        WPP_ANNOTATE(Vc4Display_cpp397) 0; \
        BOOLEAN wppEnabled = WPP_CHECK_INIT WPP_LEVEL_FLAGS_ENABLED(TRACE_LEVEL_ERROR, ROS_TRACING_DEFAULT); \
        BOOLEAN recorderEnabled = WPP_RECORDER_CHECK_INIT WPP_RECORDER_LEVEL_FLAGS_FILTER(TRACE_LEVEL_ERROR, ROS_TRACING_DEFAULT); \
        if (wppEnabled || recorderEnabled) { \
            WPP_INVOKE_WPP_DEBUG((MSG, _a12, _a13, _a14)); \
            WPP_RECORDER_AND_TRACE_SF_sDdid( \
                     WPP_LEVEL_FLAGS_LOGGER(TRACE_LEVEL_ERROR, ROS_TRACING_DEFAULT) \
                     wppEnabled, recorderEnabled, \
                     WPP_RECORDER_LEVEL_FLAGS_ARGS(TRACE_LEVEL_ERROR, ROS_TRACING_DEFAULT), \
                     26, \
                     WPP_LOCAL_TraceGuids+0, __FILE__, __LINE__, _a12, _a13, _a14);\
        } \
    } \
    while(0) \
    WPP_LEVEL_FLAGS_POST(TRACE_LEVEL_ERROR, ROS_TRACING_DEFAULT)
#else // ENABLE_WPP_TRACE_FILTERING_WITH_WPP_RECORDER
#define WPP_CALL_Vc4Display_cpp397(MSG, _a12, _a13, _a14) \
    WPP_LOG_ALWAYS(WPP_EX_LEVEL_FLAGS(TRACE_LEVEL_ERROR, ROS_TRACING_DEFAULT), MSG, _a12, _a13, _a14) \
    WPP_LEVEL_FLAGS_PRE(TRACE_LEVEL_ERROR, ROS_TRACING_DEFAULT) \
    WPP_ANNOTATE(Vc4Display_cpp397) \
    (( \
        WPP_RECORDER_CHECK_INIT WPP_RECORDER_LEVEL_FLAGS_FILTER(TRACE_LEVEL_ERROR, ROS_TRACING_DEFAULT) \
        ?   WPP_INVOKE_WPP_DEBUG((MSG, _a12, _a13, _a14)), \
            WPP_RECORDER_SF_sDdid( \
                WPP_RECORDER_LEVEL_FLAGS_ARGS(TRACE_LEVEL_ERROR, ROS_TRACING_DEFAULT), \
                26, \
                WPP_LOCAL_TraceGuids+0, __FILE__, __LINE__, _a12, _a13, _a14), \
            1 \
        :   0 \
    )) \
    WPP_LEVEL_FLAGS_POST(TRACE_LEVEL_ERROR, ROS_TRACING_DEFAULT)
#endif // ENABLE_WPP_TRACE_FILTERING_WITH_WPP_RECORDER
#else  // ENABLE_WPP_RECORDER
#define WPP_CALL_Vc4Display_cpp397(MSG, _a12, _a13, _a14) \
    WPP_LOG_ALWAYS(WPP_EX_LEVEL_FLAGS(TRACE_LEVEL_ERROR, ROS_TRACING_DEFAULT), MSG, _a12, _a13, _a14) \
    WPP_LEVEL_FLAGS_PRE(TRACE_LEVEL_ERROR, ROS_TRACING_DEFAULT) \
    WPP_ANNOTATE(Vc4Display_cpp397) \
    (( \
        WPP_CHECK_INIT WPP_LEVEL_FLAGS_ENABLED(TRACE_LEVEL_ERROR, ROS_TRACING_DEFAULT) \
        ?   WPP_INVOKE_WPP_DEBUG((MSG, _a12, _a13, _a14)), \
            WPP_SF_sDdid( \
                WPP_LEVEL_FLAGS_LOGGER(TRACE_LEVEL_ERROR, ROS_TRACING_DEFAULT) \
                26, \
                WPP_LOCAL_TraceGuids+0, __FILE__, __LINE__, _a12, _a13, _a14), \
            1 \
        :   0 \
    )) \
    WPP_LEVEL_FLAGS_POST(TRACE_LEVEL_ERROR, ROS_TRACING_DEFAULT)
#endif // ENABLE_WPP_RECORDER

// WPP_CALL_Vc4Display_cpp419
#ifndef WPP_LEVEL_FLAGS_PRE
#  define WPP_LEVEL_FLAGS_PRE(LEVEL,FLAGS)
#endif
#ifndef WPP_LEVEL_FLAGS_POST
#  define WPP_LEVEL_FLAGS_POST(LEVEL,FLAGS)
#endif
#if ENABLE_WPP_RECORDER
#if ENABLE_WPP_TRACE_FILTERING_WITH_WPP_RECORDER
#define WPP_CALL_Vc4Display_cpp419(MSG) \
    WPP_LOG_ALWAYS(WPP_EX_LEVEL_FLAGS(TRACE_LEVEL_ERROR, ROS_TRACING_DEFAULT), MSG) \
    WPP_LEVEL_FLAGS_PRE(TRACE_LEVEL_ERROR, ROS_TRACING_DEFAULT) \
    do {\
        WPP_ANNOTATE(Vc4Display_cpp419) 0; \
        BOOLEAN wppEnabled = WPP_CHECK_INIT WPP_LEVEL_FLAGS_ENABLED(TRACE_LEVEL_ERROR, ROS_TRACING_DEFAULT); \
        BOOLEAN recorderEnabled = WPP_RECORDER_CHECK_INIT WPP_RECORDER_LEVEL_FLAGS_FILTER(TRACE_LEVEL_ERROR, ROS_TRACING_DEFAULT); \
        if (wppEnabled || recorderEnabled) { \
            WPP_INVOKE_WPP_DEBUG((MSG)); \
            WPP_RECORDER_AND_TRACE_SF_sD( \
                     WPP_LEVEL_FLAGS_LOGGER(TRACE_LEVEL_ERROR, ROS_TRACING_DEFAULT) \
                     wppEnabled, recorderEnabled, \
                     WPP_RECORDER_LEVEL_FLAGS_ARGS(TRACE_LEVEL_ERROR, ROS_TRACING_DEFAULT), \
                     27, \
                     WPP_LOCAL_TraceGuids+0, __FILE__, __LINE__);\
        } \
    } \
    while(0) \
    WPP_LEVEL_FLAGS_POST(TRACE_LEVEL_ERROR, ROS_TRACING_DEFAULT)
#else // ENABLE_WPP_TRACE_FILTERING_WITH_WPP_RECORDER
#define WPP_CALL_Vc4Display_cpp419(MSG) \
    WPP_LOG_ALWAYS(WPP_EX_LEVEL_FLAGS(TRACE_LEVEL_ERROR, ROS_TRACING_DEFAULT), MSG) \
    WPP_LEVEL_FLAGS_PRE(TRACE_LEVEL_ERROR, ROS_TRACING_DEFAULT) \
    WPP_ANNOTATE(Vc4Display_cpp419) \
    (( \
        WPP_RECORDER_CHECK_INIT WPP_RECORDER_LEVEL_FLAGS_FILTER(TRACE_LEVEL_ERROR, ROS_TRACING_DEFAULT) \
        ?   WPP_INVOKE_WPP_DEBUG((MSG)), \
            WPP_RECORDER_SF_sD( \
                WPP_RECORDER_LEVEL_FLAGS_ARGS(TRACE_LEVEL_ERROR, ROS_TRACING_DEFAULT), \
                27, \
                WPP_LOCAL_TraceGuids+0, __FILE__, __LINE__), \
            1 \
        :   0 \
    )) \
    WPP_LEVEL_FLAGS_POST(TRACE_LEVEL_ERROR, ROS_TRACING_DEFAULT)
#endif // ENABLE_WPP_TRACE_FILTERING_WITH_WPP_RECORDER
#else  // ENABLE_WPP_RECORDER
#define WPP_CALL_Vc4Display_cpp419(MSG) \
    WPP_LOG_ALWAYS(WPP_EX_LEVEL_FLAGS(TRACE_LEVEL_ERROR, ROS_TRACING_DEFAULT), MSG) \
    WPP_LEVEL_FLAGS_PRE(TRACE_LEVEL_ERROR, ROS_TRACING_DEFAULT) \
    WPP_ANNOTATE(Vc4Display_cpp419) \
    (( \
        WPP_CHECK_INIT WPP_LEVEL_FLAGS_ENABLED(TRACE_LEVEL_ERROR, ROS_TRACING_DEFAULT) \
        ?   WPP_INVOKE_WPP_DEBUG((MSG)), \
            WPP_SF_sD( \
                WPP_LEVEL_FLAGS_LOGGER(TRACE_LEVEL_ERROR, ROS_TRACING_DEFAULT) \
                27, \
                WPP_LOCAL_TraceGuids+0, __FILE__, __LINE__), \
            1 \
        :   0 \
    )) \
    WPP_LEVEL_FLAGS_POST(TRACE_LEVEL_ERROR, ROS_TRACING_DEFAULT)
#endif // ENABLE_WPP_RECORDER

// WPP_CALL_Vc4Display_cpp435
#ifndef WPP_LEVEL_FLAGS_PRE
#  define WPP_LEVEL_FLAGS_PRE(LEVEL,FLAGS)
#endif
#ifndef WPP_LEVEL_FLAGS_POST
#  define WPP_LEVEL_FLAGS_POST(LEVEL,FLAGS)
#endif
#if ENABLE_WPP_RECORDER
#if ENABLE_WPP_TRACE_FILTERING_WITH_WPP_RECORDER
#define WPP_CALL_Vc4Display_cpp435(MSG, _a12, _a13) \
    WPP_LOG_ALWAYS(WPP_EX_LEVEL_FLAGS(TRACE_LEVEL_ERROR, ROS_TRACING_DEBUG), MSG, _a12, _a13) \
    WPP_LEVEL_FLAGS_PRE(TRACE_LEVEL_ERROR, ROS_TRACING_DEBUG) \
    do {\
        WPP_ANNOTATE(Vc4Display_cpp435) 0; \
        BOOLEAN wppEnabled = WPP_CHECK_INIT WPP_LEVEL_FLAGS_ENABLED(TRACE_LEVEL_ERROR, ROS_TRACING_DEBUG); \
        BOOLEAN recorderEnabled = WPP_RECORDER_CHECK_INIT WPP_RECORDER_LEVEL_FLAGS_FILTER(TRACE_LEVEL_ERROR, ROS_TRACING_DEBUG); \
        if (wppEnabled || recorderEnabled) { \
            WPP_INVOKE_WPP_DEBUG((MSG, _a12, _a13)); \
            WPP_RECORDER_AND_TRACE_SF_sDDD( \
                     WPP_LEVEL_FLAGS_LOGGER(TRACE_LEVEL_ERROR, ROS_TRACING_DEBUG) \
                     wppEnabled, recorderEnabled, \
                     WPP_RECORDER_LEVEL_FLAGS_ARGS(TRACE_LEVEL_ERROR, ROS_TRACING_DEBUG), \
                     28, \
                     WPP_LOCAL_TraceGuids+0, __FILE__, __LINE__, _a12, _a13);\
        } \
    } \
    while(0) \
    WPP_LEVEL_FLAGS_POST(TRACE_LEVEL_ERROR, ROS_TRACING_DEBUG)
#else // ENABLE_WPP_TRACE_FILTERING_WITH_WPP_RECORDER
#define WPP_CALL_Vc4Display_cpp435(MSG, _a12, _a13) \
    WPP_LOG_ALWAYS(WPP_EX_LEVEL_FLAGS(TRACE_LEVEL_ERROR, ROS_TRACING_DEBUG), MSG, _a12, _a13) \
    WPP_LEVEL_FLAGS_PRE(TRACE_LEVEL_ERROR, ROS_TRACING_DEBUG) \
    WPP_ANNOTATE(Vc4Display_cpp435) \
    (( \
        WPP_RECORDER_CHECK_INIT WPP_RECORDER_LEVEL_FLAGS_FILTER(TRACE_LEVEL_ERROR, ROS_TRACING_DEBUG) \
        ?   WPP_INVOKE_WPP_DEBUG((MSG, _a12, _a13)), \
            WPP_RECORDER_SF_sDDD( \
                WPP_RECORDER_LEVEL_FLAGS_ARGS(TRACE_LEVEL_ERROR, ROS_TRACING_DEBUG), \
                28, \
                WPP_LOCAL_TraceGuids+0, __FILE__, __LINE__, _a12, _a13), \
            1 \
        :   0 \
    )) \
    WPP_LEVEL_FLAGS_POST(TRACE_LEVEL_ERROR, ROS_TRACING_DEBUG)
#endif // ENABLE_WPP_TRACE_FILTERING_WITH_WPP_RECORDER
#else  // ENABLE_WPP_RECORDER
#define WPP_CALL_Vc4Display_cpp435(MSG, _a12, _a13) \
    WPP_LOG_ALWAYS(WPP_EX_LEVEL_FLAGS(TRACE_LEVEL_ERROR, ROS_TRACING_DEBUG), MSG, _a12, _a13) \
    WPP_LEVEL_FLAGS_PRE(TRACE_LEVEL_ERROR, ROS_TRACING_DEBUG) \
    WPP_ANNOTATE(Vc4Display_cpp435) \
    (( \
        WPP_CHECK_INIT WPP_LEVEL_FLAGS_ENABLED(TRACE_LEVEL_ERROR, ROS_TRACING_DEBUG) \
        ?   WPP_INVOKE_WPP_DEBUG((MSG, _a12, _a13)), \
            WPP_SF_sDDD( \
                WPP_LEVEL_FLAGS_LOGGER(TRACE_LEVEL_ERROR, ROS_TRACING_DEBUG) \
                28, \
                WPP_LOCAL_TraceGuids+0, __FILE__, __LINE__, _a12, _a13), \
            1 \
        :   0 \
    )) \
    WPP_LEVEL_FLAGS_POST(TRACE_LEVEL_ERROR, ROS_TRACING_DEBUG)
#endif // ENABLE_WPP_RECORDER

// WPP_CALL_Vc4Display_cpp449
#ifndef WPP_LEVEL_FLAGS_PRE
#  define WPP_LEVEL_FLAGS_PRE(LEVEL,FLAGS)
#endif
#ifndef WPP_LEVEL_FLAGS_POST
#  define WPP_LEVEL_FLAGS_POST(LEVEL,FLAGS)
#endif
#if ENABLE_WPP_RECORDER
#if ENABLE_WPP_TRACE_FILTERING_WITH_WPP_RECORDER
#define WPP_CALL_Vc4Display_cpp449(MSG, _a12, _a13, _a14) \
    WPP_LOG_ALWAYS(WPP_EX_LEVEL_FLAGS(TRACE_LEVEL_ERROR, ROS_TRACING_DEFAULT), MSG, _a12, _a13, _a14) \
    WPP_LEVEL_FLAGS_PRE(TRACE_LEVEL_ERROR, ROS_TRACING_DEFAULT) \
    do {\
        WPP_ANNOTATE(Vc4Display_cpp449) 0; \
        BOOLEAN wppEnabled = WPP_CHECK_INIT WPP_LEVEL_FLAGS_ENABLED(TRACE_LEVEL_ERROR, ROS_TRACING_DEFAULT); \
        BOOLEAN recorderEnabled = WPP_RECORDER_CHECK_INIT WPP_RECORDER_LEVEL_FLAGS_FILTER(TRACE_LEVEL_ERROR, ROS_TRACING_DEFAULT); \
        if (wppEnabled || recorderEnabled) { \
            WPP_INVOKE_WPP_DEBUG((MSG, _a12, _a13, _a14)); \
            WPP_RECORDER_AND_TRACE_SF_sDDDD( \
                     WPP_LEVEL_FLAGS_LOGGER(TRACE_LEVEL_ERROR, ROS_TRACING_DEFAULT) \
                     wppEnabled, recorderEnabled, \
                     WPP_RECORDER_LEVEL_FLAGS_ARGS(TRACE_LEVEL_ERROR, ROS_TRACING_DEFAULT), \
                     29, \
                     WPP_LOCAL_TraceGuids+0, __FILE__, __LINE__, _a12, _a13, _a14);\
        } \
    } \
    while(0) \
    WPP_LEVEL_FLAGS_POST(TRACE_LEVEL_ERROR, ROS_TRACING_DEFAULT)
#else // ENABLE_WPP_TRACE_FILTERING_WITH_WPP_RECORDER
#define WPP_CALL_Vc4Display_cpp449(MSG, _a12, _a13, _a14) \
    WPP_LOG_ALWAYS(WPP_EX_LEVEL_FLAGS(TRACE_LEVEL_ERROR, ROS_TRACING_DEFAULT), MSG, _a12, _a13, _a14) \
    WPP_LEVEL_FLAGS_PRE(TRACE_LEVEL_ERROR, ROS_TRACING_DEFAULT) \
    WPP_ANNOTATE(Vc4Display_cpp449) \
    (( \
        WPP_RECORDER_CHECK_INIT WPP_RECORDER_LEVEL_FLAGS_FILTER(TRACE_LEVEL_ERROR, ROS_TRACING_DEFAULT) \
        ?   WPP_INVOKE_WPP_DEBUG((MSG, _a12, _a13, _a14)), \
            WPP_RECORDER_SF_sDDDD( \
                WPP_RECORDER_LEVEL_FLAGS_ARGS(TRACE_LEVEL_ERROR, ROS_TRACING_DEFAULT), \
                29, \
                WPP_LOCAL_TraceGuids+0, __FILE__, __LINE__, _a12, _a13, _a14), \
            1 \
        :   0 \
    )) \
    WPP_LEVEL_FLAGS_POST(TRACE_LEVEL_ERROR, ROS_TRACING_DEFAULT)
#endif // ENABLE_WPP_TRACE_FILTERING_WITH_WPP_RECORDER
#else  // ENABLE_WPP_RECORDER
#define WPP_CALL_Vc4Display_cpp449(MSG, _a12, _a13, _a14) \
    WPP_LOG_ALWAYS(WPP_EX_LEVEL_FLAGS(TRACE_LEVEL_ERROR, ROS_TRACING_DEFAULT), MSG, _a12, _a13, _a14) \
    WPP_LEVEL_FLAGS_PRE(TRACE_LEVEL_ERROR, ROS_TRACING_DEFAULT) \
    WPP_ANNOTATE(Vc4Display_cpp449) \
    (( \
        WPP_CHECK_INIT WPP_LEVEL_FLAGS_ENABLED(TRACE_LEVEL_ERROR, ROS_TRACING_DEFAULT) \
        ?   WPP_INVOKE_WPP_DEBUG((MSG, _a12, _a13, _a14)), \
            WPP_SF_sDDDD( \
                WPP_LEVEL_FLAGS_LOGGER(TRACE_LEVEL_ERROR, ROS_TRACING_DEFAULT) \
                29, \
                WPP_LOCAL_TraceGuids+0, __FILE__, __LINE__, _a12, _a13, _a14), \
            1 \
        :   0 \
    )) \
    WPP_LEVEL_FLAGS_POST(TRACE_LEVEL_ERROR, ROS_TRACING_DEFAULT)
#endif // ENABLE_WPP_RECORDER

// WPP_CALL_Vc4Display_cpp464
#ifndef WPP_LEVEL_FLAGS_PRE
#  define WPP_LEVEL_FLAGS_PRE(LEVEL,FLAGS)
#endif
#ifndef WPP_LEVEL_FLAGS_POST
#  define WPP_LEVEL_FLAGS_POST(LEVEL,FLAGS)
#endif
#if ENABLE_WPP_RECORDER
#if ENABLE_WPP_TRACE_FILTERING_WITH_WPP_RECORDER
#define WPP_CALL_Vc4Display_cpp464(MSG, _a12, _a13) \
    WPP_LOG_ALWAYS(WPP_EX_LEVEL_FLAGS(TRACE_LEVEL_ERROR, ROS_TRACING_DEFAULT), MSG, _a12, _a13) \
    WPP_LEVEL_FLAGS_PRE(TRACE_LEVEL_ERROR, ROS_TRACING_DEFAULT) \
    do {\
        WPP_ANNOTATE(Vc4Display_cpp464) 0; \
        BOOLEAN wppEnabled = WPP_CHECK_INIT WPP_LEVEL_FLAGS_ENABLED(TRACE_LEVEL_ERROR, ROS_TRACING_DEFAULT); \
        BOOLEAN recorderEnabled = WPP_RECORDER_CHECK_INIT WPP_RECORDER_LEVEL_FLAGS_FILTER(TRACE_LEVEL_ERROR, ROS_TRACING_DEFAULT); \
        if (wppEnabled || recorderEnabled) { \
            WPP_INVOKE_WPP_DEBUG((MSG, _a12, _a13)); \
            WPP_RECORDER_AND_TRACE_SF_sDDq( \
                     WPP_LEVEL_FLAGS_LOGGER(TRACE_LEVEL_ERROR, ROS_TRACING_DEFAULT) \
                     wppEnabled, recorderEnabled, \
                     WPP_RECORDER_LEVEL_FLAGS_ARGS(TRACE_LEVEL_ERROR, ROS_TRACING_DEFAULT), \
                     30, \
                     WPP_LOCAL_TraceGuids+0, __FILE__, __LINE__, _a12, _a13);\
        } \
    } \
    while(0) \
    WPP_LEVEL_FLAGS_POST(TRACE_LEVEL_ERROR, ROS_TRACING_DEFAULT)
#else // ENABLE_WPP_TRACE_FILTERING_WITH_WPP_RECORDER
#define WPP_CALL_Vc4Display_cpp464(MSG, _a12, _a13) \
    WPP_LOG_ALWAYS(WPP_EX_LEVEL_FLAGS(TRACE_LEVEL_ERROR, ROS_TRACING_DEFAULT), MSG, _a12, _a13) \
    WPP_LEVEL_FLAGS_PRE(TRACE_LEVEL_ERROR, ROS_TRACING_DEFAULT) \
    WPP_ANNOTATE(Vc4Display_cpp464) \
    (( \
        WPP_RECORDER_CHECK_INIT WPP_RECORDER_LEVEL_FLAGS_FILTER(TRACE_LEVEL_ERROR, ROS_TRACING_DEFAULT) \
        ?   WPP_INVOKE_WPP_DEBUG((MSG, _a12, _a13)), \
            WPP_RECORDER_SF_sDDq( \
                WPP_RECORDER_LEVEL_FLAGS_ARGS(TRACE_LEVEL_ERROR, ROS_TRACING_DEFAULT), \
                30, \
                WPP_LOCAL_TraceGuids+0, __FILE__, __LINE__, _a12, _a13), \
            1 \
        :   0 \
    )) \
    WPP_LEVEL_FLAGS_POST(TRACE_LEVEL_ERROR, ROS_TRACING_DEFAULT)
#endif // ENABLE_WPP_TRACE_FILTERING_WITH_WPP_RECORDER
#else  // ENABLE_WPP_RECORDER
#define WPP_CALL_Vc4Display_cpp464(MSG, _a12, _a13) \
    WPP_LOG_ALWAYS(WPP_EX_LEVEL_FLAGS(TRACE_LEVEL_ERROR, ROS_TRACING_DEFAULT), MSG, _a12, _a13) \
    WPP_LEVEL_FLAGS_PRE(TRACE_LEVEL_ERROR, ROS_TRACING_DEFAULT) \
    WPP_ANNOTATE(Vc4Display_cpp464) \
    (( \
        WPP_CHECK_INIT WPP_LEVEL_FLAGS_ENABLED(TRACE_LEVEL_ERROR, ROS_TRACING_DEFAULT) \
        ?   WPP_INVOKE_WPP_DEBUG((MSG, _a12, _a13)), \
            WPP_SF_sDDq( \
                WPP_LEVEL_FLAGS_LOGGER(TRACE_LEVEL_ERROR, ROS_TRACING_DEFAULT) \
                30, \
                WPP_LOCAL_TraceGuids+0, __FILE__, __LINE__, _a12, _a13), \
            1 \
        :   0 \
    )) \
    WPP_LEVEL_FLAGS_POST(TRACE_LEVEL_ERROR, ROS_TRACING_DEFAULT)
#endif // ENABLE_WPP_RECORDER

// WPP_CALL_Vc4Display_cpp483
#ifndef WPP_LEVEL_FLAGS_PRE
#  define WPP_LEVEL_FLAGS_PRE(LEVEL,FLAGS)
#endif
#ifndef WPP_LEVEL_FLAGS_POST
#  define WPP_LEVEL_FLAGS_POST(LEVEL,FLAGS)
#endif
#if ENABLE_WPP_RECORDER
#if ENABLE_WPP_TRACE_FILTERING_WITH_WPP_RECORDER
#define WPP_CALL_Vc4Display_cpp483(MSG, _a12) \
    WPP_LOG_ALWAYS(WPP_EX_LEVEL_FLAGS(TRACE_LEVEL_ERROR, ROS_TRACING_DEFAULT), MSG, _a12) \
    WPP_LEVEL_FLAGS_PRE(TRACE_LEVEL_ERROR, ROS_TRACING_DEFAULT) \
    do {\
        WPP_ANNOTATE(Vc4Display_cpp483) 0; \
        BOOLEAN wppEnabled = WPP_CHECK_INIT WPP_LEVEL_FLAGS_ENABLED(TRACE_LEVEL_ERROR, ROS_TRACING_DEFAULT); \
        BOOLEAN recorderEnabled = WPP_RECORDER_CHECK_INIT WPP_RECORDER_LEVEL_FLAGS_FILTER(TRACE_LEVEL_ERROR, ROS_TRACING_DEFAULT); \
        if (wppEnabled || recorderEnabled) { \
            WPP_INVOKE_WPP_DEBUG((MSG, _a12)); \
            WPP_RECORDER_AND_TRACE_SF_sDd( \
                     WPP_LEVEL_FLAGS_LOGGER(TRACE_LEVEL_ERROR, ROS_TRACING_DEFAULT) \
                     wppEnabled, recorderEnabled, \
                     WPP_RECORDER_LEVEL_FLAGS_ARGS(TRACE_LEVEL_ERROR, ROS_TRACING_DEFAULT), \
                     31, \
                     WPP_LOCAL_TraceGuids+0, __FILE__, __LINE__, _a12);\
        } \
    } \
    while(0) \
    WPP_LEVEL_FLAGS_POST(TRACE_LEVEL_ERROR, ROS_TRACING_DEFAULT)
#else // ENABLE_WPP_TRACE_FILTERING_WITH_WPP_RECORDER
#define WPP_CALL_Vc4Display_cpp483(MSG, _a12) \
    WPP_LOG_ALWAYS(WPP_EX_LEVEL_FLAGS(TRACE_LEVEL_ERROR, ROS_TRACING_DEFAULT), MSG, _a12) \
    WPP_LEVEL_FLAGS_PRE(TRACE_LEVEL_ERROR, ROS_TRACING_DEFAULT) \
    WPP_ANNOTATE(Vc4Display_cpp483) \
    (( \
        WPP_RECORDER_CHECK_INIT WPP_RECORDER_LEVEL_FLAGS_FILTER(TRACE_LEVEL_ERROR, ROS_TRACING_DEFAULT) \
        ?   WPP_INVOKE_WPP_DEBUG((MSG, _a12)), \
            WPP_RECORDER_SF_sDd( \
                WPP_RECORDER_LEVEL_FLAGS_ARGS(TRACE_LEVEL_ERROR, ROS_TRACING_DEFAULT), \
                31, \
                WPP_LOCAL_TraceGuids+0, __FILE__, __LINE__, _a12), \
            1 \
        :   0 \
    )) \
    WPP_LEVEL_FLAGS_POST(TRACE_LEVEL_ERROR, ROS_TRACING_DEFAULT)
#endif // ENABLE_WPP_TRACE_FILTERING_WITH_WPP_RECORDER
#else  // ENABLE_WPP_RECORDER
#define WPP_CALL_Vc4Display_cpp483(MSG, _a12) \
    WPP_LOG_ALWAYS(WPP_EX_LEVEL_FLAGS(TRACE_LEVEL_ERROR, ROS_TRACING_DEFAULT), MSG, _a12) \
    WPP_LEVEL_FLAGS_PRE(TRACE_LEVEL_ERROR, ROS_TRACING_DEFAULT) \
    WPP_ANNOTATE(Vc4Display_cpp483) \
    (( \
        WPP_CHECK_INIT WPP_LEVEL_FLAGS_ENABLED(TRACE_LEVEL_ERROR, ROS_TRACING_DEFAULT) \
        ?   WPP_INVOKE_WPP_DEBUG((MSG, _a12)), \
            WPP_SF_sDd( \
                WPP_LEVEL_FLAGS_LOGGER(TRACE_LEVEL_ERROR, ROS_TRACING_DEFAULT) \
                31, \
                WPP_LOCAL_TraceGuids+0, __FILE__, __LINE__, _a12), \
            1 \
        :   0 \
    )) \
    WPP_LEVEL_FLAGS_POST(TRACE_LEVEL_ERROR, ROS_TRACING_DEFAULT)
#endif // ENABLE_WPP_RECORDER

// WPP_CALL_Vc4Display_cpp493
#ifndef WPP_LEVEL_FLAGS_PRE
#  define WPP_LEVEL_FLAGS_PRE(LEVEL,FLAGS)
#endif
#ifndef WPP_LEVEL_FLAGS_POST
#  define WPP_LEVEL_FLAGS_POST(LEVEL,FLAGS)
#endif
#if ENABLE_WPP_RECORDER
#if ENABLE_WPP_TRACE_FILTERING_WITH_WPP_RECORDER
#define WPP_CALL_Vc4Display_cpp493(MSG, _a12, _a13, _a14) \
    WPP_LOG_ALWAYS(WPP_EX_LEVEL_FLAGS(TRACE_LEVEL_ERROR, ROS_TRACING_DEFAULT), MSG, _a12, _a13, _a14) \
    WPP_LEVEL_FLAGS_PRE(TRACE_LEVEL_ERROR, ROS_TRACING_DEFAULT) \
    do {\
        WPP_ANNOTATE(Vc4Display_cpp493) 0; \
        BOOLEAN wppEnabled = WPP_CHECK_INIT WPP_LEVEL_FLAGS_ENABLED(TRACE_LEVEL_ERROR, ROS_TRACING_DEFAULT); \
        BOOLEAN recorderEnabled = WPP_RECORDER_CHECK_INIT WPP_RECORDER_LEVEL_FLAGS_FILTER(TRACE_LEVEL_ERROR, ROS_TRACING_DEFAULT); \
        if (wppEnabled || recorderEnabled) { \
            WPP_INVOKE_WPP_DEBUG((MSG, _a12, _a13, _a14)); \
            WPP_RECORDER_AND_TRACE_SF_sDddi( \
                     WPP_LEVEL_FLAGS_LOGGER(TRACE_LEVEL_ERROR, ROS_TRACING_DEFAULT) \
                     wppEnabled, recorderEnabled, \
                     WPP_RECORDER_LEVEL_FLAGS_ARGS(TRACE_LEVEL_ERROR, ROS_TRACING_DEFAULT), \
                     32, \
                     WPP_LOCAL_TraceGuids+0, __FILE__, __LINE__, _a12, _a13, _a14);\
        } \
    } \
    while(0) \
    WPP_LEVEL_FLAGS_POST(TRACE_LEVEL_ERROR, ROS_TRACING_DEFAULT)
#else // ENABLE_WPP_TRACE_FILTERING_WITH_WPP_RECORDER
#define WPP_CALL_Vc4Display_cpp493(MSG, _a12, _a13, _a14) \
    WPP_LOG_ALWAYS(WPP_EX_LEVEL_FLAGS(TRACE_LEVEL_ERROR, ROS_TRACING_DEFAULT), MSG, _a12, _a13, _a14) \
    WPP_LEVEL_FLAGS_PRE(TRACE_LEVEL_ERROR, ROS_TRACING_DEFAULT) \
    WPP_ANNOTATE(Vc4Display_cpp493) \
    (( \
        WPP_RECORDER_CHECK_INIT WPP_RECORDER_LEVEL_FLAGS_FILTER(TRACE_LEVEL_ERROR, ROS_TRACING_DEFAULT) \
        ?   WPP_INVOKE_WPP_DEBUG((MSG, _a12, _a13, _a14)), \
            WPP_RECORDER_SF_sDddi( \
                WPP_RECORDER_LEVEL_FLAGS_ARGS(TRACE_LEVEL_ERROR, ROS_TRACING_DEFAULT), \
                32, \
                WPP_LOCAL_TraceGuids+0, __FILE__, __LINE__, _a12, _a13, _a14), \
            1 \
        :   0 \
    )) \
    WPP_LEVEL_FLAGS_POST(TRACE_LEVEL_ERROR, ROS_TRACING_DEFAULT)
#endif // ENABLE_WPP_TRACE_FILTERING_WITH_WPP_RECORDER
#else  // ENABLE_WPP_RECORDER
#define WPP_CALL_Vc4Display_cpp493(MSG, _a12, _a13, _a14) \
    WPP_LOG_ALWAYS(WPP_EX_LEVEL_FLAGS(TRACE_LEVEL_ERROR, ROS_TRACING_DEFAULT), MSG, _a12, _a13, _a14) \
    WPP_LEVEL_FLAGS_PRE(TRACE_LEVEL_ERROR, ROS_TRACING_DEFAULT) \
    WPP_ANNOTATE(Vc4Display_cpp493) \
    (( \
        WPP_CHECK_INIT WPP_LEVEL_FLAGS_ENABLED(TRACE_LEVEL_ERROR, ROS_TRACING_DEFAULT) \
        ?   WPP_INVOKE_WPP_DEBUG((MSG, _a12, _a13, _a14)), \
            WPP_SF_sDddi( \
                WPP_LEVEL_FLAGS_LOGGER(TRACE_LEVEL_ERROR, ROS_TRACING_DEFAULT) \
                32, \
                WPP_LOCAL_TraceGuids+0, __FILE__, __LINE__, _a12, _a13, _a14), \
            1 \
        :   0 \
    )) \
    WPP_LEVEL_FLAGS_POST(TRACE_LEVEL_ERROR, ROS_TRACING_DEFAULT)
#endif // ENABLE_WPP_RECORDER

// WPP_CALL_Vc4Display_cpp517
#ifndef WPP_LEVEL_FLAGS_PRE
#  define WPP_LEVEL_FLAGS_PRE(LEVEL,FLAGS)
#endif
#ifndef WPP_LEVEL_FLAGS_POST
#  define WPP_LEVEL_FLAGS_POST(LEVEL,FLAGS)
#endif
#if ENABLE_WPP_RECORDER
#if ENABLE_WPP_TRACE_FILTERING_WITH_WPP_RECORDER
#define WPP_CALL_Vc4Display_cpp517(MSG, _a12, _a13, _a14, _a15, _a16, _a17) \
    WPP_LOG_ALWAYS(WPP_EX_LEVEL_FLAGS(TRACE_LEVEL_VERBOSE, ROS_TRACING_DEFAULT), MSG, _a12, _a13, _a14, _a15, _a16, _a17) \
    WPP_LEVEL_FLAGS_PRE(TRACE_LEVEL_VERBOSE, ROS_TRACING_DEFAULT) \
    do {\
        WPP_ANNOTATE(Vc4Display_cpp517) 0; \
        BOOLEAN wppEnabled = WPP_CHECK_INIT WPP_LEVEL_FLAGS_ENABLED(TRACE_LEVEL_VERBOSE, ROS_TRACING_DEFAULT); \
        BOOLEAN recorderEnabled = WPP_RECORDER_CHECK_INIT WPP_RECORDER_LEVEL_FLAGS_FILTER(TRACE_LEVEL_VERBOSE, ROS_TRACING_DEFAULT); \
        if (wppEnabled || recorderEnabled) { \
            WPP_INVOKE_WPP_DEBUG((MSG, _a12, _a13, _a14, _a15, _a16, _a17)); \
            WPP_RECORDER_AND_TRACE_SF_sDdddddd( \
                     WPP_LEVEL_FLAGS_LOGGER(TRACE_LEVEL_VERBOSE, ROS_TRACING_DEFAULT) \
                     wppEnabled, recorderEnabled, \
                     WPP_RECORDER_LEVEL_FLAGS_ARGS(TRACE_LEVEL_VERBOSE, ROS_TRACING_DEFAULT), \
                     33, \
                     WPP_LOCAL_TraceGuids+0, __FILE__, __LINE__, _a12, _a13, _a14, _a15, _a16, _a17);\
        } \
    } \
    while(0) \
    WPP_LEVEL_FLAGS_POST(TRACE_LEVEL_VERBOSE, ROS_TRACING_DEFAULT)
#else // ENABLE_WPP_TRACE_FILTERING_WITH_WPP_RECORDER
#define WPP_CALL_Vc4Display_cpp517(MSG, _a12, _a13, _a14, _a15, _a16, _a17) \
    WPP_LOG_ALWAYS(WPP_EX_LEVEL_FLAGS(TRACE_LEVEL_VERBOSE, ROS_TRACING_DEFAULT), MSG, _a12, _a13, _a14, _a15, _a16, _a17) \
    WPP_LEVEL_FLAGS_PRE(TRACE_LEVEL_VERBOSE, ROS_TRACING_DEFAULT) \
    WPP_ANNOTATE(Vc4Display_cpp517) \
    (( \
        WPP_RECORDER_CHECK_INIT WPP_RECORDER_LEVEL_FLAGS_FILTER(TRACE_LEVEL_VERBOSE, ROS_TRACING_DEFAULT) \
        ?   WPP_INVOKE_WPP_DEBUG((MSG, _a12, _a13, _a14, _a15, _a16, _a17)), \
            WPP_RECORDER_SF_sDdddddd( \
                WPP_RECORDER_LEVEL_FLAGS_ARGS(TRACE_LEVEL_VERBOSE, ROS_TRACING_DEFAULT), \
                33, \
                WPP_LOCAL_TraceGuids+0, __FILE__, __LINE__, _a12, _a13, _a14, _a15, _a16, _a17), \
            1 \
        :   0 \
    )) \
    WPP_LEVEL_FLAGS_POST(TRACE_LEVEL_VERBOSE, ROS_TRACING_DEFAULT)
#endif // ENABLE_WPP_TRACE_FILTERING_WITH_WPP_RECORDER
#else  // ENABLE_WPP_RECORDER
#define WPP_CALL_Vc4Display_cpp517(MSG, _a12, _a13, _a14, _a15, _a16, _a17) \
    WPP_LOG_ALWAYS(WPP_EX_LEVEL_FLAGS(TRACE_LEVEL_VERBOSE, ROS_TRACING_DEFAULT), MSG, _a12, _a13, _a14, _a15, _a16, _a17) \
    WPP_LEVEL_FLAGS_PRE(TRACE_LEVEL_VERBOSE, ROS_TRACING_DEFAULT) \
    WPP_ANNOTATE(Vc4Display_cpp517) \
    (( \
        WPP_CHECK_INIT WPP_LEVEL_FLAGS_ENABLED(TRACE_LEVEL_VERBOSE, ROS_TRACING_DEFAULT) \
        ?   WPP_INVOKE_WPP_DEBUG((MSG, _a12, _a13, _a14, _a15, _a16, _a17)), \
            WPP_SF_sDdddddd( \
                WPP_LEVEL_FLAGS_LOGGER(TRACE_LEVEL_VERBOSE, ROS_TRACING_DEFAULT) \
                33, \
                WPP_LOCAL_TraceGuids+0, __FILE__, __LINE__, _a12, _a13, _a14, _a15, _a16, _a17), \
            1 \
        :   0 \
    )) \
    WPP_LEVEL_FLAGS_POST(TRACE_LEVEL_VERBOSE, ROS_TRACING_DEFAULT)
#endif // ENABLE_WPP_RECORDER

// WPP_CALL_Vc4Display_cpp534
#ifndef WPP_LEVEL_FLAGS_PRE
#  define WPP_LEVEL_FLAGS_PRE(LEVEL,FLAGS)
#endif
#ifndef WPP_LEVEL_FLAGS_POST
#  define WPP_LEVEL_FLAGS_POST(LEVEL,FLAGS)
#endif
#if ENABLE_WPP_RECORDER
#if ENABLE_WPP_TRACE_FILTERING_WITH_WPP_RECORDER
#define WPP_CALL_Vc4Display_cpp534(MSG, _a12, _a13) \
    WPP_LOG_ALWAYS(WPP_EX_LEVEL_FLAGS(TRACE_LEVEL_ERROR, ROS_TRACING_DEFAULT), MSG, _a12, _a13) \
    WPP_LEVEL_FLAGS_PRE(TRACE_LEVEL_ERROR, ROS_TRACING_DEFAULT) \
    do {\
        WPP_ANNOTATE(Vc4Display_cpp534) 0; \
        BOOLEAN wppEnabled = WPP_CHECK_INIT WPP_LEVEL_FLAGS_ENABLED(TRACE_LEVEL_ERROR, ROS_TRACING_DEFAULT); \
        BOOLEAN recorderEnabled = WPP_RECORDER_CHECK_INIT WPP_RECORDER_LEVEL_FLAGS_FILTER(TRACE_LEVEL_ERROR, ROS_TRACING_DEFAULT); \
        if (wppEnabled || recorderEnabled) { \
            WPP_INVOKE_WPP_DEBUG((MSG, _a12, _a13)); \
            WPP_RECORDER_AND_TRACE_SF_sDid( \
                     WPP_LEVEL_FLAGS_LOGGER(TRACE_LEVEL_ERROR, ROS_TRACING_DEFAULT) \
                     wppEnabled, recorderEnabled, \
                     WPP_RECORDER_LEVEL_FLAGS_ARGS(TRACE_LEVEL_ERROR, ROS_TRACING_DEFAULT), \
                     34, \
                     WPP_LOCAL_TraceGuids+0, __FILE__, __LINE__, _a12, _a13);\
        } \
    } \
    while(0) \
    WPP_LEVEL_FLAGS_POST(TRACE_LEVEL_ERROR, ROS_TRACING_DEFAULT)
#else // ENABLE_WPP_TRACE_FILTERING_WITH_WPP_RECORDER
#define WPP_CALL_Vc4Display_cpp534(MSG, _a12, _a13) \
    WPP_LOG_ALWAYS(WPP_EX_LEVEL_FLAGS(TRACE_LEVEL_ERROR, ROS_TRACING_DEFAULT), MSG, _a12, _a13) \
    WPP_LEVEL_FLAGS_PRE(TRACE_LEVEL_ERROR, ROS_TRACING_DEFAULT) \
    WPP_ANNOTATE(Vc4Display_cpp534) \
    (( \
        WPP_RECORDER_CHECK_INIT WPP_RECORDER_LEVEL_FLAGS_FILTER(TRACE_LEVEL_ERROR, ROS_TRACING_DEFAULT) \
        ?   WPP_INVOKE_WPP_DEBUG((MSG, _a12, _a13)), \
            WPP_RECORDER_SF_sDid( \
                WPP_RECORDER_LEVEL_FLAGS_ARGS(TRACE_LEVEL_ERROR, ROS_TRACING_DEFAULT), \
                34, \
                WPP_LOCAL_TraceGuids+0, __FILE__, __LINE__, _a12, _a13), \
            1 \
        :   0 \
    )) \
    WPP_LEVEL_FLAGS_POST(TRACE_LEVEL_ERROR, ROS_TRACING_DEFAULT)
#endif // ENABLE_WPP_TRACE_FILTERING_WITH_WPP_RECORDER
#else  // ENABLE_WPP_RECORDER
#define WPP_CALL_Vc4Display_cpp534(MSG, _a12, _a13) \
    WPP_LOG_ALWAYS(WPP_EX_LEVEL_FLAGS(TRACE_LEVEL_ERROR, ROS_TRACING_DEFAULT), MSG, _a12, _a13) \
    WPP_LEVEL_FLAGS_PRE(TRACE_LEVEL_ERROR, ROS_TRACING_DEFAULT) \
    WPP_ANNOTATE(Vc4Display_cpp534) \
    (( \
        WPP_CHECK_INIT WPP_LEVEL_FLAGS_ENABLED(TRACE_LEVEL_ERROR, ROS_TRACING_DEFAULT) \
        ?   WPP_INVOKE_WPP_DEBUG((MSG, _a12, _a13)), \
            WPP_SF_sDid( \
                WPP_LEVEL_FLAGS_LOGGER(TRACE_LEVEL_ERROR, ROS_TRACING_DEFAULT) \
                34, \
                WPP_LOCAL_TraceGuids+0, __FILE__, __LINE__, _a12, _a13), \
            1 \
        :   0 \
    )) \
    WPP_LEVEL_FLAGS_POST(TRACE_LEVEL_ERROR, ROS_TRACING_DEFAULT)
#endif // ENABLE_WPP_RECORDER

// WPP_CALL_Vc4Display_cpp555
#ifndef WPP_LEVEL_FLAGS_PRE
#  define WPP_LEVEL_FLAGS_PRE(LEVEL,FLAGS)
#endif
#ifndef WPP_LEVEL_FLAGS_POST
#  define WPP_LEVEL_FLAGS_POST(LEVEL,FLAGS)
#endif
#if ENABLE_WPP_RECORDER
#if ENABLE_WPP_TRACE_FILTERING_WITH_WPP_RECORDER
#define WPP_CALL_Vc4Display_cpp555(MSG, _a12) \
    WPP_LOG_ALWAYS(WPP_EX_LEVEL_FLAGS(TRACE_LEVEL_ERROR, ROS_TRACING_DEBUG), MSG, _a12) \
    WPP_LEVEL_FLAGS_PRE(TRACE_LEVEL_ERROR, ROS_TRACING_DEBUG) \
    do {\
        WPP_ANNOTATE(Vc4Display_cpp555) 0; \
        BOOLEAN wppEnabled = WPP_CHECK_INIT WPP_LEVEL_FLAGS_ENABLED(TRACE_LEVEL_ERROR, ROS_TRACING_DEBUG); \
        BOOLEAN recorderEnabled = WPP_RECORDER_CHECK_INIT WPP_RECORDER_LEVEL_FLAGS_FILTER(TRACE_LEVEL_ERROR, ROS_TRACING_DEBUG); \
        if (wppEnabled || recorderEnabled) { \
            WPP_INVOKE_WPP_DEBUG((MSG, _a12)); \
            WPP_RECORDER_AND_TRACE_SF_sDD( \
                     WPP_LEVEL_FLAGS_LOGGER(TRACE_LEVEL_ERROR, ROS_TRACING_DEBUG) \
                     wppEnabled, recorderEnabled, \
                     WPP_RECORDER_LEVEL_FLAGS_ARGS(TRACE_LEVEL_ERROR, ROS_TRACING_DEBUG), \
                     35, \
                     WPP_LOCAL_TraceGuids+0, __FILE__, __LINE__, _a12);\
        } \
    } \
    while(0) \
    WPP_LEVEL_FLAGS_POST(TRACE_LEVEL_ERROR, ROS_TRACING_DEBUG)
#else // ENABLE_WPP_TRACE_FILTERING_WITH_WPP_RECORDER
#define WPP_CALL_Vc4Display_cpp555(MSG, _a12) \
    WPP_LOG_ALWAYS(WPP_EX_LEVEL_FLAGS(TRACE_LEVEL_ERROR, ROS_TRACING_DEBUG), MSG, _a12) \
    WPP_LEVEL_FLAGS_PRE(TRACE_LEVEL_ERROR, ROS_TRACING_DEBUG) \
    WPP_ANNOTATE(Vc4Display_cpp555) \
    (( \
        WPP_RECORDER_CHECK_INIT WPP_RECORDER_LEVEL_FLAGS_FILTER(TRACE_LEVEL_ERROR, ROS_TRACING_DEBUG) \
        ?   WPP_INVOKE_WPP_DEBUG((MSG, _a12)), \
            WPP_RECORDER_SF_sDD( \
                WPP_RECORDER_LEVEL_FLAGS_ARGS(TRACE_LEVEL_ERROR, ROS_TRACING_DEBUG), \
                35, \
                WPP_LOCAL_TraceGuids+0, __FILE__, __LINE__, _a12), \
            1 \
        :   0 \
    )) \
    WPP_LEVEL_FLAGS_POST(TRACE_LEVEL_ERROR, ROS_TRACING_DEBUG)
#endif // ENABLE_WPP_TRACE_FILTERING_WITH_WPP_RECORDER
#else  // ENABLE_WPP_RECORDER
#define WPP_CALL_Vc4Display_cpp555(MSG, _a12) \
    WPP_LOG_ALWAYS(WPP_EX_LEVEL_FLAGS(TRACE_LEVEL_ERROR, ROS_TRACING_DEBUG), MSG, _a12) \
    WPP_LEVEL_FLAGS_PRE(TRACE_LEVEL_ERROR, ROS_TRACING_DEBUG) \
    WPP_ANNOTATE(Vc4Display_cpp555) \
    (( \
        WPP_CHECK_INIT WPP_LEVEL_FLAGS_ENABLED(TRACE_LEVEL_ERROR, ROS_TRACING_DEBUG) \
        ?   WPP_INVOKE_WPP_DEBUG((MSG, _a12)), \
            WPP_SF_sDD( \
                WPP_LEVEL_FLAGS_LOGGER(TRACE_LEVEL_ERROR, ROS_TRACING_DEBUG) \
                35, \
                WPP_LOCAL_TraceGuids+0, __FILE__, __LINE__, _a12), \
            1 \
        :   0 \
    )) \
    WPP_LEVEL_FLAGS_POST(TRACE_LEVEL_ERROR, ROS_TRACING_DEBUG)
#endif // ENABLE_WPP_RECORDER

// WPP_CALL_Vc4Display_cpp566
#ifndef WPP_LEVEL_FLAGS_PRE
#  define WPP_LEVEL_FLAGS_PRE(LEVEL,FLAGS)
#endif
#ifndef WPP_LEVEL_FLAGS_POST
#  define WPP_LEVEL_FLAGS_POST(LEVEL,FLAGS)
#endif
#if ENABLE_WPP_RECORDER
#if ENABLE_WPP_TRACE_FILTERING_WITH_WPP_RECORDER
#define WPP_CALL_Vc4Display_cpp566(MSG, _a12) \
    WPP_LOG_ALWAYS(WPP_EX_LEVEL_FLAGS(TRACE_LEVEL_ERROR, ROS_TRACING_DEBUG), MSG, _a12) \
    WPP_LEVEL_FLAGS_PRE(TRACE_LEVEL_ERROR, ROS_TRACING_DEBUG) \
    do {\
        WPP_ANNOTATE(Vc4Display_cpp566) 0; \
        BOOLEAN wppEnabled = WPP_CHECK_INIT WPP_LEVEL_FLAGS_ENABLED(TRACE_LEVEL_ERROR, ROS_TRACING_DEBUG); \
        BOOLEAN recorderEnabled = WPP_RECORDER_CHECK_INIT WPP_RECORDER_LEVEL_FLAGS_FILTER(TRACE_LEVEL_ERROR, ROS_TRACING_DEBUG); \
        if (wppEnabled || recorderEnabled) { \
            WPP_INVOKE_WPP_DEBUG((MSG, _a12)); \
            WPP_RECORDER_AND_TRACE_SF_sDD( \
                     WPP_LEVEL_FLAGS_LOGGER(TRACE_LEVEL_ERROR, ROS_TRACING_DEBUG) \
                     wppEnabled, recorderEnabled, \
                     WPP_RECORDER_LEVEL_FLAGS_ARGS(TRACE_LEVEL_ERROR, ROS_TRACING_DEBUG), \
                     36, \
                     WPP_LOCAL_TraceGuids+0, __FILE__, __LINE__, _a12);\
        } \
    } \
    while(0) \
    WPP_LEVEL_FLAGS_POST(TRACE_LEVEL_ERROR, ROS_TRACING_DEBUG)
#else // ENABLE_WPP_TRACE_FILTERING_WITH_WPP_RECORDER
#define WPP_CALL_Vc4Display_cpp566(MSG, _a12) \
    WPP_LOG_ALWAYS(WPP_EX_LEVEL_FLAGS(TRACE_LEVEL_ERROR, ROS_TRACING_DEBUG), MSG, _a12) \
    WPP_LEVEL_FLAGS_PRE(TRACE_LEVEL_ERROR, ROS_TRACING_DEBUG) \
    WPP_ANNOTATE(Vc4Display_cpp566) \
    (( \
        WPP_RECORDER_CHECK_INIT WPP_RECORDER_LEVEL_FLAGS_FILTER(TRACE_LEVEL_ERROR, ROS_TRACING_DEBUG) \
        ?   WPP_INVOKE_WPP_DEBUG((MSG, _a12)), \
            WPP_RECORDER_SF_sDD( \
                WPP_RECORDER_LEVEL_FLAGS_ARGS(TRACE_LEVEL_ERROR, ROS_TRACING_DEBUG), \
                36, \
                WPP_LOCAL_TraceGuids+0, __FILE__, __LINE__, _a12), \
            1 \
        :   0 \
    )) \
    WPP_LEVEL_FLAGS_POST(TRACE_LEVEL_ERROR, ROS_TRACING_DEBUG)
#endif // ENABLE_WPP_TRACE_FILTERING_WITH_WPP_RECORDER
#else  // ENABLE_WPP_RECORDER
#define WPP_CALL_Vc4Display_cpp566(MSG, _a12) \
    WPP_LOG_ALWAYS(WPP_EX_LEVEL_FLAGS(TRACE_LEVEL_ERROR, ROS_TRACING_DEBUG), MSG, _a12) \
    WPP_LEVEL_FLAGS_PRE(TRACE_LEVEL_ERROR, ROS_TRACING_DEBUG) \
    WPP_ANNOTATE(Vc4Display_cpp566) \
    (( \
        WPP_CHECK_INIT WPP_LEVEL_FLAGS_ENABLED(TRACE_LEVEL_ERROR, ROS_TRACING_DEBUG) \
        ?   WPP_INVOKE_WPP_DEBUG((MSG, _a12)), \
            WPP_SF_sDD( \
                WPP_LEVEL_FLAGS_LOGGER(TRACE_LEVEL_ERROR, ROS_TRACING_DEBUG) \
                36, \
                WPP_LOCAL_TraceGuids+0, __FILE__, __LINE__, _a12), \
            1 \
        :   0 \
    )) \
    WPP_LEVEL_FLAGS_POST(TRACE_LEVEL_ERROR, ROS_TRACING_DEBUG)
#endif // ENABLE_WPP_RECORDER

// WPP_CALL_Vc4Display_cpp579
#ifndef WPP_LEVEL_FLAGS_PRE
#  define WPP_LEVEL_FLAGS_PRE(LEVEL,FLAGS)
#endif
#ifndef WPP_LEVEL_FLAGS_POST
#  define WPP_LEVEL_FLAGS_POST(LEVEL,FLAGS)
#endif
#if ENABLE_WPP_RECORDER
#if ENABLE_WPP_TRACE_FILTERING_WITH_WPP_RECORDER
#define WPP_CALL_Vc4Display_cpp579(MSG) \
    WPP_LOG_ALWAYS(WPP_EX_LEVEL_FLAGS(TRACE_LEVEL_ERROR, ROS_TRACING_DEBUG), MSG) \
    WPP_LEVEL_FLAGS_PRE(TRACE_LEVEL_ERROR, ROS_TRACING_DEBUG) \
    do {\
        WPP_ANNOTATE(Vc4Display_cpp579) 0; \
        BOOLEAN wppEnabled = WPP_CHECK_INIT WPP_LEVEL_FLAGS_ENABLED(TRACE_LEVEL_ERROR, ROS_TRACING_DEBUG); \
        BOOLEAN recorderEnabled = WPP_RECORDER_CHECK_INIT WPP_RECORDER_LEVEL_FLAGS_FILTER(TRACE_LEVEL_ERROR, ROS_TRACING_DEBUG); \
        if (wppEnabled || recorderEnabled) { \
            WPP_INVOKE_WPP_DEBUG((MSG)); \
            WPP_RECORDER_AND_TRACE_SF_sD( \
                     WPP_LEVEL_FLAGS_LOGGER(TRACE_LEVEL_ERROR, ROS_TRACING_DEBUG) \
                     wppEnabled, recorderEnabled, \
                     WPP_RECORDER_LEVEL_FLAGS_ARGS(TRACE_LEVEL_ERROR, ROS_TRACING_DEBUG), \
                     37, \
                     WPP_LOCAL_TraceGuids+0, __FILE__, __LINE__);\
        } \
    } \
    while(0) \
    WPP_LEVEL_FLAGS_POST(TRACE_LEVEL_ERROR, ROS_TRACING_DEBUG)
#else // ENABLE_WPP_TRACE_FILTERING_WITH_WPP_RECORDER
#define WPP_CALL_Vc4Display_cpp579(MSG) \
    WPP_LOG_ALWAYS(WPP_EX_LEVEL_FLAGS(TRACE_LEVEL_ERROR, ROS_TRACING_DEBUG), MSG) \
    WPP_LEVEL_FLAGS_PRE(TRACE_LEVEL_ERROR, ROS_TRACING_DEBUG) \
    WPP_ANNOTATE(Vc4Display_cpp579) \
    (( \
        WPP_RECORDER_CHECK_INIT WPP_RECORDER_LEVEL_FLAGS_FILTER(TRACE_LEVEL_ERROR, ROS_TRACING_DEBUG) \
        ?   WPP_INVOKE_WPP_DEBUG((MSG)), \
            WPP_RECORDER_SF_sD( \
                WPP_RECORDER_LEVEL_FLAGS_ARGS(TRACE_LEVEL_ERROR, ROS_TRACING_DEBUG), \
                37, \
                WPP_LOCAL_TraceGuids+0, __FILE__, __LINE__), \
            1 \
        :   0 \
    )) \
    WPP_LEVEL_FLAGS_POST(TRACE_LEVEL_ERROR, ROS_TRACING_DEBUG)
#endif // ENABLE_WPP_TRACE_FILTERING_WITH_WPP_RECORDER
#else  // ENABLE_WPP_RECORDER
#define WPP_CALL_Vc4Display_cpp579(MSG) \
    WPP_LOG_ALWAYS(WPP_EX_LEVEL_FLAGS(TRACE_LEVEL_ERROR, ROS_TRACING_DEBUG), MSG) \
    WPP_LEVEL_FLAGS_PRE(TRACE_LEVEL_ERROR, ROS_TRACING_DEBUG) \
    WPP_ANNOTATE(Vc4Display_cpp579) \
    (( \
        WPP_CHECK_INIT WPP_LEVEL_FLAGS_ENABLED(TRACE_LEVEL_ERROR, ROS_TRACING_DEBUG) \
        ?   WPP_INVOKE_WPP_DEBUG((MSG)), \
            WPP_SF_sD( \
                WPP_LEVEL_FLAGS_LOGGER(TRACE_LEVEL_ERROR, ROS_TRACING_DEBUG) \
                37, \
                WPP_LOCAL_TraceGuids+0, __FILE__, __LINE__), \
            1 \
        :   0 \
    )) \
    WPP_LEVEL_FLAGS_POST(TRACE_LEVEL_ERROR, ROS_TRACING_DEBUG)
#endif // ENABLE_WPP_RECORDER

// WPP_CALL_Vc4Display_cpp592
#ifndef WPP_LEVEL_FLAGS_PRE
#  define WPP_LEVEL_FLAGS_PRE(LEVEL,FLAGS)
#endif
#ifndef WPP_LEVEL_FLAGS_POST
#  define WPP_LEVEL_FLAGS_POST(LEVEL,FLAGS)
#endif
#if ENABLE_WPP_RECORDER
#if ENABLE_WPP_TRACE_FILTERING_WITH_WPP_RECORDER
#define WPP_CALL_Vc4Display_cpp592(MSG) \
    WPP_LOG_ALWAYS(WPP_EX_LEVEL_FLAGS(TRACE_LEVEL_ERROR, ROS_TRACING_DEBUG), MSG) \
    WPP_LEVEL_FLAGS_PRE(TRACE_LEVEL_ERROR, ROS_TRACING_DEBUG) \
    do {\
        WPP_ANNOTATE(Vc4Display_cpp592) 0; \
        BOOLEAN wppEnabled = WPP_CHECK_INIT WPP_LEVEL_FLAGS_ENABLED(TRACE_LEVEL_ERROR, ROS_TRACING_DEBUG); \
        BOOLEAN recorderEnabled = WPP_RECORDER_CHECK_INIT WPP_RECORDER_LEVEL_FLAGS_FILTER(TRACE_LEVEL_ERROR, ROS_TRACING_DEBUG); \
        if (wppEnabled || recorderEnabled) { \
            WPP_INVOKE_WPP_DEBUG((MSG)); \
            WPP_RECORDER_AND_TRACE_SF_sD( \
                     WPP_LEVEL_FLAGS_LOGGER(TRACE_LEVEL_ERROR, ROS_TRACING_DEBUG) \
                     wppEnabled, recorderEnabled, \
                     WPP_RECORDER_LEVEL_FLAGS_ARGS(TRACE_LEVEL_ERROR, ROS_TRACING_DEBUG), \
                     38, \
                     WPP_LOCAL_TraceGuids+0, __FILE__, __LINE__);\
        } \
    } \
    while(0) \
    WPP_LEVEL_FLAGS_POST(TRACE_LEVEL_ERROR, ROS_TRACING_DEBUG)
#else // ENABLE_WPP_TRACE_FILTERING_WITH_WPP_RECORDER
#define WPP_CALL_Vc4Display_cpp592(MSG) \
    WPP_LOG_ALWAYS(WPP_EX_LEVEL_FLAGS(TRACE_LEVEL_ERROR, ROS_TRACING_DEBUG), MSG) \
    WPP_LEVEL_FLAGS_PRE(TRACE_LEVEL_ERROR, ROS_TRACING_DEBUG) \
    WPP_ANNOTATE(Vc4Display_cpp592) \
    (( \
        WPP_RECORDER_CHECK_INIT WPP_RECORDER_LEVEL_FLAGS_FILTER(TRACE_LEVEL_ERROR, ROS_TRACING_DEBUG) \
        ?   WPP_INVOKE_WPP_DEBUG((MSG)), \
            WPP_RECORDER_SF_sD( \
                WPP_RECORDER_LEVEL_FLAGS_ARGS(TRACE_LEVEL_ERROR, ROS_TRACING_DEBUG), \
                38, \
                WPP_LOCAL_TraceGuids+0, __FILE__, __LINE__), \
            1 \
        :   0 \
    )) \
    WPP_LEVEL_FLAGS_POST(TRACE_LEVEL_ERROR, ROS_TRACING_DEBUG)
#endif // ENABLE_WPP_TRACE_FILTERING_WITH_WPP_RECORDER
#else  // ENABLE_WPP_RECORDER
#define WPP_CALL_Vc4Display_cpp592(MSG) \
    WPP_LOG_ALWAYS(WPP_EX_LEVEL_FLAGS(TRACE_LEVEL_ERROR, ROS_TRACING_DEBUG), MSG) \
    WPP_LEVEL_FLAGS_PRE(TRACE_LEVEL_ERROR, ROS_TRACING_DEBUG) \
    WPP_ANNOTATE(Vc4Display_cpp592) \
    (( \
        WPP_CHECK_INIT WPP_LEVEL_FLAGS_ENABLED(TRACE_LEVEL_ERROR, ROS_TRACING_DEBUG) \
        ?   WPP_INVOKE_WPP_DEBUG((MSG)), \
            WPP_SF_sD( \
                WPP_LEVEL_FLAGS_LOGGER(TRACE_LEVEL_ERROR, ROS_TRACING_DEBUG) \
                38, \
                WPP_LOCAL_TraceGuids+0, __FILE__, __LINE__), \
            1 \
        :   0 \
    )) \
    WPP_LEVEL_FLAGS_POST(TRACE_LEVEL_ERROR, ROS_TRACING_DEBUG)
#endif // ENABLE_WPP_RECORDER

// WPP_CALL_Vc4Display_cpp617
#ifndef WPP_LEVEL_FLAGS_PRE
#  define WPP_LEVEL_FLAGS_PRE(LEVEL,FLAGS)
#endif
#ifndef WPP_LEVEL_FLAGS_POST
#  define WPP_LEVEL_FLAGS_POST(LEVEL,FLAGS)
#endif
#if ENABLE_WPP_RECORDER
#if ENABLE_WPP_TRACE_FILTERING_WITH_WPP_RECORDER
#define WPP_CALL_Vc4Display_cpp617(MSG) \
    WPP_LOG_ALWAYS(WPP_EX_LEVEL_FLAGS(TRACE_LEVEL_VERBOSE, ROS_TRACING_DEFAULT), MSG) \
    WPP_LEVEL_FLAGS_PRE(TRACE_LEVEL_VERBOSE, ROS_TRACING_DEFAULT) \
    do {\
        WPP_ANNOTATE(Vc4Display_cpp617) 0; \
        BOOLEAN wppEnabled = WPP_CHECK_INIT WPP_LEVEL_FLAGS_ENABLED(TRACE_LEVEL_VERBOSE, ROS_TRACING_DEFAULT); \
        BOOLEAN recorderEnabled = WPP_RECORDER_CHECK_INIT WPP_RECORDER_LEVEL_FLAGS_FILTER(TRACE_LEVEL_VERBOSE, ROS_TRACING_DEFAULT); \
        if (wppEnabled || recorderEnabled) { \
            WPP_INVOKE_WPP_DEBUG((MSG)); \
            WPP_RECORDER_AND_TRACE_SF_sD( \
                     WPP_LEVEL_FLAGS_LOGGER(TRACE_LEVEL_VERBOSE, ROS_TRACING_DEFAULT) \
                     wppEnabled, recorderEnabled, \
                     WPP_RECORDER_LEVEL_FLAGS_ARGS(TRACE_LEVEL_VERBOSE, ROS_TRACING_DEFAULT), \
                     39, \
                     WPP_LOCAL_TraceGuids+0, __FILE__, __LINE__);\
        } \
    } \
    while(0) \
    WPP_LEVEL_FLAGS_POST(TRACE_LEVEL_VERBOSE, ROS_TRACING_DEFAULT)
#else // ENABLE_WPP_TRACE_FILTERING_WITH_WPP_RECORDER
#define WPP_CALL_Vc4Display_cpp617(MSG) \
    WPP_LOG_ALWAYS(WPP_EX_LEVEL_FLAGS(TRACE_LEVEL_VERBOSE, ROS_TRACING_DEFAULT), MSG) \
    WPP_LEVEL_FLAGS_PRE(TRACE_LEVEL_VERBOSE, ROS_TRACING_DEFAULT) \
    WPP_ANNOTATE(Vc4Display_cpp617) \
    (( \
        WPP_RECORDER_CHECK_INIT WPP_RECORDER_LEVEL_FLAGS_FILTER(TRACE_LEVEL_VERBOSE, ROS_TRACING_DEFAULT) \
        ?   WPP_INVOKE_WPP_DEBUG((MSG)), \
            WPP_RECORDER_SF_sD( \
                WPP_RECORDER_LEVEL_FLAGS_ARGS(TRACE_LEVEL_VERBOSE, ROS_TRACING_DEFAULT), \
                39, \
                WPP_LOCAL_TraceGuids+0, __FILE__, __LINE__), \
            1 \
        :   0 \
    )) \
    WPP_LEVEL_FLAGS_POST(TRACE_LEVEL_VERBOSE, ROS_TRACING_DEFAULT)
#endif // ENABLE_WPP_TRACE_FILTERING_WITH_WPP_RECORDER
#else  // ENABLE_WPP_RECORDER
#define WPP_CALL_Vc4Display_cpp617(MSG) \
    WPP_LOG_ALWAYS(WPP_EX_LEVEL_FLAGS(TRACE_LEVEL_VERBOSE, ROS_TRACING_DEFAULT), MSG) \
    WPP_LEVEL_FLAGS_PRE(TRACE_LEVEL_VERBOSE, ROS_TRACING_DEFAULT) \
    WPP_ANNOTATE(Vc4Display_cpp617) \
    (( \
        WPP_CHECK_INIT WPP_LEVEL_FLAGS_ENABLED(TRACE_LEVEL_VERBOSE, ROS_TRACING_DEFAULT) \
        ?   WPP_INVOKE_WPP_DEBUG((MSG)), \
            WPP_SF_sD( \
                WPP_LEVEL_FLAGS_LOGGER(TRACE_LEVEL_VERBOSE, ROS_TRACING_DEFAULT) \
                39, \
                WPP_LOCAL_TraceGuids+0, __FILE__, __LINE__), \
            1 \
        :   0 \
    )) \
    WPP_LEVEL_FLAGS_POST(TRACE_LEVEL_VERBOSE, ROS_TRACING_DEFAULT)
#endif // ENABLE_WPP_RECORDER

// WPP_CALL_Vc4Display_cpp660
#ifndef WPP_LEVEL_FLAGS_PRE
#  define WPP_LEVEL_FLAGS_PRE(LEVEL,FLAGS)
#endif
#ifndef WPP_LEVEL_FLAGS_POST
#  define WPP_LEVEL_FLAGS_POST(LEVEL,FLAGS)
#endif
#if ENABLE_WPP_RECORDER
#if ENABLE_WPP_TRACE_FILTERING_WITH_WPP_RECORDER
#define WPP_CALL_Vc4Display_cpp660(MSG) \
    WPP_LOG_ALWAYS(WPP_EX_LEVEL_FLAGS(TRACE_LEVEL_VERBOSE, ROS_TRACING_DEFAULT), MSG) \
    WPP_LEVEL_FLAGS_PRE(TRACE_LEVEL_VERBOSE, ROS_TRACING_DEFAULT) \
    do {\
        WPP_ANNOTATE(Vc4Display_cpp660) 0; \
        BOOLEAN wppEnabled = WPP_CHECK_INIT WPP_LEVEL_FLAGS_ENABLED(TRACE_LEVEL_VERBOSE, ROS_TRACING_DEFAULT); \
        BOOLEAN recorderEnabled = WPP_RECORDER_CHECK_INIT WPP_RECORDER_LEVEL_FLAGS_FILTER(TRACE_LEVEL_VERBOSE, ROS_TRACING_DEFAULT); \
        if (wppEnabled || recorderEnabled) { \
            WPP_INVOKE_WPP_DEBUG((MSG)); \
            WPP_RECORDER_AND_TRACE_SF_sD( \
                     WPP_LEVEL_FLAGS_LOGGER(TRACE_LEVEL_VERBOSE, ROS_TRACING_DEFAULT) \
                     wppEnabled, recorderEnabled, \
                     WPP_RECORDER_LEVEL_FLAGS_ARGS(TRACE_LEVEL_VERBOSE, ROS_TRACING_DEFAULT), \
                     40, \
                     WPP_LOCAL_TraceGuids+0, __FILE__, __LINE__);\
        } \
    } \
    while(0) \
    WPP_LEVEL_FLAGS_POST(TRACE_LEVEL_VERBOSE, ROS_TRACING_DEFAULT)
#else // ENABLE_WPP_TRACE_FILTERING_WITH_WPP_RECORDER
#define WPP_CALL_Vc4Display_cpp660(MSG) \
    WPP_LOG_ALWAYS(WPP_EX_LEVEL_FLAGS(TRACE_LEVEL_VERBOSE, ROS_TRACING_DEFAULT), MSG) \
    WPP_LEVEL_FLAGS_PRE(TRACE_LEVEL_VERBOSE, ROS_TRACING_DEFAULT) \
    WPP_ANNOTATE(Vc4Display_cpp660) \
    (( \
        WPP_RECORDER_CHECK_INIT WPP_RECORDER_LEVEL_FLAGS_FILTER(TRACE_LEVEL_VERBOSE, ROS_TRACING_DEFAULT) \
        ?   WPP_INVOKE_WPP_DEBUG((MSG)), \
            WPP_RECORDER_SF_sD( \
                WPP_RECORDER_LEVEL_FLAGS_ARGS(TRACE_LEVEL_VERBOSE, ROS_TRACING_DEFAULT), \
                40, \
                WPP_LOCAL_TraceGuids+0, __FILE__, __LINE__), \
            1 \
        :   0 \
    )) \
    WPP_LEVEL_FLAGS_POST(TRACE_LEVEL_VERBOSE, ROS_TRACING_DEFAULT)
#endif // ENABLE_WPP_TRACE_FILTERING_WITH_WPP_RECORDER
#else  // ENABLE_WPP_RECORDER
#define WPP_CALL_Vc4Display_cpp660(MSG) \
    WPP_LOG_ALWAYS(WPP_EX_LEVEL_FLAGS(TRACE_LEVEL_VERBOSE, ROS_TRACING_DEFAULT), MSG) \
    WPP_LEVEL_FLAGS_PRE(TRACE_LEVEL_VERBOSE, ROS_TRACING_DEFAULT) \
    WPP_ANNOTATE(Vc4Display_cpp660) \
    (( \
        WPP_CHECK_INIT WPP_LEVEL_FLAGS_ENABLED(TRACE_LEVEL_VERBOSE, ROS_TRACING_DEFAULT) \
        ?   WPP_INVOKE_WPP_DEBUG((MSG)), \
            WPP_SF_sD( \
                WPP_LEVEL_FLAGS_LOGGER(TRACE_LEVEL_VERBOSE, ROS_TRACING_DEFAULT) \
                40, \
                WPP_LOCAL_TraceGuids+0, __FILE__, __LINE__), \
            1 \
        :   0 \
    )) \
    WPP_LEVEL_FLAGS_POST(TRACE_LEVEL_VERBOSE, ROS_TRACING_DEFAULT)
#endif // ENABLE_WPP_RECORDER

// WPP_CALL_Vc4Display_cpp672
#ifndef WPP_LEVEL_FLAGS_PRE
#  define WPP_LEVEL_FLAGS_PRE(LEVEL,FLAGS)
#endif
#ifndef WPP_LEVEL_FLAGS_POST
#  define WPP_LEVEL_FLAGS_POST(LEVEL,FLAGS)
#endif
#if ENABLE_WPP_RECORDER
#if ENABLE_WPP_TRACE_FILTERING_WITH_WPP_RECORDER
#define WPP_CALL_Vc4Display_cpp672(MSG, _a12) \
    WPP_LOG_ALWAYS(WPP_EX_LEVEL_FLAGS(TRACE_LEVEL_WARNING, ROS_TRACING_DEFAULT), MSG, _a12) \
    WPP_LEVEL_FLAGS_PRE(TRACE_LEVEL_WARNING, ROS_TRACING_DEFAULT) \
    do {\
        WPP_ANNOTATE(Vc4Display_cpp672) 0; \
        BOOLEAN wppEnabled = WPP_CHECK_INIT WPP_LEVEL_FLAGS_ENABLED(TRACE_LEVEL_WARNING, ROS_TRACING_DEFAULT); \
        BOOLEAN recorderEnabled = WPP_RECORDER_CHECK_INIT WPP_RECORDER_LEVEL_FLAGS_FILTER(TRACE_LEVEL_WARNING, ROS_TRACING_DEFAULT); \
        if (wppEnabled || recorderEnabled) { \
            WPP_INVOKE_WPP_DEBUG((MSG, _a12)); \
            WPP_RECORDER_AND_TRACE_SF_sDL( \
                     WPP_LEVEL_FLAGS_LOGGER(TRACE_LEVEL_WARNING, ROS_TRACING_DEFAULT) \
                     wppEnabled, recorderEnabled, \
                     WPP_RECORDER_LEVEL_FLAGS_ARGS(TRACE_LEVEL_WARNING, ROS_TRACING_DEFAULT), \
                     41, \
                     WPP_LOCAL_TraceGuids+0, __FILE__, __LINE__, _a12);\
        } \
    } \
    while(0) \
    WPP_LEVEL_FLAGS_POST(TRACE_LEVEL_WARNING, ROS_TRACING_DEFAULT)
#else // ENABLE_WPP_TRACE_FILTERING_WITH_WPP_RECORDER
#define WPP_CALL_Vc4Display_cpp672(MSG, _a12) \
    WPP_LOG_ALWAYS(WPP_EX_LEVEL_FLAGS(TRACE_LEVEL_WARNING, ROS_TRACING_DEFAULT), MSG, _a12) \
    WPP_LEVEL_FLAGS_PRE(TRACE_LEVEL_WARNING, ROS_TRACING_DEFAULT) \
    WPP_ANNOTATE(Vc4Display_cpp672) \
    (( \
        WPP_RECORDER_CHECK_INIT WPP_RECORDER_LEVEL_FLAGS_FILTER(TRACE_LEVEL_WARNING, ROS_TRACING_DEFAULT) \
        ?   WPP_INVOKE_WPP_DEBUG((MSG, _a12)), \
            WPP_RECORDER_SF_sDL( \
                WPP_RECORDER_LEVEL_FLAGS_ARGS(TRACE_LEVEL_WARNING, ROS_TRACING_DEFAULT), \
                41, \
                WPP_LOCAL_TraceGuids+0, __FILE__, __LINE__, _a12), \
            1 \
        :   0 \
    )) \
    WPP_LEVEL_FLAGS_POST(TRACE_LEVEL_WARNING, ROS_TRACING_DEFAULT)
#endif // ENABLE_WPP_TRACE_FILTERING_WITH_WPP_RECORDER
#else  // ENABLE_WPP_RECORDER
#define WPP_CALL_Vc4Display_cpp672(MSG, _a12) \
    WPP_LOG_ALWAYS(WPP_EX_LEVEL_FLAGS(TRACE_LEVEL_WARNING, ROS_TRACING_DEFAULT), MSG, _a12) \
    WPP_LEVEL_FLAGS_PRE(TRACE_LEVEL_WARNING, ROS_TRACING_DEFAULT) \
    WPP_ANNOTATE(Vc4Display_cpp672) \
    (( \
        WPP_CHECK_INIT WPP_LEVEL_FLAGS_ENABLED(TRACE_LEVEL_WARNING, ROS_TRACING_DEFAULT) \
        ?   WPP_INVOKE_WPP_DEBUG((MSG, _a12)), \
            WPP_SF_sDL( \
                WPP_LEVEL_FLAGS_LOGGER(TRACE_LEVEL_WARNING, ROS_TRACING_DEFAULT) \
                41, \
                WPP_LOCAL_TraceGuids+0, __FILE__, __LINE__, _a12), \
            1 \
        :   0 \
    )) \
    WPP_LEVEL_FLAGS_POST(TRACE_LEVEL_WARNING, ROS_TRACING_DEFAULT)
#endif // ENABLE_WPP_RECORDER

// WPP_CALL_Vc4Display_cpp712
#ifndef WPP_LEVEL_FLAGS_PRE
#  define WPP_LEVEL_FLAGS_PRE(LEVEL,FLAGS)
#endif
#ifndef WPP_LEVEL_FLAGS_POST
#  define WPP_LEVEL_FLAGS_POST(LEVEL,FLAGS)
#endif
#if ENABLE_WPP_RECORDER
#if ENABLE_WPP_TRACE_FILTERING_WITH_WPP_RECORDER
#define WPP_CALL_Vc4Display_cpp712(MSG) \
    WPP_LOG_ALWAYS(WPP_EX_LEVEL_FLAGS(TRACE_LEVEL_VERBOSE, ROS_TRACING_DEFAULT), MSG) \
    WPP_LEVEL_FLAGS_PRE(TRACE_LEVEL_VERBOSE, ROS_TRACING_DEFAULT) \
    do {\
        WPP_ANNOTATE(Vc4Display_cpp712) 0; \
        BOOLEAN wppEnabled = WPP_CHECK_INIT WPP_LEVEL_FLAGS_ENABLED(TRACE_LEVEL_VERBOSE, ROS_TRACING_DEFAULT); \
        BOOLEAN recorderEnabled = WPP_RECORDER_CHECK_INIT WPP_RECORDER_LEVEL_FLAGS_FILTER(TRACE_LEVEL_VERBOSE, ROS_TRACING_DEFAULT); \
        if (wppEnabled || recorderEnabled) { \
            WPP_INVOKE_WPP_DEBUG((MSG)); \
            WPP_RECORDER_AND_TRACE_SF_sD( \
                     WPP_LEVEL_FLAGS_LOGGER(TRACE_LEVEL_VERBOSE, ROS_TRACING_DEFAULT) \
                     wppEnabled, recorderEnabled, \
                     WPP_RECORDER_LEVEL_FLAGS_ARGS(TRACE_LEVEL_VERBOSE, ROS_TRACING_DEFAULT), \
                     42, \
                     WPP_LOCAL_TraceGuids+0, __FILE__, __LINE__);\
        } \
    } \
    while(0) \
    WPP_LEVEL_FLAGS_POST(TRACE_LEVEL_VERBOSE, ROS_TRACING_DEFAULT)
#else // ENABLE_WPP_TRACE_FILTERING_WITH_WPP_RECORDER
#define WPP_CALL_Vc4Display_cpp712(MSG) \
    WPP_LOG_ALWAYS(WPP_EX_LEVEL_FLAGS(TRACE_LEVEL_VERBOSE, ROS_TRACING_DEFAULT), MSG) \
    WPP_LEVEL_FLAGS_PRE(TRACE_LEVEL_VERBOSE, ROS_TRACING_DEFAULT) \
    WPP_ANNOTATE(Vc4Display_cpp712) \
    (( \
        WPP_RECORDER_CHECK_INIT WPP_RECORDER_LEVEL_FLAGS_FILTER(TRACE_LEVEL_VERBOSE, ROS_TRACING_DEFAULT) \
        ?   WPP_INVOKE_WPP_DEBUG((MSG)), \
            WPP_RECORDER_SF_sD( \
                WPP_RECORDER_LEVEL_FLAGS_ARGS(TRACE_LEVEL_VERBOSE, ROS_TRACING_DEFAULT), \
                42, \
                WPP_LOCAL_TraceGuids+0, __FILE__, __LINE__), \
            1 \
        :   0 \
    )) \
    WPP_LEVEL_FLAGS_POST(TRACE_LEVEL_VERBOSE, ROS_TRACING_DEFAULT)
#endif // ENABLE_WPP_TRACE_FILTERING_WITH_WPP_RECORDER
#else  // ENABLE_WPP_RECORDER
#define WPP_CALL_Vc4Display_cpp712(MSG) \
    WPP_LOG_ALWAYS(WPP_EX_LEVEL_FLAGS(TRACE_LEVEL_VERBOSE, ROS_TRACING_DEFAULT), MSG) \
    WPP_LEVEL_FLAGS_PRE(TRACE_LEVEL_VERBOSE, ROS_TRACING_DEFAULT) \
    WPP_ANNOTATE(Vc4Display_cpp712) \
    (( \
        WPP_CHECK_INIT WPP_LEVEL_FLAGS_ENABLED(TRACE_LEVEL_VERBOSE, ROS_TRACING_DEFAULT) \
        ?   WPP_INVOKE_WPP_DEBUG((MSG)), \
            WPP_SF_sD( \
                WPP_LEVEL_FLAGS_LOGGER(TRACE_LEVEL_VERBOSE, ROS_TRACING_DEFAULT) \
                42, \
                WPP_LOCAL_TraceGuids+0, __FILE__, __LINE__), \
            1 \
        :   0 \
    )) \
    WPP_LEVEL_FLAGS_POST(TRACE_LEVEL_VERBOSE, ROS_TRACING_DEFAULT)
#endif // ENABLE_WPP_RECORDER

// WPP_CALL_Vc4Display_cpp732
#ifndef WPP_LEVEL_FLAGS_PRE
#  define WPP_LEVEL_FLAGS_PRE(LEVEL,FLAGS)
#endif
#ifndef WPP_LEVEL_FLAGS_POST
#  define WPP_LEVEL_FLAGS_POST(LEVEL,FLAGS)
#endif
#if ENABLE_WPP_RECORDER
#if ENABLE_WPP_TRACE_FILTERING_WITH_WPP_RECORDER
#define WPP_CALL_Vc4Display_cpp732(MSG) \
    WPP_LOG_ALWAYS(WPP_EX_LEVEL_FLAGS(TRACE_LEVEL_ERROR, ROS_TRACING_DEFAULT), MSG) \
    WPP_LEVEL_FLAGS_PRE(TRACE_LEVEL_ERROR, ROS_TRACING_DEFAULT) \
    do {\
        WPP_ANNOTATE(Vc4Display_cpp732) 0; \
        BOOLEAN wppEnabled = WPP_CHECK_INIT WPP_LEVEL_FLAGS_ENABLED(TRACE_LEVEL_ERROR, ROS_TRACING_DEFAULT); \
        BOOLEAN recorderEnabled = WPP_RECORDER_CHECK_INIT WPP_RECORDER_LEVEL_FLAGS_FILTER(TRACE_LEVEL_ERROR, ROS_TRACING_DEFAULT); \
        if (wppEnabled || recorderEnabled) { \
            WPP_INVOKE_WPP_DEBUG((MSG)); \
            WPP_RECORDER_AND_TRACE_SF_sD( \
                     WPP_LEVEL_FLAGS_LOGGER(TRACE_LEVEL_ERROR, ROS_TRACING_DEFAULT) \
                     wppEnabled, recorderEnabled, \
                     WPP_RECORDER_LEVEL_FLAGS_ARGS(TRACE_LEVEL_ERROR, ROS_TRACING_DEFAULT), \
                     43, \
                     WPP_LOCAL_TraceGuids+0, __FILE__, __LINE__);\
        } \
    } \
    while(0) \
    WPP_LEVEL_FLAGS_POST(TRACE_LEVEL_ERROR, ROS_TRACING_DEFAULT)
#else // ENABLE_WPP_TRACE_FILTERING_WITH_WPP_RECORDER
#define WPP_CALL_Vc4Display_cpp732(MSG) \
    WPP_LOG_ALWAYS(WPP_EX_LEVEL_FLAGS(TRACE_LEVEL_ERROR, ROS_TRACING_DEFAULT), MSG) \
    WPP_LEVEL_FLAGS_PRE(TRACE_LEVEL_ERROR, ROS_TRACING_DEFAULT) \
    WPP_ANNOTATE(Vc4Display_cpp732) \
    (( \
        WPP_RECORDER_CHECK_INIT WPP_RECORDER_LEVEL_FLAGS_FILTER(TRACE_LEVEL_ERROR, ROS_TRACING_DEFAULT) \
        ?   WPP_INVOKE_WPP_DEBUG((MSG)), \
            WPP_RECORDER_SF_sD( \
                WPP_RECORDER_LEVEL_FLAGS_ARGS(TRACE_LEVEL_ERROR, ROS_TRACING_DEFAULT), \
                43, \
                WPP_LOCAL_TraceGuids+0, __FILE__, __LINE__), \
            1 \
        :   0 \
    )) \
    WPP_LEVEL_FLAGS_POST(TRACE_LEVEL_ERROR, ROS_TRACING_DEFAULT)
#endif // ENABLE_WPP_TRACE_FILTERING_WITH_WPP_RECORDER
#else  // ENABLE_WPP_RECORDER
#define WPP_CALL_Vc4Display_cpp732(MSG) \
    WPP_LOG_ALWAYS(WPP_EX_LEVEL_FLAGS(TRACE_LEVEL_ERROR, ROS_TRACING_DEFAULT), MSG) \
    WPP_LEVEL_FLAGS_PRE(TRACE_LEVEL_ERROR, ROS_TRACING_DEFAULT) \
    WPP_ANNOTATE(Vc4Display_cpp732) \
    (( \
        WPP_CHECK_INIT WPP_LEVEL_FLAGS_ENABLED(TRACE_LEVEL_ERROR, ROS_TRACING_DEFAULT) \
        ?   WPP_INVOKE_WPP_DEBUG((MSG)), \
            WPP_SF_sD( \
                WPP_LEVEL_FLAGS_LOGGER(TRACE_LEVEL_ERROR, ROS_TRACING_DEFAULT) \
                43, \
                WPP_LOCAL_TraceGuids+0, __FILE__, __LINE__), \
            1 \
        :   0 \
    )) \
    WPP_LEVEL_FLAGS_POST(TRACE_LEVEL_ERROR, ROS_TRACING_DEFAULT)
#endif // ENABLE_WPP_RECORDER

// WPP_CALL_Vc4Display_cpp735
#ifndef WPP_LEVEL_FLAGS_PRE
#  define WPP_LEVEL_FLAGS_PRE(LEVEL,FLAGS)
#endif
#ifndef WPP_LEVEL_FLAGS_POST
#  define WPP_LEVEL_FLAGS_POST(LEVEL,FLAGS)
#endif
#if ENABLE_WPP_RECORDER
#if ENABLE_WPP_TRACE_FILTERING_WITH_WPP_RECORDER
#define WPP_CALL_Vc4Display_cpp735(MSG) \
    WPP_LOG_ALWAYS(WPP_EX_LEVEL_FLAGS(TRACE_LEVEL_ERROR, ROS_TRACING_DEFAULT), MSG) \
    WPP_LEVEL_FLAGS_PRE(TRACE_LEVEL_ERROR, ROS_TRACING_DEFAULT) \
    do {\
        WPP_ANNOTATE(Vc4Display_cpp735) 0; \
        BOOLEAN wppEnabled = WPP_CHECK_INIT WPP_LEVEL_FLAGS_ENABLED(TRACE_LEVEL_ERROR, ROS_TRACING_DEFAULT); \
        BOOLEAN recorderEnabled = WPP_RECORDER_CHECK_INIT WPP_RECORDER_LEVEL_FLAGS_FILTER(TRACE_LEVEL_ERROR, ROS_TRACING_DEFAULT); \
        if (wppEnabled || recorderEnabled) { \
            WPP_INVOKE_WPP_DEBUG((MSG)); \
            WPP_RECORDER_AND_TRACE_SF_sD( \
                     WPP_LEVEL_FLAGS_LOGGER(TRACE_LEVEL_ERROR, ROS_TRACING_DEFAULT) \
                     wppEnabled, recorderEnabled, \
                     WPP_RECORDER_LEVEL_FLAGS_ARGS(TRACE_LEVEL_ERROR, ROS_TRACING_DEFAULT), \
                     44, \
                     WPP_LOCAL_TraceGuids+0, __FILE__, __LINE__);\
        } \
    } \
    while(0) \
    WPP_LEVEL_FLAGS_POST(TRACE_LEVEL_ERROR, ROS_TRACING_DEFAULT)
#else // ENABLE_WPP_TRACE_FILTERING_WITH_WPP_RECORDER
#define WPP_CALL_Vc4Display_cpp735(MSG) \
    WPP_LOG_ALWAYS(WPP_EX_LEVEL_FLAGS(TRACE_LEVEL_ERROR, ROS_TRACING_DEFAULT), MSG) \
    WPP_LEVEL_FLAGS_PRE(TRACE_LEVEL_ERROR, ROS_TRACING_DEFAULT) \
    WPP_ANNOTATE(Vc4Display_cpp735) \
    (( \
        WPP_RECORDER_CHECK_INIT WPP_RECORDER_LEVEL_FLAGS_FILTER(TRACE_LEVEL_ERROR, ROS_TRACING_DEFAULT) \
        ?   WPP_INVOKE_WPP_DEBUG((MSG)), \
            WPP_RECORDER_SF_sD( \
                WPP_RECORDER_LEVEL_FLAGS_ARGS(TRACE_LEVEL_ERROR, ROS_TRACING_DEFAULT), \
                44, \
                WPP_LOCAL_TraceGuids+0, __FILE__, __LINE__), \
            1 \
        :   0 \
    )) \
    WPP_LEVEL_FLAGS_POST(TRACE_LEVEL_ERROR, ROS_TRACING_DEFAULT)
#endif // ENABLE_WPP_TRACE_FILTERING_WITH_WPP_RECORDER
#else  // ENABLE_WPP_RECORDER
#define WPP_CALL_Vc4Display_cpp735(MSG) \
    WPP_LOG_ALWAYS(WPP_EX_LEVEL_FLAGS(TRACE_LEVEL_ERROR, ROS_TRACING_DEFAULT), MSG) \
    WPP_LEVEL_FLAGS_PRE(TRACE_LEVEL_ERROR, ROS_TRACING_DEFAULT) \
    WPP_ANNOTATE(Vc4Display_cpp735) \
    (( \
        WPP_CHECK_INIT WPP_LEVEL_FLAGS_ENABLED(TRACE_LEVEL_ERROR, ROS_TRACING_DEFAULT) \
        ?   WPP_INVOKE_WPP_DEBUG((MSG)), \
            WPP_SF_sD( \
                WPP_LEVEL_FLAGS_LOGGER(TRACE_LEVEL_ERROR, ROS_TRACING_DEFAULT) \
                44, \
                WPP_LOCAL_TraceGuids+0, __FILE__, __LINE__), \
            1 \
        :   0 \
    )) \
    WPP_LEVEL_FLAGS_POST(TRACE_LEVEL_ERROR, ROS_TRACING_DEFAULT)
#endif // ENABLE_WPP_RECORDER

// WPP_CALL_Vc4Display_cpp739
#ifndef WPP_LEVEL_FLAGS_PRE
#  define WPP_LEVEL_FLAGS_PRE(LEVEL,FLAGS)
#endif
#ifndef WPP_LEVEL_FLAGS_POST
#  define WPP_LEVEL_FLAGS_POST(LEVEL,FLAGS)
#endif
#if ENABLE_WPP_RECORDER
#if ENABLE_WPP_TRACE_FILTERING_WITH_WPP_RECORDER
#define WPP_CALL_Vc4Display_cpp739(MSG, _a12) \
    WPP_LOG_ALWAYS(WPP_EX_LEVEL_FLAGS(TRACE_LEVEL_ERROR, ROS_TRACING_DEFAULT), MSG, _a12) \
    WPP_LEVEL_FLAGS_PRE(TRACE_LEVEL_ERROR, ROS_TRACING_DEFAULT) \
    do {\
        WPP_ANNOTATE(Vc4Display_cpp739) 0; \
        BOOLEAN wppEnabled = WPP_CHECK_INIT WPP_LEVEL_FLAGS_ENABLED(TRACE_LEVEL_ERROR, ROS_TRACING_DEFAULT); \
        BOOLEAN recorderEnabled = WPP_RECORDER_CHECK_INIT WPP_RECORDER_LEVEL_FLAGS_FILTER(TRACE_LEVEL_ERROR, ROS_TRACING_DEFAULT); \
        if (wppEnabled || recorderEnabled) { \
            WPP_INVOKE_WPP_DEBUG((MSG, _a12)); \
            WPP_RECORDER_AND_TRACE_SF_sDd( \
                     WPP_LEVEL_FLAGS_LOGGER(TRACE_LEVEL_ERROR, ROS_TRACING_DEFAULT) \
                     wppEnabled, recorderEnabled, \
                     WPP_RECORDER_LEVEL_FLAGS_ARGS(TRACE_LEVEL_ERROR, ROS_TRACING_DEFAULT), \
                     45, \
                     WPP_LOCAL_TraceGuids+0, __FILE__, __LINE__, _a12);\
        } \
    } \
    while(0) \
    WPP_LEVEL_FLAGS_POST(TRACE_LEVEL_ERROR, ROS_TRACING_DEFAULT)
#else // ENABLE_WPP_TRACE_FILTERING_WITH_WPP_RECORDER
#define WPP_CALL_Vc4Display_cpp739(MSG, _a12) \
    WPP_LOG_ALWAYS(WPP_EX_LEVEL_FLAGS(TRACE_LEVEL_ERROR, ROS_TRACING_DEFAULT), MSG, _a12) \
    WPP_LEVEL_FLAGS_PRE(TRACE_LEVEL_ERROR, ROS_TRACING_DEFAULT) \
    WPP_ANNOTATE(Vc4Display_cpp739) \
    (( \
        WPP_RECORDER_CHECK_INIT WPP_RECORDER_LEVEL_FLAGS_FILTER(TRACE_LEVEL_ERROR, ROS_TRACING_DEFAULT) \
        ?   WPP_INVOKE_WPP_DEBUG((MSG, _a12)), \
            WPP_RECORDER_SF_sDd( \
                WPP_RECORDER_LEVEL_FLAGS_ARGS(TRACE_LEVEL_ERROR, ROS_TRACING_DEFAULT), \
                45, \
                WPP_LOCAL_TraceGuids+0, __FILE__, __LINE__, _a12), \
            1 \
        :   0 \
    )) \
    WPP_LEVEL_FLAGS_POST(TRACE_LEVEL_ERROR, ROS_TRACING_DEFAULT)
#endif // ENABLE_WPP_TRACE_FILTERING_WITH_WPP_RECORDER
#else  // ENABLE_WPP_RECORDER
#define WPP_CALL_Vc4Display_cpp739(MSG, _a12) \
    WPP_LOG_ALWAYS(WPP_EX_LEVEL_FLAGS(TRACE_LEVEL_ERROR, ROS_TRACING_DEFAULT), MSG, _a12) \
    WPP_LEVEL_FLAGS_PRE(TRACE_LEVEL_ERROR, ROS_TRACING_DEFAULT) \
    WPP_ANNOTATE(Vc4Display_cpp739) \
    (( \
        WPP_CHECK_INIT WPP_LEVEL_FLAGS_ENABLED(TRACE_LEVEL_ERROR, ROS_TRACING_DEFAULT) \
        ?   WPP_INVOKE_WPP_DEBUG((MSG, _a12)), \
            WPP_SF_sDd( \
                WPP_LEVEL_FLAGS_LOGGER(TRACE_LEVEL_ERROR, ROS_TRACING_DEFAULT) \
                45, \
                WPP_LOCAL_TraceGuids+0, __FILE__, __LINE__, _a12), \
            1 \
        :   0 \
    )) \
    WPP_LEVEL_FLAGS_POST(TRACE_LEVEL_ERROR, ROS_TRACING_DEFAULT)
#endif // ENABLE_WPP_RECORDER

// WPP_CALL_Vc4Display_cpp745
#ifndef WPP_LEVEL_FLAGS_PRE
#  define WPP_LEVEL_FLAGS_PRE(LEVEL,FLAGS)
#endif
#ifndef WPP_LEVEL_FLAGS_POST
#  define WPP_LEVEL_FLAGS_POST(LEVEL,FLAGS)
#endif
#if ENABLE_WPP_RECORDER
#if ENABLE_WPP_TRACE_FILTERING_WITH_WPP_RECORDER
#define WPP_CALL_Vc4Display_cpp745(MSG, _a12) \
    WPP_LOG_ALWAYS(WPP_EX_LEVEL_FLAGS(TRACE_LEVEL_VERBOSE, ROS_TRACING_DEFAULT), MSG, _a12) \
    WPP_LEVEL_FLAGS_PRE(TRACE_LEVEL_VERBOSE, ROS_TRACING_DEFAULT) \
    do {\
        WPP_ANNOTATE(Vc4Display_cpp745) 0; \
        BOOLEAN wppEnabled = WPP_CHECK_INIT WPP_LEVEL_FLAGS_ENABLED(TRACE_LEVEL_VERBOSE, ROS_TRACING_DEFAULT); \
        BOOLEAN recorderEnabled = WPP_RECORDER_CHECK_INIT WPP_RECORDER_LEVEL_FLAGS_FILTER(TRACE_LEVEL_VERBOSE, ROS_TRACING_DEFAULT); \
        if (wppEnabled || recorderEnabled) { \
            WPP_INVOKE_WPP_DEBUG((MSG, _a12)); \
            WPP_RECORDER_AND_TRACE_SF_sDd( \
                     WPP_LEVEL_FLAGS_LOGGER(TRACE_LEVEL_VERBOSE, ROS_TRACING_DEFAULT) \
                     wppEnabled, recorderEnabled, \
                     WPP_RECORDER_LEVEL_FLAGS_ARGS(TRACE_LEVEL_VERBOSE, ROS_TRACING_DEFAULT), \
                     46, \
                     WPP_LOCAL_TraceGuids+0, __FILE__, __LINE__, _a12);\
        } \
    } \
    while(0) \
    WPP_LEVEL_FLAGS_POST(TRACE_LEVEL_VERBOSE, ROS_TRACING_DEFAULT)
#else // ENABLE_WPP_TRACE_FILTERING_WITH_WPP_RECORDER
#define WPP_CALL_Vc4Display_cpp745(MSG, _a12) \
    WPP_LOG_ALWAYS(WPP_EX_LEVEL_FLAGS(TRACE_LEVEL_VERBOSE, ROS_TRACING_DEFAULT), MSG, _a12) \
    WPP_LEVEL_FLAGS_PRE(TRACE_LEVEL_VERBOSE, ROS_TRACING_DEFAULT) \
    WPP_ANNOTATE(Vc4Display_cpp745) \
    (( \
        WPP_RECORDER_CHECK_INIT WPP_RECORDER_LEVEL_FLAGS_FILTER(TRACE_LEVEL_VERBOSE, ROS_TRACING_DEFAULT) \
        ?   WPP_INVOKE_WPP_DEBUG((MSG, _a12)), \
            WPP_RECORDER_SF_sDd( \
                WPP_RECORDER_LEVEL_FLAGS_ARGS(TRACE_LEVEL_VERBOSE, ROS_TRACING_DEFAULT), \
                46, \
                WPP_LOCAL_TraceGuids+0, __FILE__, __LINE__, _a12), \
            1 \
        :   0 \
    )) \
    WPP_LEVEL_FLAGS_POST(TRACE_LEVEL_VERBOSE, ROS_TRACING_DEFAULT)
#endif // ENABLE_WPP_TRACE_FILTERING_WITH_WPP_RECORDER
#else  // ENABLE_WPP_RECORDER
#define WPP_CALL_Vc4Display_cpp745(MSG, _a12) \
    WPP_LOG_ALWAYS(WPP_EX_LEVEL_FLAGS(TRACE_LEVEL_VERBOSE, ROS_TRACING_DEFAULT), MSG, _a12) \
    WPP_LEVEL_FLAGS_PRE(TRACE_LEVEL_VERBOSE, ROS_TRACING_DEFAULT) \
    WPP_ANNOTATE(Vc4Display_cpp745) \
    (( \
        WPP_CHECK_INIT WPP_LEVEL_FLAGS_ENABLED(TRACE_LEVEL_VERBOSE, ROS_TRACING_DEFAULT) \
        ?   WPP_INVOKE_WPP_DEBUG((MSG, _a12)), \
            WPP_SF_sDd( \
                WPP_LEVEL_FLAGS_LOGGER(TRACE_LEVEL_VERBOSE, ROS_TRACING_DEFAULT) \
                46, \
                WPP_LOCAL_TraceGuids+0, __FILE__, __LINE__, _a12), \
            1 \
        :   0 \
    )) \
    WPP_LEVEL_FLAGS_POST(TRACE_LEVEL_VERBOSE, ROS_TRACING_DEFAULT)
#endif // ENABLE_WPP_RECORDER

// WPP_CALL_Vc4Display_cpp781
#ifndef WPP_LEVEL_FLAGS_PRE
#  define WPP_LEVEL_FLAGS_PRE(LEVEL,FLAGS)
#endif
#ifndef WPP_LEVEL_FLAGS_POST
#  define WPP_LEVEL_FLAGS_POST(LEVEL,FLAGS)
#endif
#if ENABLE_WPP_RECORDER
#if ENABLE_WPP_TRACE_FILTERING_WITH_WPP_RECORDER
#define WPP_CALL_Vc4Display_cpp781(MSG, _a12) \
    WPP_LOG_ALWAYS(WPP_EX_LEVEL_FLAGS(TRACE_LEVEL_ERROR, ROS_TRACING_DEBUG), MSG, _a12) \
    WPP_LEVEL_FLAGS_PRE(TRACE_LEVEL_ERROR, ROS_TRACING_DEBUG) \
    do {\
        WPP_ANNOTATE(Vc4Display_cpp781) 0; \
        BOOLEAN wppEnabled = WPP_CHECK_INIT WPP_LEVEL_FLAGS_ENABLED(TRACE_LEVEL_ERROR, ROS_TRACING_DEBUG); \
        BOOLEAN recorderEnabled = WPP_RECORDER_CHECK_INIT WPP_RECORDER_LEVEL_FLAGS_FILTER(TRACE_LEVEL_ERROR, ROS_TRACING_DEBUG); \
        if (wppEnabled || recorderEnabled) { \
            WPP_INVOKE_WPP_DEBUG((MSG, _a12)); \
            WPP_RECORDER_AND_TRACE_SF_sDd( \
                     WPP_LEVEL_FLAGS_LOGGER(TRACE_LEVEL_ERROR, ROS_TRACING_DEBUG) \
                     wppEnabled, recorderEnabled, \
                     WPP_RECORDER_LEVEL_FLAGS_ARGS(TRACE_LEVEL_ERROR, ROS_TRACING_DEBUG), \
                     47, \
                     WPP_LOCAL_TraceGuids+0, __FILE__, __LINE__, _a12);\
        } \
    } \
    while(0) \
    WPP_LEVEL_FLAGS_POST(TRACE_LEVEL_ERROR, ROS_TRACING_DEBUG)
#else // ENABLE_WPP_TRACE_FILTERING_WITH_WPP_RECORDER
#define WPP_CALL_Vc4Display_cpp781(MSG, _a12) \
    WPP_LOG_ALWAYS(WPP_EX_LEVEL_FLAGS(TRACE_LEVEL_ERROR, ROS_TRACING_DEBUG), MSG, _a12) \
    WPP_LEVEL_FLAGS_PRE(TRACE_LEVEL_ERROR, ROS_TRACING_DEBUG) \
    WPP_ANNOTATE(Vc4Display_cpp781) \
    (( \
        WPP_RECORDER_CHECK_INIT WPP_RECORDER_LEVEL_FLAGS_FILTER(TRACE_LEVEL_ERROR, ROS_TRACING_DEBUG) \
        ?   WPP_INVOKE_WPP_DEBUG((MSG, _a12)), \
            WPP_RECORDER_SF_sDd( \
                WPP_RECORDER_LEVEL_FLAGS_ARGS(TRACE_LEVEL_ERROR, ROS_TRACING_DEBUG), \
                47, \
                WPP_LOCAL_TraceGuids+0, __FILE__, __LINE__, _a12), \
            1 \
        :   0 \
    )) \
    WPP_LEVEL_FLAGS_POST(TRACE_LEVEL_ERROR, ROS_TRACING_DEBUG)
#endif // ENABLE_WPP_TRACE_FILTERING_WITH_WPP_RECORDER
#else  // ENABLE_WPP_RECORDER
#define WPP_CALL_Vc4Display_cpp781(MSG, _a12) \
    WPP_LOG_ALWAYS(WPP_EX_LEVEL_FLAGS(TRACE_LEVEL_ERROR, ROS_TRACING_DEBUG), MSG, _a12) \
    WPP_LEVEL_FLAGS_PRE(TRACE_LEVEL_ERROR, ROS_TRACING_DEBUG) \
    WPP_ANNOTATE(Vc4Display_cpp781) \
    (( \
        WPP_CHECK_INIT WPP_LEVEL_FLAGS_ENABLED(TRACE_LEVEL_ERROR, ROS_TRACING_DEBUG) \
        ?   WPP_INVOKE_WPP_DEBUG((MSG, _a12)), \
            WPP_SF_sDd( \
                WPP_LEVEL_FLAGS_LOGGER(TRACE_LEVEL_ERROR, ROS_TRACING_DEBUG) \
                47, \
                WPP_LOCAL_TraceGuids+0, __FILE__, __LINE__, _a12), \
            1 \
        :   0 \
    )) \
    WPP_LEVEL_FLAGS_POST(TRACE_LEVEL_ERROR, ROS_TRACING_DEBUG)
#endif // ENABLE_WPP_RECORDER

// WPP_CALL_Vc4Display_cpp785
#ifndef WPP_LEVEL_FLAGS_PRE
#  define WPP_LEVEL_FLAGS_PRE(LEVEL,FLAGS)
#endif
#ifndef WPP_LEVEL_FLAGS_POST
#  define WPP_LEVEL_FLAGS_POST(LEVEL,FLAGS)
#endif
#if ENABLE_WPP_RECORDER
#if ENABLE_WPP_TRACE_FILTERING_WITH_WPP_RECORDER
#define WPP_CALL_Vc4Display_cpp785(MSG, _a12, _a13, _a14) \
    WPP_LOG_ALWAYS(WPP_EX_LEVEL_FLAGS(TRACE_LEVEL_VERBOSE, ROS_TRACING_DEFAULT), MSG, _a12, _a13, _a14) \
    WPP_LEVEL_FLAGS_PRE(TRACE_LEVEL_VERBOSE, ROS_TRACING_DEFAULT) \
    do {\
        WPP_ANNOTATE(Vc4Display_cpp785) 0; \
        BOOLEAN wppEnabled = WPP_CHECK_INIT WPP_LEVEL_FLAGS_ENABLED(TRACE_LEVEL_VERBOSE, ROS_TRACING_DEFAULT); \
        BOOLEAN recorderEnabled = WPP_RECORDER_CHECK_INIT WPP_RECORDER_LEVEL_FLAGS_FILTER(TRACE_LEVEL_VERBOSE, ROS_TRACING_DEFAULT); \
        if (wppEnabled || recorderEnabled) { \
            WPP_INVOKE_WPP_DEBUG((MSG, _a12, _a13, _a14)); \
            WPP_RECORDER_AND_TRACE_SF_sDddd( \
                     WPP_LEVEL_FLAGS_LOGGER(TRACE_LEVEL_VERBOSE, ROS_TRACING_DEFAULT) \
                     wppEnabled, recorderEnabled, \
                     WPP_RECORDER_LEVEL_FLAGS_ARGS(TRACE_LEVEL_VERBOSE, ROS_TRACING_DEFAULT), \
                     48, \
                     WPP_LOCAL_TraceGuids+0, __FILE__, __LINE__, _a12, _a13, _a14);\
        } \
    } \
    while(0) \
    WPP_LEVEL_FLAGS_POST(TRACE_LEVEL_VERBOSE, ROS_TRACING_DEFAULT)
#else // ENABLE_WPP_TRACE_FILTERING_WITH_WPP_RECORDER
#define WPP_CALL_Vc4Display_cpp785(MSG, _a12, _a13, _a14) \
    WPP_LOG_ALWAYS(WPP_EX_LEVEL_FLAGS(TRACE_LEVEL_VERBOSE, ROS_TRACING_DEFAULT), MSG, _a12, _a13, _a14) \
    WPP_LEVEL_FLAGS_PRE(TRACE_LEVEL_VERBOSE, ROS_TRACING_DEFAULT) \
    WPP_ANNOTATE(Vc4Display_cpp785) \
    (( \
        WPP_RECORDER_CHECK_INIT WPP_RECORDER_LEVEL_FLAGS_FILTER(TRACE_LEVEL_VERBOSE, ROS_TRACING_DEFAULT) \
        ?   WPP_INVOKE_WPP_DEBUG((MSG, _a12, _a13, _a14)), \
            WPP_RECORDER_SF_sDddd( \
                WPP_RECORDER_LEVEL_FLAGS_ARGS(TRACE_LEVEL_VERBOSE, ROS_TRACING_DEFAULT), \
                48, \
                WPP_LOCAL_TraceGuids+0, __FILE__, __LINE__, _a12, _a13, _a14), \
            1 \
        :   0 \
    )) \
    WPP_LEVEL_FLAGS_POST(TRACE_LEVEL_VERBOSE, ROS_TRACING_DEFAULT)
#endif // ENABLE_WPP_TRACE_FILTERING_WITH_WPP_RECORDER
#else  // ENABLE_WPP_RECORDER
#define WPP_CALL_Vc4Display_cpp785(MSG, _a12, _a13, _a14) \
    WPP_LOG_ALWAYS(WPP_EX_LEVEL_FLAGS(TRACE_LEVEL_VERBOSE, ROS_TRACING_DEFAULT), MSG, _a12, _a13, _a14) \
    WPP_LEVEL_FLAGS_PRE(TRACE_LEVEL_VERBOSE, ROS_TRACING_DEFAULT) \
    WPP_ANNOTATE(Vc4Display_cpp785) \
    (( \
        WPP_CHECK_INIT WPP_LEVEL_FLAGS_ENABLED(TRACE_LEVEL_VERBOSE, ROS_TRACING_DEFAULT) \
        ?   WPP_INVOKE_WPP_DEBUG((MSG, _a12, _a13, _a14)), \
            WPP_SF_sDddd( \
                WPP_LEVEL_FLAGS_LOGGER(TRACE_LEVEL_VERBOSE, ROS_TRACING_DEFAULT) \
                48, \
                WPP_LOCAL_TraceGuids+0, __FILE__, __LINE__, _a12, _a13, _a14), \
            1 \
        :   0 \
    )) \
    WPP_LEVEL_FLAGS_POST(TRACE_LEVEL_VERBOSE, ROS_TRACING_DEFAULT)
#endif // ENABLE_WPP_RECORDER

// WPP_CALL_Vc4Display_cpp809
#ifndef WPP_LEVEL_FLAGS_PRE
#  define WPP_LEVEL_FLAGS_PRE(LEVEL,FLAGS)
#endif
#ifndef WPP_LEVEL_FLAGS_POST
#  define WPP_LEVEL_FLAGS_POST(LEVEL,FLAGS)
#endif
#if ENABLE_WPP_RECORDER
#if ENABLE_WPP_TRACE_FILTERING_WITH_WPP_RECORDER
#define WPP_CALL_Vc4Display_cpp809(MSG) \
    WPP_LOG_ALWAYS(WPP_EX_LEVEL_FLAGS(TRACE_LEVEL_VERBOSE, ROS_TRACING_DEFAULT), MSG) \
    WPP_LEVEL_FLAGS_PRE(TRACE_LEVEL_VERBOSE, ROS_TRACING_DEFAULT) \
    do {\
        WPP_ANNOTATE(Vc4Display_cpp809) 0; \
        BOOLEAN wppEnabled = WPP_CHECK_INIT WPP_LEVEL_FLAGS_ENABLED(TRACE_LEVEL_VERBOSE, ROS_TRACING_DEFAULT); \
        BOOLEAN recorderEnabled = WPP_RECORDER_CHECK_INIT WPP_RECORDER_LEVEL_FLAGS_FILTER(TRACE_LEVEL_VERBOSE, ROS_TRACING_DEFAULT); \
        if (wppEnabled || recorderEnabled) { \
            WPP_INVOKE_WPP_DEBUG((MSG)); \
            WPP_RECORDER_AND_TRACE_SF_sD( \
                     WPP_LEVEL_FLAGS_LOGGER(TRACE_LEVEL_VERBOSE, ROS_TRACING_DEFAULT) \
                     wppEnabled, recorderEnabled, \
                     WPP_RECORDER_LEVEL_FLAGS_ARGS(TRACE_LEVEL_VERBOSE, ROS_TRACING_DEFAULT), \
                     49, \
                     WPP_LOCAL_TraceGuids+0, __FILE__, __LINE__);\
        } \
    } \
    while(0) \
    WPP_LEVEL_FLAGS_POST(TRACE_LEVEL_VERBOSE, ROS_TRACING_DEFAULT)
#else // ENABLE_WPP_TRACE_FILTERING_WITH_WPP_RECORDER
#define WPP_CALL_Vc4Display_cpp809(MSG) \
    WPP_LOG_ALWAYS(WPP_EX_LEVEL_FLAGS(TRACE_LEVEL_VERBOSE, ROS_TRACING_DEFAULT), MSG) \
    WPP_LEVEL_FLAGS_PRE(TRACE_LEVEL_VERBOSE, ROS_TRACING_DEFAULT) \
    WPP_ANNOTATE(Vc4Display_cpp809) \
    (( \
        WPP_RECORDER_CHECK_INIT WPP_RECORDER_LEVEL_FLAGS_FILTER(TRACE_LEVEL_VERBOSE, ROS_TRACING_DEFAULT) \
        ?   WPP_INVOKE_WPP_DEBUG((MSG)), \
            WPP_RECORDER_SF_sD( \
                WPP_RECORDER_LEVEL_FLAGS_ARGS(TRACE_LEVEL_VERBOSE, ROS_TRACING_DEFAULT), \
                49, \
                WPP_LOCAL_TraceGuids+0, __FILE__, __LINE__), \
            1 \
        :   0 \
    )) \
    WPP_LEVEL_FLAGS_POST(TRACE_LEVEL_VERBOSE, ROS_TRACING_DEFAULT)
#endif // ENABLE_WPP_TRACE_FILTERING_WITH_WPP_RECORDER
#else  // ENABLE_WPP_RECORDER
#define WPP_CALL_Vc4Display_cpp809(MSG) \
    WPP_LOG_ALWAYS(WPP_EX_LEVEL_FLAGS(TRACE_LEVEL_VERBOSE, ROS_TRACING_DEFAULT), MSG) \
    WPP_LEVEL_FLAGS_PRE(TRACE_LEVEL_VERBOSE, ROS_TRACING_DEFAULT) \
    WPP_ANNOTATE(Vc4Display_cpp809) \
    (( \
        WPP_CHECK_INIT WPP_LEVEL_FLAGS_ENABLED(TRACE_LEVEL_VERBOSE, ROS_TRACING_DEFAULT) \
        ?   WPP_INVOKE_WPP_DEBUG((MSG)), \
            WPP_SF_sD( \
                WPP_LEVEL_FLAGS_LOGGER(TRACE_LEVEL_VERBOSE, ROS_TRACING_DEFAULT) \
                49, \
                WPP_LOCAL_TraceGuids+0, __FILE__, __LINE__), \
            1 \
        :   0 \
    )) \
    WPP_LEVEL_FLAGS_POST(TRACE_LEVEL_VERBOSE, ROS_TRACING_DEFAULT)
#endif // ENABLE_WPP_RECORDER

// WPP_CALL_Vc4Display_cpp812
#ifndef WPP_LEVEL_FLAGS_PRE
#  define WPP_LEVEL_FLAGS_PRE(LEVEL,FLAGS)
#endif
#ifndef WPP_LEVEL_FLAGS_POST
#  define WPP_LEVEL_FLAGS_POST(LEVEL,FLAGS)
#endif
#if ENABLE_WPP_RECORDER
#if ENABLE_WPP_TRACE_FILTERING_WITH_WPP_RECORDER
#define WPP_CALL_Vc4Display_cpp812(MSG) \
    WPP_LOG_ALWAYS(WPP_EX_LEVEL_FLAGS(TRACE_LEVEL_ERROR, ROS_TRACING_DEBUG), MSG) \
    WPP_LEVEL_FLAGS_PRE(TRACE_LEVEL_ERROR, ROS_TRACING_DEBUG) \
    do {\
        WPP_ANNOTATE(Vc4Display_cpp812) 0; \
        BOOLEAN wppEnabled = WPP_CHECK_INIT WPP_LEVEL_FLAGS_ENABLED(TRACE_LEVEL_ERROR, ROS_TRACING_DEBUG); \
        BOOLEAN recorderEnabled = WPP_RECORDER_CHECK_INIT WPP_RECORDER_LEVEL_FLAGS_FILTER(TRACE_LEVEL_ERROR, ROS_TRACING_DEBUG); \
        if (wppEnabled || recorderEnabled) { \
            WPP_INVOKE_WPP_DEBUG((MSG)); \
            WPP_RECORDER_AND_TRACE_SF_sD( \
                     WPP_LEVEL_FLAGS_LOGGER(TRACE_LEVEL_ERROR, ROS_TRACING_DEBUG) \
                     wppEnabled, recorderEnabled, \
                     WPP_RECORDER_LEVEL_FLAGS_ARGS(TRACE_LEVEL_ERROR, ROS_TRACING_DEBUG), \
                     50, \
                     WPP_LOCAL_TraceGuids+0, __FILE__, __LINE__);\
        } \
    } \
    while(0) \
    WPP_LEVEL_FLAGS_POST(TRACE_LEVEL_ERROR, ROS_TRACING_DEBUG)
#else // ENABLE_WPP_TRACE_FILTERING_WITH_WPP_RECORDER
#define WPP_CALL_Vc4Display_cpp812(MSG) \
    WPP_LOG_ALWAYS(WPP_EX_LEVEL_FLAGS(TRACE_LEVEL_ERROR, ROS_TRACING_DEBUG), MSG) \
    WPP_LEVEL_FLAGS_PRE(TRACE_LEVEL_ERROR, ROS_TRACING_DEBUG) \
    WPP_ANNOTATE(Vc4Display_cpp812) \
    (( \
        WPP_RECORDER_CHECK_INIT WPP_RECORDER_LEVEL_FLAGS_FILTER(TRACE_LEVEL_ERROR, ROS_TRACING_DEBUG) \
        ?   WPP_INVOKE_WPP_DEBUG((MSG)), \
            WPP_RECORDER_SF_sD( \
                WPP_RECORDER_LEVEL_FLAGS_ARGS(TRACE_LEVEL_ERROR, ROS_TRACING_DEBUG), \
                50, \
                WPP_LOCAL_TraceGuids+0, __FILE__, __LINE__), \
            1 \
        :   0 \
    )) \
    WPP_LEVEL_FLAGS_POST(TRACE_LEVEL_ERROR, ROS_TRACING_DEBUG)
#endif // ENABLE_WPP_TRACE_FILTERING_WITH_WPP_RECORDER
#else  // ENABLE_WPP_RECORDER
#define WPP_CALL_Vc4Display_cpp812(MSG) \
    WPP_LOG_ALWAYS(WPP_EX_LEVEL_FLAGS(TRACE_LEVEL_ERROR, ROS_TRACING_DEBUG), MSG) \
    WPP_LEVEL_FLAGS_PRE(TRACE_LEVEL_ERROR, ROS_TRACING_DEBUG) \
    WPP_ANNOTATE(Vc4Display_cpp812) \
    (( \
        WPP_CHECK_INIT WPP_LEVEL_FLAGS_ENABLED(TRACE_LEVEL_ERROR, ROS_TRACING_DEBUG) \
        ?   WPP_INVOKE_WPP_DEBUG((MSG)), \
            WPP_SF_sD( \
                WPP_LEVEL_FLAGS_LOGGER(TRACE_LEVEL_ERROR, ROS_TRACING_DEBUG) \
                50, \
                WPP_LOCAL_TraceGuids+0, __FILE__, __LINE__), \
            1 \
        :   0 \
    )) \
    WPP_LEVEL_FLAGS_POST(TRACE_LEVEL_ERROR, ROS_TRACING_DEBUG)
#endif // ENABLE_WPP_RECORDER

// WPP_CALL_Vc4Display_cpp828
#ifndef WPP_LEVEL_FLAGS_PRE
#  define WPP_LEVEL_FLAGS_PRE(LEVEL,FLAGS)
#endif
#ifndef WPP_LEVEL_FLAGS_POST
#  define WPP_LEVEL_FLAGS_POST(LEVEL,FLAGS)
#endif
#if ENABLE_WPP_RECORDER
#if ENABLE_WPP_TRACE_FILTERING_WITH_WPP_RECORDER
#define WPP_CALL_Vc4Display_cpp828(MSG) \
    WPP_LOG_ALWAYS(WPP_EX_LEVEL_FLAGS(TRACE_LEVEL_ERROR, ROS_TRACING_DEBUG), MSG) \
    WPP_LEVEL_FLAGS_PRE(TRACE_LEVEL_ERROR, ROS_TRACING_DEBUG) \
    do {\
        WPP_ANNOTATE(Vc4Display_cpp828) 0; \
        BOOLEAN wppEnabled = WPP_CHECK_INIT WPP_LEVEL_FLAGS_ENABLED(TRACE_LEVEL_ERROR, ROS_TRACING_DEBUG); \
        BOOLEAN recorderEnabled = WPP_RECORDER_CHECK_INIT WPP_RECORDER_LEVEL_FLAGS_FILTER(TRACE_LEVEL_ERROR, ROS_TRACING_DEBUG); \
        if (wppEnabled || recorderEnabled) { \
            WPP_INVOKE_WPP_DEBUG((MSG)); \
            WPP_RECORDER_AND_TRACE_SF_sD( \
                     WPP_LEVEL_FLAGS_LOGGER(TRACE_LEVEL_ERROR, ROS_TRACING_DEBUG) \
                     wppEnabled, recorderEnabled, \
                     WPP_RECORDER_LEVEL_FLAGS_ARGS(TRACE_LEVEL_ERROR, ROS_TRACING_DEBUG), \
                     51, \
                     WPP_LOCAL_TraceGuids+0, __FILE__, __LINE__);\
        } \
    } \
    while(0) \
    WPP_LEVEL_FLAGS_POST(TRACE_LEVEL_ERROR, ROS_TRACING_DEBUG)
#else // ENABLE_WPP_TRACE_FILTERING_WITH_WPP_RECORDER
#define WPP_CALL_Vc4Display_cpp828(MSG) \
    WPP_LOG_ALWAYS(WPP_EX_LEVEL_FLAGS(TRACE_LEVEL_ERROR, ROS_TRACING_DEBUG), MSG) \
    WPP_LEVEL_FLAGS_PRE(TRACE_LEVEL_ERROR, ROS_TRACING_DEBUG) \
    WPP_ANNOTATE(Vc4Display_cpp828) \
    (( \
        WPP_RECORDER_CHECK_INIT WPP_RECORDER_LEVEL_FLAGS_FILTER(TRACE_LEVEL_ERROR, ROS_TRACING_DEBUG) \
        ?   WPP_INVOKE_WPP_DEBUG((MSG)), \
            WPP_RECORDER_SF_sD( \
                WPP_RECORDER_LEVEL_FLAGS_ARGS(TRACE_LEVEL_ERROR, ROS_TRACING_DEBUG), \
                51, \
                WPP_LOCAL_TraceGuids+0, __FILE__, __LINE__), \
            1 \
        :   0 \
    )) \
    WPP_LEVEL_FLAGS_POST(TRACE_LEVEL_ERROR, ROS_TRACING_DEBUG)
#endif // ENABLE_WPP_TRACE_FILTERING_WITH_WPP_RECORDER
#else  // ENABLE_WPP_RECORDER
#define WPP_CALL_Vc4Display_cpp828(MSG) \
    WPP_LOG_ALWAYS(WPP_EX_LEVEL_FLAGS(TRACE_LEVEL_ERROR, ROS_TRACING_DEBUG), MSG) \
    WPP_LEVEL_FLAGS_PRE(TRACE_LEVEL_ERROR, ROS_TRACING_DEBUG) \
    WPP_ANNOTATE(Vc4Display_cpp828) \
    (( \
        WPP_CHECK_INIT WPP_LEVEL_FLAGS_ENABLED(TRACE_LEVEL_ERROR, ROS_TRACING_DEBUG) \
        ?   WPP_INVOKE_WPP_DEBUG((MSG)), \
            WPP_SF_sD( \
                WPP_LEVEL_FLAGS_LOGGER(TRACE_LEVEL_ERROR, ROS_TRACING_DEBUG) \
                51, \
                WPP_LOCAL_TraceGuids+0, __FILE__, __LINE__), \
            1 \
        :   0 \
    )) \
    WPP_LEVEL_FLAGS_POST(TRACE_LEVEL_ERROR, ROS_TRACING_DEBUG)
#endif // ENABLE_WPP_RECORDER

// WPP_CALL_Vc4Display_cpp844
#ifndef WPP_LEVEL_FLAGS_PRE
#  define WPP_LEVEL_FLAGS_PRE(LEVEL,FLAGS)
#endif
#ifndef WPP_LEVEL_FLAGS_POST
#  define WPP_LEVEL_FLAGS_POST(LEVEL,FLAGS)
#endif
#if ENABLE_WPP_RECORDER
#if ENABLE_WPP_TRACE_FILTERING_WITH_WPP_RECORDER
#define WPP_CALL_Vc4Display_cpp844(LEVEL, FLAGS, MSG) \
    WPP_LOG_ALWAYS(WPP_EX_LEVEL_FLAGS(LEVEL, FLAGS), MSG) \
    WPP_LEVEL_FLAGS_PRE(LEVEL, FLAGS) \
    do {\
        WPP_ANNOTATE(Vc4Display_cpp844) 0; \
        BOOLEAN wppEnabled = WPP_CHECK_INIT WPP_LEVEL_FLAGS_ENABLED(LEVEL, FLAGS); \
        BOOLEAN recorderEnabled = WPP_RECORDER_CHECK_INIT WPP_RECORDER_LEVEL_FLAGS_FILTER(LEVEL, FLAGS); \
        if (wppEnabled || recorderEnabled) { \
            WPP_INVOKE_WPP_DEBUG((MSG)); \
            WPP_RECORDER_AND_TRACE_SF_sD( \
                     WPP_LEVEL_FLAGS_LOGGER(LEVEL, FLAGS) \
                     wppEnabled, recorderEnabled, \
                     WPP_RECORDER_LEVEL_FLAGS_ARGS(LEVEL, FLAGS), \
                     52, \
                     WPP_LOCAL_TraceGuids+0, __FILE__, __LINE__);\
        } \
    } \
    while(0) \
    WPP_LEVEL_FLAGS_POST(LEVEL, FLAGS)
#else // ENABLE_WPP_TRACE_FILTERING_WITH_WPP_RECORDER
#define WPP_CALL_Vc4Display_cpp844(LEVEL, FLAGS, MSG) \
    WPP_LOG_ALWAYS(WPP_EX_LEVEL_FLAGS(LEVEL, FLAGS), MSG) \
    WPP_LEVEL_FLAGS_PRE(LEVEL, FLAGS) \
    WPP_ANNOTATE(Vc4Display_cpp844) \
    (( \
        WPP_RECORDER_CHECK_INIT WPP_RECORDER_LEVEL_FLAGS_FILTER(LEVEL, FLAGS) \
        ?   WPP_INVOKE_WPP_DEBUG((MSG)), \
            WPP_RECORDER_SF_sD( \
                WPP_RECORDER_LEVEL_FLAGS_ARGS(LEVEL, FLAGS), \
                52, \
                WPP_LOCAL_TraceGuids+0, __FILE__, __LINE__), \
            1 \
        :   0 \
    )) \
    WPP_LEVEL_FLAGS_POST(LEVEL, FLAGS)
#endif // ENABLE_WPP_TRACE_FILTERING_WITH_WPP_RECORDER
#else  // ENABLE_WPP_RECORDER
#define WPP_CALL_Vc4Display_cpp844(LEVEL, FLAGS, MSG) \
    WPP_LOG_ALWAYS(WPP_EX_LEVEL_FLAGS(LEVEL, FLAGS), MSG) \
    WPP_LEVEL_FLAGS_PRE(LEVEL, FLAGS) \
    WPP_ANNOTATE(Vc4Display_cpp844) \
    (( \
        WPP_CHECK_INIT WPP_LEVEL_FLAGS_ENABLED(LEVEL, FLAGS) \
        ?   WPP_INVOKE_WPP_DEBUG((MSG)), \
            WPP_SF_sD( \
                WPP_LEVEL_FLAGS_LOGGER(LEVEL, FLAGS) \
                52, \
                WPP_LOCAL_TraceGuids+0, __FILE__, __LINE__), \
            1 \
        :   0 \
    )) \
    WPP_LEVEL_FLAGS_POST(LEVEL, FLAGS)
#endif // ENABLE_WPP_RECORDER

// WPP_CALL_Vc4Display_cpp858
#ifndef WPP_LEVEL_FLAGS_PRE
#  define WPP_LEVEL_FLAGS_PRE(LEVEL,FLAGS)
#endif
#ifndef WPP_LEVEL_FLAGS_POST
#  define WPP_LEVEL_FLAGS_POST(LEVEL,FLAGS)
#endif
#if ENABLE_WPP_RECORDER
#if ENABLE_WPP_TRACE_FILTERING_WITH_WPP_RECORDER
#define WPP_CALL_Vc4Display_cpp858(LEVEL, FLAGS, MSG, _a12, _a13, _a14) \
    WPP_LOG_ALWAYS(WPP_EX_LEVEL_FLAGS(LEVEL, FLAGS), MSG, _a12, _a13, _a14) \
    WPP_LEVEL_FLAGS_PRE(LEVEL, FLAGS) \
    do {\
        WPP_ANNOTATE(Vc4Display_cpp858) 0; \
        BOOLEAN wppEnabled = WPP_CHECK_INIT WPP_LEVEL_FLAGS_ENABLED(LEVEL, FLAGS); \
        BOOLEAN recorderEnabled = WPP_RECORDER_CHECK_INIT WPP_RECORDER_LEVEL_FLAGS_FILTER(LEVEL, FLAGS); \
        if (wppEnabled || recorderEnabled) { \
            WPP_INVOKE_WPP_DEBUG((MSG, _a12, _a13, _a14)); \
            WPP_RECORDER_AND_TRACE_SF_sDdqq( \
                     WPP_LEVEL_FLAGS_LOGGER(LEVEL, FLAGS) \
                     wppEnabled, recorderEnabled, \
                     WPP_RECORDER_LEVEL_FLAGS_ARGS(LEVEL, FLAGS), \
                     53, \
                     WPP_LOCAL_TraceGuids+0, __FILE__, __LINE__, _a12, _a13, _a14);\
        } \
    } \
    while(0) \
    WPP_LEVEL_FLAGS_POST(LEVEL, FLAGS)
#else // ENABLE_WPP_TRACE_FILTERING_WITH_WPP_RECORDER
#define WPP_CALL_Vc4Display_cpp858(LEVEL, FLAGS, MSG, _a12, _a13, _a14) \
    WPP_LOG_ALWAYS(WPP_EX_LEVEL_FLAGS(LEVEL, FLAGS), MSG, _a12, _a13, _a14) \
    WPP_LEVEL_FLAGS_PRE(LEVEL, FLAGS) \
    WPP_ANNOTATE(Vc4Display_cpp858) \
    (( \
        WPP_RECORDER_CHECK_INIT WPP_RECORDER_LEVEL_FLAGS_FILTER(LEVEL, FLAGS) \
        ?   WPP_INVOKE_WPP_DEBUG((MSG, _a12, _a13, _a14)), \
            WPP_RECORDER_SF_sDdqq( \
                WPP_RECORDER_LEVEL_FLAGS_ARGS(LEVEL, FLAGS), \
                53, \
                WPP_LOCAL_TraceGuids+0, __FILE__, __LINE__, _a12, _a13, _a14), \
            1 \
        :   0 \
    )) \
    WPP_LEVEL_FLAGS_POST(LEVEL, FLAGS)
#endif // ENABLE_WPP_TRACE_FILTERING_WITH_WPP_RECORDER
#else  // ENABLE_WPP_RECORDER
#define WPP_CALL_Vc4Display_cpp858(LEVEL, FLAGS, MSG, _a12, _a13, _a14) \
    WPP_LOG_ALWAYS(WPP_EX_LEVEL_FLAGS(LEVEL, FLAGS), MSG, _a12, _a13, _a14) \
    WPP_LEVEL_FLAGS_PRE(LEVEL, FLAGS) \
    WPP_ANNOTATE(Vc4Display_cpp858) \
    (( \
        WPP_CHECK_INIT WPP_LEVEL_FLAGS_ENABLED(LEVEL, FLAGS) \
        ?   WPP_INVOKE_WPP_DEBUG((MSG, _a12, _a13, _a14)), \
            WPP_SF_sDdqq( \
                WPP_LEVEL_FLAGS_LOGGER(LEVEL, FLAGS) \
                53, \
                WPP_LOCAL_TraceGuids+0, __FILE__, __LINE__, _a12, _a13, _a14), \
            1 \
        :   0 \
    )) \
    WPP_LEVEL_FLAGS_POST(LEVEL, FLAGS)
#endif // ENABLE_WPP_RECORDER

// WPP_CALL_Vc4Display_cpp875
#ifndef WPP_LEVEL_FLAGS_PRE
#  define WPP_LEVEL_FLAGS_PRE(LEVEL,FLAGS)
#endif
#ifndef WPP_LEVEL_FLAGS_POST
#  define WPP_LEVEL_FLAGS_POST(LEVEL,FLAGS)
#endif
#if ENABLE_WPP_RECORDER
#if ENABLE_WPP_TRACE_FILTERING_WITH_WPP_RECORDER
#define WPP_CALL_Vc4Display_cpp875(LEVEL, FLAGS, MSG, _a12, _a13, _a14) \
    WPP_LOG_ALWAYS(WPP_EX_LEVEL_FLAGS(LEVEL, FLAGS), MSG, _a12, _a13, _a14) \
    WPP_LEVEL_FLAGS_PRE(LEVEL, FLAGS) \
    do {\
        WPP_ANNOTATE(Vc4Display_cpp875) 0; \
        BOOLEAN wppEnabled = WPP_CHECK_INIT WPP_LEVEL_FLAGS_ENABLED(LEVEL, FLAGS); \
        BOOLEAN recorderEnabled = WPP_RECORDER_CHECK_INIT WPP_RECORDER_LEVEL_FLAGS_FILTER(LEVEL, FLAGS); \
        if (wppEnabled || recorderEnabled) { \
            WPP_INVOKE_WPP_DEBUG((MSG, _a12, _a13, _a14)); \
            WPP_RECORDER_AND_TRACE_SF_sDdqq( \
                     WPP_LEVEL_FLAGS_LOGGER(LEVEL, FLAGS) \
                     wppEnabled, recorderEnabled, \
                     WPP_RECORDER_LEVEL_FLAGS_ARGS(LEVEL, FLAGS), \
                     54, \
                     WPP_LOCAL_TraceGuids+0, __FILE__, __LINE__, _a12, _a13, _a14);\
        } \
    } \
    while(0) \
    WPP_LEVEL_FLAGS_POST(LEVEL, FLAGS)
#else // ENABLE_WPP_TRACE_FILTERING_WITH_WPP_RECORDER
#define WPP_CALL_Vc4Display_cpp875(LEVEL, FLAGS, MSG, _a12, _a13, _a14) \
    WPP_LOG_ALWAYS(WPP_EX_LEVEL_FLAGS(LEVEL, FLAGS), MSG, _a12, _a13, _a14) \
    WPP_LEVEL_FLAGS_PRE(LEVEL, FLAGS) \
    WPP_ANNOTATE(Vc4Display_cpp875) \
    (( \
        WPP_RECORDER_CHECK_INIT WPP_RECORDER_LEVEL_FLAGS_FILTER(LEVEL, FLAGS) \
        ?   WPP_INVOKE_WPP_DEBUG((MSG, _a12, _a13, _a14)), \
            WPP_RECORDER_SF_sDdqq( \
                WPP_RECORDER_LEVEL_FLAGS_ARGS(LEVEL, FLAGS), \
                54, \
                WPP_LOCAL_TraceGuids+0, __FILE__, __LINE__, _a12, _a13, _a14), \
            1 \
        :   0 \
    )) \
    WPP_LEVEL_FLAGS_POST(LEVEL, FLAGS)
#endif // ENABLE_WPP_TRACE_FILTERING_WITH_WPP_RECORDER
#else  // ENABLE_WPP_RECORDER
#define WPP_CALL_Vc4Display_cpp875(LEVEL, FLAGS, MSG, _a12, _a13, _a14) \
    WPP_LOG_ALWAYS(WPP_EX_LEVEL_FLAGS(LEVEL, FLAGS), MSG, _a12, _a13, _a14) \
    WPP_LEVEL_FLAGS_PRE(LEVEL, FLAGS) \
    WPP_ANNOTATE(Vc4Display_cpp875) \
    (( \
        WPP_CHECK_INIT WPP_LEVEL_FLAGS_ENABLED(LEVEL, FLAGS) \
        ?   WPP_INVOKE_WPP_DEBUG((MSG, _a12, _a13, _a14)), \
            WPP_SF_sDdqq( \
                WPP_LEVEL_FLAGS_LOGGER(LEVEL, FLAGS) \
                54, \
                WPP_LOCAL_TraceGuids+0, __FILE__, __LINE__, _a12, _a13, _a14), \
            1 \
        :   0 \
    )) \
    WPP_LEVEL_FLAGS_POST(LEVEL, FLAGS)
#endif // ENABLE_WPP_RECORDER

// WPP_CALL_Vc4Display_cpp891
#ifndef WPP_LEVEL_FLAGS_PRE
#  define WPP_LEVEL_FLAGS_PRE(LEVEL,FLAGS)
#endif
#ifndef WPP_LEVEL_FLAGS_POST
#  define WPP_LEVEL_FLAGS_POST(LEVEL,FLAGS)
#endif
#if ENABLE_WPP_RECORDER
#if ENABLE_WPP_TRACE_FILTERING_WITH_WPP_RECORDER
#define WPP_CALL_Vc4Display_cpp891(LEVEL, FLAGS, MSG, _a12, _a13) \
    WPP_LOG_ALWAYS(WPP_EX_LEVEL_FLAGS(LEVEL, FLAGS), MSG, _a12, _a13) \
    WPP_LEVEL_FLAGS_PRE(LEVEL, FLAGS) \
    do {\
        WPP_ANNOTATE(Vc4Display_cpp891) 0; \
        BOOLEAN wppEnabled = WPP_CHECK_INIT WPP_LEVEL_FLAGS_ENABLED(LEVEL, FLAGS); \
        BOOLEAN recorderEnabled = WPP_RECORDER_CHECK_INIT WPP_RECORDER_LEVEL_FLAGS_FILTER(LEVEL, FLAGS); \
        if (wppEnabled || recorderEnabled) { \
            WPP_INVOKE_WPP_DEBUG((MSG, _a12, _a13)); \
            WPP_RECORDER_AND_TRACE_SF_sDdq( \
                     WPP_LEVEL_FLAGS_LOGGER(LEVEL, FLAGS) \
                     wppEnabled, recorderEnabled, \
                     WPP_RECORDER_LEVEL_FLAGS_ARGS(LEVEL, FLAGS), \
                     55, \
                     WPP_LOCAL_TraceGuids+0, __FILE__, __LINE__, _a12, _a13);\
        } \
    } \
    while(0) \
    WPP_LEVEL_FLAGS_POST(LEVEL, FLAGS)
#else // ENABLE_WPP_TRACE_FILTERING_WITH_WPP_RECORDER
#define WPP_CALL_Vc4Display_cpp891(LEVEL, FLAGS, MSG, _a12, _a13) \
    WPP_LOG_ALWAYS(WPP_EX_LEVEL_FLAGS(LEVEL, FLAGS), MSG, _a12, _a13) \
    WPP_LEVEL_FLAGS_PRE(LEVEL, FLAGS) \
    WPP_ANNOTATE(Vc4Display_cpp891) \
    (( \
        WPP_RECORDER_CHECK_INIT WPP_RECORDER_LEVEL_FLAGS_FILTER(LEVEL, FLAGS) \
        ?   WPP_INVOKE_WPP_DEBUG((MSG, _a12, _a13)), \
            WPP_RECORDER_SF_sDdq( \
                WPP_RECORDER_LEVEL_FLAGS_ARGS(LEVEL, FLAGS), \
                55, \
                WPP_LOCAL_TraceGuids+0, __FILE__, __LINE__, _a12, _a13), \
            1 \
        :   0 \
    )) \
    WPP_LEVEL_FLAGS_POST(LEVEL, FLAGS)
#endif // ENABLE_WPP_TRACE_FILTERING_WITH_WPP_RECORDER
#else  // ENABLE_WPP_RECORDER
#define WPP_CALL_Vc4Display_cpp891(LEVEL, FLAGS, MSG, _a12, _a13) \
    WPP_LOG_ALWAYS(WPP_EX_LEVEL_FLAGS(LEVEL, FLAGS), MSG, _a12, _a13) \
    WPP_LEVEL_FLAGS_PRE(LEVEL, FLAGS) \
    WPP_ANNOTATE(Vc4Display_cpp891) \
    (( \
        WPP_CHECK_INIT WPP_LEVEL_FLAGS_ENABLED(LEVEL, FLAGS) \
        ?   WPP_INVOKE_WPP_DEBUG((MSG, _a12, _a13)), \
            WPP_SF_sDdq( \
                WPP_LEVEL_FLAGS_LOGGER(LEVEL, FLAGS) \
                55, \
                WPP_LOCAL_TraceGuids+0, __FILE__, __LINE__, _a12, _a13), \
            1 \
        :   0 \
    )) \
    WPP_LEVEL_FLAGS_POST(LEVEL, FLAGS)
#endif // ENABLE_WPP_RECORDER

// WPP_CALL_Vc4Display_cpp901
#ifndef WPP_LEVEL_FLAGS_PRE
#  define WPP_LEVEL_FLAGS_PRE(LEVEL,FLAGS)
#endif
#ifndef WPP_LEVEL_FLAGS_POST
#  define WPP_LEVEL_FLAGS_POST(LEVEL,FLAGS)
#endif
#if ENABLE_WPP_RECORDER
#if ENABLE_WPP_TRACE_FILTERING_WITH_WPP_RECORDER
#define WPP_CALL_Vc4Display_cpp901(LEVEL, FLAGS, MSG, _a12, _a13) \
    WPP_LOG_ALWAYS(WPP_EX_LEVEL_FLAGS(LEVEL, FLAGS), MSG, _a12, _a13) \
    WPP_LEVEL_FLAGS_PRE(LEVEL, FLAGS) \
    do {\
        WPP_ANNOTATE(Vc4Display_cpp901) 0; \
        BOOLEAN wppEnabled = WPP_CHECK_INIT WPP_LEVEL_FLAGS_ENABLED(LEVEL, FLAGS); \
        BOOLEAN recorderEnabled = WPP_RECORDER_CHECK_INIT WPP_RECORDER_LEVEL_FLAGS_FILTER(LEVEL, FLAGS); \
        if (wppEnabled || recorderEnabled) { \
            WPP_INVOKE_WPP_DEBUG((MSG, _a12, _a13)); \
            WPP_RECORDER_AND_TRACE_SF_sDPq( \
                     WPP_LEVEL_FLAGS_LOGGER(LEVEL, FLAGS) \
                     wppEnabled, recorderEnabled, \
                     WPP_RECORDER_LEVEL_FLAGS_ARGS(LEVEL, FLAGS), \
                     56, \
                     WPP_LOCAL_TraceGuids+0, __FILE__, __LINE__, _a12, _a13);\
        } \
    } \
    while(0) \
    WPP_LEVEL_FLAGS_POST(LEVEL, FLAGS)
#else // ENABLE_WPP_TRACE_FILTERING_WITH_WPP_RECORDER
#define WPP_CALL_Vc4Display_cpp901(LEVEL, FLAGS, MSG, _a12, _a13) \
    WPP_LOG_ALWAYS(WPP_EX_LEVEL_FLAGS(LEVEL, FLAGS), MSG, _a12, _a13) \
    WPP_LEVEL_FLAGS_PRE(LEVEL, FLAGS) \
    WPP_ANNOTATE(Vc4Display_cpp901) \
    (( \
        WPP_RECORDER_CHECK_INIT WPP_RECORDER_LEVEL_FLAGS_FILTER(LEVEL, FLAGS) \
        ?   WPP_INVOKE_WPP_DEBUG((MSG, _a12, _a13)), \
            WPP_RECORDER_SF_sDPq( \
                WPP_RECORDER_LEVEL_FLAGS_ARGS(LEVEL, FLAGS), \
                56, \
                WPP_LOCAL_TraceGuids+0, __FILE__, __LINE__, _a12, _a13), \
            1 \
        :   0 \
    )) \
    WPP_LEVEL_FLAGS_POST(LEVEL, FLAGS)
#endif // ENABLE_WPP_TRACE_FILTERING_WITH_WPP_RECORDER
#else  // ENABLE_WPP_RECORDER
#define WPP_CALL_Vc4Display_cpp901(LEVEL, FLAGS, MSG, _a12, _a13) \
    WPP_LOG_ALWAYS(WPP_EX_LEVEL_FLAGS(LEVEL, FLAGS), MSG, _a12, _a13) \
    WPP_LEVEL_FLAGS_PRE(LEVEL, FLAGS) \
    WPP_ANNOTATE(Vc4Display_cpp901) \
    (( \
        WPP_CHECK_INIT WPP_LEVEL_FLAGS_ENABLED(LEVEL, FLAGS) \
        ?   WPP_INVOKE_WPP_DEBUG((MSG, _a12, _a13)), \
            WPP_SF_sDPq( \
                WPP_LEVEL_FLAGS_LOGGER(LEVEL, FLAGS) \
                56, \
                WPP_LOCAL_TraceGuids+0, __FILE__, __LINE__, _a12, _a13), \
            1 \
        :   0 \
    )) \
    WPP_LEVEL_FLAGS_POST(LEVEL, FLAGS)
#endif // ENABLE_WPP_RECORDER

// WPP_CALL_Vc4Display_cpp917
#ifndef WPP_LEVEL_FLAGS_PRE
#  define WPP_LEVEL_FLAGS_PRE(LEVEL,FLAGS)
#endif
#ifndef WPP_LEVEL_FLAGS_POST
#  define WPP_LEVEL_FLAGS_POST(LEVEL,FLAGS)
#endif
#if ENABLE_WPP_RECORDER
#if ENABLE_WPP_TRACE_FILTERING_WITH_WPP_RECORDER
#define WPP_CALL_Vc4Display_cpp917(LEVEL, FLAGS, MSG, _a12, _a13, _a14) \
    WPP_LOG_ALWAYS(WPP_EX_LEVEL_FLAGS(LEVEL, FLAGS), MSG, _a12, _a13, _a14) \
    WPP_LEVEL_FLAGS_PRE(LEVEL, FLAGS) \
    do {\
        WPP_ANNOTATE(Vc4Display_cpp917) 0; \
        BOOLEAN wppEnabled = WPP_CHECK_INIT WPP_LEVEL_FLAGS_ENABLED(LEVEL, FLAGS); \
        BOOLEAN recorderEnabled = WPP_RECORDER_CHECK_INIT WPP_RECORDER_LEVEL_FLAGS_FILTER(LEVEL, FLAGS); \
        if (wppEnabled || recorderEnabled) { \
            WPP_INVOKE_WPP_DEBUG((MSG, _a12, _a13, _a14)); \
            WPP_RECORDER_AND_TRACE_SF_sDdqq( \
                     WPP_LEVEL_FLAGS_LOGGER(LEVEL, FLAGS) \
                     wppEnabled, recorderEnabled, \
                     WPP_RECORDER_LEVEL_FLAGS_ARGS(LEVEL, FLAGS), \
                     57, \
                     WPP_LOCAL_TraceGuids+0, __FILE__, __LINE__, _a12, _a13, _a14);\
        } \
    } \
    while(0) \
    WPP_LEVEL_FLAGS_POST(LEVEL, FLAGS)
#else // ENABLE_WPP_TRACE_FILTERING_WITH_WPP_RECORDER
#define WPP_CALL_Vc4Display_cpp917(LEVEL, FLAGS, MSG, _a12, _a13, _a14) \
    WPP_LOG_ALWAYS(WPP_EX_LEVEL_FLAGS(LEVEL, FLAGS), MSG, _a12, _a13, _a14) \
    WPP_LEVEL_FLAGS_PRE(LEVEL, FLAGS) \
    WPP_ANNOTATE(Vc4Display_cpp917) \
    (( \
        WPP_RECORDER_CHECK_INIT WPP_RECORDER_LEVEL_FLAGS_FILTER(LEVEL, FLAGS) \
        ?   WPP_INVOKE_WPP_DEBUG((MSG, _a12, _a13, _a14)), \
            WPP_RECORDER_SF_sDdqq( \
                WPP_RECORDER_LEVEL_FLAGS_ARGS(LEVEL, FLAGS), \
                57, \
                WPP_LOCAL_TraceGuids+0, __FILE__, __LINE__, _a12, _a13, _a14), \
            1 \
        :   0 \
    )) \
    WPP_LEVEL_FLAGS_POST(LEVEL, FLAGS)
#endif // ENABLE_WPP_TRACE_FILTERING_WITH_WPP_RECORDER
#else  // ENABLE_WPP_RECORDER
#define WPP_CALL_Vc4Display_cpp917(LEVEL, FLAGS, MSG, _a12, _a13, _a14) \
    WPP_LOG_ALWAYS(WPP_EX_LEVEL_FLAGS(LEVEL, FLAGS), MSG, _a12, _a13, _a14) \
    WPP_LEVEL_FLAGS_PRE(LEVEL, FLAGS) \
    WPP_ANNOTATE(Vc4Display_cpp917) \
    (( \
        WPP_CHECK_INIT WPP_LEVEL_FLAGS_ENABLED(LEVEL, FLAGS) \
        ?   WPP_INVOKE_WPP_DEBUG((MSG, _a12, _a13, _a14)), \
            WPP_SF_sDdqq( \
                WPP_LEVEL_FLAGS_LOGGER(LEVEL, FLAGS) \
                57, \
                WPP_LOCAL_TraceGuids+0, __FILE__, __LINE__, _a12, _a13, _a14), \
            1 \
        :   0 \
    )) \
    WPP_LEVEL_FLAGS_POST(LEVEL, FLAGS)
#endif // ENABLE_WPP_RECORDER

// WPP_CALL_Vc4Display_cpp940
#ifndef WPP_LEVEL_FLAGS_PRE
#  define WPP_LEVEL_FLAGS_PRE(LEVEL,FLAGS)
#endif
#ifndef WPP_LEVEL_FLAGS_POST
#  define WPP_LEVEL_FLAGS_POST(LEVEL,FLAGS)
#endif
#if ENABLE_WPP_RECORDER
#if ENABLE_WPP_TRACE_FILTERING_WITH_WPP_RECORDER
#define WPP_CALL_Vc4Display_cpp940(LEVEL, FLAGS, MSG, _a12, _a13) \
    WPP_LOG_ALWAYS(WPP_EX_LEVEL_FLAGS(LEVEL, FLAGS), MSG, _a12, _a13) \
    WPP_LEVEL_FLAGS_PRE(LEVEL, FLAGS) \
    do {\
        WPP_ANNOTATE(Vc4Display_cpp940) 0; \
        BOOLEAN wppEnabled = WPP_CHECK_INIT WPP_LEVEL_FLAGS_ENABLED(LEVEL, FLAGS); \
        BOOLEAN recorderEnabled = WPP_RECORDER_CHECK_INIT WPP_RECORDER_LEVEL_FLAGS_FILTER(LEVEL, FLAGS); \
        if (wppEnabled || recorderEnabled) { \
            WPP_INVOKE_WPP_DEBUG((MSG, _a12, _a13)); \
            WPP_RECORDER_AND_TRACE_SF_sDdd( \
                     WPP_LEVEL_FLAGS_LOGGER(LEVEL, FLAGS) \
                     wppEnabled, recorderEnabled, \
                     WPP_RECORDER_LEVEL_FLAGS_ARGS(LEVEL, FLAGS), \
                     58, \
                     WPP_LOCAL_TraceGuids+0, __FILE__, __LINE__, _a12, _a13);\
        } \
    } \
    while(0) \
    WPP_LEVEL_FLAGS_POST(LEVEL, FLAGS)
#else // ENABLE_WPP_TRACE_FILTERING_WITH_WPP_RECORDER
#define WPP_CALL_Vc4Display_cpp940(LEVEL, FLAGS, MSG, _a12, _a13) \
    WPP_LOG_ALWAYS(WPP_EX_LEVEL_FLAGS(LEVEL, FLAGS), MSG, _a12, _a13) \
    WPP_LEVEL_FLAGS_PRE(LEVEL, FLAGS) \
    WPP_ANNOTATE(Vc4Display_cpp940) \
    (( \
        WPP_RECORDER_CHECK_INIT WPP_RECORDER_LEVEL_FLAGS_FILTER(LEVEL, FLAGS) \
        ?   WPP_INVOKE_WPP_DEBUG((MSG, _a12, _a13)), \
            WPP_RECORDER_SF_sDdd( \
                WPP_RECORDER_LEVEL_FLAGS_ARGS(LEVEL, FLAGS), \
                58, \
                WPP_LOCAL_TraceGuids+0, __FILE__, __LINE__, _a12, _a13), \
            1 \
        :   0 \
    )) \
    WPP_LEVEL_FLAGS_POST(LEVEL, FLAGS)
#endif // ENABLE_WPP_TRACE_FILTERING_WITH_WPP_RECORDER
#else  // ENABLE_WPP_RECORDER
#define WPP_CALL_Vc4Display_cpp940(LEVEL, FLAGS, MSG, _a12, _a13) \
    WPP_LOG_ALWAYS(WPP_EX_LEVEL_FLAGS(LEVEL, FLAGS), MSG, _a12, _a13) \
    WPP_LEVEL_FLAGS_PRE(LEVEL, FLAGS) \
    WPP_ANNOTATE(Vc4Display_cpp940) \
    (( \
        WPP_CHECK_INIT WPP_LEVEL_FLAGS_ENABLED(LEVEL, FLAGS) \
        ?   WPP_INVOKE_WPP_DEBUG((MSG, _a12, _a13)), \
            WPP_SF_sDdd( \
                WPP_LEVEL_FLAGS_LOGGER(LEVEL, FLAGS) \
                58, \
                WPP_LOCAL_TraceGuids+0, __FILE__, __LINE__, _a12, _a13), \
            1 \
        :   0 \
    )) \
    WPP_LEVEL_FLAGS_POST(LEVEL, FLAGS)
#endif // ENABLE_WPP_RECORDER

// WPP_CALL_Vc4Display_cpp950
#ifndef WPP_LEVEL_FLAGS_PRE
#  define WPP_LEVEL_FLAGS_PRE(LEVEL,FLAGS)
#endif
#ifndef WPP_LEVEL_FLAGS_POST
#  define WPP_LEVEL_FLAGS_POST(LEVEL,FLAGS)
#endif
#if ENABLE_WPP_RECORDER
#if ENABLE_WPP_TRACE_FILTERING_WITH_WPP_RECORDER
#define WPP_CALL_Vc4Display_cpp950(LEVEL, FLAGS, MSG, _a12) \
    WPP_LOG_ALWAYS(WPP_EX_LEVEL_FLAGS(LEVEL, FLAGS), MSG, _a12) \
    WPP_LEVEL_FLAGS_PRE(LEVEL, FLAGS) \
    do {\
        WPP_ANNOTATE(Vc4Display_cpp950) 0; \
        BOOLEAN wppEnabled = WPP_CHECK_INIT WPP_LEVEL_FLAGS_ENABLED(LEVEL, FLAGS); \
        BOOLEAN recorderEnabled = WPP_RECORDER_CHECK_INIT WPP_RECORDER_LEVEL_FLAGS_FILTER(LEVEL, FLAGS); \
        if (wppEnabled || recorderEnabled) { \
            WPP_INVOKE_WPP_DEBUG((MSG, _a12)); \
            WPP_RECORDER_AND_TRACE_SF_sDq( \
                     WPP_LEVEL_FLAGS_LOGGER(LEVEL, FLAGS) \
                     wppEnabled, recorderEnabled, \
                     WPP_RECORDER_LEVEL_FLAGS_ARGS(LEVEL, FLAGS), \
                     59, \
                     WPP_LOCAL_TraceGuids+0, __FILE__, __LINE__, _a12);\
        } \
    } \
    while(0) \
    WPP_LEVEL_FLAGS_POST(LEVEL, FLAGS)
#else // ENABLE_WPP_TRACE_FILTERING_WITH_WPP_RECORDER
#define WPP_CALL_Vc4Display_cpp950(LEVEL, FLAGS, MSG, _a12) \
    WPP_LOG_ALWAYS(WPP_EX_LEVEL_FLAGS(LEVEL, FLAGS), MSG, _a12) \
    WPP_LEVEL_FLAGS_PRE(LEVEL, FLAGS) \
    WPP_ANNOTATE(Vc4Display_cpp950) \
    (( \
        WPP_RECORDER_CHECK_INIT WPP_RECORDER_LEVEL_FLAGS_FILTER(LEVEL, FLAGS) \
        ?   WPP_INVOKE_WPP_DEBUG((MSG, _a12)), \
            WPP_RECORDER_SF_sDq( \
                WPP_RECORDER_LEVEL_FLAGS_ARGS(LEVEL, FLAGS), \
                59, \
                WPP_LOCAL_TraceGuids+0, __FILE__, __LINE__, _a12), \
            1 \
        :   0 \
    )) \
    WPP_LEVEL_FLAGS_POST(LEVEL, FLAGS)
#endif // ENABLE_WPP_TRACE_FILTERING_WITH_WPP_RECORDER
#else  // ENABLE_WPP_RECORDER
#define WPP_CALL_Vc4Display_cpp950(LEVEL, FLAGS, MSG, _a12) \
    WPP_LOG_ALWAYS(WPP_EX_LEVEL_FLAGS(LEVEL, FLAGS), MSG, _a12) \
    WPP_LEVEL_FLAGS_PRE(LEVEL, FLAGS) \
    WPP_ANNOTATE(Vc4Display_cpp950) \
    (( \
        WPP_CHECK_INIT WPP_LEVEL_FLAGS_ENABLED(LEVEL, FLAGS) \
        ?   WPP_INVOKE_WPP_DEBUG((MSG, _a12)), \
            WPP_SF_sDq( \
                WPP_LEVEL_FLAGS_LOGGER(LEVEL, FLAGS) \
                59, \
                WPP_LOCAL_TraceGuids+0, __FILE__, __LINE__, _a12), \
            1 \
        :   0 \
    )) \
    WPP_LEVEL_FLAGS_POST(LEVEL, FLAGS)
#endif // ENABLE_WPP_RECORDER

// WPP_CALL_Vc4Display_cpp968
#ifndef WPP_LEVEL_FLAGS_PRE
#  define WPP_LEVEL_FLAGS_PRE(LEVEL,FLAGS)
#endif
#ifndef WPP_LEVEL_FLAGS_POST
#  define WPP_LEVEL_FLAGS_POST(LEVEL,FLAGS)
#endif
#if ENABLE_WPP_RECORDER
#if ENABLE_WPP_TRACE_FILTERING_WITH_WPP_RECORDER
#define WPP_CALL_Vc4Display_cpp968(MSG) \
    WPP_LOG_ALWAYS(WPP_EX_LEVEL_FLAGS(TRACE_LEVEL_ERROR, ROS_TRACING_DEBUG), MSG) \
    WPP_LEVEL_FLAGS_PRE(TRACE_LEVEL_ERROR, ROS_TRACING_DEBUG) \
    do {\
        WPP_ANNOTATE(Vc4Display_cpp968) 0; \
        BOOLEAN wppEnabled = WPP_CHECK_INIT WPP_LEVEL_FLAGS_ENABLED(TRACE_LEVEL_ERROR, ROS_TRACING_DEBUG); \
        BOOLEAN recorderEnabled = WPP_RECORDER_CHECK_INIT WPP_RECORDER_LEVEL_FLAGS_FILTER(TRACE_LEVEL_ERROR, ROS_TRACING_DEBUG); \
        if (wppEnabled || recorderEnabled) { \
            WPP_INVOKE_WPP_DEBUG((MSG)); \
            WPP_RECORDER_AND_TRACE_SF_sD( \
                     WPP_LEVEL_FLAGS_LOGGER(TRACE_LEVEL_ERROR, ROS_TRACING_DEBUG) \
                     wppEnabled, recorderEnabled, \
                     WPP_RECORDER_LEVEL_FLAGS_ARGS(TRACE_LEVEL_ERROR, ROS_TRACING_DEBUG), \
                     60, \
                     WPP_LOCAL_TraceGuids+0, __FILE__, __LINE__);\
        } \
    } \
    while(0) \
    WPP_LEVEL_FLAGS_POST(TRACE_LEVEL_ERROR, ROS_TRACING_DEBUG)
#else // ENABLE_WPP_TRACE_FILTERING_WITH_WPP_RECORDER
#define WPP_CALL_Vc4Display_cpp968(MSG) \
    WPP_LOG_ALWAYS(WPP_EX_LEVEL_FLAGS(TRACE_LEVEL_ERROR, ROS_TRACING_DEBUG), MSG) \
    WPP_LEVEL_FLAGS_PRE(TRACE_LEVEL_ERROR, ROS_TRACING_DEBUG) \
    WPP_ANNOTATE(Vc4Display_cpp968) \
    (( \
        WPP_RECORDER_CHECK_INIT WPP_RECORDER_LEVEL_FLAGS_FILTER(TRACE_LEVEL_ERROR, ROS_TRACING_DEBUG) \
        ?   WPP_INVOKE_WPP_DEBUG((MSG)), \
            WPP_RECORDER_SF_sD( \
                WPP_RECORDER_LEVEL_FLAGS_ARGS(TRACE_LEVEL_ERROR, ROS_TRACING_DEBUG), \
                60, \
                WPP_LOCAL_TraceGuids+0, __FILE__, __LINE__), \
            1 \
        :   0 \
    )) \
    WPP_LEVEL_FLAGS_POST(TRACE_LEVEL_ERROR, ROS_TRACING_DEBUG)
#endif // ENABLE_WPP_TRACE_FILTERING_WITH_WPP_RECORDER
#else  // ENABLE_WPP_RECORDER
#define WPP_CALL_Vc4Display_cpp968(MSG) \
    WPP_LOG_ALWAYS(WPP_EX_LEVEL_FLAGS(TRACE_LEVEL_ERROR, ROS_TRACING_DEBUG), MSG) \
    WPP_LEVEL_FLAGS_PRE(TRACE_LEVEL_ERROR, ROS_TRACING_DEBUG) \
    WPP_ANNOTATE(Vc4Display_cpp968) \
    (( \
        WPP_CHECK_INIT WPP_LEVEL_FLAGS_ENABLED(TRACE_LEVEL_ERROR, ROS_TRACING_DEBUG) \
        ?   WPP_INVOKE_WPP_DEBUG((MSG)), \
            WPP_SF_sD( \
                WPP_LEVEL_FLAGS_LOGGER(TRACE_LEVEL_ERROR, ROS_TRACING_DEBUG) \
                60, \
                WPP_LOCAL_TraceGuids+0, __FILE__, __LINE__), \
            1 \
        :   0 \
    )) \
    WPP_LEVEL_FLAGS_POST(TRACE_LEVEL_ERROR, ROS_TRACING_DEBUG)
#endif // ENABLE_WPP_RECORDER

// WPP_CALL_Vc4Display_cpp987
#ifndef WPP_LEVEL_FLAGS_PRE
#  define WPP_LEVEL_FLAGS_PRE(LEVEL,FLAGS)
#endif
#ifndef WPP_LEVEL_FLAGS_POST
#  define WPP_LEVEL_FLAGS_POST(LEVEL,FLAGS)
#endif
#if ENABLE_WPP_RECORDER
#if ENABLE_WPP_TRACE_FILTERING_WITH_WPP_RECORDER
#define WPP_CALL_Vc4Display_cpp987(LEVEL, FLAGS, MSG, _a12, _a13, _a14) \
    WPP_LOG_ALWAYS(WPP_EX_LEVEL_FLAGS(LEVEL, FLAGS), MSG, _a12, _a13, _a14) \
    WPP_LEVEL_FLAGS_PRE(LEVEL, FLAGS) \
    do {\
        WPP_ANNOTATE(Vc4Display_cpp987) 0; \
        BOOLEAN wppEnabled = WPP_CHECK_INIT WPP_LEVEL_FLAGS_ENABLED(LEVEL, FLAGS); \
        BOOLEAN recorderEnabled = WPP_RECORDER_CHECK_INIT WPP_RECORDER_LEVEL_FLAGS_FILTER(LEVEL, FLAGS); \
        if (wppEnabled || recorderEnabled) { \
            WPP_INVOKE_WPP_DEBUG((MSG, _a12, _a13, _a14)); \
            WPP_RECORDER_AND_TRACE_SF_sDdqq( \
                     WPP_LEVEL_FLAGS_LOGGER(LEVEL, FLAGS) \
                     wppEnabled, recorderEnabled, \
                     WPP_RECORDER_LEVEL_FLAGS_ARGS(LEVEL, FLAGS), \
                     61, \
                     WPP_LOCAL_TraceGuids+0, __FILE__, __LINE__, _a12, _a13, _a14);\
        } \
    } \
    while(0) \
    WPP_LEVEL_FLAGS_POST(LEVEL, FLAGS)
#else // ENABLE_WPP_TRACE_FILTERING_WITH_WPP_RECORDER
#define WPP_CALL_Vc4Display_cpp987(LEVEL, FLAGS, MSG, _a12, _a13, _a14) \
    WPP_LOG_ALWAYS(WPP_EX_LEVEL_FLAGS(LEVEL, FLAGS), MSG, _a12, _a13, _a14) \
    WPP_LEVEL_FLAGS_PRE(LEVEL, FLAGS) \
    WPP_ANNOTATE(Vc4Display_cpp987) \
    (( \
        WPP_RECORDER_CHECK_INIT WPP_RECORDER_LEVEL_FLAGS_FILTER(LEVEL, FLAGS) \
        ?   WPP_INVOKE_WPP_DEBUG((MSG, _a12, _a13, _a14)), \
            WPP_RECORDER_SF_sDdqq( \
                WPP_RECORDER_LEVEL_FLAGS_ARGS(LEVEL, FLAGS), \
                61, \
                WPP_LOCAL_TraceGuids+0, __FILE__, __LINE__, _a12, _a13, _a14), \
            1 \
        :   0 \
    )) \
    WPP_LEVEL_FLAGS_POST(LEVEL, FLAGS)
#endif // ENABLE_WPP_TRACE_FILTERING_WITH_WPP_RECORDER
#else  // ENABLE_WPP_RECORDER
#define WPP_CALL_Vc4Display_cpp987(LEVEL, FLAGS, MSG, _a12, _a13, _a14) \
    WPP_LOG_ALWAYS(WPP_EX_LEVEL_FLAGS(LEVEL, FLAGS), MSG, _a12, _a13, _a14) \
    WPP_LEVEL_FLAGS_PRE(LEVEL, FLAGS) \
    WPP_ANNOTATE(Vc4Display_cpp987) \
    (( \
        WPP_CHECK_INIT WPP_LEVEL_FLAGS_ENABLED(LEVEL, FLAGS) \
        ?   WPP_INVOKE_WPP_DEBUG((MSG, _a12, _a13, _a14)), \
            WPP_SF_sDdqq( \
                WPP_LEVEL_FLAGS_LOGGER(LEVEL, FLAGS) \
                61, \
                WPP_LOCAL_TraceGuids+0, __FILE__, __LINE__, _a12, _a13, _a14), \
            1 \
        :   0 \
    )) \
    WPP_LEVEL_FLAGS_POST(LEVEL, FLAGS)
#endif // ENABLE_WPP_RECORDER

// WPP_CALL_Vc4Display_cpp1005
#ifndef WPP_LEVEL_FLAGS_PRE
#  define WPP_LEVEL_FLAGS_PRE(LEVEL,FLAGS)
#endif
#ifndef WPP_LEVEL_FLAGS_POST
#  define WPP_LEVEL_FLAGS_POST(LEVEL,FLAGS)
#endif
#if ENABLE_WPP_RECORDER
#if ENABLE_WPP_TRACE_FILTERING_WITH_WPP_RECORDER
#define WPP_CALL_Vc4Display_cpp1005(LEVEL, FLAGS, MSG, _a12, _a13, _a14) \
    WPP_LOG_ALWAYS(WPP_EX_LEVEL_FLAGS(LEVEL, FLAGS), MSG, _a12, _a13, _a14) \
    WPP_LEVEL_FLAGS_PRE(LEVEL, FLAGS) \
    do {\
        WPP_ANNOTATE(Vc4Display_cpp1005) 0; \
        BOOLEAN wppEnabled = WPP_CHECK_INIT WPP_LEVEL_FLAGS_ENABLED(LEVEL, FLAGS); \
        BOOLEAN recorderEnabled = WPP_RECORDER_CHECK_INIT WPP_RECORDER_LEVEL_FLAGS_FILTER(LEVEL, FLAGS); \
        if (wppEnabled || recorderEnabled) { \
            WPP_INVOKE_WPP_DEBUG((MSG, _a12, _a13, _a14)); \
            WPP_RECORDER_AND_TRACE_SF_sDdqq( \
                     WPP_LEVEL_FLAGS_LOGGER(LEVEL, FLAGS) \
                     wppEnabled, recorderEnabled, \
                     WPP_RECORDER_LEVEL_FLAGS_ARGS(LEVEL, FLAGS), \
                     62, \
                     WPP_LOCAL_TraceGuids+0, __FILE__, __LINE__, _a12, _a13, _a14);\
        } \
    } \
    while(0) \
    WPP_LEVEL_FLAGS_POST(LEVEL, FLAGS)
#else // ENABLE_WPP_TRACE_FILTERING_WITH_WPP_RECORDER
#define WPP_CALL_Vc4Display_cpp1005(LEVEL, FLAGS, MSG, _a12, _a13, _a14) \
    WPP_LOG_ALWAYS(WPP_EX_LEVEL_FLAGS(LEVEL, FLAGS), MSG, _a12, _a13, _a14) \
    WPP_LEVEL_FLAGS_PRE(LEVEL, FLAGS) \
    WPP_ANNOTATE(Vc4Display_cpp1005) \
    (( \
        WPP_RECORDER_CHECK_INIT WPP_RECORDER_LEVEL_FLAGS_FILTER(LEVEL, FLAGS) \
        ?   WPP_INVOKE_WPP_DEBUG((MSG, _a12, _a13, _a14)), \
            WPP_RECORDER_SF_sDdqq( \
                WPP_RECORDER_LEVEL_FLAGS_ARGS(LEVEL, FLAGS), \
                62, \
                WPP_LOCAL_TraceGuids+0, __FILE__, __LINE__, _a12, _a13, _a14), \
            1 \
        :   0 \
    )) \
    WPP_LEVEL_FLAGS_POST(LEVEL, FLAGS)
#endif // ENABLE_WPP_TRACE_FILTERING_WITH_WPP_RECORDER
#else  // ENABLE_WPP_RECORDER
#define WPP_CALL_Vc4Display_cpp1005(LEVEL, FLAGS, MSG, _a12, _a13, _a14) \
    WPP_LOG_ALWAYS(WPP_EX_LEVEL_FLAGS(LEVEL, FLAGS), MSG, _a12, _a13, _a14) \
    WPP_LEVEL_FLAGS_PRE(LEVEL, FLAGS) \
    WPP_ANNOTATE(Vc4Display_cpp1005) \
    (( \
        WPP_CHECK_INIT WPP_LEVEL_FLAGS_ENABLED(LEVEL, FLAGS) \
        ?   WPP_INVOKE_WPP_DEBUG((MSG, _a12, _a13, _a14)), \
            WPP_SF_sDdqq( \
                WPP_LEVEL_FLAGS_LOGGER(LEVEL, FLAGS) \
                62, \
                WPP_LOCAL_TraceGuids+0, __FILE__, __LINE__, _a12, _a13, _a14), \
            1 \
        :   0 \
    )) \
    WPP_LEVEL_FLAGS_POST(LEVEL, FLAGS)
#endif // ENABLE_WPP_RECORDER

// WPP_CALL_Vc4Display_cpp1021
#ifndef WPP_LEVEL_FLAGS_PRE
#  define WPP_LEVEL_FLAGS_PRE(LEVEL,FLAGS)
#endif
#ifndef WPP_LEVEL_FLAGS_POST
#  define WPP_LEVEL_FLAGS_POST(LEVEL,FLAGS)
#endif
#if ENABLE_WPP_RECORDER
#if ENABLE_WPP_TRACE_FILTERING_WITH_WPP_RECORDER
#define WPP_CALL_Vc4Display_cpp1021(LEVEL, FLAGS, MSG, _a12, _a13, _a14) \
    WPP_LOG_ALWAYS(WPP_EX_LEVEL_FLAGS(LEVEL, FLAGS), MSG, _a12, _a13, _a14) \
    WPP_LEVEL_FLAGS_PRE(LEVEL, FLAGS) \
    do {\
        WPP_ANNOTATE(Vc4Display_cpp1021) 0; \
        BOOLEAN wppEnabled = WPP_CHECK_INIT WPP_LEVEL_FLAGS_ENABLED(LEVEL, FLAGS); \
        BOOLEAN recorderEnabled = WPP_RECORDER_CHECK_INIT WPP_RECORDER_LEVEL_FLAGS_FILTER(LEVEL, FLAGS); \
        if (wppEnabled || recorderEnabled) { \
            WPP_INVOKE_WPP_DEBUG((MSG, _a12, _a13, _a14)); \
            WPP_RECORDER_AND_TRACE_SF_sDdqq( \
                     WPP_LEVEL_FLAGS_LOGGER(LEVEL, FLAGS) \
                     wppEnabled, recorderEnabled, \
                     WPP_RECORDER_LEVEL_FLAGS_ARGS(LEVEL, FLAGS), \
                     63, \
                     WPP_LOCAL_TraceGuids+0, __FILE__, __LINE__, _a12, _a13, _a14);\
        } \
    } \
    while(0) \
    WPP_LEVEL_FLAGS_POST(LEVEL, FLAGS)
#else // ENABLE_WPP_TRACE_FILTERING_WITH_WPP_RECORDER
#define WPP_CALL_Vc4Display_cpp1021(LEVEL, FLAGS, MSG, _a12, _a13, _a14) \
    WPP_LOG_ALWAYS(WPP_EX_LEVEL_FLAGS(LEVEL, FLAGS), MSG, _a12, _a13, _a14) \
    WPP_LEVEL_FLAGS_PRE(LEVEL, FLAGS) \
    WPP_ANNOTATE(Vc4Display_cpp1021) \
    (( \
        WPP_RECORDER_CHECK_INIT WPP_RECORDER_LEVEL_FLAGS_FILTER(LEVEL, FLAGS) \
        ?   WPP_INVOKE_WPP_DEBUG((MSG, _a12, _a13, _a14)), \
            WPP_RECORDER_SF_sDdqq( \
                WPP_RECORDER_LEVEL_FLAGS_ARGS(LEVEL, FLAGS), \
                63, \
                WPP_LOCAL_TraceGuids+0, __FILE__, __LINE__, _a12, _a13, _a14), \
            1 \
        :   0 \
    )) \
    WPP_LEVEL_FLAGS_POST(LEVEL, FLAGS)
#endif // ENABLE_WPP_TRACE_FILTERING_WITH_WPP_RECORDER
#else  // ENABLE_WPP_RECORDER
#define WPP_CALL_Vc4Display_cpp1021(LEVEL, FLAGS, MSG, _a12, _a13, _a14) \
    WPP_LOG_ALWAYS(WPP_EX_LEVEL_FLAGS(LEVEL, FLAGS), MSG, _a12, _a13, _a14) \
    WPP_LEVEL_FLAGS_PRE(LEVEL, FLAGS) \
    WPP_ANNOTATE(Vc4Display_cpp1021) \
    (( \
        WPP_CHECK_INIT WPP_LEVEL_FLAGS_ENABLED(LEVEL, FLAGS) \
        ?   WPP_INVOKE_WPP_DEBUG((MSG, _a12, _a13, _a14)), \
            WPP_SF_sDdqq( \
                WPP_LEVEL_FLAGS_LOGGER(LEVEL, FLAGS) \
                63, \
                WPP_LOCAL_TraceGuids+0, __FILE__, __LINE__, _a12, _a13, _a14), \
            1 \
        :   0 \
    )) \
    WPP_LEVEL_FLAGS_POST(LEVEL, FLAGS)
#endif // ENABLE_WPP_RECORDER

// WPP_CALL_Vc4Display_cpp1057
#ifndef WPP_LEVEL_FLAGS_PRE
#  define WPP_LEVEL_FLAGS_PRE(LEVEL,FLAGS)
#endif
#ifndef WPP_LEVEL_FLAGS_POST
#  define WPP_LEVEL_FLAGS_POST(LEVEL,FLAGS)
#endif
#if ENABLE_WPP_RECORDER
#if ENABLE_WPP_TRACE_FILTERING_WITH_WPP_RECORDER
#define WPP_CALL_Vc4Display_cpp1057(LEVEL, FLAGS, MSG, _a12) \
    WPP_LOG_ALWAYS(WPP_EX_LEVEL_FLAGS(LEVEL, FLAGS), MSG, _a12) \
    WPP_LEVEL_FLAGS_PRE(LEVEL, FLAGS) \
    do {\
        WPP_ANNOTATE(Vc4Display_cpp1057) 0; \
        BOOLEAN wppEnabled = WPP_CHECK_INIT WPP_LEVEL_FLAGS_ENABLED(LEVEL, FLAGS); \
        BOOLEAN recorderEnabled = WPP_RECORDER_CHECK_INIT WPP_RECORDER_LEVEL_FLAGS_FILTER(LEVEL, FLAGS); \
        if (wppEnabled || recorderEnabled) { \
            WPP_INVOKE_WPP_DEBUG((MSG, _a12)); \
            WPP_RECORDER_AND_TRACE_SF_sDd( \
                     WPP_LEVEL_FLAGS_LOGGER(LEVEL, FLAGS) \
                     wppEnabled, recorderEnabled, \
                     WPP_RECORDER_LEVEL_FLAGS_ARGS(LEVEL, FLAGS), \
                     64, \
                     WPP_LOCAL_TraceGuids+0, __FILE__, __LINE__, _a12);\
        } \
    } \
    while(0) \
    WPP_LEVEL_FLAGS_POST(LEVEL, FLAGS)
#else // ENABLE_WPP_TRACE_FILTERING_WITH_WPP_RECORDER
#define WPP_CALL_Vc4Display_cpp1057(LEVEL, FLAGS, MSG, _a12) \
    WPP_LOG_ALWAYS(WPP_EX_LEVEL_FLAGS(LEVEL, FLAGS), MSG, _a12) \
    WPP_LEVEL_FLAGS_PRE(LEVEL, FLAGS) \
    WPP_ANNOTATE(Vc4Display_cpp1057) \
    (( \
        WPP_RECORDER_CHECK_INIT WPP_RECORDER_LEVEL_FLAGS_FILTER(LEVEL, FLAGS) \
        ?   WPP_INVOKE_WPP_DEBUG((MSG, _a12)), \
            WPP_RECORDER_SF_sDd( \
                WPP_RECORDER_LEVEL_FLAGS_ARGS(LEVEL, FLAGS), \
                64, \
                WPP_LOCAL_TraceGuids+0, __FILE__, __LINE__, _a12), \
            1 \
        :   0 \
    )) \
    WPP_LEVEL_FLAGS_POST(LEVEL, FLAGS)
#endif // ENABLE_WPP_TRACE_FILTERING_WITH_WPP_RECORDER
#else  // ENABLE_WPP_RECORDER
#define WPP_CALL_Vc4Display_cpp1057(LEVEL, FLAGS, MSG, _a12) \
    WPP_LOG_ALWAYS(WPP_EX_LEVEL_FLAGS(LEVEL, FLAGS), MSG, _a12) \
    WPP_LEVEL_FLAGS_PRE(LEVEL, FLAGS) \
    WPP_ANNOTATE(Vc4Display_cpp1057) \
    (( \
        WPP_CHECK_INIT WPP_LEVEL_FLAGS_ENABLED(LEVEL, FLAGS) \
        ?   WPP_INVOKE_WPP_DEBUG((MSG, _a12)), \
            WPP_SF_sDd( \
                WPP_LEVEL_FLAGS_LOGGER(LEVEL, FLAGS) \
                64, \
                WPP_LOCAL_TraceGuids+0, __FILE__, __LINE__, _a12), \
            1 \
        :   0 \
    )) \
    WPP_LEVEL_FLAGS_POST(LEVEL, FLAGS)
#endif // ENABLE_WPP_RECORDER

// WPP_CALL_Vc4Display_cpp1094
#ifndef WPP_LEVEL_FLAGS_PRE
#  define WPP_LEVEL_FLAGS_PRE(LEVEL,FLAGS)
#endif
#ifndef WPP_LEVEL_FLAGS_POST
#  define WPP_LEVEL_FLAGS_POST(LEVEL,FLAGS)
#endif
#if ENABLE_WPP_RECORDER
#if ENABLE_WPP_TRACE_FILTERING_WITH_WPP_RECORDER
#define WPP_CALL_Vc4Display_cpp1094(LEVEL, FLAGS, MSG, _a12) \
    WPP_LOG_ALWAYS(WPP_EX_LEVEL_FLAGS(LEVEL, FLAGS), MSG, _a12) \
    WPP_LEVEL_FLAGS_PRE(LEVEL, FLAGS) \
    do {\
        WPP_ANNOTATE(Vc4Display_cpp1094) 0; \
        BOOLEAN wppEnabled = WPP_CHECK_INIT WPP_LEVEL_FLAGS_ENABLED(LEVEL, FLAGS); \
        BOOLEAN recorderEnabled = WPP_RECORDER_CHECK_INIT WPP_RECORDER_LEVEL_FLAGS_FILTER(LEVEL, FLAGS); \
        if (wppEnabled || recorderEnabled) { \
            WPP_INVOKE_WPP_DEBUG((MSG, _a12)); \
            WPP_RECORDER_AND_TRACE_SF_sDd( \
                     WPP_LEVEL_FLAGS_LOGGER(LEVEL, FLAGS) \
                     wppEnabled, recorderEnabled, \
                     WPP_RECORDER_LEVEL_FLAGS_ARGS(LEVEL, FLAGS), \
                     65, \
                     WPP_LOCAL_TraceGuids+0, __FILE__, __LINE__, _a12);\
        } \
    } \
    while(0) \
    WPP_LEVEL_FLAGS_POST(LEVEL, FLAGS)
#else // ENABLE_WPP_TRACE_FILTERING_WITH_WPP_RECORDER
#define WPP_CALL_Vc4Display_cpp1094(LEVEL, FLAGS, MSG, _a12) \
    WPP_LOG_ALWAYS(WPP_EX_LEVEL_FLAGS(LEVEL, FLAGS), MSG, _a12) \
    WPP_LEVEL_FLAGS_PRE(LEVEL, FLAGS) \
    WPP_ANNOTATE(Vc4Display_cpp1094) \
    (( \
        WPP_RECORDER_CHECK_INIT WPP_RECORDER_LEVEL_FLAGS_FILTER(LEVEL, FLAGS) \
        ?   WPP_INVOKE_WPP_DEBUG((MSG, _a12)), \
            WPP_RECORDER_SF_sDd( \
                WPP_RECORDER_LEVEL_FLAGS_ARGS(LEVEL, FLAGS), \
                65, \
                WPP_LOCAL_TraceGuids+0, __FILE__, __LINE__, _a12), \
            1 \
        :   0 \
    )) \
    WPP_LEVEL_FLAGS_POST(LEVEL, FLAGS)
#endif // ENABLE_WPP_TRACE_FILTERING_WITH_WPP_RECORDER
#else  // ENABLE_WPP_RECORDER
#define WPP_CALL_Vc4Display_cpp1094(LEVEL, FLAGS, MSG, _a12) \
    WPP_LOG_ALWAYS(WPP_EX_LEVEL_FLAGS(LEVEL, FLAGS), MSG, _a12) \
    WPP_LEVEL_FLAGS_PRE(LEVEL, FLAGS) \
    WPP_ANNOTATE(Vc4Display_cpp1094) \
    (( \
        WPP_CHECK_INIT WPP_LEVEL_FLAGS_ENABLED(LEVEL, FLAGS) \
        ?   WPP_INVOKE_WPP_DEBUG((MSG, _a12)), \
            WPP_SF_sDd( \
                WPP_LEVEL_FLAGS_LOGGER(LEVEL, FLAGS) \
                65, \
                WPP_LOCAL_TraceGuids+0, __FILE__, __LINE__, _a12), \
            1 \
        :   0 \
    )) \
    WPP_LEVEL_FLAGS_POST(LEVEL, FLAGS)
#endif // ENABLE_WPP_RECORDER

// WPP_CALL_Vc4Display_cpp1164
#ifndef WPP_LEVEL_FLAGS_PRE
#  define WPP_LEVEL_FLAGS_PRE(LEVEL,FLAGS)
#endif
#ifndef WPP_LEVEL_FLAGS_POST
#  define WPP_LEVEL_FLAGS_POST(LEVEL,FLAGS)
#endif
#if ENABLE_WPP_RECORDER
#if ENABLE_WPP_TRACE_FILTERING_WITH_WPP_RECORDER
#define WPP_CALL_Vc4Display_cpp1164(LEVEL, FLAGS, MSG, _a12) \
    WPP_LOG_ALWAYS(WPP_EX_LEVEL_FLAGS(LEVEL, FLAGS), MSG, _a12) \
    WPP_LEVEL_FLAGS_PRE(LEVEL, FLAGS) \
    do {\
        WPP_ANNOTATE(Vc4Display_cpp1164) 0; \
        BOOLEAN wppEnabled = WPP_CHECK_INIT WPP_LEVEL_FLAGS_ENABLED(LEVEL, FLAGS); \
        BOOLEAN recorderEnabled = WPP_RECORDER_CHECK_INIT WPP_RECORDER_LEVEL_FLAGS_FILTER(LEVEL, FLAGS); \
        if (wppEnabled || recorderEnabled) { \
            WPP_INVOKE_WPP_DEBUG((MSG, _a12)); \
            WPP_RECORDER_AND_TRACE_SF_sDd( \
                     WPP_LEVEL_FLAGS_LOGGER(LEVEL, FLAGS) \
                     wppEnabled, recorderEnabled, \
                     WPP_RECORDER_LEVEL_FLAGS_ARGS(LEVEL, FLAGS), \
                     66, \
                     WPP_LOCAL_TraceGuids+0, __FILE__, __LINE__, _a12);\
        } \
    } \
    while(0) \
    WPP_LEVEL_FLAGS_POST(LEVEL, FLAGS)
#else // ENABLE_WPP_TRACE_FILTERING_WITH_WPP_RECORDER
#define WPP_CALL_Vc4Display_cpp1164(LEVEL, FLAGS, MSG, _a12) \
    WPP_LOG_ALWAYS(WPP_EX_LEVEL_FLAGS(LEVEL, FLAGS), MSG, _a12) \
    WPP_LEVEL_FLAGS_PRE(LEVEL, FLAGS) \
    WPP_ANNOTATE(Vc4Display_cpp1164) \
    (( \
        WPP_RECORDER_CHECK_INIT WPP_RECORDER_LEVEL_FLAGS_FILTER(LEVEL, FLAGS) \
        ?   WPP_INVOKE_WPP_DEBUG((MSG, _a12)), \
            WPP_RECORDER_SF_sDd( \
                WPP_RECORDER_LEVEL_FLAGS_ARGS(LEVEL, FLAGS), \
                66, \
                WPP_LOCAL_TraceGuids+0, __FILE__, __LINE__, _a12), \
            1 \
        :   0 \
    )) \
    WPP_LEVEL_FLAGS_POST(LEVEL, FLAGS)
#endif // ENABLE_WPP_TRACE_FILTERING_WITH_WPP_RECORDER
#else  // ENABLE_WPP_RECORDER
#define WPP_CALL_Vc4Display_cpp1164(LEVEL, FLAGS, MSG, _a12) \
    WPP_LOG_ALWAYS(WPP_EX_LEVEL_FLAGS(LEVEL, FLAGS), MSG, _a12) \
    WPP_LEVEL_FLAGS_PRE(LEVEL, FLAGS) \
    WPP_ANNOTATE(Vc4Display_cpp1164) \
    (( \
        WPP_CHECK_INIT WPP_LEVEL_FLAGS_ENABLED(LEVEL, FLAGS) \
        ?   WPP_INVOKE_WPP_DEBUG((MSG, _a12)), \
            WPP_SF_sDd( \
                WPP_LEVEL_FLAGS_LOGGER(LEVEL, FLAGS) \
                66, \
                WPP_LOCAL_TraceGuids+0, __FILE__, __LINE__, _a12), \
            1 \
        :   0 \
    )) \
    WPP_LEVEL_FLAGS_POST(LEVEL, FLAGS)
#endif // ENABLE_WPP_RECORDER

// WPP_CALL_Vc4Display_cpp1180
#ifndef WPP_LEVEL_FLAGS_PRE
#  define WPP_LEVEL_FLAGS_PRE(LEVEL,FLAGS)
#endif
#ifndef WPP_LEVEL_FLAGS_POST
#  define WPP_LEVEL_FLAGS_POST(LEVEL,FLAGS)
#endif
#if ENABLE_WPP_RECORDER
#if ENABLE_WPP_TRACE_FILTERING_WITH_WPP_RECORDER
#define WPP_CALL_Vc4Display_cpp1180(LEVEL, FLAGS, MSG, _a12, _a13, _a14) \
    WPP_LOG_ALWAYS(WPP_EX_LEVEL_FLAGS(LEVEL, FLAGS), MSG, _a12, _a13, _a14) \
    WPP_LEVEL_FLAGS_PRE(LEVEL, FLAGS) \
    do {\
        WPP_ANNOTATE(Vc4Display_cpp1180) 0; \
        BOOLEAN wppEnabled = WPP_CHECK_INIT WPP_LEVEL_FLAGS_ENABLED(LEVEL, FLAGS); \
        BOOLEAN recorderEnabled = WPP_RECORDER_CHECK_INIT WPP_RECORDER_LEVEL_FLAGS_FILTER(LEVEL, FLAGS); \
        if (wppEnabled || recorderEnabled) { \
            WPP_INVOKE_WPP_DEBUG((MSG, _a12, _a13, _a14)); \
            WPP_RECORDER_AND_TRACE_SF_sDdqq( \
                     WPP_LEVEL_FLAGS_LOGGER(LEVEL, FLAGS) \
                     wppEnabled, recorderEnabled, \
                     WPP_RECORDER_LEVEL_FLAGS_ARGS(LEVEL, FLAGS), \
                     67, \
                     WPP_LOCAL_TraceGuids+0, __FILE__, __LINE__, _a12, _a13, _a14);\
        } \
    } \
    while(0) \
    WPP_LEVEL_FLAGS_POST(LEVEL, FLAGS)
#else // ENABLE_WPP_TRACE_FILTERING_WITH_WPP_RECORDER
#define WPP_CALL_Vc4Display_cpp1180(LEVEL, FLAGS, MSG, _a12, _a13, _a14) \
    WPP_LOG_ALWAYS(WPP_EX_LEVEL_FLAGS(LEVEL, FLAGS), MSG, _a12, _a13, _a14) \
    WPP_LEVEL_FLAGS_PRE(LEVEL, FLAGS) \
    WPP_ANNOTATE(Vc4Display_cpp1180) \
    (( \
        WPP_RECORDER_CHECK_INIT WPP_RECORDER_LEVEL_FLAGS_FILTER(LEVEL, FLAGS) \
        ?   WPP_INVOKE_WPP_DEBUG((MSG, _a12, _a13, _a14)), \
            WPP_RECORDER_SF_sDdqq( \
                WPP_RECORDER_LEVEL_FLAGS_ARGS(LEVEL, FLAGS), \
                67, \
                WPP_LOCAL_TraceGuids+0, __FILE__, __LINE__, _a12, _a13, _a14), \
            1 \
        :   0 \
    )) \
    WPP_LEVEL_FLAGS_POST(LEVEL, FLAGS)
#endif // ENABLE_WPP_TRACE_FILTERING_WITH_WPP_RECORDER
#else  // ENABLE_WPP_RECORDER
#define WPP_CALL_Vc4Display_cpp1180(LEVEL, FLAGS, MSG, _a12, _a13, _a14) \
    WPP_LOG_ALWAYS(WPP_EX_LEVEL_FLAGS(LEVEL, FLAGS), MSG, _a12, _a13, _a14) \
    WPP_LEVEL_FLAGS_PRE(LEVEL, FLAGS) \
    WPP_ANNOTATE(Vc4Display_cpp1180) \
    (( \
        WPP_CHECK_INIT WPP_LEVEL_FLAGS_ENABLED(LEVEL, FLAGS) \
        ?   WPP_INVOKE_WPP_DEBUG((MSG, _a12, _a13, _a14)), \
            WPP_SF_sDdqq( \
                WPP_LEVEL_FLAGS_LOGGER(LEVEL, FLAGS) \
                67, \
                WPP_LOCAL_TraceGuids+0, __FILE__, __LINE__, _a12, _a13, _a14), \
            1 \
        :   0 \
    )) \
    WPP_LEVEL_FLAGS_POST(LEVEL, FLAGS)
#endif // ENABLE_WPP_RECORDER

// WPP_CALL_Vc4Display_cpp1204
#ifndef WPP_LEVEL_FLAGS_PRE
#  define WPP_LEVEL_FLAGS_PRE(LEVEL,FLAGS)
#endif
#ifndef WPP_LEVEL_FLAGS_POST
#  define WPP_LEVEL_FLAGS_POST(LEVEL,FLAGS)
#endif
#if ENABLE_WPP_RECORDER
#if ENABLE_WPP_TRACE_FILTERING_WITH_WPP_RECORDER
#define WPP_CALL_Vc4Display_cpp1204(LEVEL, FLAGS, MSG, _a12, _a13) \
    WPP_LOG_ALWAYS(WPP_EX_LEVEL_FLAGS(LEVEL, FLAGS), MSG, _a12, _a13) \
    WPP_LEVEL_FLAGS_PRE(LEVEL, FLAGS) \
    do {\
        WPP_ANNOTATE(Vc4Display_cpp1204) 0; \
        BOOLEAN wppEnabled = WPP_CHECK_INIT WPP_LEVEL_FLAGS_ENABLED(LEVEL, FLAGS); \
        BOOLEAN recorderEnabled = WPP_RECORDER_CHECK_INIT WPP_RECORDER_LEVEL_FLAGS_FILTER(LEVEL, FLAGS); \
        if (wppEnabled || recorderEnabled) { \
            WPP_INVOKE_WPP_DEBUG((MSG, _a12, _a13)); \
            WPP_RECORDER_AND_TRACE_SF_sDdd( \
                     WPP_LEVEL_FLAGS_LOGGER(LEVEL, FLAGS) \
                     wppEnabled, recorderEnabled, \
                     WPP_RECORDER_LEVEL_FLAGS_ARGS(LEVEL, FLAGS), \
                     68, \
                     WPP_LOCAL_TraceGuids+0, __FILE__, __LINE__, _a12, _a13);\
        } \
    } \
    while(0) \
    WPP_LEVEL_FLAGS_POST(LEVEL, FLAGS)
#else // ENABLE_WPP_TRACE_FILTERING_WITH_WPP_RECORDER
#define WPP_CALL_Vc4Display_cpp1204(LEVEL, FLAGS, MSG, _a12, _a13) \
    WPP_LOG_ALWAYS(WPP_EX_LEVEL_FLAGS(LEVEL, FLAGS), MSG, _a12, _a13) \
    WPP_LEVEL_FLAGS_PRE(LEVEL, FLAGS) \
    WPP_ANNOTATE(Vc4Display_cpp1204) \
    (( \
        WPP_RECORDER_CHECK_INIT WPP_RECORDER_LEVEL_FLAGS_FILTER(LEVEL, FLAGS) \
        ?   WPP_INVOKE_WPP_DEBUG((MSG, _a12, _a13)), \
            WPP_RECORDER_SF_sDdd( \
                WPP_RECORDER_LEVEL_FLAGS_ARGS(LEVEL, FLAGS), \
                68, \
                WPP_LOCAL_TraceGuids+0, __FILE__, __LINE__, _a12, _a13), \
            1 \
        :   0 \
    )) \
    WPP_LEVEL_FLAGS_POST(LEVEL, FLAGS)
#endif // ENABLE_WPP_TRACE_FILTERING_WITH_WPP_RECORDER
#else  // ENABLE_WPP_RECORDER
#define WPP_CALL_Vc4Display_cpp1204(LEVEL, FLAGS, MSG, _a12, _a13) \
    WPP_LOG_ALWAYS(WPP_EX_LEVEL_FLAGS(LEVEL, FLAGS), MSG, _a12, _a13) \
    WPP_LEVEL_FLAGS_PRE(LEVEL, FLAGS) \
    WPP_ANNOTATE(Vc4Display_cpp1204) \
    (( \
        WPP_CHECK_INIT WPP_LEVEL_FLAGS_ENABLED(LEVEL, FLAGS) \
        ?   WPP_INVOKE_WPP_DEBUG((MSG, _a12, _a13)), \
            WPP_SF_sDdd( \
                WPP_LEVEL_FLAGS_LOGGER(LEVEL, FLAGS) \
                68, \
                WPP_LOCAL_TraceGuids+0, __FILE__, __LINE__, _a12, _a13), \
            1 \
        :   0 \
    )) \
    WPP_LEVEL_FLAGS_POST(LEVEL, FLAGS)
#endif // ENABLE_WPP_RECORDER

// WPP_CALL_Vc4Display_cpp1222
#ifndef WPP_LEVEL_FLAGS_PRE
#  define WPP_LEVEL_FLAGS_PRE(LEVEL,FLAGS)
#endif
#ifndef WPP_LEVEL_FLAGS_POST
#  define WPP_LEVEL_FLAGS_POST(LEVEL,FLAGS)
#endif
#if ENABLE_WPP_RECORDER
#if ENABLE_WPP_TRACE_FILTERING_WITH_WPP_RECORDER
#define WPP_CALL_Vc4Display_cpp1222(LEVEL, FLAGS, MSG, _a12, _a13, _a14, _a15, _a16, _a17) \
    WPP_LOG_ALWAYS(WPP_EX_LEVEL_FLAGS(LEVEL, FLAGS), MSG, _a12, _a13, _a14, _a15, _a16, _a17) \
    WPP_LEVEL_FLAGS_PRE(LEVEL, FLAGS) \
    do {\
        WPP_ANNOTATE(Vc4Display_cpp1222) 0; \
        BOOLEAN wppEnabled = WPP_CHECK_INIT WPP_LEVEL_FLAGS_ENABLED(LEVEL, FLAGS); \
        BOOLEAN recorderEnabled = WPP_RECORDER_CHECK_INIT WPP_RECORDER_LEVEL_FLAGS_FILTER(LEVEL, FLAGS); \
        if (wppEnabled || recorderEnabled) { \
            WPP_INVOKE_WPP_DEBUG((MSG, _a12, _a13, _a14, _a15, _a16, _a17)); \
            WPP_RECORDER_AND_TRACE_SF_sDqddqdd( \
                     WPP_LEVEL_FLAGS_LOGGER(LEVEL, FLAGS) \
                     wppEnabled, recorderEnabled, \
                     WPP_RECORDER_LEVEL_FLAGS_ARGS(LEVEL, FLAGS), \
                     69, \
                     WPP_LOCAL_TraceGuids+0, __FILE__, __LINE__, _a12, _a13, _a14, _a15, _a16, _a17);\
        } \
    } \
    while(0) \
    WPP_LEVEL_FLAGS_POST(LEVEL, FLAGS)
#else // ENABLE_WPP_TRACE_FILTERING_WITH_WPP_RECORDER
#define WPP_CALL_Vc4Display_cpp1222(LEVEL, FLAGS, MSG, _a12, _a13, _a14, _a15, _a16, _a17) \
    WPP_LOG_ALWAYS(WPP_EX_LEVEL_FLAGS(LEVEL, FLAGS), MSG, _a12, _a13, _a14, _a15, _a16, _a17) \
    WPP_LEVEL_FLAGS_PRE(LEVEL, FLAGS) \
    WPP_ANNOTATE(Vc4Display_cpp1222) \
    (( \
        WPP_RECORDER_CHECK_INIT WPP_RECORDER_LEVEL_FLAGS_FILTER(LEVEL, FLAGS) \
        ?   WPP_INVOKE_WPP_DEBUG((MSG, _a12, _a13, _a14, _a15, _a16, _a17)), \
            WPP_RECORDER_SF_sDqddqdd( \
                WPP_RECORDER_LEVEL_FLAGS_ARGS(LEVEL, FLAGS), \
                69, \
                WPP_LOCAL_TraceGuids+0, __FILE__, __LINE__, _a12, _a13, _a14, _a15, _a16, _a17), \
            1 \
        :   0 \
    )) \
    WPP_LEVEL_FLAGS_POST(LEVEL, FLAGS)
#endif // ENABLE_WPP_TRACE_FILTERING_WITH_WPP_RECORDER
#else  // ENABLE_WPP_RECORDER
#define WPP_CALL_Vc4Display_cpp1222(LEVEL, FLAGS, MSG, _a12, _a13, _a14, _a15, _a16, _a17) \
    WPP_LOG_ALWAYS(WPP_EX_LEVEL_FLAGS(LEVEL, FLAGS), MSG, _a12, _a13, _a14, _a15, _a16, _a17) \
    WPP_LEVEL_FLAGS_PRE(LEVEL, FLAGS) \
    WPP_ANNOTATE(Vc4Display_cpp1222) \
    (( \
        WPP_CHECK_INIT WPP_LEVEL_FLAGS_ENABLED(LEVEL, FLAGS) \
        ?   WPP_INVOKE_WPP_DEBUG((MSG, _a12, _a13, _a14, _a15, _a16, _a17)), \
            WPP_SF_sDqddqdd( \
                WPP_LEVEL_FLAGS_LOGGER(LEVEL, FLAGS) \
                69, \
                WPP_LOCAL_TraceGuids+0, __FILE__, __LINE__, _a12, _a13, _a14, _a15, _a16, _a17), \
            1 \
        :   0 \
    )) \
    WPP_LEVEL_FLAGS_POST(LEVEL, FLAGS)
#endif // ENABLE_WPP_RECORDER

// WPP_CALL_Vc4Display_cpp1244
#ifndef WPP_LEVEL_FLAGS_PRE
#  define WPP_LEVEL_FLAGS_PRE(LEVEL,FLAGS)
#endif
#ifndef WPP_LEVEL_FLAGS_POST
#  define WPP_LEVEL_FLAGS_POST(LEVEL,FLAGS)
#endif
#if ENABLE_WPP_RECORDER
#if ENABLE_WPP_TRACE_FILTERING_WITH_WPP_RECORDER
#define WPP_CALL_Vc4Display_cpp1244(LEVEL, FLAGS, MSG, _a12, _a13, _a14) \
    WPP_LOG_ALWAYS(WPP_EX_LEVEL_FLAGS(LEVEL, FLAGS), MSG, _a12, _a13, _a14) \
    WPP_LEVEL_FLAGS_PRE(LEVEL, FLAGS) \
    do {\
        WPP_ANNOTATE(Vc4Display_cpp1244) 0; \
        BOOLEAN wppEnabled = WPP_CHECK_INIT WPP_LEVEL_FLAGS_ENABLED(LEVEL, FLAGS); \
        BOOLEAN recorderEnabled = WPP_RECORDER_CHECK_INIT WPP_RECORDER_LEVEL_FLAGS_FILTER(LEVEL, FLAGS); \
        if (wppEnabled || recorderEnabled) { \
            WPP_INVOKE_WPP_DEBUG((MSG, _a12, _a13, _a14)); \
            WPP_RECORDER_AND_TRACE_SF_sDdqq( \
                     WPP_LEVEL_FLAGS_LOGGER(LEVEL, FLAGS) \
                     wppEnabled, recorderEnabled, \
                     WPP_RECORDER_LEVEL_FLAGS_ARGS(LEVEL, FLAGS), \
                     70, \
                     WPP_LOCAL_TraceGuids+0, __FILE__, __LINE__, _a12, _a13, _a14);\
        } \
    } \
    while(0) \
    WPP_LEVEL_FLAGS_POST(LEVEL, FLAGS)
#else // ENABLE_WPP_TRACE_FILTERING_WITH_WPP_RECORDER
#define WPP_CALL_Vc4Display_cpp1244(LEVEL, FLAGS, MSG, _a12, _a13, _a14) \
    WPP_LOG_ALWAYS(WPP_EX_LEVEL_FLAGS(LEVEL, FLAGS), MSG, _a12, _a13, _a14) \
    WPP_LEVEL_FLAGS_PRE(LEVEL, FLAGS) \
    WPP_ANNOTATE(Vc4Display_cpp1244) \
    (( \
        WPP_RECORDER_CHECK_INIT WPP_RECORDER_LEVEL_FLAGS_FILTER(LEVEL, FLAGS) \
        ?   WPP_INVOKE_WPP_DEBUG((MSG, _a12, _a13, _a14)), \
            WPP_RECORDER_SF_sDdqq( \
                WPP_RECORDER_LEVEL_FLAGS_ARGS(LEVEL, FLAGS), \
                70, \
                WPP_LOCAL_TraceGuids+0, __FILE__, __LINE__, _a12, _a13, _a14), \
            1 \
        :   0 \
    )) \
    WPP_LEVEL_FLAGS_POST(LEVEL, FLAGS)
#endif // ENABLE_WPP_TRACE_FILTERING_WITH_WPP_RECORDER
#else  // ENABLE_WPP_RECORDER
#define WPP_CALL_Vc4Display_cpp1244(LEVEL, FLAGS, MSG, _a12, _a13, _a14) \
    WPP_LOG_ALWAYS(WPP_EX_LEVEL_FLAGS(LEVEL, FLAGS), MSG, _a12, _a13, _a14) \
    WPP_LEVEL_FLAGS_PRE(LEVEL, FLAGS) \
    WPP_ANNOTATE(Vc4Display_cpp1244) \
    (( \
        WPP_CHECK_INIT WPP_LEVEL_FLAGS_ENABLED(LEVEL, FLAGS) \
        ?   WPP_INVOKE_WPP_DEBUG((MSG, _a12, _a13, _a14)), \
            WPP_SF_sDdqq( \
                WPP_LEVEL_FLAGS_LOGGER(LEVEL, FLAGS) \
                70, \
                WPP_LOCAL_TraceGuids+0, __FILE__, __LINE__, _a12, _a13, _a14), \
            1 \
        :   0 \
    )) \
    WPP_LEVEL_FLAGS_POST(LEVEL, FLAGS)
#endif // ENABLE_WPP_RECORDER

// WPP_CALL_Vc4Display_cpp1262
#ifndef WPP_LEVEL_FLAGS_PRE
#  define WPP_LEVEL_FLAGS_PRE(LEVEL,FLAGS)
#endif
#ifndef WPP_LEVEL_FLAGS_POST
#  define WPP_LEVEL_FLAGS_POST(LEVEL,FLAGS)
#endif
#if ENABLE_WPP_RECORDER
#if ENABLE_WPP_TRACE_FILTERING_WITH_WPP_RECORDER
#define WPP_CALL_Vc4Display_cpp1262(LEVEL, FLAGS, MSG, _a12, _a13, _a14) \
    WPP_LOG_ALWAYS(WPP_EX_LEVEL_FLAGS(LEVEL, FLAGS), MSG, _a12, _a13, _a14) \
    WPP_LEVEL_FLAGS_PRE(LEVEL, FLAGS) \
    do {\
        WPP_ANNOTATE(Vc4Display_cpp1262) 0; \
        BOOLEAN wppEnabled = WPP_CHECK_INIT WPP_LEVEL_FLAGS_ENABLED(LEVEL, FLAGS); \
        BOOLEAN recorderEnabled = WPP_RECORDER_CHECK_INIT WPP_RECORDER_LEVEL_FLAGS_FILTER(LEVEL, FLAGS); \
        if (wppEnabled || recorderEnabled) { \
            WPP_INVOKE_WPP_DEBUG((MSG, _a12, _a13, _a14)); \
            WPP_RECORDER_AND_TRACE_SF_sDdqq( \
                     WPP_LEVEL_FLAGS_LOGGER(LEVEL, FLAGS) \
                     wppEnabled, recorderEnabled, \
                     WPP_RECORDER_LEVEL_FLAGS_ARGS(LEVEL, FLAGS), \
                     71, \
                     WPP_LOCAL_TraceGuids+0, __FILE__, __LINE__, _a12, _a13, _a14);\
        } \
    } \
    while(0) \
    WPP_LEVEL_FLAGS_POST(LEVEL, FLAGS)
#else // ENABLE_WPP_TRACE_FILTERING_WITH_WPP_RECORDER
#define WPP_CALL_Vc4Display_cpp1262(LEVEL, FLAGS, MSG, _a12, _a13, _a14) \
    WPP_LOG_ALWAYS(WPP_EX_LEVEL_FLAGS(LEVEL, FLAGS), MSG, _a12, _a13, _a14) \
    WPP_LEVEL_FLAGS_PRE(LEVEL, FLAGS) \
    WPP_ANNOTATE(Vc4Display_cpp1262) \
    (( \
        WPP_RECORDER_CHECK_INIT WPP_RECORDER_LEVEL_FLAGS_FILTER(LEVEL, FLAGS) \
        ?   WPP_INVOKE_WPP_DEBUG((MSG, _a12, _a13, _a14)), \
            WPP_RECORDER_SF_sDdqq( \
                WPP_RECORDER_LEVEL_FLAGS_ARGS(LEVEL, FLAGS), \
                71, \
                WPP_LOCAL_TraceGuids+0, __FILE__, __LINE__, _a12, _a13, _a14), \
            1 \
        :   0 \
    )) \
    WPP_LEVEL_FLAGS_POST(LEVEL, FLAGS)
#endif // ENABLE_WPP_TRACE_FILTERING_WITH_WPP_RECORDER
#else  // ENABLE_WPP_RECORDER
#define WPP_CALL_Vc4Display_cpp1262(LEVEL, FLAGS, MSG, _a12, _a13, _a14) \
    WPP_LOG_ALWAYS(WPP_EX_LEVEL_FLAGS(LEVEL, FLAGS), MSG, _a12, _a13, _a14) \
    WPP_LEVEL_FLAGS_PRE(LEVEL, FLAGS) \
    WPP_ANNOTATE(Vc4Display_cpp1262) \
    (( \
        WPP_CHECK_INIT WPP_LEVEL_FLAGS_ENABLED(LEVEL, FLAGS) \
        ?   WPP_INVOKE_WPP_DEBUG((MSG, _a12, _a13, _a14)), \
            WPP_SF_sDdqq( \
                WPP_LEVEL_FLAGS_LOGGER(LEVEL, FLAGS) \
                71, \
                WPP_LOCAL_TraceGuids+0, __FILE__, __LINE__, _a12, _a13, _a14), \
            1 \
        :   0 \
    )) \
    WPP_LEVEL_FLAGS_POST(LEVEL, FLAGS)
#endif // ENABLE_WPP_RECORDER

// WPP_CALL_Vc4Display_cpp1279
#ifndef WPP_LEVEL_FLAGS_PRE
#  define WPP_LEVEL_FLAGS_PRE(LEVEL,FLAGS)
#endif
#ifndef WPP_LEVEL_FLAGS_POST
#  define WPP_LEVEL_FLAGS_POST(LEVEL,FLAGS)
#endif
#if ENABLE_WPP_RECORDER
#if ENABLE_WPP_TRACE_FILTERING_WITH_WPP_RECORDER
#define WPP_CALL_Vc4Display_cpp1279(LEVEL, FLAGS, MSG, _a12) \
    WPP_LOG_ALWAYS(WPP_EX_LEVEL_FLAGS(LEVEL, FLAGS), MSG, _a12) \
    WPP_LEVEL_FLAGS_PRE(LEVEL, FLAGS) \
    do {\
        WPP_ANNOTATE(Vc4Display_cpp1279) 0; \
        BOOLEAN wppEnabled = WPP_CHECK_INIT WPP_LEVEL_FLAGS_ENABLED(LEVEL, FLAGS); \
        BOOLEAN recorderEnabled = WPP_RECORDER_CHECK_INIT WPP_RECORDER_LEVEL_FLAGS_FILTER(LEVEL, FLAGS); \
        if (wppEnabled || recorderEnabled) { \
            WPP_INVOKE_WPP_DEBUG((MSG, _a12)); \
            WPP_RECORDER_AND_TRACE_SF_sDd( \
                     WPP_LEVEL_FLAGS_LOGGER(LEVEL, FLAGS) \
                     wppEnabled, recorderEnabled, \
                     WPP_RECORDER_LEVEL_FLAGS_ARGS(LEVEL, FLAGS), \
                     72, \
                     WPP_LOCAL_TraceGuids+0, __FILE__, __LINE__, _a12);\
        } \
    } \
    while(0) \
    WPP_LEVEL_FLAGS_POST(LEVEL, FLAGS)
#else // ENABLE_WPP_TRACE_FILTERING_WITH_WPP_RECORDER
#define WPP_CALL_Vc4Display_cpp1279(LEVEL, FLAGS, MSG, _a12) \
    WPP_LOG_ALWAYS(WPP_EX_LEVEL_FLAGS(LEVEL, FLAGS), MSG, _a12) \
    WPP_LEVEL_FLAGS_PRE(LEVEL, FLAGS) \
    WPP_ANNOTATE(Vc4Display_cpp1279) \
    (( \
        WPP_RECORDER_CHECK_INIT WPP_RECORDER_LEVEL_FLAGS_FILTER(LEVEL, FLAGS) \
        ?   WPP_INVOKE_WPP_DEBUG((MSG, _a12)), \
            WPP_RECORDER_SF_sDd( \
                WPP_RECORDER_LEVEL_FLAGS_ARGS(LEVEL, FLAGS), \
                72, \
                WPP_LOCAL_TraceGuids+0, __FILE__, __LINE__, _a12), \
            1 \
        :   0 \
    )) \
    WPP_LEVEL_FLAGS_POST(LEVEL, FLAGS)
#endif // ENABLE_WPP_TRACE_FILTERING_WITH_WPP_RECORDER
#else  // ENABLE_WPP_RECORDER
#define WPP_CALL_Vc4Display_cpp1279(LEVEL, FLAGS, MSG, _a12) \
    WPP_LOG_ALWAYS(WPP_EX_LEVEL_FLAGS(LEVEL, FLAGS), MSG, _a12) \
    WPP_LEVEL_FLAGS_PRE(LEVEL, FLAGS) \
    WPP_ANNOTATE(Vc4Display_cpp1279) \
    (( \
        WPP_CHECK_INIT WPP_LEVEL_FLAGS_ENABLED(LEVEL, FLAGS) \
        ?   WPP_INVOKE_WPP_DEBUG((MSG, _a12)), \
            WPP_SF_sDd( \
                WPP_LEVEL_FLAGS_LOGGER(LEVEL, FLAGS) \
                72, \
                WPP_LOCAL_TraceGuids+0, __FILE__, __LINE__, _a12), \
            1 \
        :   0 \
    )) \
    WPP_LEVEL_FLAGS_POST(LEVEL, FLAGS)
#endif // ENABLE_WPP_RECORDER

// WPP_CALL_Vc4Display_cpp1288
#ifndef WPP_LEVEL_FLAGS_PRE
#  define WPP_LEVEL_FLAGS_PRE(LEVEL,FLAGS)
#endif
#ifndef WPP_LEVEL_FLAGS_POST
#  define WPP_LEVEL_FLAGS_POST(LEVEL,FLAGS)
#endif
#if ENABLE_WPP_RECORDER
#if ENABLE_WPP_TRACE_FILTERING_WITH_WPP_RECORDER
#define WPP_CALL_Vc4Display_cpp1288(LEVEL, FLAGS, MSG) \
    WPP_LOG_ALWAYS(WPP_EX_LEVEL_FLAGS(LEVEL, FLAGS), MSG) \
    WPP_LEVEL_FLAGS_PRE(LEVEL, FLAGS) \
    do {\
        WPP_ANNOTATE(Vc4Display_cpp1288) 0; \
        BOOLEAN wppEnabled = WPP_CHECK_INIT WPP_LEVEL_FLAGS_ENABLED(LEVEL, FLAGS); \
        BOOLEAN recorderEnabled = WPP_RECORDER_CHECK_INIT WPP_RECORDER_LEVEL_FLAGS_FILTER(LEVEL, FLAGS); \
        if (wppEnabled || recorderEnabled) { \
            WPP_INVOKE_WPP_DEBUG((MSG)); \
            WPP_RECORDER_AND_TRACE_SF_sD( \
                     WPP_LEVEL_FLAGS_LOGGER(LEVEL, FLAGS) \
                     wppEnabled, recorderEnabled, \
                     WPP_RECORDER_LEVEL_FLAGS_ARGS(LEVEL, FLAGS), \
                     73, \
                     WPP_LOCAL_TraceGuids+0, __FILE__, __LINE__);\
        } \
    } \
    while(0) \
    WPP_LEVEL_FLAGS_POST(LEVEL, FLAGS)
#else // ENABLE_WPP_TRACE_FILTERING_WITH_WPP_RECORDER
#define WPP_CALL_Vc4Display_cpp1288(LEVEL, FLAGS, MSG) \
    WPP_LOG_ALWAYS(WPP_EX_LEVEL_FLAGS(LEVEL, FLAGS), MSG) \
    WPP_LEVEL_FLAGS_PRE(LEVEL, FLAGS) \
    WPP_ANNOTATE(Vc4Display_cpp1288) \
    (( \
        WPP_RECORDER_CHECK_INIT WPP_RECORDER_LEVEL_FLAGS_FILTER(LEVEL, FLAGS) \
        ?   WPP_INVOKE_WPP_DEBUG((MSG)), \
            WPP_RECORDER_SF_sD( \
                WPP_RECORDER_LEVEL_FLAGS_ARGS(LEVEL, FLAGS), \
                73, \
                WPP_LOCAL_TraceGuids+0, __FILE__, __LINE__), \
            1 \
        :   0 \
    )) \
    WPP_LEVEL_FLAGS_POST(LEVEL, FLAGS)
#endif // ENABLE_WPP_TRACE_FILTERING_WITH_WPP_RECORDER
#else  // ENABLE_WPP_RECORDER
#define WPP_CALL_Vc4Display_cpp1288(LEVEL, FLAGS, MSG) \
    WPP_LOG_ALWAYS(WPP_EX_LEVEL_FLAGS(LEVEL, FLAGS), MSG) \
    WPP_LEVEL_FLAGS_PRE(LEVEL, FLAGS) \
    WPP_ANNOTATE(Vc4Display_cpp1288) \
    (( \
        WPP_CHECK_INIT WPP_LEVEL_FLAGS_ENABLED(LEVEL, FLAGS) \
        ?   WPP_INVOKE_WPP_DEBUG((MSG)), \
            WPP_SF_sD( \
                WPP_LEVEL_FLAGS_LOGGER(LEVEL, FLAGS) \
                73, \
                WPP_LOCAL_TraceGuids+0, __FILE__, __LINE__), \
            1 \
        :   0 \
    )) \
    WPP_LEVEL_FLAGS_POST(LEVEL, FLAGS)
#endif // ENABLE_WPP_RECORDER

// WPP_CALL_Vc4Display_cpp1304
#ifndef WPP_LEVEL_FLAGS_PRE
#  define WPP_LEVEL_FLAGS_PRE(LEVEL,FLAGS)
#endif
#ifndef WPP_LEVEL_FLAGS_POST
#  define WPP_LEVEL_FLAGS_POST(LEVEL,FLAGS)
#endif
#if ENABLE_WPP_RECORDER
#if ENABLE_WPP_TRACE_FILTERING_WITH_WPP_RECORDER
#define WPP_CALL_Vc4Display_cpp1304(LEVEL, FLAGS, MSG, _a12) \
    WPP_LOG_ALWAYS(WPP_EX_LEVEL_FLAGS(LEVEL, FLAGS), MSG, _a12) \
    WPP_LEVEL_FLAGS_PRE(LEVEL, FLAGS) \
    do {\
        WPP_ANNOTATE(Vc4Display_cpp1304) 0; \
        BOOLEAN wppEnabled = WPP_CHECK_INIT WPP_LEVEL_FLAGS_ENABLED(LEVEL, FLAGS); \
        BOOLEAN recorderEnabled = WPP_RECORDER_CHECK_INIT WPP_RECORDER_LEVEL_FLAGS_FILTER(LEVEL, FLAGS); \
        if (wppEnabled || recorderEnabled) { \
            WPP_INVOKE_WPP_DEBUG((MSG, _a12)); \
            WPP_RECORDER_AND_TRACE_SF_sDd( \
                     WPP_LEVEL_FLAGS_LOGGER(LEVEL, FLAGS) \
                     wppEnabled, recorderEnabled, \
                     WPP_RECORDER_LEVEL_FLAGS_ARGS(LEVEL, FLAGS), \
                     74, \
                     WPP_LOCAL_TraceGuids+0, __FILE__, __LINE__, _a12);\
        } \
    } \
    while(0) \
    WPP_LEVEL_FLAGS_POST(LEVEL, FLAGS)
#else // ENABLE_WPP_TRACE_FILTERING_WITH_WPP_RECORDER
#define WPP_CALL_Vc4Display_cpp1304(LEVEL, FLAGS, MSG, _a12) \
    WPP_LOG_ALWAYS(WPP_EX_LEVEL_FLAGS(LEVEL, FLAGS), MSG, _a12) \
    WPP_LEVEL_FLAGS_PRE(LEVEL, FLAGS) \
    WPP_ANNOTATE(Vc4Display_cpp1304) \
    (( \
        WPP_RECORDER_CHECK_INIT WPP_RECORDER_LEVEL_FLAGS_FILTER(LEVEL, FLAGS) \
        ?   WPP_INVOKE_WPP_DEBUG((MSG, _a12)), \
            WPP_RECORDER_SF_sDd( \
                WPP_RECORDER_LEVEL_FLAGS_ARGS(LEVEL, FLAGS), \
                74, \
                WPP_LOCAL_TraceGuids+0, __FILE__, __LINE__, _a12), \
            1 \
        :   0 \
    )) \
    WPP_LEVEL_FLAGS_POST(LEVEL, FLAGS)
#endif // ENABLE_WPP_TRACE_FILTERING_WITH_WPP_RECORDER
#else  // ENABLE_WPP_RECORDER
#define WPP_CALL_Vc4Display_cpp1304(LEVEL, FLAGS, MSG, _a12) \
    WPP_LOG_ALWAYS(WPP_EX_LEVEL_FLAGS(LEVEL, FLAGS), MSG, _a12) \
    WPP_LEVEL_FLAGS_PRE(LEVEL, FLAGS) \
    WPP_ANNOTATE(Vc4Display_cpp1304) \
    (( \
        WPP_CHECK_INIT WPP_LEVEL_FLAGS_ENABLED(LEVEL, FLAGS) \
        ?   WPP_INVOKE_WPP_DEBUG((MSG, _a12)), \
            WPP_SF_sDd( \
                WPP_LEVEL_FLAGS_LOGGER(LEVEL, FLAGS) \
                74, \
                WPP_LOCAL_TraceGuids+0, __FILE__, __LINE__, _a12), \
            1 \
        :   0 \
    )) \
    WPP_LEVEL_FLAGS_POST(LEVEL, FLAGS)
#endif // ENABLE_WPP_RECORDER

// WPP_CALL_Vc4Display_cpp1327
#ifndef WPP_LEVEL_FLAGS_PRE
#  define WPP_LEVEL_FLAGS_PRE(LEVEL,FLAGS)
#endif
#ifndef WPP_LEVEL_FLAGS_POST
#  define WPP_LEVEL_FLAGS_POST(LEVEL,FLAGS)
#endif
#if ENABLE_WPP_RECORDER
#if ENABLE_WPP_TRACE_FILTERING_WITH_WPP_RECORDER
#define WPP_CALL_Vc4Display_cpp1327(LEVEL, FLAGS, MSG, _a12, _a13) \
    WPP_LOG_ALWAYS(WPP_EX_LEVEL_FLAGS(LEVEL, FLAGS), MSG, _a12, _a13) \
    WPP_LEVEL_FLAGS_PRE(LEVEL, FLAGS) \
    do {\
        WPP_ANNOTATE(Vc4Display_cpp1327) 0; \
        BOOLEAN wppEnabled = WPP_CHECK_INIT WPP_LEVEL_FLAGS_ENABLED(LEVEL, FLAGS); \
        BOOLEAN recorderEnabled = WPP_RECORDER_CHECK_INIT WPP_RECORDER_LEVEL_FLAGS_FILTER(LEVEL, FLAGS); \
        if (wppEnabled || recorderEnabled) { \
            WPP_INVOKE_WPP_DEBUG((MSG, _a12, _a13)); \
            WPP_RECORDER_AND_TRACE_SF_sDdq( \
                     WPP_LEVEL_FLAGS_LOGGER(LEVEL, FLAGS) \
                     wppEnabled, recorderEnabled, \
                     WPP_RECORDER_LEVEL_FLAGS_ARGS(LEVEL, FLAGS), \
                     75, \
                     WPP_LOCAL_TraceGuids+0, __FILE__, __LINE__, _a12, _a13);\
        } \
    } \
    while(0) \
    WPP_LEVEL_FLAGS_POST(LEVEL, FLAGS)
#else // ENABLE_WPP_TRACE_FILTERING_WITH_WPP_RECORDER
#define WPP_CALL_Vc4Display_cpp1327(LEVEL, FLAGS, MSG, _a12, _a13) \
    WPP_LOG_ALWAYS(WPP_EX_LEVEL_FLAGS(LEVEL, FLAGS), MSG, _a12, _a13) \
    WPP_LEVEL_FLAGS_PRE(LEVEL, FLAGS) \
    WPP_ANNOTATE(Vc4Display_cpp1327) \
    (( \
        WPP_RECORDER_CHECK_INIT WPP_RECORDER_LEVEL_FLAGS_FILTER(LEVEL, FLAGS) \
        ?   WPP_INVOKE_WPP_DEBUG((MSG, _a12, _a13)), \
            WPP_RECORDER_SF_sDdq( \
                WPP_RECORDER_LEVEL_FLAGS_ARGS(LEVEL, FLAGS), \
                75, \
                WPP_LOCAL_TraceGuids+0, __FILE__, __LINE__, _a12, _a13), \
            1 \
        :   0 \
    )) \
    WPP_LEVEL_FLAGS_POST(LEVEL, FLAGS)
#endif // ENABLE_WPP_TRACE_FILTERING_WITH_WPP_RECORDER
#else  // ENABLE_WPP_RECORDER
#define WPP_CALL_Vc4Display_cpp1327(LEVEL, FLAGS, MSG, _a12, _a13) \
    WPP_LOG_ALWAYS(WPP_EX_LEVEL_FLAGS(LEVEL, FLAGS), MSG, _a12, _a13) \
    WPP_LEVEL_FLAGS_PRE(LEVEL, FLAGS) \
    WPP_ANNOTATE(Vc4Display_cpp1327) \
    (( \
        WPP_CHECK_INIT WPP_LEVEL_FLAGS_ENABLED(LEVEL, FLAGS) \
        ?   WPP_INVOKE_WPP_DEBUG((MSG, _a12, _a13)), \
            WPP_SF_sDdq( \
                WPP_LEVEL_FLAGS_LOGGER(LEVEL, FLAGS) \
                75, \
                WPP_LOCAL_TraceGuids+0, __FILE__, __LINE__, _a12, _a13), \
            1 \
        :   0 \
    )) \
    WPP_LEVEL_FLAGS_POST(LEVEL, FLAGS)
#endif // ENABLE_WPP_RECORDER

// WPP_CALL_Vc4Display_cpp1364
#ifndef WPP_LEVEL_FLAGS_PRE
#  define WPP_LEVEL_FLAGS_PRE(LEVEL,FLAGS)
#endif
#ifndef WPP_LEVEL_FLAGS_POST
#  define WPP_LEVEL_FLAGS_POST(LEVEL,FLAGS)
#endif
#if ENABLE_WPP_RECORDER
#if ENABLE_WPP_TRACE_FILTERING_WITH_WPP_RECORDER
#define WPP_CALL_Vc4Display_cpp1364(LEVEL, FLAGS, MSG, _a12, _a13, _a14, _a15) \
    WPP_LOG_ALWAYS(WPP_EX_LEVEL_FLAGS(LEVEL, FLAGS), MSG, _a12, _a13, _a14, _a15) \
    WPP_LEVEL_FLAGS_PRE(LEVEL, FLAGS) \
    do {\
        WPP_ANNOTATE(Vc4Display_cpp1364) 0; \
        BOOLEAN wppEnabled = WPP_CHECK_INIT WPP_LEVEL_FLAGS_ENABLED(LEVEL, FLAGS); \
        BOOLEAN recorderEnabled = WPP_RECORDER_CHECK_INIT WPP_RECORDER_LEVEL_FLAGS_FILTER(LEVEL, FLAGS); \
        if (wppEnabled || recorderEnabled) { \
            WPP_INVOKE_WPP_DEBUG((MSG, _a12, _a13, _a14, _a15)); \
            WPP_RECORDER_AND_TRACE_SF_sDdddd( \
                     WPP_LEVEL_FLAGS_LOGGER(LEVEL, FLAGS) \
                     wppEnabled, recorderEnabled, \
                     WPP_RECORDER_LEVEL_FLAGS_ARGS(LEVEL, FLAGS), \
                     76, \
                     WPP_LOCAL_TraceGuids+0, __FILE__, __LINE__, _a12, _a13, _a14, _a15);\
        } \
    } \
    while(0) \
    WPP_LEVEL_FLAGS_POST(LEVEL, FLAGS)
#else // ENABLE_WPP_TRACE_FILTERING_WITH_WPP_RECORDER
#define WPP_CALL_Vc4Display_cpp1364(LEVEL, FLAGS, MSG, _a12, _a13, _a14, _a15) \
    WPP_LOG_ALWAYS(WPP_EX_LEVEL_FLAGS(LEVEL, FLAGS), MSG, _a12, _a13, _a14, _a15) \
    WPP_LEVEL_FLAGS_PRE(LEVEL, FLAGS) \
    WPP_ANNOTATE(Vc4Display_cpp1364) \
    (( \
        WPP_RECORDER_CHECK_INIT WPP_RECORDER_LEVEL_FLAGS_FILTER(LEVEL, FLAGS) \
        ?   WPP_INVOKE_WPP_DEBUG((MSG, _a12, _a13, _a14, _a15)), \
            WPP_RECORDER_SF_sDdddd( \
                WPP_RECORDER_LEVEL_FLAGS_ARGS(LEVEL, FLAGS), \
                76, \
                WPP_LOCAL_TraceGuids+0, __FILE__, __LINE__, _a12, _a13, _a14, _a15), \
            1 \
        :   0 \
    )) \
    WPP_LEVEL_FLAGS_POST(LEVEL, FLAGS)
#endif // ENABLE_WPP_TRACE_FILTERING_WITH_WPP_RECORDER
#else  // ENABLE_WPP_RECORDER
#define WPP_CALL_Vc4Display_cpp1364(LEVEL, FLAGS, MSG, _a12, _a13, _a14, _a15) \
    WPP_LOG_ALWAYS(WPP_EX_LEVEL_FLAGS(LEVEL, FLAGS), MSG, _a12, _a13, _a14, _a15) \
    WPP_LEVEL_FLAGS_PRE(LEVEL, FLAGS) \
    WPP_ANNOTATE(Vc4Display_cpp1364) \
    (( \
        WPP_CHECK_INIT WPP_LEVEL_FLAGS_ENABLED(LEVEL, FLAGS) \
        ?   WPP_INVOKE_WPP_DEBUG((MSG, _a12, _a13, _a14, _a15)), \
            WPP_SF_sDdddd( \
                WPP_LEVEL_FLAGS_LOGGER(LEVEL, FLAGS) \
                76, \
                WPP_LOCAL_TraceGuids+0, __FILE__, __LINE__, _a12, _a13, _a14, _a15), \
            1 \
        :   0 \
    )) \
    WPP_LEVEL_FLAGS_POST(LEVEL, FLAGS)
#endif // ENABLE_WPP_RECORDER

// WPP_CALL_Vc4Display_cpp1382
#ifndef WPP_LEVEL_FLAGS_PRE
#  define WPP_LEVEL_FLAGS_PRE(LEVEL,FLAGS)
#endif
#ifndef WPP_LEVEL_FLAGS_POST
#  define WPP_LEVEL_FLAGS_POST(LEVEL,FLAGS)
#endif
#if ENABLE_WPP_RECORDER
#if ENABLE_WPP_TRACE_FILTERING_WITH_WPP_RECORDER
#define WPP_CALL_Vc4Display_cpp1382(LEVEL, FLAGS, MSG, _a12) \
    WPP_LOG_ALWAYS(WPP_EX_LEVEL_FLAGS(LEVEL, FLAGS), MSG, _a12) \
    WPP_LEVEL_FLAGS_PRE(LEVEL, FLAGS) \
    do {\
        WPP_ANNOTATE(Vc4Display_cpp1382) 0; \
        BOOLEAN wppEnabled = WPP_CHECK_INIT WPP_LEVEL_FLAGS_ENABLED(LEVEL, FLAGS); \
        BOOLEAN recorderEnabled = WPP_RECORDER_CHECK_INIT WPP_RECORDER_LEVEL_FLAGS_FILTER(LEVEL, FLAGS); \
        if (wppEnabled || recorderEnabled) { \
            WPP_INVOKE_WPP_DEBUG((MSG, _a12)); \
            WPP_RECORDER_AND_TRACE_SF_sDd( \
                     WPP_LEVEL_FLAGS_LOGGER(LEVEL, FLAGS) \
                     wppEnabled, recorderEnabled, \
                     WPP_RECORDER_LEVEL_FLAGS_ARGS(LEVEL, FLAGS), \
                     77, \
                     WPP_LOCAL_TraceGuids+0, __FILE__, __LINE__, _a12);\
        } \
    } \
    while(0) \
    WPP_LEVEL_FLAGS_POST(LEVEL, FLAGS)
#else // ENABLE_WPP_TRACE_FILTERING_WITH_WPP_RECORDER
#define WPP_CALL_Vc4Display_cpp1382(LEVEL, FLAGS, MSG, _a12) \
    WPP_LOG_ALWAYS(WPP_EX_LEVEL_FLAGS(LEVEL, FLAGS), MSG, _a12) \
    WPP_LEVEL_FLAGS_PRE(LEVEL, FLAGS) \
    WPP_ANNOTATE(Vc4Display_cpp1382) \
    (( \
        WPP_RECORDER_CHECK_INIT WPP_RECORDER_LEVEL_FLAGS_FILTER(LEVEL, FLAGS) \
        ?   WPP_INVOKE_WPP_DEBUG((MSG, _a12)), \
            WPP_RECORDER_SF_sDd( \
                WPP_RECORDER_LEVEL_FLAGS_ARGS(LEVEL, FLAGS), \
                77, \
                WPP_LOCAL_TraceGuids+0, __FILE__, __LINE__, _a12), \
            1 \
        :   0 \
    )) \
    WPP_LEVEL_FLAGS_POST(LEVEL, FLAGS)
#endif // ENABLE_WPP_TRACE_FILTERING_WITH_WPP_RECORDER
#else  // ENABLE_WPP_RECORDER
#define WPP_CALL_Vc4Display_cpp1382(LEVEL, FLAGS, MSG, _a12) \
    WPP_LOG_ALWAYS(WPP_EX_LEVEL_FLAGS(LEVEL, FLAGS), MSG, _a12) \
    WPP_LEVEL_FLAGS_PRE(LEVEL, FLAGS) \
    WPP_ANNOTATE(Vc4Display_cpp1382) \
    (( \
        WPP_CHECK_INIT WPP_LEVEL_FLAGS_ENABLED(LEVEL, FLAGS) \
        ?   WPP_INVOKE_WPP_DEBUG((MSG, _a12)), \
            WPP_SF_sDd( \
                WPP_LEVEL_FLAGS_LOGGER(LEVEL, FLAGS) \
                77, \
                WPP_LOCAL_TraceGuids+0, __FILE__, __LINE__, _a12), \
            1 \
        :   0 \
    )) \
    WPP_LEVEL_FLAGS_POST(LEVEL, FLAGS)
#endif // ENABLE_WPP_RECORDER

// WPP_CALL_Vc4Display_cpp1400
#ifndef WPP_LEVEL_FLAGS_PRE
#  define WPP_LEVEL_FLAGS_PRE(LEVEL,FLAGS)
#endif
#ifndef WPP_LEVEL_FLAGS_POST
#  define WPP_LEVEL_FLAGS_POST(LEVEL,FLAGS)
#endif
#if ENABLE_WPP_RECORDER
#if ENABLE_WPP_TRACE_FILTERING_WITH_WPP_RECORDER
#define WPP_CALL_Vc4Display_cpp1400(LEVEL, FLAGS, MSG, _a12) \
    WPP_LOG_ALWAYS(WPP_EX_LEVEL_FLAGS(LEVEL, FLAGS), MSG, _a12) \
    WPP_LEVEL_FLAGS_PRE(LEVEL, FLAGS) \
    do {\
        WPP_ANNOTATE(Vc4Display_cpp1400) 0; \
        BOOLEAN wppEnabled = WPP_CHECK_INIT WPP_LEVEL_FLAGS_ENABLED(LEVEL, FLAGS); \
        BOOLEAN recorderEnabled = WPP_RECORDER_CHECK_INIT WPP_RECORDER_LEVEL_FLAGS_FILTER(LEVEL, FLAGS); \
        if (wppEnabled || recorderEnabled) { \
            WPP_INVOKE_WPP_DEBUG((MSG, _a12)); \
            WPP_RECORDER_AND_TRACE_SF_sDd( \
                     WPP_LEVEL_FLAGS_LOGGER(LEVEL, FLAGS) \
                     wppEnabled, recorderEnabled, \
                     WPP_RECORDER_LEVEL_FLAGS_ARGS(LEVEL, FLAGS), \
                     78, \
                     WPP_LOCAL_TraceGuids+0, __FILE__, __LINE__, _a12);\
        } \
    } \
    while(0) \
    WPP_LEVEL_FLAGS_POST(LEVEL, FLAGS)
#else // ENABLE_WPP_TRACE_FILTERING_WITH_WPP_RECORDER
#define WPP_CALL_Vc4Display_cpp1400(LEVEL, FLAGS, MSG, _a12) \
    WPP_LOG_ALWAYS(WPP_EX_LEVEL_FLAGS(LEVEL, FLAGS), MSG, _a12) \
    WPP_LEVEL_FLAGS_PRE(LEVEL, FLAGS) \
    WPP_ANNOTATE(Vc4Display_cpp1400) \
    (( \
        WPP_RECORDER_CHECK_INIT WPP_RECORDER_LEVEL_FLAGS_FILTER(LEVEL, FLAGS) \
        ?   WPP_INVOKE_WPP_DEBUG((MSG, _a12)), \
            WPP_RECORDER_SF_sDd( \
                WPP_RECORDER_LEVEL_FLAGS_ARGS(LEVEL, FLAGS), \
                78, \
                WPP_LOCAL_TraceGuids+0, __FILE__, __LINE__, _a12), \
            1 \
        :   0 \
    )) \
    WPP_LEVEL_FLAGS_POST(LEVEL, FLAGS)
#endif // ENABLE_WPP_TRACE_FILTERING_WITH_WPP_RECORDER
#else  // ENABLE_WPP_RECORDER
#define WPP_CALL_Vc4Display_cpp1400(LEVEL, FLAGS, MSG, _a12) \
    WPP_LOG_ALWAYS(WPP_EX_LEVEL_FLAGS(LEVEL, FLAGS), MSG, _a12) \
    WPP_LEVEL_FLAGS_PRE(LEVEL, FLAGS) \
    WPP_ANNOTATE(Vc4Display_cpp1400) \
    (( \
        WPP_CHECK_INIT WPP_LEVEL_FLAGS_ENABLED(LEVEL, FLAGS) \
        ?   WPP_INVOKE_WPP_DEBUG((MSG, _a12)), \
            WPP_SF_sDd( \
                WPP_LEVEL_FLAGS_LOGGER(LEVEL, FLAGS) \
                78, \
                WPP_LOCAL_TraceGuids+0, __FILE__, __LINE__, _a12), \
            1 \
        :   0 \
    )) \
    WPP_LEVEL_FLAGS_POST(LEVEL, FLAGS)
#endif // ENABLE_WPP_RECORDER

// WPP_CALL_Vc4Display_cpp1416
#ifndef WPP_LEVEL_FLAGS_PRE
#  define WPP_LEVEL_FLAGS_PRE(LEVEL,FLAGS)
#endif
#ifndef WPP_LEVEL_FLAGS_POST
#  define WPP_LEVEL_FLAGS_POST(LEVEL,FLAGS)
#endif
#if ENABLE_WPP_RECORDER
#if ENABLE_WPP_TRACE_FILTERING_WITH_WPP_RECORDER
#define WPP_CALL_Vc4Display_cpp1416(LEVEL, FLAGS, MSG, _a12, _a13, _a14) \
    WPP_LOG_ALWAYS(WPP_EX_LEVEL_FLAGS(LEVEL, FLAGS), MSG, _a12, _a13, _a14) \
    WPP_LEVEL_FLAGS_PRE(LEVEL, FLAGS) \
    do {\
        WPP_ANNOTATE(Vc4Display_cpp1416) 0; \
        BOOLEAN wppEnabled = WPP_CHECK_INIT WPP_LEVEL_FLAGS_ENABLED(LEVEL, FLAGS); \
        BOOLEAN recorderEnabled = WPP_RECORDER_CHECK_INIT WPP_RECORDER_LEVEL_FLAGS_FILTER(LEVEL, FLAGS); \
        if (wppEnabled || recorderEnabled) { \
            WPP_INVOKE_WPP_DEBUG((MSG, _a12, _a13, _a14)); \
            WPP_RECORDER_AND_TRACE_SF_sDddd( \
                     WPP_LEVEL_FLAGS_LOGGER(LEVEL, FLAGS) \
                     wppEnabled, recorderEnabled, \
                     WPP_RECORDER_LEVEL_FLAGS_ARGS(LEVEL, FLAGS), \
                     79, \
                     WPP_LOCAL_TraceGuids+0, __FILE__, __LINE__, _a12, _a13, _a14);\
        } \
    } \
    while(0) \
    WPP_LEVEL_FLAGS_POST(LEVEL, FLAGS)
#else // ENABLE_WPP_TRACE_FILTERING_WITH_WPP_RECORDER
#define WPP_CALL_Vc4Display_cpp1416(LEVEL, FLAGS, MSG, _a12, _a13, _a14) \
    WPP_LOG_ALWAYS(WPP_EX_LEVEL_FLAGS(LEVEL, FLAGS), MSG, _a12, _a13, _a14) \
    WPP_LEVEL_FLAGS_PRE(LEVEL, FLAGS) \
    WPP_ANNOTATE(Vc4Display_cpp1416) \
    (( \
        WPP_RECORDER_CHECK_INIT WPP_RECORDER_LEVEL_FLAGS_FILTER(LEVEL, FLAGS) \
        ?   WPP_INVOKE_WPP_DEBUG((MSG, _a12, _a13, _a14)), \
            WPP_RECORDER_SF_sDddd( \
                WPP_RECORDER_LEVEL_FLAGS_ARGS(LEVEL, FLAGS), \
                79, \
                WPP_LOCAL_TraceGuids+0, __FILE__, __LINE__, _a12, _a13, _a14), \
            1 \
        :   0 \
    )) \
    WPP_LEVEL_FLAGS_POST(LEVEL, FLAGS)
#endif // ENABLE_WPP_TRACE_FILTERING_WITH_WPP_RECORDER
#else  // ENABLE_WPP_RECORDER
#define WPP_CALL_Vc4Display_cpp1416(LEVEL, FLAGS, MSG, _a12, _a13, _a14) \
    WPP_LOG_ALWAYS(WPP_EX_LEVEL_FLAGS(LEVEL, FLAGS), MSG, _a12, _a13, _a14) \
    WPP_LEVEL_FLAGS_PRE(LEVEL, FLAGS) \
    WPP_ANNOTATE(Vc4Display_cpp1416) \
    (( \
        WPP_CHECK_INIT WPP_LEVEL_FLAGS_ENABLED(LEVEL, FLAGS) \
        ?   WPP_INVOKE_WPP_DEBUG((MSG, _a12, _a13, _a14)), \
            WPP_SF_sDddd( \
                WPP_LEVEL_FLAGS_LOGGER(LEVEL, FLAGS) \
                79, \
                WPP_LOCAL_TraceGuids+0, __FILE__, __LINE__, _a12, _a13, _a14), \
            1 \
        :   0 \
    )) \
    WPP_LEVEL_FLAGS_POST(LEVEL, FLAGS)
#endif // ENABLE_WPP_RECORDER

// WPP_CALL_Vc4Display_cpp1444
#ifndef WPP_LEVEL_FLAGS_PRE
#  define WPP_LEVEL_FLAGS_PRE(LEVEL,FLAGS)
#endif
#ifndef WPP_LEVEL_FLAGS_POST
#  define WPP_LEVEL_FLAGS_POST(LEVEL,FLAGS)
#endif
#if ENABLE_WPP_RECORDER
#if ENABLE_WPP_TRACE_FILTERING_WITH_WPP_RECORDER
#define WPP_CALL_Vc4Display_cpp1444(LEVEL, FLAGS, MSG, _a12, _a13, _a14, _a15, _a16, _a17, _a18, _a19, _a20) \
    WPP_LOG_ALWAYS(WPP_EX_LEVEL_FLAGS(LEVEL, FLAGS), MSG, _a12, _a13, _a14, _a15, _a16, _a17, _a18, _a19, _a20) \
    WPP_LEVEL_FLAGS_PRE(LEVEL, FLAGS) \
    do {\
        WPP_ANNOTATE(Vc4Display_cpp1444) 0; \
        BOOLEAN wppEnabled = WPP_CHECK_INIT WPP_LEVEL_FLAGS_ENABLED(LEVEL, FLAGS); \
        BOOLEAN recorderEnabled = WPP_RECORDER_CHECK_INIT WPP_RECORDER_LEVEL_FLAGS_FILTER(LEVEL, FLAGS); \
        if (wppEnabled || recorderEnabled) { \
            WPP_INVOKE_WPP_DEBUG((MSG, _a12, _a13, _a14, _a15, _a16, _a17, _a18, _a19, _a20)); \
            WPP_RECORDER_AND_TRACE_SF_sDqdddddddd( \
                     WPP_LEVEL_FLAGS_LOGGER(LEVEL, FLAGS) \
                     wppEnabled, recorderEnabled, \
                     WPP_RECORDER_LEVEL_FLAGS_ARGS(LEVEL, FLAGS), \
                     80, \
                     WPP_LOCAL_TraceGuids+0, __FILE__, __LINE__, _a12, _a13, _a14, _a15, _a16, _a17, _a18, _a19, _a20);\
        } \
    } \
    while(0) \
    WPP_LEVEL_FLAGS_POST(LEVEL, FLAGS)
#else // ENABLE_WPP_TRACE_FILTERING_WITH_WPP_RECORDER
#define WPP_CALL_Vc4Display_cpp1444(LEVEL, FLAGS, MSG, _a12, _a13, _a14, _a15, _a16, _a17, _a18, _a19, _a20) \
    WPP_LOG_ALWAYS(WPP_EX_LEVEL_FLAGS(LEVEL, FLAGS), MSG, _a12, _a13, _a14, _a15, _a16, _a17, _a18, _a19, _a20) \
    WPP_LEVEL_FLAGS_PRE(LEVEL, FLAGS) \
    WPP_ANNOTATE(Vc4Display_cpp1444) \
    (( \
        WPP_RECORDER_CHECK_INIT WPP_RECORDER_LEVEL_FLAGS_FILTER(LEVEL, FLAGS) \
        ?   WPP_INVOKE_WPP_DEBUG((MSG, _a12, _a13, _a14, _a15, _a16, _a17, _a18, _a19, _a20)), \
            WPP_RECORDER_SF_sDqdddddddd( \
                WPP_RECORDER_LEVEL_FLAGS_ARGS(LEVEL, FLAGS), \
                80, \
                WPP_LOCAL_TraceGuids+0, __FILE__, __LINE__, _a12, _a13, _a14, _a15, _a16, _a17, _a18, _a19, _a20), \
            1 \
        :   0 \
    )) \
    WPP_LEVEL_FLAGS_POST(LEVEL, FLAGS)
#endif // ENABLE_WPP_TRACE_FILTERING_WITH_WPP_RECORDER
#else  // ENABLE_WPP_RECORDER
#define WPP_CALL_Vc4Display_cpp1444(LEVEL, FLAGS, MSG, _a12, _a13, _a14, _a15, _a16, _a17, _a18, _a19, _a20) \
    WPP_LOG_ALWAYS(WPP_EX_LEVEL_FLAGS(LEVEL, FLAGS), MSG, _a12, _a13, _a14, _a15, _a16, _a17, _a18, _a19, _a20) \
    WPP_LEVEL_FLAGS_PRE(LEVEL, FLAGS) \
    WPP_ANNOTATE(Vc4Display_cpp1444) \
    (( \
        WPP_CHECK_INIT WPP_LEVEL_FLAGS_ENABLED(LEVEL, FLAGS) \
        ?   WPP_INVOKE_WPP_DEBUG((MSG, _a12, _a13, _a14, _a15, _a16, _a17, _a18, _a19, _a20)), \
            WPP_SF_sDqdddddddd( \
                WPP_LEVEL_FLAGS_LOGGER(LEVEL, FLAGS) \
                80, \
                WPP_LOCAL_TraceGuids+0, __FILE__, __LINE__, _a12, _a13, _a14, _a15, _a16, _a17, _a18, _a19, _a20), \
            1 \
        :   0 \
    )) \
    WPP_LEVEL_FLAGS_POST(LEVEL, FLAGS)
#endif // ENABLE_WPP_RECORDER

// WPP_CALL_Vc4Display_cpp1469
#ifndef WPP_LEVEL_FLAGS_PRE
#  define WPP_LEVEL_FLAGS_PRE(LEVEL,FLAGS)
#endif
#ifndef WPP_LEVEL_FLAGS_POST
#  define WPP_LEVEL_FLAGS_POST(LEVEL,FLAGS)
#endif
#if ENABLE_WPP_RECORDER
#if ENABLE_WPP_TRACE_FILTERING_WITH_WPP_RECORDER
#define WPP_CALL_Vc4Display_cpp1469(MSG) \
    WPP_LOG_ALWAYS(WPP_EX_LEVEL_FLAGS(TRACE_LEVEL_ERROR, ROS_TRACING_DEBUG), MSG) \
    WPP_LEVEL_FLAGS_PRE(TRACE_LEVEL_ERROR, ROS_TRACING_DEBUG) \
    do {\
        WPP_ANNOTATE(Vc4Display_cpp1469) 0; \
        BOOLEAN wppEnabled = WPP_CHECK_INIT WPP_LEVEL_FLAGS_ENABLED(TRACE_LEVEL_ERROR, ROS_TRACING_DEBUG); \
        BOOLEAN recorderEnabled = WPP_RECORDER_CHECK_INIT WPP_RECORDER_LEVEL_FLAGS_FILTER(TRACE_LEVEL_ERROR, ROS_TRACING_DEBUG); \
        if (wppEnabled || recorderEnabled) { \
            WPP_INVOKE_WPP_DEBUG((MSG)); \
            WPP_RECORDER_AND_TRACE_SF_sD( \
                     WPP_LEVEL_FLAGS_LOGGER(TRACE_LEVEL_ERROR, ROS_TRACING_DEBUG) \
                     wppEnabled, recorderEnabled, \
                     WPP_RECORDER_LEVEL_FLAGS_ARGS(TRACE_LEVEL_ERROR, ROS_TRACING_DEBUG), \
                     81, \
                     WPP_LOCAL_TraceGuids+0, __FILE__, __LINE__);\
        } \
    } \
    while(0) \
    WPP_LEVEL_FLAGS_POST(TRACE_LEVEL_ERROR, ROS_TRACING_DEBUG)
#else // ENABLE_WPP_TRACE_FILTERING_WITH_WPP_RECORDER
#define WPP_CALL_Vc4Display_cpp1469(MSG) \
    WPP_LOG_ALWAYS(WPP_EX_LEVEL_FLAGS(TRACE_LEVEL_ERROR, ROS_TRACING_DEBUG), MSG) \
    WPP_LEVEL_FLAGS_PRE(TRACE_LEVEL_ERROR, ROS_TRACING_DEBUG) \
    WPP_ANNOTATE(Vc4Display_cpp1469) \
    (( \
        WPP_RECORDER_CHECK_INIT WPP_RECORDER_LEVEL_FLAGS_FILTER(TRACE_LEVEL_ERROR, ROS_TRACING_DEBUG) \
        ?   WPP_INVOKE_WPP_DEBUG((MSG)), \
            WPP_RECORDER_SF_sD( \
                WPP_RECORDER_LEVEL_FLAGS_ARGS(TRACE_LEVEL_ERROR, ROS_TRACING_DEBUG), \
                81, \
                WPP_LOCAL_TraceGuids+0, __FILE__, __LINE__), \
            1 \
        :   0 \
    )) \
    WPP_LEVEL_FLAGS_POST(TRACE_LEVEL_ERROR, ROS_TRACING_DEBUG)
#endif // ENABLE_WPP_TRACE_FILTERING_WITH_WPP_RECORDER
#else  // ENABLE_WPP_RECORDER
#define WPP_CALL_Vc4Display_cpp1469(MSG) \
    WPP_LOG_ALWAYS(WPP_EX_LEVEL_FLAGS(TRACE_LEVEL_ERROR, ROS_TRACING_DEBUG), MSG) \
    WPP_LEVEL_FLAGS_PRE(TRACE_LEVEL_ERROR, ROS_TRACING_DEBUG) \
    WPP_ANNOTATE(Vc4Display_cpp1469) \
    (( \
        WPP_CHECK_INIT WPP_LEVEL_FLAGS_ENABLED(TRACE_LEVEL_ERROR, ROS_TRACING_DEBUG) \
        ?   WPP_INVOKE_WPP_DEBUG((MSG)), \
            WPP_SF_sD( \
                WPP_LEVEL_FLAGS_LOGGER(TRACE_LEVEL_ERROR, ROS_TRACING_DEBUG) \
                81, \
                WPP_LOCAL_TraceGuids+0, __FILE__, __LINE__), \
            1 \
        :   0 \
    )) \
    WPP_LEVEL_FLAGS_POST(TRACE_LEVEL_ERROR, ROS_TRACING_DEBUG)
#endif // ENABLE_WPP_RECORDER

// WPP_CALL_Vc4Display_cpp1498
#ifndef WPP_LEVEL_FLAGS_PRE
#  define WPP_LEVEL_FLAGS_PRE(LEVEL,FLAGS)
#endif
#ifndef WPP_LEVEL_FLAGS_POST
#  define WPP_LEVEL_FLAGS_POST(LEVEL,FLAGS)
#endif
#if ENABLE_WPP_RECORDER
#if ENABLE_WPP_TRACE_FILTERING_WITH_WPP_RECORDER
#define WPP_CALL_Vc4Display_cpp1498(LEVEL, FLAGS, MSG, _a12) \
    WPP_LOG_ALWAYS(WPP_EX_LEVEL_FLAGS(LEVEL, FLAGS), MSG, _a12) \
    WPP_LEVEL_FLAGS_PRE(LEVEL, FLAGS) \
    do {\
        WPP_ANNOTATE(Vc4Display_cpp1498) 0; \
        BOOLEAN wppEnabled = WPP_CHECK_INIT WPP_LEVEL_FLAGS_ENABLED(LEVEL, FLAGS); \
        BOOLEAN recorderEnabled = WPP_RECORDER_CHECK_INIT WPP_RECORDER_LEVEL_FLAGS_FILTER(LEVEL, FLAGS); \
        if (wppEnabled || recorderEnabled) { \
            WPP_INVOKE_WPP_DEBUG((MSG, _a12)); \
            WPP_RECORDER_AND_TRACE_SF_sDd( \
                     WPP_LEVEL_FLAGS_LOGGER(LEVEL, FLAGS) \
                     wppEnabled, recorderEnabled, \
                     WPP_RECORDER_LEVEL_FLAGS_ARGS(LEVEL, FLAGS), \
                     82, \
                     WPP_LOCAL_TraceGuids+0, __FILE__, __LINE__, _a12);\
        } \
    } \
    while(0) \
    WPP_LEVEL_FLAGS_POST(LEVEL, FLAGS)
#else // ENABLE_WPP_TRACE_FILTERING_WITH_WPP_RECORDER
#define WPP_CALL_Vc4Display_cpp1498(LEVEL, FLAGS, MSG, _a12) \
    WPP_LOG_ALWAYS(WPP_EX_LEVEL_FLAGS(LEVEL, FLAGS), MSG, _a12) \
    WPP_LEVEL_FLAGS_PRE(LEVEL, FLAGS) \
    WPP_ANNOTATE(Vc4Display_cpp1498) \
    (( \
        WPP_RECORDER_CHECK_INIT WPP_RECORDER_LEVEL_FLAGS_FILTER(LEVEL, FLAGS) \
        ?   WPP_INVOKE_WPP_DEBUG((MSG, _a12)), \
            WPP_RECORDER_SF_sDd( \
                WPP_RECORDER_LEVEL_FLAGS_ARGS(LEVEL, FLAGS), \
                82, \
                WPP_LOCAL_TraceGuids+0, __FILE__, __LINE__, _a12), \
            1 \
        :   0 \
    )) \
    WPP_LEVEL_FLAGS_POST(LEVEL, FLAGS)
#endif // ENABLE_WPP_TRACE_FILTERING_WITH_WPP_RECORDER
#else  // ENABLE_WPP_RECORDER
#define WPP_CALL_Vc4Display_cpp1498(LEVEL, FLAGS, MSG, _a12) \
    WPP_LOG_ALWAYS(WPP_EX_LEVEL_FLAGS(LEVEL, FLAGS), MSG, _a12) \
    WPP_LEVEL_FLAGS_PRE(LEVEL, FLAGS) \
    WPP_ANNOTATE(Vc4Display_cpp1498) \
    (( \
        WPP_CHECK_INIT WPP_LEVEL_FLAGS_ENABLED(LEVEL, FLAGS) \
        ?   WPP_INVOKE_WPP_DEBUG((MSG, _a12)), \
            WPP_SF_sDd( \
                WPP_LEVEL_FLAGS_LOGGER(LEVEL, FLAGS) \
                82, \
                WPP_LOCAL_TraceGuids+0, __FILE__, __LINE__, _a12), \
            1 \
        :   0 \
    )) \
    WPP_LEVEL_FLAGS_POST(LEVEL, FLAGS)
#endif // ENABLE_WPP_RECORDER

// WPP_CALL_Vc4Display_cpp1533
#ifndef WPP_LEVEL_FLAGS_PRE
#  define WPP_LEVEL_FLAGS_PRE(LEVEL,FLAGS)
#endif
#ifndef WPP_LEVEL_FLAGS_POST
#  define WPP_LEVEL_FLAGS_POST(LEVEL,FLAGS)
#endif
#if ENABLE_WPP_RECORDER
#if ENABLE_WPP_TRACE_FILTERING_WITH_WPP_RECORDER
#define WPP_CALL_Vc4Display_cpp1533(LEVEL, FLAGS, MSG, _a12, _a13, _a14) \
    WPP_LOG_ALWAYS(WPP_EX_LEVEL_FLAGS(LEVEL, FLAGS), MSG, _a12, _a13, _a14) \
    WPP_LEVEL_FLAGS_PRE(LEVEL, FLAGS) \
    do {\
        WPP_ANNOTATE(Vc4Display_cpp1533) 0; \
        BOOLEAN wppEnabled = WPP_CHECK_INIT WPP_LEVEL_FLAGS_ENABLED(LEVEL, FLAGS); \
        BOOLEAN recorderEnabled = WPP_RECORDER_CHECK_INIT WPP_RECORDER_LEVEL_FLAGS_FILTER(LEVEL, FLAGS); \
        if (wppEnabled || recorderEnabled) { \
            WPP_INVOKE_WPP_DEBUG((MSG, _a12, _a13, _a14)); \
            WPP_RECORDER_AND_TRACE_SF_sDdqq( \
                     WPP_LEVEL_FLAGS_LOGGER(LEVEL, FLAGS) \
                     wppEnabled, recorderEnabled, \
                     WPP_RECORDER_LEVEL_FLAGS_ARGS(LEVEL, FLAGS), \
                     83, \
                     WPP_LOCAL_TraceGuids+0, __FILE__, __LINE__, _a12, _a13, _a14);\
        } \
    } \
    while(0) \
    WPP_LEVEL_FLAGS_POST(LEVEL, FLAGS)
#else // ENABLE_WPP_TRACE_FILTERING_WITH_WPP_RECORDER
#define WPP_CALL_Vc4Display_cpp1533(LEVEL, FLAGS, MSG, _a12, _a13, _a14) \
    WPP_LOG_ALWAYS(WPP_EX_LEVEL_FLAGS(LEVEL, FLAGS), MSG, _a12, _a13, _a14) \
    WPP_LEVEL_FLAGS_PRE(LEVEL, FLAGS) \
    WPP_ANNOTATE(Vc4Display_cpp1533) \
    (( \
        WPP_RECORDER_CHECK_INIT WPP_RECORDER_LEVEL_FLAGS_FILTER(LEVEL, FLAGS) \
        ?   WPP_INVOKE_WPP_DEBUG((MSG, _a12, _a13, _a14)), \
            WPP_RECORDER_SF_sDdqq( \
                WPP_RECORDER_LEVEL_FLAGS_ARGS(LEVEL, FLAGS), \
                83, \
                WPP_LOCAL_TraceGuids+0, __FILE__, __LINE__, _a12, _a13, _a14), \
            1 \
        :   0 \
    )) \
    WPP_LEVEL_FLAGS_POST(LEVEL, FLAGS)
#endif // ENABLE_WPP_TRACE_FILTERING_WITH_WPP_RECORDER
#else  // ENABLE_WPP_RECORDER
#define WPP_CALL_Vc4Display_cpp1533(LEVEL, FLAGS, MSG, _a12, _a13, _a14) \
    WPP_LOG_ALWAYS(WPP_EX_LEVEL_FLAGS(LEVEL, FLAGS), MSG, _a12, _a13, _a14) \
    WPP_LEVEL_FLAGS_PRE(LEVEL, FLAGS) \
    WPP_ANNOTATE(Vc4Display_cpp1533) \
    (( \
        WPP_CHECK_INIT WPP_LEVEL_FLAGS_ENABLED(LEVEL, FLAGS) \
        ?   WPP_INVOKE_WPP_DEBUG((MSG, _a12, _a13, _a14)), \
            WPP_SF_sDdqq( \
                WPP_LEVEL_FLAGS_LOGGER(LEVEL, FLAGS) \
                83, \
                WPP_LOCAL_TraceGuids+0, __FILE__, __LINE__, _a12, _a13, _a14), \
            1 \
        :   0 \
    )) \
    WPP_LEVEL_FLAGS_POST(LEVEL, FLAGS)
#endif // ENABLE_WPP_RECORDER

// WPP_CALL_Vc4Display_cpp1545
#ifndef WPP_LEVEL_FLAGS_PRE
#  define WPP_LEVEL_FLAGS_PRE(LEVEL,FLAGS)
#endif
#ifndef WPP_LEVEL_FLAGS_POST
#  define WPP_LEVEL_FLAGS_POST(LEVEL,FLAGS)
#endif
#if ENABLE_WPP_RECORDER
#if ENABLE_WPP_TRACE_FILTERING_WITH_WPP_RECORDER
#define WPP_CALL_Vc4Display_cpp1545(MSG, _a12, _a13) \
    WPP_LOG_ALWAYS(WPP_EX_LEVEL_FLAGS(TRACE_LEVEL_VERBOSE, ROS_TRACING_DEFAULT), MSG, _a12, _a13) \
    WPP_LEVEL_FLAGS_PRE(TRACE_LEVEL_VERBOSE, ROS_TRACING_DEFAULT) \
    do {\
        WPP_ANNOTATE(Vc4Display_cpp1545) 0; \
        BOOLEAN wppEnabled = WPP_CHECK_INIT WPP_LEVEL_FLAGS_ENABLED(TRACE_LEVEL_VERBOSE, ROS_TRACING_DEFAULT); \
        BOOLEAN recorderEnabled = WPP_RECORDER_CHECK_INIT WPP_RECORDER_LEVEL_FLAGS_FILTER(TRACE_LEVEL_VERBOSE, ROS_TRACING_DEFAULT); \
        if (wppEnabled || recorderEnabled) { \
            WPP_INVOKE_WPP_DEBUG((MSG, _a12, _a13)); \
            WPP_RECORDER_AND_TRACE_SF_sDdd( \
                     WPP_LEVEL_FLAGS_LOGGER(TRACE_LEVEL_VERBOSE, ROS_TRACING_DEFAULT) \
                     wppEnabled, recorderEnabled, \
                     WPP_RECORDER_LEVEL_FLAGS_ARGS(TRACE_LEVEL_VERBOSE, ROS_TRACING_DEFAULT), \
                     84, \
                     WPP_LOCAL_TraceGuids+0, __FILE__, __LINE__, _a12, _a13);\
        } \
    } \
    while(0) \
    WPP_LEVEL_FLAGS_POST(TRACE_LEVEL_VERBOSE, ROS_TRACING_DEFAULT)
#else // ENABLE_WPP_TRACE_FILTERING_WITH_WPP_RECORDER
#define WPP_CALL_Vc4Display_cpp1545(MSG, _a12, _a13) \
    WPP_LOG_ALWAYS(WPP_EX_LEVEL_FLAGS(TRACE_LEVEL_VERBOSE, ROS_TRACING_DEFAULT), MSG, _a12, _a13) \
    WPP_LEVEL_FLAGS_PRE(TRACE_LEVEL_VERBOSE, ROS_TRACING_DEFAULT) \
    WPP_ANNOTATE(Vc4Display_cpp1545) \
    (( \
        WPP_RECORDER_CHECK_INIT WPP_RECORDER_LEVEL_FLAGS_FILTER(TRACE_LEVEL_VERBOSE, ROS_TRACING_DEFAULT) \
        ?   WPP_INVOKE_WPP_DEBUG((MSG, _a12, _a13)), \
            WPP_RECORDER_SF_sDdd( \
                WPP_RECORDER_LEVEL_FLAGS_ARGS(TRACE_LEVEL_VERBOSE, ROS_TRACING_DEFAULT), \
                84, \
                WPP_LOCAL_TraceGuids+0, __FILE__, __LINE__, _a12, _a13), \
            1 \
        :   0 \
    )) \
    WPP_LEVEL_FLAGS_POST(TRACE_LEVEL_VERBOSE, ROS_TRACING_DEFAULT)
#endif // ENABLE_WPP_TRACE_FILTERING_WITH_WPP_RECORDER
#else  // ENABLE_WPP_RECORDER
#define WPP_CALL_Vc4Display_cpp1545(MSG, _a12, _a13) \
    WPP_LOG_ALWAYS(WPP_EX_LEVEL_FLAGS(TRACE_LEVEL_VERBOSE, ROS_TRACING_DEFAULT), MSG, _a12, _a13) \
    WPP_LEVEL_FLAGS_PRE(TRACE_LEVEL_VERBOSE, ROS_TRACING_DEFAULT) \
    WPP_ANNOTATE(Vc4Display_cpp1545) \
    (( \
        WPP_CHECK_INIT WPP_LEVEL_FLAGS_ENABLED(TRACE_LEVEL_VERBOSE, ROS_TRACING_DEFAULT) \
        ?   WPP_INVOKE_WPP_DEBUG((MSG, _a12, _a13)), \
            WPP_SF_sDdd( \
                WPP_LEVEL_FLAGS_LOGGER(TRACE_LEVEL_VERBOSE, ROS_TRACING_DEFAULT) \
                84, \
                WPP_LOCAL_TraceGuids+0, __FILE__, __LINE__, _a12, _a13), \
            1 \
        :   0 \
    )) \
    WPP_LEVEL_FLAGS_POST(TRACE_LEVEL_VERBOSE, ROS_TRACING_DEFAULT)
#endif // ENABLE_WPP_RECORDER

// WPP_CALL_Vc4Display_cpp1564
#ifndef WPP_LEVEL_FLAGS_PRE
#  define WPP_LEVEL_FLAGS_PRE(LEVEL,FLAGS)
#endif
#ifndef WPP_LEVEL_FLAGS_POST
#  define WPP_LEVEL_FLAGS_POST(LEVEL,FLAGS)
#endif
#if ENABLE_WPP_RECORDER
#if ENABLE_WPP_TRACE_FILTERING_WITH_WPP_RECORDER
#define WPP_CALL_Vc4Display_cpp1564(MSG) \
    WPP_LOG_ALWAYS(WPP_EX_LEVEL_FLAGS(TRACE_LEVEL_VERBOSE, ROS_TRACING_DEFAULT), MSG) \
    WPP_LEVEL_FLAGS_PRE(TRACE_LEVEL_VERBOSE, ROS_TRACING_DEFAULT) \
    do {\
        WPP_ANNOTATE(Vc4Display_cpp1564) 0; \
        BOOLEAN wppEnabled = WPP_CHECK_INIT WPP_LEVEL_FLAGS_ENABLED(TRACE_LEVEL_VERBOSE, ROS_TRACING_DEFAULT); \
        BOOLEAN recorderEnabled = WPP_RECORDER_CHECK_INIT WPP_RECORDER_LEVEL_FLAGS_FILTER(TRACE_LEVEL_VERBOSE, ROS_TRACING_DEFAULT); \
        if (wppEnabled || recorderEnabled) { \
            WPP_INVOKE_WPP_DEBUG((MSG)); \
            WPP_RECORDER_AND_TRACE_SF_sD( \
                     WPP_LEVEL_FLAGS_LOGGER(TRACE_LEVEL_VERBOSE, ROS_TRACING_DEFAULT) \
                     wppEnabled, recorderEnabled, \
                     WPP_RECORDER_LEVEL_FLAGS_ARGS(TRACE_LEVEL_VERBOSE, ROS_TRACING_DEFAULT), \
                     85, \
                     WPP_LOCAL_TraceGuids+0, __FILE__, __LINE__);\
        } \
    } \
    while(0) \
    WPP_LEVEL_FLAGS_POST(TRACE_LEVEL_VERBOSE, ROS_TRACING_DEFAULT)
#else // ENABLE_WPP_TRACE_FILTERING_WITH_WPP_RECORDER
#define WPP_CALL_Vc4Display_cpp1564(MSG) \
    WPP_LOG_ALWAYS(WPP_EX_LEVEL_FLAGS(TRACE_LEVEL_VERBOSE, ROS_TRACING_DEFAULT), MSG) \
    WPP_LEVEL_FLAGS_PRE(TRACE_LEVEL_VERBOSE, ROS_TRACING_DEFAULT) \
    WPP_ANNOTATE(Vc4Display_cpp1564) \
    (( \
        WPP_RECORDER_CHECK_INIT WPP_RECORDER_LEVEL_FLAGS_FILTER(TRACE_LEVEL_VERBOSE, ROS_TRACING_DEFAULT) \
        ?   WPP_INVOKE_WPP_DEBUG((MSG)), \
            WPP_RECORDER_SF_sD( \
                WPP_RECORDER_LEVEL_FLAGS_ARGS(TRACE_LEVEL_VERBOSE, ROS_TRACING_DEFAULT), \
                85, \
                WPP_LOCAL_TraceGuids+0, __FILE__, __LINE__), \
            1 \
        :   0 \
    )) \
    WPP_LEVEL_FLAGS_POST(TRACE_LEVEL_VERBOSE, ROS_TRACING_DEFAULT)
#endif // ENABLE_WPP_TRACE_FILTERING_WITH_WPP_RECORDER
#else  // ENABLE_WPP_RECORDER
#define WPP_CALL_Vc4Display_cpp1564(MSG) \
    WPP_LOG_ALWAYS(WPP_EX_LEVEL_FLAGS(TRACE_LEVEL_VERBOSE, ROS_TRACING_DEFAULT), MSG) \
    WPP_LEVEL_FLAGS_PRE(TRACE_LEVEL_VERBOSE, ROS_TRACING_DEFAULT) \
    WPP_ANNOTATE(Vc4Display_cpp1564) \
    (( \
        WPP_CHECK_INIT WPP_LEVEL_FLAGS_ENABLED(TRACE_LEVEL_VERBOSE, ROS_TRACING_DEFAULT) \
        ?   WPP_INVOKE_WPP_DEBUG((MSG)), \
            WPP_SF_sD( \
                WPP_LEVEL_FLAGS_LOGGER(TRACE_LEVEL_VERBOSE, ROS_TRACING_DEFAULT) \
                85, \
                WPP_LOCAL_TraceGuids+0, __FILE__, __LINE__), \
            1 \
        :   0 \
    )) \
    WPP_LEVEL_FLAGS_POST(TRACE_LEVEL_VERBOSE, ROS_TRACING_DEFAULT)
#endif // ENABLE_WPP_RECORDER

// WPP_CALL_Vc4Display_cpp1578
#ifndef WPP_LEVEL_FLAGS_PRE
#  define WPP_LEVEL_FLAGS_PRE(LEVEL,FLAGS)
#endif
#ifndef WPP_LEVEL_FLAGS_POST
#  define WPP_LEVEL_FLAGS_POST(LEVEL,FLAGS)
#endif
#if ENABLE_WPP_RECORDER
#if ENABLE_WPP_TRACE_FILTERING_WITH_WPP_RECORDER
#define WPP_CALL_Vc4Display_cpp1578(MSG) \
    WPP_LOG_ALWAYS(WPP_EX_LEVEL_FLAGS(TRACE_LEVEL_VERBOSE, ROS_TRACING_DEFAULT), MSG) \
    WPP_LEVEL_FLAGS_PRE(TRACE_LEVEL_VERBOSE, ROS_TRACING_DEFAULT) \
    do {\
        WPP_ANNOTATE(Vc4Display_cpp1578) 0; \
        BOOLEAN wppEnabled = WPP_CHECK_INIT WPP_LEVEL_FLAGS_ENABLED(TRACE_LEVEL_VERBOSE, ROS_TRACING_DEFAULT); \
        BOOLEAN recorderEnabled = WPP_RECORDER_CHECK_INIT WPP_RECORDER_LEVEL_FLAGS_FILTER(TRACE_LEVEL_VERBOSE, ROS_TRACING_DEFAULT); \
        if (wppEnabled || recorderEnabled) { \
            WPP_INVOKE_WPP_DEBUG((MSG)); \
            WPP_RECORDER_AND_TRACE_SF_sD( \
                     WPP_LEVEL_FLAGS_LOGGER(TRACE_LEVEL_VERBOSE, ROS_TRACING_DEFAULT) \
                     wppEnabled, recorderEnabled, \
                     WPP_RECORDER_LEVEL_FLAGS_ARGS(TRACE_LEVEL_VERBOSE, ROS_TRACING_DEFAULT), \
                     86, \
                     WPP_LOCAL_TraceGuids+0, __FILE__, __LINE__);\
        } \
    } \
    while(0) \
    WPP_LEVEL_FLAGS_POST(TRACE_LEVEL_VERBOSE, ROS_TRACING_DEFAULT)
#else // ENABLE_WPP_TRACE_FILTERING_WITH_WPP_RECORDER
#define WPP_CALL_Vc4Display_cpp1578(MSG) \
    WPP_LOG_ALWAYS(WPP_EX_LEVEL_FLAGS(TRACE_LEVEL_VERBOSE, ROS_TRACING_DEFAULT), MSG) \
    WPP_LEVEL_FLAGS_PRE(TRACE_LEVEL_VERBOSE, ROS_TRACING_DEFAULT) \
    WPP_ANNOTATE(Vc4Display_cpp1578) \
    (( \
        WPP_RECORDER_CHECK_INIT WPP_RECORDER_LEVEL_FLAGS_FILTER(TRACE_LEVEL_VERBOSE, ROS_TRACING_DEFAULT) \
        ?   WPP_INVOKE_WPP_DEBUG((MSG)), \
            WPP_RECORDER_SF_sD( \
                WPP_RECORDER_LEVEL_FLAGS_ARGS(TRACE_LEVEL_VERBOSE, ROS_TRACING_DEFAULT), \
                86, \
                WPP_LOCAL_TraceGuids+0, __FILE__, __LINE__), \
            1 \
        :   0 \
    )) \
    WPP_LEVEL_FLAGS_POST(TRACE_LEVEL_VERBOSE, ROS_TRACING_DEFAULT)
#endif // ENABLE_WPP_TRACE_FILTERING_WITH_WPP_RECORDER
#else  // ENABLE_WPP_RECORDER
#define WPP_CALL_Vc4Display_cpp1578(MSG) \
    WPP_LOG_ALWAYS(WPP_EX_LEVEL_FLAGS(TRACE_LEVEL_VERBOSE, ROS_TRACING_DEFAULT), MSG) \
    WPP_LEVEL_FLAGS_PRE(TRACE_LEVEL_VERBOSE, ROS_TRACING_DEFAULT) \
    WPP_ANNOTATE(Vc4Display_cpp1578) \
    (( \
        WPP_CHECK_INIT WPP_LEVEL_FLAGS_ENABLED(TRACE_LEVEL_VERBOSE, ROS_TRACING_DEFAULT) \
        ?   WPP_INVOKE_WPP_DEBUG((MSG)), \
            WPP_SF_sD( \
                WPP_LEVEL_FLAGS_LOGGER(TRACE_LEVEL_VERBOSE, ROS_TRACING_DEFAULT) \
                86, \
                WPP_LOCAL_TraceGuids+0, __FILE__, __LINE__), \
            1 \
        :   0 \
    )) \
    WPP_LEVEL_FLAGS_POST(TRACE_LEVEL_VERBOSE, ROS_TRACING_DEFAULT)
#endif // ENABLE_WPP_RECORDER

// WPP_CALL_Vc4Display_cpp1601
#ifndef WPP_LEVEL_FLAGS_PRE
#  define WPP_LEVEL_FLAGS_PRE(LEVEL,FLAGS)
#endif
#ifndef WPP_LEVEL_FLAGS_POST
#  define WPP_LEVEL_FLAGS_POST(LEVEL,FLAGS)
#endif
#if ENABLE_WPP_RECORDER
#if ENABLE_WPP_TRACE_FILTERING_WITH_WPP_RECORDER
#define WPP_CALL_Vc4Display_cpp1601(MSG, _a12, _a13) \
    WPP_LOG_ALWAYS(WPP_EX_LEVEL_FLAGS(TRACE_LEVEL_ERROR, ROS_TRACING_DEBUG), MSG, _a12, _a13) \
    WPP_LEVEL_FLAGS_PRE(TRACE_LEVEL_ERROR, ROS_TRACING_DEBUG) \
    do {\
        WPP_ANNOTATE(Vc4Display_cpp1601) 0; \
        BOOLEAN wppEnabled = WPP_CHECK_INIT WPP_LEVEL_FLAGS_ENABLED(TRACE_LEVEL_ERROR, ROS_TRACING_DEBUG); \
        BOOLEAN recorderEnabled = WPP_RECORDER_CHECK_INIT WPP_RECORDER_LEVEL_FLAGS_FILTER(TRACE_LEVEL_ERROR, ROS_TRACING_DEBUG); \
        if (wppEnabled || recorderEnabled) { \
            WPP_INVOKE_WPP_DEBUG((MSG, _a12, _a13)); \
            WPP_RECORDER_AND_TRACE_SF_sDdd( \
                     WPP_LEVEL_FLAGS_LOGGER(TRACE_LEVEL_ERROR, ROS_TRACING_DEBUG) \
                     wppEnabled, recorderEnabled, \
                     WPP_RECORDER_LEVEL_FLAGS_ARGS(TRACE_LEVEL_ERROR, ROS_TRACING_DEBUG), \
                     87, \
                     WPP_LOCAL_TraceGuids+0, __FILE__, __LINE__, _a12, _a13);\
        } \
    } \
    while(0) \
    WPP_LEVEL_FLAGS_POST(TRACE_LEVEL_ERROR, ROS_TRACING_DEBUG)
#else // ENABLE_WPP_TRACE_FILTERING_WITH_WPP_RECORDER
#define WPP_CALL_Vc4Display_cpp1601(MSG, _a12, _a13) \
    WPP_LOG_ALWAYS(WPP_EX_LEVEL_FLAGS(TRACE_LEVEL_ERROR, ROS_TRACING_DEBUG), MSG, _a12, _a13) \
    WPP_LEVEL_FLAGS_PRE(TRACE_LEVEL_ERROR, ROS_TRACING_DEBUG) \
    WPP_ANNOTATE(Vc4Display_cpp1601) \
    (( \
        WPP_RECORDER_CHECK_INIT WPP_RECORDER_LEVEL_FLAGS_FILTER(TRACE_LEVEL_ERROR, ROS_TRACING_DEBUG) \
        ?   WPP_INVOKE_WPP_DEBUG((MSG, _a12, _a13)), \
            WPP_RECORDER_SF_sDdd( \
                WPP_RECORDER_LEVEL_FLAGS_ARGS(TRACE_LEVEL_ERROR, ROS_TRACING_DEBUG), \
                87, \
                WPP_LOCAL_TraceGuids+0, __FILE__, __LINE__, _a12, _a13), \
            1 \
        :   0 \
    )) \
    WPP_LEVEL_FLAGS_POST(TRACE_LEVEL_ERROR, ROS_TRACING_DEBUG)
#endif // ENABLE_WPP_TRACE_FILTERING_WITH_WPP_RECORDER
#else  // ENABLE_WPP_RECORDER
#define WPP_CALL_Vc4Display_cpp1601(MSG, _a12, _a13) \
    WPP_LOG_ALWAYS(WPP_EX_LEVEL_FLAGS(TRACE_LEVEL_ERROR, ROS_TRACING_DEBUG), MSG, _a12, _a13) \
    WPP_LEVEL_FLAGS_PRE(TRACE_LEVEL_ERROR, ROS_TRACING_DEBUG) \
    WPP_ANNOTATE(Vc4Display_cpp1601) \
    (( \
        WPP_CHECK_INIT WPP_LEVEL_FLAGS_ENABLED(TRACE_LEVEL_ERROR, ROS_TRACING_DEBUG) \
        ?   WPP_INVOKE_WPP_DEBUG((MSG, _a12, _a13)), \
            WPP_SF_sDdd( \
                WPP_LEVEL_FLAGS_LOGGER(TRACE_LEVEL_ERROR, ROS_TRACING_DEBUG) \
                87, \
                WPP_LOCAL_TraceGuids+0, __FILE__, __LINE__, _a12, _a13), \
            1 \
        :   0 \
    )) \
    WPP_LEVEL_FLAGS_POST(TRACE_LEVEL_ERROR, ROS_TRACING_DEBUG)
#endif // ENABLE_WPP_RECORDER

// WPP_CALL_Vc4Display_cpp1617
#ifndef WPP_LEVEL_FLAGS_PRE
#  define WPP_LEVEL_FLAGS_PRE(LEVEL,FLAGS)
#endif
#ifndef WPP_LEVEL_FLAGS_POST
#  define WPP_LEVEL_FLAGS_POST(LEVEL,FLAGS)
#endif
#if ENABLE_WPP_RECORDER
#if ENABLE_WPP_TRACE_FILTERING_WITH_WPP_RECORDER
#define WPP_CALL_Vc4Display_cpp1617(LEVEL, FLAGS, MSG, _a12, _a13, _a14) \
    WPP_LOG_ALWAYS(WPP_EX_LEVEL_FLAGS(LEVEL, FLAGS), MSG, _a12, _a13, _a14) \
    WPP_LEVEL_FLAGS_PRE(LEVEL, FLAGS) \
    do {\
        WPP_ANNOTATE(Vc4Display_cpp1617) 0; \
        BOOLEAN wppEnabled = WPP_CHECK_INIT WPP_LEVEL_FLAGS_ENABLED(LEVEL, FLAGS); \
        BOOLEAN recorderEnabled = WPP_RECORDER_CHECK_INIT WPP_RECORDER_LEVEL_FLAGS_FILTER(LEVEL, FLAGS); \
        if (wppEnabled || recorderEnabled) { \
            WPP_INVOKE_WPP_DEBUG((MSG, _a12, _a13, _a14)); \
            WPP_RECORDER_AND_TRACE_SF_sDqdd( \
                     WPP_LEVEL_FLAGS_LOGGER(LEVEL, FLAGS) \
                     wppEnabled, recorderEnabled, \
                     WPP_RECORDER_LEVEL_FLAGS_ARGS(LEVEL, FLAGS), \
                     88, \
                     WPP_LOCAL_TraceGuids+0, __FILE__, __LINE__, _a12, _a13, _a14);\
        } \
    } \
    while(0) \
    WPP_LEVEL_FLAGS_POST(LEVEL, FLAGS)
#else // ENABLE_WPP_TRACE_FILTERING_WITH_WPP_RECORDER
#define WPP_CALL_Vc4Display_cpp1617(LEVEL, FLAGS, MSG, _a12, _a13, _a14) \
    WPP_LOG_ALWAYS(WPP_EX_LEVEL_FLAGS(LEVEL, FLAGS), MSG, _a12, _a13, _a14) \
    WPP_LEVEL_FLAGS_PRE(LEVEL, FLAGS) \
    WPP_ANNOTATE(Vc4Display_cpp1617) \
    (( \
        WPP_RECORDER_CHECK_INIT WPP_RECORDER_LEVEL_FLAGS_FILTER(LEVEL, FLAGS) \
        ?   WPP_INVOKE_WPP_DEBUG((MSG, _a12, _a13, _a14)), \
            WPP_RECORDER_SF_sDqdd( \
                WPP_RECORDER_LEVEL_FLAGS_ARGS(LEVEL, FLAGS), \
                88, \
                WPP_LOCAL_TraceGuids+0, __FILE__, __LINE__, _a12, _a13, _a14), \
            1 \
        :   0 \
    )) \
    WPP_LEVEL_FLAGS_POST(LEVEL, FLAGS)
#endif // ENABLE_WPP_TRACE_FILTERING_WITH_WPP_RECORDER
#else  // ENABLE_WPP_RECORDER
#define WPP_CALL_Vc4Display_cpp1617(LEVEL, FLAGS, MSG, _a12, _a13, _a14) \
    WPP_LOG_ALWAYS(WPP_EX_LEVEL_FLAGS(LEVEL, FLAGS), MSG, _a12, _a13, _a14) \
    WPP_LEVEL_FLAGS_PRE(LEVEL, FLAGS) \
    WPP_ANNOTATE(Vc4Display_cpp1617) \
    (( \
        WPP_CHECK_INIT WPP_LEVEL_FLAGS_ENABLED(LEVEL, FLAGS) \
        ?   WPP_INVOKE_WPP_DEBUG((MSG, _a12, _a13, _a14)), \
            WPP_SF_sDqdd( \
                WPP_LEVEL_FLAGS_LOGGER(LEVEL, FLAGS) \
                88, \
                WPP_LOCAL_TraceGuids+0, __FILE__, __LINE__, _a12, _a13, _a14), \
            1 \
        :   0 \
    )) \
    WPP_LEVEL_FLAGS_POST(LEVEL, FLAGS)
#endif // ENABLE_WPP_RECORDER

// WPP_CALL_Vc4Display_cpp1648
#ifndef WPP_LEVEL_FLAGS_PRE
#  define WPP_LEVEL_FLAGS_PRE(LEVEL,FLAGS)
#endif
#ifndef WPP_LEVEL_FLAGS_POST
#  define WPP_LEVEL_FLAGS_POST(LEVEL,FLAGS)
#endif
#if ENABLE_WPP_RECORDER
#if ENABLE_WPP_TRACE_FILTERING_WITH_WPP_RECORDER
#define WPP_CALL_Vc4Display_cpp1648(MSG) \
    WPP_LOG_ALWAYS(WPP_EX_LEVEL_FLAGS(TRACE_LEVEL_ERROR, ROS_TRACING_DEBUG), MSG) \
    WPP_LEVEL_FLAGS_PRE(TRACE_LEVEL_ERROR, ROS_TRACING_DEBUG) \
    do {\
        WPP_ANNOTATE(Vc4Display_cpp1648) 0; \
        BOOLEAN wppEnabled = WPP_CHECK_INIT WPP_LEVEL_FLAGS_ENABLED(TRACE_LEVEL_ERROR, ROS_TRACING_DEBUG); \
        BOOLEAN recorderEnabled = WPP_RECORDER_CHECK_INIT WPP_RECORDER_LEVEL_FLAGS_FILTER(TRACE_LEVEL_ERROR, ROS_TRACING_DEBUG); \
        if (wppEnabled || recorderEnabled) { \
            WPP_INVOKE_WPP_DEBUG((MSG)); \
            WPP_RECORDER_AND_TRACE_SF_sD( \
                     WPP_LEVEL_FLAGS_LOGGER(TRACE_LEVEL_ERROR, ROS_TRACING_DEBUG) \
                     wppEnabled, recorderEnabled, \
                     WPP_RECORDER_LEVEL_FLAGS_ARGS(TRACE_LEVEL_ERROR, ROS_TRACING_DEBUG), \
                     89, \
                     WPP_LOCAL_TraceGuids+0, __FILE__, __LINE__);\
        } \
    } \
    while(0) \
    WPP_LEVEL_FLAGS_POST(TRACE_LEVEL_ERROR, ROS_TRACING_DEBUG)
#else // ENABLE_WPP_TRACE_FILTERING_WITH_WPP_RECORDER
#define WPP_CALL_Vc4Display_cpp1648(MSG) \
    WPP_LOG_ALWAYS(WPP_EX_LEVEL_FLAGS(TRACE_LEVEL_ERROR, ROS_TRACING_DEBUG), MSG) \
    WPP_LEVEL_FLAGS_PRE(TRACE_LEVEL_ERROR, ROS_TRACING_DEBUG) \
    WPP_ANNOTATE(Vc4Display_cpp1648) \
    (( \
        WPP_RECORDER_CHECK_INIT WPP_RECORDER_LEVEL_FLAGS_FILTER(TRACE_LEVEL_ERROR, ROS_TRACING_DEBUG) \
        ?   WPP_INVOKE_WPP_DEBUG((MSG)), \
            WPP_RECORDER_SF_sD( \
                WPP_RECORDER_LEVEL_FLAGS_ARGS(TRACE_LEVEL_ERROR, ROS_TRACING_DEBUG), \
                89, \
                WPP_LOCAL_TraceGuids+0, __FILE__, __LINE__), \
            1 \
        :   0 \
    )) \
    WPP_LEVEL_FLAGS_POST(TRACE_LEVEL_ERROR, ROS_TRACING_DEBUG)
#endif // ENABLE_WPP_TRACE_FILTERING_WITH_WPP_RECORDER
#else  // ENABLE_WPP_RECORDER
#define WPP_CALL_Vc4Display_cpp1648(MSG) \
    WPP_LOG_ALWAYS(WPP_EX_LEVEL_FLAGS(TRACE_LEVEL_ERROR, ROS_TRACING_DEBUG), MSG) \
    WPP_LEVEL_FLAGS_PRE(TRACE_LEVEL_ERROR, ROS_TRACING_DEBUG) \
    WPP_ANNOTATE(Vc4Display_cpp1648) \
    (( \
        WPP_CHECK_INIT WPP_LEVEL_FLAGS_ENABLED(TRACE_LEVEL_ERROR, ROS_TRACING_DEBUG) \
        ?   WPP_INVOKE_WPP_DEBUG((MSG)), \
            WPP_SF_sD( \
                WPP_LEVEL_FLAGS_LOGGER(TRACE_LEVEL_ERROR, ROS_TRACING_DEBUG) \
                89, \
                WPP_LOCAL_TraceGuids+0, __FILE__, __LINE__), \
            1 \
        :   0 \
    )) \
    WPP_LEVEL_FLAGS_POST(TRACE_LEVEL_ERROR, ROS_TRACING_DEBUG)
#endif // ENABLE_WPP_RECORDER

// WPP_CALL_Vc4Display_cpp1675
#ifndef WPP_LEVEL_FLAGS_PRE
#  define WPP_LEVEL_FLAGS_PRE(LEVEL,FLAGS)
#endif
#ifndef WPP_LEVEL_FLAGS_POST
#  define WPP_LEVEL_FLAGS_POST(LEVEL,FLAGS)
#endif
#if ENABLE_WPP_RECORDER
#if ENABLE_WPP_TRACE_FILTERING_WITH_WPP_RECORDER
#define WPP_CALL_Vc4Display_cpp1675(LEVEL, FLAGS, MSG, _a12) \
    WPP_LOG_ALWAYS(WPP_EX_LEVEL_FLAGS(LEVEL, FLAGS), MSG, _a12) \
    WPP_LEVEL_FLAGS_PRE(LEVEL, FLAGS) \
    do {\
        WPP_ANNOTATE(Vc4Display_cpp1675) 0; \
        BOOLEAN wppEnabled = WPP_CHECK_INIT WPP_LEVEL_FLAGS_ENABLED(LEVEL, FLAGS); \
        BOOLEAN recorderEnabled = WPP_RECORDER_CHECK_INIT WPP_RECORDER_LEVEL_FLAGS_FILTER(LEVEL, FLAGS); \
        if (wppEnabled || recorderEnabled) { \
            WPP_INVOKE_WPP_DEBUG((MSG, _a12)); \
            WPP_RECORDER_AND_TRACE_SF_sDd( \
                     WPP_LEVEL_FLAGS_LOGGER(LEVEL, FLAGS) \
                     wppEnabled, recorderEnabled, \
                     WPP_RECORDER_LEVEL_FLAGS_ARGS(LEVEL, FLAGS), \
                     90, \
                     WPP_LOCAL_TraceGuids+0, __FILE__, __LINE__, _a12);\
        } \
    } \
    while(0) \
    WPP_LEVEL_FLAGS_POST(LEVEL, FLAGS)
#else // ENABLE_WPP_TRACE_FILTERING_WITH_WPP_RECORDER
#define WPP_CALL_Vc4Display_cpp1675(LEVEL, FLAGS, MSG, _a12) \
    WPP_LOG_ALWAYS(WPP_EX_LEVEL_FLAGS(LEVEL, FLAGS), MSG, _a12) \
    WPP_LEVEL_FLAGS_PRE(LEVEL, FLAGS) \
    WPP_ANNOTATE(Vc4Display_cpp1675) \
    (( \
        WPP_RECORDER_CHECK_INIT WPP_RECORDER_LEVEL_FLAGS_FILTER(LEVEL, FLAGS) \
        ?   WPP_INVOKE_WPP_DEBUG((MSG, _a12)), \
            WPP_RECORDER_SF_sDd( \
                WPP_RECORDER_LEVEL_FLAGS_ARGS(LEVEL, FLAGS), \
                90, \
                WPP_LOCAL_TraceGuids+0, __FILE__, __LINE__, _a12), \
            1 \
        :   0 \
    )) \
    WPP_LEVEL_FLAGS_POST(LEVEL, FLAGS)
#endif // ENABLE_WPP_TRACE_FILTERING_WITH_WPP_RECORDER
#else  // ENABLE_WPP_RECORDER
#define WPP_CALL_Vc4Display_cpp1675(LEVEL, FLAGS, MSG, _a12) \
    WPP_LOG_ALWAYS(WPP_EX_LEVEL_FLAGS(LEVEL, FLAGS), MSG, _a12) \
    WPP_LEVEL_FLAGS_PRE(LEVEL, FLAGS) \
    WPP_ANNOTATE(Vc4Display_cpp1675) \
    (( \
        WPP_CHECK_INIT WPP_LEVEL_FLAGS_ENABLED(LEVEL, FLAGS) \
        ?   WPP_INVOKE_WPP_DEBUG((MSG, _a12)), \
            WPP_SF_sDd( \
                WPP_LEVEL_FLAGS_LOGGER(LEVEL, FLAGS) \
                90, \
                WPP_LOCAL_TraceGuids+0, __FILE__, __LINE__, _a12), \
            1 \
        :   0 \
    )) \
    WPP_LEVEL_FLAGS_POST(LEVEL, FLAGS)
#endif // ENABLE_WPP_RECORDER

// WPP_CALL_Vc4Display_cpp1698
#ifndef WPP_LEVEL_FLAGS_PRE
#  define WPP_LEVEL_FLAGS_PRE(LEVEL,FLAGS)
#endif
#ifndef WPP_LEVEL_FLAGS_POST
#  define WPP_LEVEL_FLAGS_POST(LEVEL,FLAGS)
#endif
#if ENABLE_WPP_RECORDER
#if ENABLE_WPP_TRACE_FILTERING_WITH_WPP_RECORDER
#define WPP_CALL_Vc4Display_cpp1698(LEVEL, FLAGS, MSG, _a12, _a13) \
    WPP_LOG_ALWAYS(WPP_EX_LEVEL_FLAGS(LEVEL, FLAGS), MSG, _a12, _a13) \
    WPP_LEVEL_FLAGS_PRE(LEVEL, FLAGS) \
    do {\
        WPP_ANNOTATE(Vc4Display_cpp1698) 0; \
        BOOLEAN wppEnabled = WPP_CHECK_INIT WPP_LEVEL_FLAGS_ENABLED(LEVEL, FLAGS); \
        BOOLEAN recorderEnabled = WPP_RECORDER_CHECK_INIT WPP_RECORDER_LEVEL_FLAGS_FILTER(LEVEL, FLAGS); \
        if (wppEnabled || recorderEnabled) { \
            WPP_INVOKE_WPP_DEBUG((MSG, _a12, _a13)); \
            WPP_RECORDER_AND_TRACE_SF_sDdq( \
                     WPP_LEVEL_FLAGS_LOGGER(LEVEL, FLAGS) \
                     wppEnabled, recorderEnabled, \
                     WPP_RECORDER_LEVEL_FLAGS_ARGS(LEVEL, FLAGS), \
                     91, \
                     WPP_LOCAL_TraceGuids+0, __FILE__, __LINE__, _a12, _a13);\
        } \
    } \
    while(0) \
    WPP_LEVEL_FLAGS_POST(LEVEL, FLAGS)
#else // ENABLE_WPP_TRACE_FILTERING_WITH_WPP_RECORDER
#define WPP_CALL_Vc4Display_cpp1698(LEVEL, FLAGS, MSG, _a12, _a13) \
    WPP_LOG_ALWAYS(WPP_EX_LEVEL_FLAGS(LEVEL, FLAGS), MSG, _a12, _a13) \
    WPP_LEVEL_FLAGS_PRE(LEVEL, FLAGS) \
    WPP_ANNOTATE(Vc4Display_cpp1698) \
    (( \
        WPP_RECORDER_CHECK_INIT WPP_RECORDER_LEVEL_FLAGS_FILTER(LEVEL, FLAGS) \
        ?   WPP_INVOKE_WPP_DEBUG((MSG, _a12, _a13)), \
            WPP_RECORDER_SF_sDdq( \
                WPP_RECORDER_LEVEL_FLAGS_ARGS(LEVEL, FLAGS), \
                91, \
                WPP_LOCAL_TraceGuids+0, __FILE__, __LINE__, _a12, _a13), \
            1 \
        :   0 \
    )) \
    WPP_LEVEL_FLAGS_POST(LEVEL, FLAGS)
#endif // ENABLE_WPP_TRACE_FILTERING_WITH_WPP_RECORDER
#else  // ENABLE_WPP_RECORDER
#define WPP_CALL_Vc4Display_cpp1698(LEVEL, FLAGS, MSG, _a12, _a13) \
    WPP_LOG_ALWAYS(WPP_EX_LEVEL_FLAGS(LEVEL, FLAGS), MSG, _a12, _a13) \
    WPP_LEVEL_FLAGS_PRE(LEVEL, FLAGS) \
    WPP_ANNOTATE(Vc4Display_cpp1698) \
    (( \
        WPP_CHECK_INIT WPP_LEVEL_FLAGS_ENABLED(LEVEL, FLAGS) \
        ?   WPP_INVOKE_WPP_DEBUG((MSG, _a12, _a13)), \
            WPP_SF_sDdq( \
                WPP_LEVEL_FLAGS_LOGGER(LEVEL, FLAGS) \
                91, \
                WPP_LOCAL_TraceGuids+0, __FILE__, __LINE__, _a12, _a13), \
            1 \
        :   0 \
    )) \
    WPP_LEVEL_FLAGS_POST(LEVEL, FLAGS)
#endif // ENABLE_WPP_RECORDER

// WPP_CALL_Vc4Display_cpp1748
#ifndef WPP_LEVEL_FLAGS_PRE
#  define WPP_LEVEL_FLAGS_PRE(LEVEL,FLAGS)
#endif
#ifndef WPP_LEVEL_FLAGS_POST
#  define WPP_LEVEL_FLAGS_POST(LEVEL,FLAGS)
#endif
#if ENABLE_WPP_RECORDER
#if ENABLE_WPP_TRACE_FILTERING_WITH_WPP_RECORDER
#define WPP_CALL_Vc4Display_cpp1748(LEVEL, FLAGS, MSG, _a12) \
    WPP_LOG_ALWAYS(WPP_EX_LEVEL_FLAGS(LEVEL, FLAGS), MSG, _a12) \
    WPP_LEVEL_FLAGS_PRE(LEVEL, FLAGS) \
    do {\
        WPP_ANNOTATE(Vc4Display_cpp1748) 0; \
        BOOLEAN wppEnabled = WPP_CHECK_INIT WPP_LEVEL_FLAGS_ENABLED(LEVEL, FLAGS); \
        BOOLEAN recorderEnabled = WPP_RECORDER_CHECK_INIT WPP_RECORDER_LEVEL_FLAGS_FILTER(LEVEL, FLAGS); \
        if (wppEnabled || recorderEnabled) { \
            WPP_INVOKE_WPP_DEBUG((MSG, _a12)); \
            WPP_RECORDER_AND_TRACE_SF_sDd( \
                     WPP_LEVEL_FLAGS_LOGGER(LEVEL, FLAGS) \
                     wppEnabled, recorderEnabled, \
                     WPP_RECORDER_LEVEL_FLAGS_ARGS(LEVEL, FLAGS), \
                     92, \
                     WPP_LOCAL_TraceGuids+0, __FILE__, __LINE__, _a12);\
        } \
    } \
    while(0) \
    WPP_LEVEL_FLAGS_POST(LEVEL, FLAGS)
#else // ENABLE_WPP_TRACE_FILTERING_WITH_WPP_RECORDER
#define WPP_CALL_Vc4Display_cpp1748(LEVEL, FLAGS, MSG, _a12) \
    WPP_LOG_ALWAYS(WPP_EX_LEVEL_FLAGS(LEVEL, FLAGS), MSG, _a12) \
    WPP_LEVEL_FLAGS_PRE(LEVEL, FLAGS) \
    WPP_ANNOTATE(Vc4Display_cpp1748) \
    (( \
        WPP_RECORDER_CHECK_INIT WPP_RECORDER_LEVEL_FLAGS_FILTER(LEVEL, FLAGS) \
        ?   WPP_INVOKE_WPP_DEBUG((MSG, _a12)), \
            WPP_RECORDER_SF_sDd( \
                WPP_RECORDER_LEVEL_FLAGS_ARGS(LEVEL, FLAGS), \
                92, \
                WPP_LOCAL_TraceGuids+0, __FILE__, __LINE__, _a12), \
            1 \
        :   0 \
    )) \
    WPP_LEVEL_FLAGS_POST(LEVEL, FLAGS)
#endif // ENABLE_WPP_TRACE_FILTERING_WITH_WPP_RECORDER
#else  // ENABLE_WPP_RECORDER
#define WPP_CALL_Vc4Display_cpp1748(LEVEL, FLAGS, MSG, _a12) \
    WPP_LOG_ALWAYS(WPP_EX_LEVEL_FLAGS(LEVEL, FLAGS), MSG, _a12) \
    WPP_LEVEL_FLAGS_PRE(LEVEL, FLAGS) \
    WPP_ANNOTATE(Vc4Display_cpp1748) \
    (( \
        WPP_CHECK_INIT WPP_LEVEL_FLAGS_ENABLED(LEVEL, FLAGS) \
        ?   WPP_INVOKE_WPP_DEBUG((MSG, _a12)), \
            WPP_SF_sDd( \
                WPP_LEVEL_FLAGS_LOGGER(LEVEL, FLAGS) \
                92, \
                WPP_LOCAL_TraceGuids+0, __FILE__, __LINE__, _a12), \
            1 \
        :   0 \
    )) \
    WPP_LEVEL_FLAGS_POST(LEVEL, FLAGS)
#endif // ENABLE_WPP_RECORDER

// WPP_CALL_Vc4Display_cpp1772
#ifndef WPP_LEVEL_FLAGS_PRE
#  define WPP_LEVEL_FLAGS_PRE(LEVEL,FLAGS)
#endif
#ifndef WPP_LEVEL_FLAGS_POST
#  define WPP_LEVEL_FLAGS_POST(LEVEL,FLAGS)
#endif
#if ENABLE_WPP_RECORDER
#if ENABLE_WPP_TRACE_FILTERING_WITH_WPP_RECORDER
#define WPP_CALL_Vc4Display_cpp1772(LEVEL, FLAGS, MSG, _a12) \
    WPP_LOG_ALWAYS(WPP_EX_LEVEL_FLAGS(LEVEL, FLAGS), MSG, _a12) \
    WPP_LEVEL_FLAGS_PRE(LEVEL, FLAGS) \
    do {\
        WPP_ANNOTATE(Vc4Display_cpp1772) 0; \
        BOOLEAN wppEnabled = WPP_CHECK_INIT WPP_LEVEL_FLAGS_ENABLED(LEVEL, FLAGS); \
        BOOLEAN recorderEnabled = WPP_RECORDER_CHECK_INIT WPP_RECORDER_LEVEL_FLAGS_FILTER(LEVEL, FLAGS); \
        if (wppEnabled || recorderEnabled) { \
            WPP_INVOKE_WPP_DEBUG((MSG, _a12)); \
            WPP_RECORDER_AND_TRACE_SF_sDd( \
                     WPP_LEVEL_FLAGS_LOGGER(LEVEL, FLAGS) \
                     wppEnabled, recorderEnabled, \
                     WPP_RECORDER_LEVEL_FLAGS_ARGS(LEVEL, FLAGS), \
                     93, \
                     WPP_LOCAL_TraceGuids+0, __FILE__, __LINE__, _a12);\
        } \
    } \
    while(0) \
    WPP_LEVEL_FLAGS_POST(LEVEL, FLAGS)
#else // ENABLE_WPP_TRACE_FILTERING_WITH_WPP_RECORDER
#define WPP_CALL_Vc4Display_cpp1772(LEVEL, FLAGS, MSG, _a12) \
    WPP_LOG_ALWAYS(WPP_EX_LEVEL_FLAGS(LEVEL, FLAGS), MSG, _a12) \
    WPP_LEVEL_FLAGS_PRE(LEVEL, FLAGS) \
    WPP_ANNOTATE(Vc4Display_cpp1772) \
    (( \
        WPP_RECORDER_CHECK_INIT WPP_RECORDER_LEVEL_FLAGS_FILTER(LEVEL, FLAGS) \
        ?   WPP_INVOKE_WPP_DEBUG((MSG, _a12)), \
            WPP_RECORDER_SF_sDd( \
                WPP_RECORDER_LEVEL_FLAGS_ARGS(LEVEL, FLAGS), \
                93, \
                WPP_LOCAL_TraceGuids+0, __FILE__, __LINE__, _a12), \
            1 \
        :   0 \
    )) \
    WPP_LEVEL_FLAGS_POST(LEVEL, FLAGS)
#endif // ENABLE_WPP_TRACE_FILTERING_WITH_WPP_RECORDER
#else  // ENABLE_WPP_RECORDER
#define WPP_CALL_Vc4Display_cpp1772(LEVEL, FLAGS, MSG, _a12) \
    WPP_LOG_ALWAYS(WPP_EX_LEVEL_FLAGS(LEVEL, FLAGS), MSG, _a12) \
    WPP_LEVEL_FLAGS_PRE(LEVEL, FLAGS) \
    WPP_ANNOTATE(Vc4Display_cpp1772) \
    (( \
        WPP_CHECK_INIT WPP_LEVEL_FLAGS_ENABLED(LEVEL, FLAGS) \
        ?   WPP_INVOKE_WPP_DEBUG((MSG, _a12)), \
            WPP_SF_sDd( \
                WPP_LEVEL_FLAGS_LOGGER(LEVEL, FLAGS) \
                93, \
                WPP_LOCAL_TraceGuids+0, __FILE__, __LINE__, _a12), \
            1 \
        :   0 \
    )) \
    WPP_LEVEL_FLAGS_POST(LEVEL, FLAGS)
#endif // ENABLE_WPP_RECORDER

// WPP_CALL_Vc4Display_cpp1801
#ifndef WPP_LEVEL_FLAGS_PRE
#  define WPP_LEVEL_FLAGS_PRE(LEVEL,FLAGS)
#endif
#ifndef WPP_LEVEL_FLAGS_POST
#  define WPP_LEVEL_FLAGS_POST(LEVEL,FLAGS)
#endif
#if ENABLE_WPP_RECORDER
#if ENABLE_WPP_TRACE_FILTERING_WITH_WPP_RECORDER
#define WPP_CALL_Vc4Display_cpp1801(LEVEL, FLAGS, MSG, _a12, _a13, _a14, _a15, _a16, _a17) \
    WPP_LOG_ALWAYS(WPP_EX_LEVEL_FLAGS(LEVEL, FLAGS), MSG, _a12, _a13, _a14, _a15, _a16, _a17) \
    WPP_LEVEL_FLAGS_PRE(LEVEL, FLAGS) \
    do {\
        WPP_ANNOTATE(Vc4Display_cpp1801) 0; \
        BOOLEAN wppEnabled = WPP_CHECK_INIT WPP_LEVEL_FLAGS_ENABLED(LEVEL, FLAGS); \
        BOOLEAN recorderEnabled = WPP_RECORDER_CHECK_INIT WPP_RECORDER_LEVEL_FLAGS_FILTER(LEVEL, FLAGS); \
        if (wppEnabled || recorderEnabled) { \
            WPP_INVOKE_WPP_DEBUG((MSG, _a12, _a13, _a14, _a15, _a16, _a17)); \
            WPP_RECORDER_AND_TRACE_SF_sDdddddd( \
                     WPP_LEVEL_FLAGS_LOGGER(LEVEL, FLAGS) \
                     wppEnabled, recorderEnabled, \
                     WPP_RECORDER_LEVEL_FLAGS_ARGS(LEVEL, FLAGS), \
                     94, \
                     WPP_LOCAL_TraceGuids+0, __FILE__, __LINE__, _a12, _a13, _a14, _a15, _a16, _a17);\
        } \
    } \
    while(0) \
    WPP_LEVEL_FLAGS_POST(LEVEL, FLAGS)
#else // ENABLE_WPP_TRACE_FILTERING_WITH_WPP_RECORDER
#define WPP_CALL_Vc4Display_cpp1801(LEVEL, FLAGS, MSG, _a12, _a13, _a14, _a15, _a16, _a17) \
    WPP_LOG_ALWAYS(WPP_EX_LEVEL_FLAGS(LEVEL, FLAGS), MSG, _a12, _a13, _a14, _a15, _a16, _a17) \
    WPP_LEVEL_FLAGS_PRE(LEVEL, FLAGS) \
    WPP_ANNOTATE(Vc4Display_cpp1801) \
    (( \
        WPP_RECORDER_CHECK_INIT WPP_RECORDER_LEVEL_FLAGS_FILTER(LEVEL, FLAGS) \
        ?   WPP_INVOKE_WPP_DEBUG((MSG, _a12, _a13, _a14, _a15, _a16, _a17)), \
            WPP_RECORDER_SF_sDdddddd( \
                WPP_RECORDER_LEVEL_FLAGS_ARGS(LEVEL, FLAGS), \
                94, \
                WPP_LOCAL_TraceGuids+0, __FILE__, __LINE__, _a12, _a13, _a14, _a15, _a16, _a17), \
            1 \
        :   0 \
    )) \
    WPP_LEVEL_FLAGS_POST(LEVEL, FLAGS)
#endif // ENABLE_WPP_TRACE_FILTERING_WITH_WPP_RECORDER
#else  // ENABLE_WPP_RECORDER
#define WPP_CALL_Vc4Display_cpp1801(LEVEL, FLAGS, MSG, _a12, _a13, _a14, _a15, _a16, _a17) \
    WPP_LOG_ALWAYS(WPP_EX_LEVEL_FLAGS(LEVEL, FLAGS), MSG, _a12, _a13, _a14, _a15, _a16, _a17) \
    WPP_LEVEL_FLAGS_PRE(LEVEL, FLAGS) \
    WPP_ANNOTATE(Vc4Display_cpp1801) \
    (( \
        WPP_CHECK_INIT WPP_LEVEL_FLAGS_ENABLED(LEVEL, FLAGS) \
        ?   WPP_INVOKE_WPP_DEBUG((MSG, _a12, _a13, _a14, _a15, _a16, _a17)), \
            WPP_SF_sDdddddd( \
                WPP_LEVEL_FLAGS_LOGGER(LEVEL, FLAGS) \
                94, \
                WPP_LOCAL_TraceGuids+0, __FILE__, __LINE__, _a12, _a13, _a14, _a15, _a16, _a17), \
            1 \
        :   0 \
    )) \
    WPP_LEVEL_FLAGS_POST(LEVEL, FLAGS)
#endif // ENABLE_WPP_RECORDER

// WPP_CALL_Vc4Display_cpp1817
#ifndef WPP_LEVEL_FLAGS_PRE
#  define WPP_LEVEL_FLAGS_PRE(LEVEL,FLAGS)
#endif
#ifndef WPP_LEVEL_FLAGS_POST
#  define WPP_LEVEL_FLAGS_POST(LEVEL,FLAGS)
#endif
#if ENABLE_WPP_RECORDER
#if ENABLE_WPP_TRACE_FILTERING_WITH_WPP_RECORDER
#define WPP_CALL_Vc4Display_cpp1817(LEVEL, FLAGS, MSG, _a12) \
    WPP_LOG_ALWAYS(WPP_EX_LEVEL_FLAGS(LEVEL, FLAGS), MSG, _a12) \
    WPP_LEVEL_FLAGS_PRE(LEVEL, FLAGS) \
    do {\
        WPP_ANNOTATE(Vc4Display_cpp1817) 0; \
        BOOLEAN wppEnabled = WPP_CHECK_INIT WPP_LEVEL_FLAGS_ENABLED(LEVEL, FLAGS); \
        BOOLEAN recorderEnabled = WPP_RECORDER_CHECK_INIT WPP_RECORDER_LEVEL_FLAGS_FILTER(LEVEL, FLAGS); \
        if (wppEnabled || recorderEnabled) { \
            WPP_INVOKE_WPP_DEBUG((MSG, _a12)); \
            WPP_RECORDER_AND_TRACE_SF_sDd( \
                     WPP_LEVEL_FLAGS_LOGGER(LEVEL, FLAGS) \
                     wppEnabled, recorderEnabled, \
                     WPP_RECORDER_LEVEL_FLAGS_ARGS(LEVEL, FLAGS), \
                     95, \
                     WPP_LOCAL_TraceGuids+0, __FILE__, __LINE__, _a12);\
        } \
    } \
    while(0) \
    WPP_LEVEL_FLAGS_POST(LEVEL, FLAGS)
#else // ENABLE_WPP_TRACE_FILTERING_WITH_WPP_RECORDER
#define WPP_CALL_Vc4Display_cpp1817(LEVEL, FLAGS, MSG, _a12) \
    WPP_LOG_ALWAYS(WPP_EX_LEVEL_FLAGS(LEVEL, FLAGS), MSG, _a12) \
    WPP_LEVEL_FLAGS_PRE(LEVEL, FLAGS) \
    WPP_ANNOTATE(Vc4Display_cpp1817) \
    (( \
        WPP_RECORDER_CHECK_INIT WPP_RECORDER_LEVEL_FLAGS_FILTER(LEVEL, FLAGS) \
        ?   WPP_INVOKE_WPP_DEBUG((MSG, _a12)), \
            WPP_RECORDER_SF_sDd( \
                WPP_RECORDER_LEVEL_FLAGS_ARGS(LEVEL, FLAGS), \
                95, \
                WPP_LOCAL_TraceGuids+0, __FILE__, __LINE__, _a12), \
            1 \
        :   0 \
    )) \
    WPP_LEVEL_FLAGS_POST(LEVEL, FLAGS)
#endif // ENABLE_WPP_TRACE_FILTERING_WITH_WPP_RECORDER
#else  // ENABLE_WPP_RECORDER
#define WPP_CALL_Vc4Display_cpp1817(LEVEL, FLAGS, MSG, _a12) \
    WPP_LOG_ALWAYS(WPP_EX_LEVEL_FLAGS(LEVEL, FLAGS), MSG, _a12) \
    WPP_LEVEL_FLAGS_PRE(LEVEL, FLAGS) \
    WPP_ANNOTATE(Vc4Display_cpp1817) \
    (( \
        WPP_CHECK_INIT WPP_LEVEL_FLAGS_ENABLED(LEVEL, FLAGS) \
        ?   WPP_INVOKE_WPP_DEBUG((MSG, _a12)), \
            WPP_SF_sDd( \
                WPP_LEVEL_FLAGS_LOGGER(LEVEL, FLAGS) \
                95, \
                WPP_LOCAL_TraceGuids+0, __FILE__, __LINE__, _a12), \
            1 \
        :   0 \
    )) \
    WPP_LEVEL_FLAGS_POST(LEVEL, FLAGS)
#endif // ENABLE_WPP_RECORDER

// WPP_CALL_Vc4Display_cpp1833
#ifndef WPP_LEVEL_FLAGS_PRE
#  define WPP_LEVEL_FLAGS_PRE(LEVEL,FLAGS)
#endif
#ifndef WPP_LEVEL_FLAGS_POST
#  define WPP_LEVEL_FLAGS_POST(LEVEL,FLAGS)
#endif
#if ENABLE_WPP_RECORDER
#if ENABLE_WPP_TRACE_FILTERING_WITH_WPP_RECORDER
#define WPP_CALL_Vc4Display_cpp1833(LEVEL, FLAGS, MSG, _a12) \
    WPP_LOG_ALWAYS(WPP_EX_LEVEL_FLAGS(LEVEL, FLAGS), MSG, _a12) \
    WPP_LEVEL_FLAGS_PRE(LEVEL, FLAGS) \
    do {\
        WPP_ANNOTATE(Vc4Display_cpp1833) 0; \
        BOOLEAN wppEnabled = WPP_CHECK_INIT WPP_LEVEL_FLAGS_ENABLED(LEVEL, FLAGS); \
        BOOLEAN recorderEnabled = WPP_RECORDER_CHECK_INIT WPP_RECORDER_LEVEL_FLAGS_FILTER(LEVEL, FLAGS); \
        if (wppEnabled || recorderEnabled) { \
            WPP_INVOKE_WPP_DEBUG((MSG, _a12)); \
            WPP_RECORDER_AND_TRACE_SF_sDd( \
                     WPP_LEVEL_FLAGS_LOGGER(LEVEL, FLAGS) \
                     wppEnabled, recorderEnabled, \
                     WPP_RECORDER_LEVEL_FLAGS_ARGS(LEVEL, FLAGS), \
                     96, \
                     WPP_LOCAL_TraceGuids+0, __FILE__, __LINE__, _a12);\
        } \
    } \
    while(0) \
    WPP_LEVEL_FLAGS_POST(LEVEL, FLAGS)
#else // ENABLE_WPP_TRACE_FILTERING_WITH_WPP_RECORDER
#define WPP_CALL_Vc4Display_cpp1833(LEVEL, FLAGS, MSG, _a12) \
    WPP_LOG_ALWAYS(WPP_EX_LEVEL_FLAGS(LEVEL, FLAGS), MSG, _a12) \
    WPP_LEVEL_FLAGS_PRE(LEVEL, FLAGS) \
    WPP_ANNOTATE(Vc4Display_cpp1833) \
    (( \
        WPP_RECORDER_CHECK_INIT WPP_RECORDER_LEVEL_FLAGS_FILTER(LEVEL, FLAGS) \
        ?   WPP_INVOKE_WPP_DEBUG((MSG, _a12)), \
            WPP_RECORDER_SF_sDd( \
                WPP_RECORDER_LEVEL_FLAGS_ARGS(LEVEL, FLAGS), \
                96, \
                WPP_LOCAL_TraceGuids+0, __FILE__, __LINE__, _a12), \
            1 \
        :   0 \
    )) \
    WPP_LEVEL_FLAGS_POST(LEVEL, FLAGS)
#endif // ENABLE_WPP_TRACE_FILTERING_WITH_WPP_RECORDER
#else  // ENABLE_WPP_RECORDER
#define WPP_CALL_Vc4Display_cpp1833(LEVEL, FLAGS, MSG, _a12) \
    WPP_LOG_ALWAYS(WPP_EX_LEVEL_FLAGS(LEVEL, FLAGS), MSG, _a12) \
    WPP_LEVEL_FLAGS_PRE(LEVEL, FLAGS) \
    WPP_ANNOTATE(Vc4Display_cpp1833) \
    (( \
        WPP_CHECK_INIT WPP_LEVEL_FLAGS_ENABLED(LEVEL, FLAGS) \
        ?   WPP_INVOKE_WPP_DEBUG((MSG, _a12)), \
            WPP_SF_sDd( \
                WPP_LEVEL_FLAGS_LOGGER(LEVEL, FLAGS) \
                96, \
                WPP_LOCAL_TraceGuids+0, __FILE__, __LINE__, _a12), \
            1 \
        :   0 \
    )) \
    WPP_LEVEL_FLAGS_POST(LEVEL, FLAGS)
#endif // ENABLE_WPP_RECORDER

// WPP_CALL_Vc4Display_cpp1868
#ifndef WPP_LEVEL_FLAGS_PRE
#  define WPP_LEVEL_FLAGS_PRE(LEVEL,FLAGS)
#endif
#ifndef WPP_LEVEL_FLAGS_POST
#  define WPP_LEVEL_FLAGS_POST(LEVEL,FLAGS)
#endif
#if ENABLE_WPP_RECORDER
#if ENABLE_WPP_TRACE_FILTERING_WITH_WPP_RECORDER
#define WPP_CALL_Vc4Display_cpp1868(LEVEL, FLAGS, MSG, _a12) \
    WPP_LOG_ALWAYS(WPP_EX_LEVEL_FLAGS(LEVEL, FLAGS), MSG, _a12) \
    WPP_LEVEL_FLAGS_PRE(LEVEL, FLAGS) \
    do {\
        WPP_ANNOTATE(Vc4Display_cpp1868) 0; \
        BOOLEAN wppEnabled = WPP_CHECK_INIT WPP_LEVEL_FLAGS_ENABLED(LEVEL, FLAGS); \
        BOOLEAN recorderEnabled = WPP_RECORDER_CHECK_INIT WPP_RECORDER_LEVEL_FLAGS_FILTER(LEVEL, FLAGS); \
        if (wppEnabled || recorderEnabled) { \
            WPP_INVOKE_WPP_DEBUG((MSG, _a12)); \
            WPP_RECORDER_AND_TRACE_SF_sDd( \
                     WPP_LEVEL_FLAGS_LOGGER(LEVEL, FLAGS) \
                     wppEnabled, recorderEnabled, \
                     WPP_RECORDER_LEVEL_FLAGS_ARGS(LEVEL, FLAGS), \
                     97, \
                     WPP_LOCAL_TraceGuids+0, __FILE__, __LINE__, _a12);\
        } \
    } \
    while(0) \
    WPP_LEVEL_FLAGS_POST(LEVEL, FLAGS)
#else // ENABLE_WPP_TRACE_FILTERING_WITH_WPP_RECORDER
#define WPP_CALL_Vc4Display_cpp1868(LEVEL, FLAGS, MSG, _a12) \
    WPP_LOG_ALWAYS(WPP_EX_LEVEL_FLAGS(LEVEL, FLAGS), MSG, _a12) \
    WPP_LEVEL_FLAGS_PRE(LEVEL, FLAGS) \
    WPP_ANNOTATE(Vc4Display_cpp1868) \
    (( \
        WPP_RECORDER_CHECK_INIT WPP_RECORDER_LEVEL_FLAGS_FILTER(LEVEL, FLAGS) \
        ?   WPP_INVOKE_WPP_DEBUG((MSG, _a12)), \
            WPP_RECORDER_SF_sDd( \
                WPP_RECORDER_LEVEL_FLAGS_ARGS(LEVEL, FLAGS), \
                97, \
                WPP_LOCAL_TraceGuids+0, __FILE__, __LINE__, _a12), \
            1 \
        :   0 \
    )) \
    WPP_LEVEL_FLAGS_POST(LEVEL, FLAGS)
#endif // ENABLE_WPP_TRACE_FILTERING_WITH_WPP_RECORDER
#else  // ENABLE_WPP_RECORDER
#define WPP_CALL_Vc4Display_cpp1868(LEVEL, FLAGS, MSG, _a12) \
    WPP_LOG_ALWAYS(WPP_EX_LEVEL_FLAGS(LEVEL, FLAGS), MSG, _a12) \
    WPP_LEVEL_FLAGS_PRE(LEVEL, FLAGS) \
    WPP_ANNOTATE(Vc4Display_cpp1868) \
    (( \
        WPP_CHECK_INIT WPP_LEVEL_FLAGS_ENABLED(LEVEL, FLAGS) \
        ?   WPP_INVOKE_WPP_DEBUG((MSG, _a12)), \
            WPP_SF_sDd( \
                WPP_LEVEL_FLAGS_LOGGER(LEVEL, FLAGS) \
                97, \
                WPP_LOCAL_TraceGuids+0, __FILE__, __LINE__, _a12), \
            1 \
        :   0 \
    )) \
    WPP_LEVEL_FLAGS_POST(LEVEL, FLAGS)
#endif // ENABLE_WPP_RECORDER

// WPP_CALL_Vc4Display_cpp1891
#ifndef WPP_LEVEL_FLAGS_PRE
#  define WPP_LEVEL_FLAGS_PRE(LEVEL,FLAGS)
#endif
#ifndef WPP_LEVEL_FLAGS_POST
#  define WPP_LEVEL_FLAGS_POST(LEVEL,FLAGS)
#endif
#if ENABLE_WPP_RECORDER
#if ENABLE_WPP_TRACE_FILTERING_WITH_WPP_RECORDER
#define WPP_CALL_Vc4Display_cpp1891(LEVEL, FLAGS, MSG, _a12, _a13) \
    WPP_LOG_ALWAYS(WPP_EX_LEVEL_FLAGS(LEVEL, FLAGS), MSG, _a12, _a13) \
    WPP_LEVEL_FLAGS_PRE(LEVEL, FLAGS) \
    do {\
        WPP_ANNOTATE(Vc4Display_cpp1891) 0; \
        BOOLEAN wppEnabled = WPP_CHECK_INIT WPP_LEVEL_FLAGS_ENABLED(LEVEL, FLAGS); \
        BOOLEAN recorderEnabled = WPP_RECORDER_CHECK_INIT WPP_RECORDER_LEVEL_FLAGS_FILTER(LEVEL, FLAGS); \
        if (wppEnabled || recorderEnabled) { \
            WPP_INVOKE_WPP_DEBUG((MSG, _a12, _a13)); \
            WPP_RECORDER_AND_TRACE_SF_sDdq( \
                     WPP_LEVEL_FLAGS_LOGGER(LEVEL, FLAGS) \
                     wppEnabled, recorderEnabled, \
                     WPP_RECORDER_LEVEL_FLAGS_ARGS(LEVEL, FLAGS), \
                     98, \
                     WPP_LOCAL_TraceGuids+0, __FILE__, __LINE__, _a12, _a13);\
        } \
    } \
    while(0) \
    WPP_LEVEL_FLAGS_POST(LEVEL, FLAGS)
#else // ENABLE_WPP_TRACE_FILTERING_WITH_WPP_RECORDER
#define WPP_CALL_Vc4Display_cpp1891(LEVEL, FLAGS, MSG, _a12, _a13) \
    WPP_LOG_ALWAYS(WPP_EX_LEVEL_FLAGS(LEVEL, FLAGS), MSG, _a12, _a13) \
    WPP_LEVEL_FLAGS_PRE(LEVEL, FLAGS) \
    WPP_ANNOTATE(Vc4Display_cpp1891) \
    (( \
        WPP_RECORDER_CHECK_INIT WPP_RECORDER_LEVEL_FLAGS_FILTER(LEVEL, FLAGS) \
        ?   WPP_INVOKE_WPP_DEBUG((MSG, _a12, _a13)), \
            WPP_RECORDER_SF_sDdq( \
                WPP_RECORDER_LEVEL_FLAGS_ARGS(LEVEL, FLAGS), \
                98, \
                WPP_LOCAL_TraceGuids+0, __FILE__, __LINE__, _a12, _a13), \
            1 \
        :   0 \
    )) \
    WPP_LEVEL_FLAGS_POST(LEVEL, FLAGS)
#endif // ENABLE_WPP_TRACE_FILTERING_WITH_WPP_RECORDER
#else  // ENABLE_WPP_RECORDER
#define WPP_CALL_Vc4Display_cpp1891(LEVEL, FLAGS, MSG, _a12, _a13) \
    WPP_LOG_ALWAYS(WPP_EX_LEVEL_FLAGS(LEVEL, FLAGS), MSG, _a12, _a13) \
    WPP_LEVEL_FLAGS_PRE(LEVEL, FLAGS) \
    WPP_ANNOTATE(Vc4Display_cpp1891) \
    (( \
        WPP_CHECK_INIT WPP_LEVEL_FLAGS_ENABLED(LEVEL, FLAGS) \
        ?   WPP_INVOKE_WPP_DEBUG((MSG, _a12, _a13)), \
            WPP_SF_sDdq( \
                WPP_LEVEL_FLAGS_LOGGER(LEVEL, FLAGS) \
                98, \
                WPP_LOCAL_TraceGuids+0, __FILE__, __LINE__, _a12, _a13), \
            1 \
        :   0 \
    )) \
    WPP_LEVEL_FLAGS_POST(LEVEL, FLAGS)
#endif // ENABLE_WPP_RECORDER

// WPP_CALL_Vc4Display_cpp1940
#ifndef WPP_LEVEL_FLAGS_PRE
#  define WPP_LEVEL_FLAGS_PRE(LEVEL,FLAGS)
#endif
#ifndef WPP_LEVEL_FLAGS_POST
#  define WPP_LEVEL_FLAGS_POST(LEVEL,FLAGS)
#endif
#if ENABLE_WPP_RECORDER
#if ENABLE_WPP_TRACE_FILTERING_WITH_WPP_RECORDER
#define WPP_CALL_Vc4Display_cpp1940(LEVEL, FLAGS, MSG, _a12) \
    WPP_LOG_ALWAYS(WPP_EX_LEVEL_FLAGS(LEVEL, FLAGS), MSG, _a12) \
    WPP_LEVEL_FLAGS_PRE(LEVEL, FLAGS) \
    do {\
        WPP_ANNOTATE(Vc4Display_cpp1940) 0; \
        BOOLEAN wppEnabled = WPP_CHECK_INIT WPP_LEVEL_FLAGS_ENABLED(LEVEL, FLAGS); \
        BOOLEAN recorderEnabled = WPP_RECORDER_CHECK_INIT WPP_RECORDER_LEVEL_FLAGS_FILTER(LEVEL, FLAGS); \
        if (wppEnabled || recorderEnabled) { \
            WPP_INVOKE_WPP_DEBUG((MSG, _a12)); \
            WPP_RECORDER_AND_TRACE_SF_sDd( \
                     WPP_LEVEL_FLAGS_LOGGER(LEVEL, FLAGS) \
                     wppEnabled, recorderEnabled, \
                     WPP_RECORDER_LEVEL_FLAGS_ARGS(LEVEL, FLAGS), \
                     99, \
                     WPP_LOCAL_TraceGuids+0, __FILE__, __LINE__, _a12);\
        } \
    } \
    while(0) \
    WPP_LEVEL_FLAGS_POST(LEVEL, FLAGS)
#else // ENABLE_WPP_TRACE_FILTERING_WITH_WPP_RECORDER
#define WPP_CALL_Vc4Display_cpp1940(LEVEL, FLAGS, MSG, _a12) \
    WPP_LOG_ALWAYS(WPP_EX_LEVEL_FLAGS(LEVEL, FLAGS), MSG, _a12) \
    WPP_LEVEL_FLAGS_PRE(LEVEL, FLAGS) \
    WPP_ANNOTATE(Vc4Display_cpp1940) \
    (( \
        WPP_RECORDER_CHECK_INIT WPP_RECORDER_LEVEL_FLAGS_FILTER(LEVEL, FLAGS) \
        ?   WPP_INVOKE_WPP_DEBUG((MSG, _a12)), \
            WPP_RECORDER_SF_sDd( \
                WPP_RECORDER_LEVEL_FLAGS_ARGS(LEVEL, FLAGS), \
                99, \
                WPP_LOCAL_TraceGuids+0, __FILE__, __LINE__, _a12), \
            1 \
        :   0 \
    )) \
    WPP_LEVEL_FLAGS_POST(LEVEL, FLAGS)
#endif // ENABLE_WPP_TRACE_FILTERING_WITH_WPP_RECORDER
#else  // ENABLE_WPP_RECORDER
#define WPP_CALL_Vc4Display_cpp1940(LEVEL, FLAGS, MSG, _a12) \
    WPP_LOG_ALWAYS(WPP_EX_LEVEL_FLAGS(LEVEL, FLAGS), MSG, _a12) \
    WPP_LEVEL_FLAGS_PRE(LEVEL, FLAGS) \
    WPP_ANNOTATE(Vc4Display_cpp1940) \
    (( \
        WPP_CHECK_INIT WPP_LEVEL_FLAGS_ENABLED(LEVEL, FLAGS) \
        ?   WPP_INVOKE_WPP_DEBUG((MSG, _a12)), \
            WPP_SF_sDd( \
                WPP_LEVEL_FLAGS_LOGGER(LEVEL, FLAGS) \
                99, \
                WPP_LOCAL_TraceGuids+0, __FILE__, __LINE__, _a12), \
            1 \
        :   0 \
    )) \
    WPP_LEVEL_FLAGS_POST(LEVEL, FLAGS)
#endif // ENABLE_WPP_RECORDER

// WPP_CALL_Vc4Display_cpp1964
#ifndef WPP_LEVEL_FLAGS_PRE
#  define WPP_LEVEL_FLAGS_PRE(LEVEL,FLAGS)
#endif
#ifndef WPP_LEVEL_FLAGS_POST
#  define WPP_LEVEL_FLAGS_POST(LEVEL,FLAGS)
#endif
#if ENABLE_WPP_RECORDER
#if ENABLE_WPP_TRACE_FILTERING_WITH_WPP_RECORDER
#define WPP_CALL_Vc4Display_cpp1964(LEVEL, FLAGS, MSG, _a12) \
    WPP_LOG_ALWAYS(WPP_EX_LEVEL_FLAGS(LEVEL, FLAGS), MSG, _a12) \
    WPP_LEVEL_FLAGS_PRE(LEVEL, FLAGS) \
    do {\
        WPP_ANNOTATE(Vc4Display_cpp1964) 0; \
        BOOLEAN wppEnabled = WPP_CHECK_INIT WPP_LEVEL_FLAGS_ENABLED(LEVEL, FLAGS); \
        BOOLEAN recorderEnabled = WPP_RECORDER_CHECK_INIT WPP_RECORDER_LEVEL_FLAGS_FILTER(LEVEL, FLAGS); \
        if (wppEnabled || recorderEnabled) { \
            WPP_INVOKE_WPP_DEBUG((MSG, _a12)); \
            WPP_RECORDER_AND_TRACE_SF_sDd( \
                     WPP_LEVEL_FLAGS_LOGGER(LEVEL, FLAGS) \
                     wppEnabled, recorderEnabled, \
                     WPP_RECORDER_LEVEL_FLAGS_ARGS(LEVEL, FLAGS), \
                     100, \
                     WPP_LOCAL_TraceGuids+0, __FILE__, __LINE__, _a12);\
        } \
    } \
    while(0) \
    WPP_LEVEL_FLAGS_POST(LEVEL, FLAGS)
#else // ENABLE_WPP_TRACE_FILTERING_WITH_WPP_RECORDER
#define WPP_CALL_Vc4Display_cpp1964(LEVEL, FLAGS, MSG, _a12) \
    WPP_LOG_ALWAYS(WPP_EX_LEVEL_FLAGS(LEVEL, FLAGS), MSG, _a12) \
    WPP_LEVEL_FLAGS_PRE(LEVEL, FLAGS) \
    WPP_ANNOTATE(Vc4Display_cpp1964) \
    (( \
        WPP_RECORDER_CHECK_INIT WPP_RECORDER_LEVEL_FLAGS_FILTER(LEVEL, FLAGS) \
        ?   WPP_INVOKE_WPP_DEBUG((MSG, _a12)), \
            WPP_RECORDER_SF_sDd( \
                WPP_RECORDER_LEVEL_FLAGS_ARGS(LEVEL, FLAGS), \
                100, \
                WPP_LOCAL_TraceGuids+0, __FILE__, __LINE__, _a12), \
            1 \
        :   0 \
    )) \
    WPP_LEVEL_FLAGS_POST(LEVEL, FLAGS)
#endif // ENABLE_WPP_TRACE_FILTERING_WITH_WPP_RECORDER
#else  // ENABLE_WPP_RECORDER
#define WPP_CALL_Vc4Display_cpp1964(LEVEL, FLAGS, MSG, _a12) \
    WPP_LOG_ALWAYS(WPP_EX_LEVEL_FLAGS(LEVEL, FLAGS), MSG, _a12) \
    WPP_LEVEL_FLAGS_PRE(LEVEL, FLAGS) \
    WPP_ANNOTATE(Vc4Display_cpp1964) \
    (( \
        WPP_CHECK_INIT WPP_LEVEL_FLAGS_ENABLED(LEVEL, FLAGS) \
        ?   WPP_INVOKE_WPP_DEBUG((MSG, _a12)), \
            WPP_SF_sDd( \
                WPP_LEVEL_FLAGS_LOGGER(LEVEL, FLAGS) \
                100, \
                WPP_LOCAL_TraceGuids+0, __FILE__, __LINE__, _a12), \
            1 \
        :   0 \
    )) \
    WPP_LEVEL_FLAGS_POST(LEVEL, FLAGS)
#endif // ENABLE_WPP_RECORDER

// WPP_CALL_Vc4Display_cpp1991
#ifndef WPP_LEVEL_FLAGS_PRE
#  define WPP_LEVEL_FLAGS_PRE(LEVEL,FLAGS)
#endif
#ifndef WPP_LEVEL_FLAGS_POST
#  define WPP_LEVEL_FLAGS_POST(LEVEL,FLAGS)
#endif
#if ENABLE_WPP_RECORDER
#if ENABLE_WPP_TRACE_FILTERING_WITH_WPP_RECORDER
#define WPP_CALL_Vc4Display_cpp1991(LEVEL, FLAGS, MSG, _a12) \
    WPP_LOG_ALWAYS(WPP_EX_LEVEL_FLAGS(LEVEL, FLAGS), MSG, _a12) \
    WPP_LEVEL_FLAGS_PRE(LEVEL, FLAGS) \
    do {\
        WPP_ANNOTATE(Vc4Display_cpp1991) 0; \
        BOOLEAN wppEnabled = WPP_CHECK_INIT WPP_LEVEL_FLAGS_ENABLED(LEVEL, FLAGS); \
        BOOLEAN recorderEnabled = WPP_RECORDER_CHECK_INIT WPP_RECORDER_LEVEL_FLAGS_FILTER(LEVEL, FLAGS); \
        if (wppEnabled || recorderEnabled) { \
            WPP_INVOKE_WPP_DEBUG((MSG, _a12)); \
            WPP_RECORDER_AND_TRACE_SF_sDd( \
                     WPP_LEVEL_FLAGS_LOGGER(LEVEL, FLAGS) \
                     wppEnabled, recorderEnabled, \
                     WPP_RECORDER_LEVEL_FLAGS_ARGS(LEVEL, FLAGS), \
                     101, \
                     WPP_LOCAL_TraceGuids+0, __FILE__, __LINE__, _a12);\
        } \
    } \
    while(0) \
    WPP_LEVEL_FLAGS_POST(LEVEL, FLAGS)
#else // ENABLE_WPP_TRACE_FILTERING_WITH_WPP_RECORDER
#define WPP_CALL_Vc4Display_cpp1991(LEVEL, FLAGS, MSG, _a12) \
    WPP_LOG_ALWAYS(WPP_EX_LEVEL_FLAGS(LEVEL, FLAGS), MSG, _a12) \
    WPP_LEVEL_FLAGS_PRE(LEVEL, FLAGS) \
    WPP_ANNOTATE(Vc4Display_cpp1991) \
    (( \
        WPP_RECORDER_CHECK_INIT WPP_RECORDER_LEVEL_FLAGS_FILTER(LEVEL, FLAGS) \
        ?   WPP_INVOKE_WPP_DEBUG((MSG, _a12)), \
            WPP_RECORDER_SF_sDd( \
                WPP_RECORDER_LEVEL_FLAGS_ARGS(LEVEL, FLAGS), \
                101, \
                WPP_LOCAL_TraceGuids+0, __FILE__, __LINE__, _a12), \
            1 \
        :   0 \
    )) \
    WPP_LEVEL_FLAGS_POST(LEVEL, FLAGS)
#endif // ENABLE_WPP_TRACE_FILTERING_WITH_WPP_RECORDER
#else  // ENABLE_WPP_RECORDER
#define WPP_CALL_Vc4Display_cpp1991(LEVEL, FLAGS, MSG, _a12) \
    WPP_LOG_ALWAYS(WPP_EX_LEVEL_FLAGS(LEVEL, FLAGS), MSG, _a12) \
    WPP_LEVEL_FLAGS_PRE(LEVEL, FLAGS) \
    WPP_ANNOTATE(Vc4Display_cpp1991) \
    (( \
        WPP_CHECK_INIT WPP_LEVEL_FLAGS_ENABLED(LEVEL, FLAGS) \
        ?   WPP_INVOKE_WPP_DEBUG((MSG, _a12)), \
            WPP_SF_sDd( \
                WPP_LEVEL_FLAGS_LOGGER(LEVEL, FLAGS) \
                101, \
                WPP_LOCAL_TraceGuids+0, __FILE__, __LINE__, _a12), \
            1 \
        :   0 \
    )) \
    WPP_LEVEL_FLAGS_POST(LEVEL, FLAGS)
#endif // ENABLE_WPP_RECORDER

// WPP_CALL_Vc4Display_cpp2007
#ifndef WPP_LEVEL_FLAGS_PRE
#  define WPP_LEVEL_FLAGS_PRE(LEVEL,FLAGS)
#endif
#ifndef WPP_LEVEL_FLAGS_POST
#  define WPP_LEVEL_FLAGS_POST(LEVEL,FLAGS)
#endif
#if ENABLE_WPP_RECORDER
#if ENABLE_WPP_TRACE_FILTERING_WITH_WPP_RECORDER
#define WPP_CALL_Vc4Display_cpp2007(LEVEL, FLAGS, MSG, _a12) \
    WPP_LOG_ALWAYS(WPP_EX_LEVEL_FLAGS(LEVEL, FLAGS), MSG, _a12) \
    WPP_LEVEL_FLAGS_PRE(LEVEL, FLAGS) \
    do {\
        WPP_ANNOTATE(Vc4Display_cpp2007) 0; \
        BOOLEAN wppEnabled = WPP_CHECK_INIT WPP_LEVEL_FLAGS_ENABLED(LEVEL, FLAGS); \
        BOOLEAN recorderEnabled = WPP_RECORDER_CHECK_INIT WPP_RECORDER_LEVEL_FLAGS_FILTER(LEVEL, FLAGS); \
        if (wppEnabled || recorderEnabled) { \
            WPP_INVOKE_WPP_DEBUG((MSG, _a12)); \
            WPP_RECORDER_AND_TRACE_SF_sDd( \
                     WPP_LEVEL_FLAGS_LOGGER(LEVEL, FLAGS) \
                     wppEnabled, recorderEnabled, \
                     WPP_RECORDER_LEVEL_FLAGS_ARGS(LEVEL, FLAGS), \
                     102, \
                     WPP_LOCAL_TraceGuids+0, __FILE__, __LINE__, _a12);\
        } \
    } \
    while(0) \
    WPP_LEVEL_FLAGS_POST(LEVEL, FLAGS)
#else // ENABLE_WPP_TRACE_FILTERING_WITH_WPP_RECORDER
#define WPP_CALL_Vc4Display_cpp2007(LEVEL, FLAGS, MSG, _a12) \
    WPP_LOG_ALWAYS(WPP_EX_LEVEL_FLAGS(LEVEL, FLAGS), MSG, _a12) \
    WPP_LEVEL_FLAGS_PRE(LEVEL, FLAGS) \
    WPP_ANNOTATE(Vc4Display_cpp2007) \
    (( \
        WPP_RECORDER_CHECK_INIT WPP_RECORDER_LEVEL_FLAGS_FILTER(LEVEL, FLAGS) \
        ?   WPP_INVOKE_WPP_DEBUG((MSG, _a12)), \
            WPP_RECORDER_SF_sDd( \
                WPP_RECORDER_LEVEL_FLAGS_ARGS(LEVEL, FLAGS), \
                102, \
                WPP_LOCAL_TraceGuids+0, __FILE__, __LINE__, _a12), \
            1 \
        :   0 \
    )) \
    WPP_LEVEL_FLAGS_POST(LEVEL, FLAGS)
#endif // ENABLE_WPP_TRACE_FILTERING_WITH_WPP_RECORDER
#else  // ENABLE_WPP_RECORDER
#define WPP_CALL_Vc4Display_cpp2007(LEVEL, FLAGS, MSG, _a12) \
    WPP_LOG_ALWAYS(WPP_EX_LEVEL_FLAGS(LEVEL, FLAGS), MSG, _a12) \
    WPP_LEVEL_FLAGS_PRE(LEVEL, FLAGS) \
    WPP_ANNOTATE(Vc4Display_cpp2007) \
    (( \
        WPP_CHECK_INIT WPP_LEVEL_FLAGS_ENABLED(LEVEL, FLAGS) \
        ?   WPP_INVOKE_WPP_DEBUG((MSG, _a12)), \
            WPP_SF_sDd( \
                WPP_LEVEL_FLAGS_LOGGER(LEVEL, FLAGS) \
                102, \
                WPP_LOCAL_TraceGuids+0, __FILE__, __LINE__, _a12), \
            1 \
        :   0 \
    )) \
    WPP_LEVEL_FLAGS_POST(LEVEL, FLAGS)
#endif // ENABLE_WPP_RECORDER

// WPP_CALL_Vc4Display_cpp2028
#ifndef WPP_LEVEL_FLAGS_PRE
#  define WPP_LEVEL_FLAGS_PRE(LEVEL,FLAGS)
#endif
#ifndef WPP_LEVEL_FLAGS_POST
#  define WPP_LEVEL_FLAGS_POST(LEVEL,FLAGS)
#endif
#if ENABLE_WPP_RECORDER
#if ENABLE_WPP_TRACE_FILTERING_WITH_WPP_RECORDER
#define WPP_CALL_Vc4Display_cpp2028(LEVEL, FLAGS, MSG, _a12) \
    WPP_LOG_ALWAYS(WPP_EX_LEVEL_FLAGS(LEVEL, FLAGS), MSG, _a12) \
    WPP_LEVEL_FLAGS_PRE(LEVEL, FLAGS) \
    do {\
        WPP_ANNOTATE(Vc4Display_cpp2028) 0; \
        BOOLEAN wppEnabled = WPP_CHECK_INIT WPP_LEVEL_FLAGS_ENABLED(LEVEL, FLAGS); \
        BOOLEAN recorderEnabled = WPP_RECORDER_CHECK_INIT WPP_RECORDER_LEVEL_FLAGS_FILTER(LEVEL, FLAGS); \
        if (wppEnabled || recorderEnabled) { \
            WPP_INVOKE_WPP_DEBUG((MSG, _a12)); \
            WPP_RECORDER_AND_TRACE_SF_sDd( \
                     WPP_LEVEL_FLAGS_LOGGER(LEVEL, FLAGS) \
                     wppEnabled, recorderEnabled, \
                     WPP_RECORDER_LEVEL_FLAGS_ARGS(LEVEL, FLAGS), \
                     103, \
                     WPP_LOCAL_TraceGuids+0, __FILE__, __LINE__, _a12);\
        } \
    } \
    while(0) \
    WPP_LEVEL_FLAGS_POST(LEVEL, FLAGS)
#else // ENABLE_WPP_TRACE_FILTERING_WITH_WPP_RECORDER
#define WPP_CALL_Vc4Display_cpp2028(LEVEL, FLAGS, MSG, _a12) \
    WPP_LOG_ALWAYS(WPP_EX_LEVEL_FLAGS(LEVEL, FLAGS), MSG, _a12) \
    WPP_LEVEL_FLAGS_PRE(LEVEL, FLAGS) \
    WPP_ANNOTATE(Vc4Display_cpp2028) \
    (( \
        WPP_RECORDER_CHECK_INIT WPP_RECORDER_LEVEL_FLAGS_FILTER(LEVEL, FLAGS) \
        ?   WPP_INVOKE_WPP_DEBUG((MSG, _a12)), \
            WPP_RECORDER_SF_sDd( \
                WPP_RECORDER_LEVEL_FLAGS_ARGS(LEVEL, FLAGS), \
                103, \
                WPP_LOCAL_TraceGuids+0, __FILE__, __LINE__, _a12), \
            1 \
        :   0 \
    )) \
    WPP_LEVEL_FLAGS_POST(LEVEL, FLAGS)
#endif // ENABLE_WPP_TRACE_FILTERING_WITH_WPP_RECORDER
#else  // ENABLE_WPP_RECORDER
#define WPP_CALL_Vc4Display_cpp2028(LEVEL, FLAGS, MSG, _a12) \
    WPP_LOG_ALWAYS(WPP_EX_LEVEL_FLAGS(LEVEL, FLAGS), MSG, _a12) \
    WPP_LEVEL_FLAGS_PRE(LEVEL, FLAGS) \
    WPP_ANNOTATE(Vc4Display_cpp2028) \
    (( \
        WPP_CHECK_INIT WPP_LEVEL_FLAGS_ENABLED(LEVEL, FLAGS) \
        ?   WPP_INVOKE_WPP_DEBUG((MSG, _a12)), \
            WPP_SF_sDd( \
                WPP_LEVEL_FLAGS_LOGGER(LEVEL, FLAGS) \
                103, \
                WPP_LOCAL_TraceGuids+0, __FILE__, __LINE__, _a12), \
            1 \
        :   0 \
    )) \
    WPP_LEVEL_FLAGS_POST(LEVEL, FLAGS)
#endif // ENABLE_WPP_RECORDER

// WPP_CALL_Vc4Display_cpp2039
#ifndef WPP_LEVEL_FLAGS_PRE
#  define WPP_LEVEL_FLAGS_PRE(LEVEL,FLAGS)
#endif
#ifndef WPP_LEVEL_FLAGS_POST
#  define WPP_LEVEL_FLAGS_POST(LEVEL,FLAGS)
#endif
#if ENABLE_WPP_RECORDER
#if ENABLE_WPP_TRACE_FILTERING_WITH_WPP_RECORDER
#define WPP_CALL_Vc4Display_cpp2039(LEVEL, FLAGS, MSG, _a12) \
    WPP_LOG_ALWAYS(WPP_EX_LEVEL_FLAGS(LEVEL, FLAGS), MSG, _a12) \
    WPP_LEVEL_FLAGS_PRE(LEVEL, FLAGS) \
    do {\
        WPP_ANNOTATE(Vc4Display_cpp2039) 0; \
        BOOLEAN wppEnabled = WPP_CHECK_INIT WPP_LEVEL_FLAGS_ENABLED(LEVEL, FLAGS); \
        BOOLEAN recorderEnabled = WPP_RECORDER_CHECK_INIT WPP_RECORDER_LEVEL_FLAGS_FILTER(LEVEL, FLAGS); \
        if (wppEnabled || recorderEnabled) { \
            WPP_INVOKE_WPP_DEBUG((MSG, _a12)); \
            WPP_RECORDER_AND_TRACE_SF_sDd( \
                     WPP_LEVEL_FLAGS_LOGGER(LEVEL, FLAGS) \
                     wppEnabled, recorderEnabled, \
                     WPP_RECORDER_LEVEL_FLAGS_ARGS(LEVEL, FLAGS), \
                     104, \
                     WPP_LOCAL_TraceGuids+0, __FILE__, __LINE__, _a12);\
        } \
    } \
    while(0) \
    WPP_LEVEL_FLAGS_POST(LEVEL, FLAGS)
#else // ENABLE_WPP_TRACE_FILTERING_WITH_WPP_RECORDER
#define WPP_CALL_Vc4Display_cpp2039(LEVEL, FLAGS, MSG, _a12) \
    WPP_LOG_ALWAYS(WPP_EX_LEVEL_FLAGS(LEVEL, FLAGS), MSG, _a12) \
    WPP_LEVEL_FLAGS_PRE(LEVEL, FLAGS) \
    WPP_ANNOTATE(Vc4Display_cpp2039) \
    (( \
        WPP_RECORDER_CHECK_INIT WPP_RECORDER_LEVEL_FLAGS_FILTER(LEVEL, FLAGS) \
        ?   WPP_INVOKE_WPP_DEBUG((MSG, _a12)), \
            WPP_RECORDER_SF_sDd( \
                WPP_RECORDER_LEVEL_FLAGS_ARGS(LEVEL, FLAGS), \
                104, \
                WPP_LOCAL_TraceGuids+0, __FILE__, __LINE__, _a12), \
            1 \
        :   0 \
    )) \
    WPP_LEVEL_FLAGS_POST(LEVEL, FLAGS)
#endif // ENABLE_WPP_TRACE_FILTERING_WITH_WPP_RECORDER
#else  // ENABLE_WPP_RECORDER
#define WPP_CALL_Vc4Display_cpp2039(LEVEL, FLAGS, MSG, _a12) \
    WPP_LOG_ALWAYS(WPP_EX_LEVEL_FLAGS(LEVEL, FLAGS), MSG, _a12) \
    WPP_LEVEL_FLAGS_PRE(LEVEL, FLAGS) \
    WPP_ANNOTATE(Vc4Display_cpp2039) \
    (( \
        WPP_CHECK_INIT WPP_LEVEL_FLAGS_ENABLED(LEVEL, FLAGS) \
        ?   WPP_INVOKE_WPP_DEBUG((MSG, _a12)), \
            WPP_SF_sDd( \
                WPP_LEVEL_FLAGS_LOGGER(LEVEL, FLAGS) \
                104, \
                WPP_LOCAL_TraceGuids+0, __FILE__, __LINE__, _a12), \
            1 \
        :   0 \
    )) \
    WPP_LEVEL_FLAGS_POST(LEVEL, FLAGS)
#endif // ENABLE_WPP_RECORDER

// WPP_CALL_Vc4Display_cpp2048
#ifndef WPP_LEVEL_FLAGS_PRE
#  define WPP_LEVEL_FLAGS_PRE(LEVEL,FLAGS)
#endif
#ifndef WPP_LEVEL_FLAGS_POST
#  define WPP_LEVEL_FLAGS_POST(LEVEL,FLAGS)
#endif
#if ENABLE_WPP_RECORDER
#if ENABLE_WPP_TRACE_FILTERING_WITH_WPP_RECORDER
#define WPP_CALL_Vc4Display_cpp2048(LEVEL, FLAGS, MSG, _a12) \
    WPP_LOG_ALWAYS(WPP_EX_LEVEL_FLAGS(LEVEL, FLAGS), MSG, _a12) \
    WPP_LEVEL_FLAGS_PRE(LEVEL, FLAGS) \
    do {\
        WPP_ANNOTATE(Vc4Display_cpp2048) 0; \
        BOOLEAN wppEnabled = WPP_CHECK_INIT WPP_LEVEL_FLAGS_ENABLED(LEVEL, FLAGS); \
        BOOLEAN recorderEnabled = WPP_RECORDER_CHECK_INIT WPP_RECORDER_LEVEL_FLAGS_FILTER(LEVEL, FLAGS); \
        if (wppEnabled || recorderEnabled) { \
            WPP_INVOKE_WPP_DEBUG((MSG, _a12)); \
            WPP_RECORDER_AND_TRACE_SF_sDd( \
                     WPP_LEVEL_FLAGS_LOGGER(LEVEL, FLAGS) \
                     wppEnabled, recorderEnabled, \
                     WPP_RECORDER_LEVEL_FLAGS_ARGS(LEVEL, FLAGS), \
                     105, \
                     WPP_LOCAL_TraceGuids+0, __FILE__, __LINE__, _a12);\
        } \
    } \
    while(0) \
    WPP_LEVEL_FLAGS_POST(LEVEL, FLAGS)
#else // ENABLE_WPP_TRACE_FILTERING_WITH_WPP_RECORDER
#define WPP_CALL_Vc4Display_cpp2048(LEVEL, FLAGS, MSG, _a12) \
    WPP_LOG_ALWAYS(WPP_EX_LEVEL_FLAGS(LEVEL, FLAGS), MSG, _a12) \
    WPP_LEVEL_FLAGS_PRE(LEVEL, FLAGS) \
    WPP_ANNOTATE(Vc4Display_cpp2048) \
    (( \
        WPP_RECORDER_CHECK_INIT WPP_RECORDER_LEVEL_FLAGS_FILTER(LEVEL, FLAGS) \
        ?   WPP_INVOKE_WPP_DEBUG((MSG, _a12)), \
            WPP_RECORDER_SF_sDd( \
                WPP_RECORDER_LEVEL_FLAGS_ARGS(LEVEL, FLAGS), \
                105, \
                WPP_LOCAL_TraceGuids+0, __FILE__, __LINE__, _a12), \
            1 \
        :   0 \
    )) \
    WPP_LEVEL_FLAGS_POST(LEVEL, FLAGS)
#endif // ENABLE_WPP_TRACE_FILTERING_WITH_WPP_RECORDER
#else  // ENABLE_WPP_RECORDER
#define WPP_CALL_Vc4Display_cpp2048(LEVEL, FLAGS, MSG, _a12) \
    WPP_LOG_ALWAYS(WPP_EX_LEVEL_FLAGS(LEVEL, FLAGS), MSG, _a12) \
    WPP_LEVEL_FLAGS_PRE(LEVEL, FLAGS) \
    WPP_ANNOTATE(Vc4Display_cpp2048) \
    (( \
        WPP_CHECK_INIT WPP_LEVEL_FLAGS_ENABLED(LEVEL, FLAGS) \
        ?   WPP_INVOKE_WPP_DEBUG((MSG, _a12)), \
            WPP_SF_sDd( \
                WPP_LEVEL_FLAGS_LOGGER(LEVEL, FLAGS) \
                105, \
                WPP_LOCAL_TraceGuids+0, __FILE__, __LINE__, _a12), \
            1 \
        :   0 \
    )) \
    WPP_LEVEL_FLAGS_POST(LEVEL, FLAGS)
#endif // ENABLE_WPP_RECORDER

// WPP_CALL_Vc4Display_cpp2057
#ifndef WPP_LEVEL_FLAGS_PRE
#  define WPP_LEVEL_FLAGS_PRE(LEVEL,FLAGS)
#endif
#ifndef WPP_LEVEL_FLAGS_POST
#  define WPP_LEVEL_FLAGS_POST(LEVEL,FLAGS)
#endif
#if ENABLE_WPP_RECORDER
#if ENABLE_WPP_TRACE_FILTERING_WITH_WPP_RECORDER
#define WPP_CALL_Vc4Display_cpp2057(LEVEL, FLAGS, MSG, _a12, _a13) \
    WPP_LOG_ALWAYS(WPP_EX_LEVEL_FLAGS(LEVEL, FLAGS), MSG, _a12, _a13) \
    WPP_LEVEL_FLAGS_PRE(LEVEL, FLAGS) \
    do {\
        WPP_ANNOTATE(Vc4Display_cpp2057) 0; \
        BOOLEAN wppEnabled = WPP_CHECK_INIT WPP_LEVEL_FLAGS_ENABLED(LEVEL, FLAGS); \
        BOOLEAN recorderEnabled = WPP_RECORDER_CHECK_INIT WPP_RECORDER_LEVEL_FLAGS_FILTER(LEVEL, FLAGS); \
        if (wppEnabled || recorderEnabled) { \
            WPP_INVOKE_WPP_DEBUG((MSG, _a12, _a13)); \
            WPP_RECORDER_AND_TRACE_SF_sDdd( \
                     WPP_LEVEL_FLAGS_LOGGER(LEVEL, FLAGS) \
                     wppEnabled, recorderEnabled, \
                     WPP_RECORDER_LEVEL_FLAGS_ARGS(LEVEL, FLAGS), \
                     106, \
                     WPP_LOCAL_TraceGuids+0, __FILE__, __LINE__, _a12, _a13);\
        } \
    } \
    while(0) \
    WPP_LEVEL_FLAGS_POST(LEVEL, FLAGS)
#else // ENABLE_WPP_TRACE_FILTERING_WITH_WPP_RECORDER
#define WPP_CALL_Vc4Display_cpp2057(LEVEL, FLAGS, MSG, _a12, _a13) \
    WPP_LOG_ALWAYS(WPP_EX_LEVEL_FLAGS(LEVEL, FLAGS), MSG, _a12, _a13) \
    WPP_LEVEL_FLAGS_PRE(LEVEL, FLAGS) \
    WPP_ANNOTATE(Vc4Display_cpp2057) \
    (( \
        WPP_RECORDER_CHECK_INIT WPP_RECORDER_LEVEL_FLAGS_FILTER(LEVEL, FLAGS) \
        ?   WPP_INVOKE_WPP_DEBUG((MSG, _a12, _a13)), \
            WPP_RECORDER_SF_sDdd( \
                WPP_RECORDER_LEVEL_FLAGS_ARGS(LEVEL, FLAGS), \
                106, \
                WPP_LOCAL_TraceGuids+0, __FILE__, __LINE__, _a12, _a13), \
            1 \
        :   0 \
    )) \
    WPP_LEVEL_FLAGS_POST(LEVEL, FLAGS)
#endif // ENABLE_WPP_TRACE_FILTERING_WITH_WPP_RECORDER
#else  // ENABLE_WPP_RECORDER
#define WPP_CALL_Vc4Display_cpp2057(LEVEL, FLAGS, MSG, _a12, _a13) \
    WPP_LOG_ALWAYS(WPP_EX_LEVEL_FLAGS(LEVEL, FLAGS), MSG, _a12, _a13) \
    WPP_LEVEL_FLAGS_PRE(LEVEL, FLAGS) \
    WPP_ANNOTATE(Vc4Display_cpp2057) \
    (( \
        WPP_CHECK_INIT WPP_LEVEL_FLAGS_ENABLED(LEVEL, FLAGS) \
        ?   WPP_INVOKE_WPP_DEBUG((MSG, _a12, _a13)), \
            WPP_SF_sDdd( \
                WPP_LEVEL_FLAGS_LOGGER(LEVEL, FLAGS) \
                106, \
                WPP_LOCAL_TraceGuids+0, __FILE__, __LINE__, _a12, _a13), \
            1 \
        :   0 \
    )) \
    WPP_LEVEL_FLAGS_POST(LEVEL, FLAGS)
#endif // ENABLE_WPP_RECORDER

// WPP_CALL_Vc4Display_cpp2078
#ifndef WPP_LEVEL_FLAGS_PRE
#  define WPP_LEVEL_FLAGS_PRE(LEVEL,FLAGS)
#endif
#ifndef WPP_LEVEL_FLAGS_POST
#  define WPP_LEVEL_FLAGS_POST(LEVEL,FLAGS)
#endif
#if ENABLE_WPP_RECORDER
#if ENABLE_WPP_TRACE_FILTERING_WITH_WPP_RECORDER
#define WPP_CALL_Vc4Display_cpp2078(LEVEL, FLAGS, MSG, _a12) \
    WPP_LOG_ALWAYS(WPP_EX_LEVEL_FLAGS(LEVEL, FLAGS), MSG, _a12) \
    WPP_LEVEL_FLAGS_PRE(LEVEL, FLAGS) \
    do {\
        WPP_ANNOTATE(Vc4Display_cpp2078) 0; \
        BOOLEAN wppEnabled = WPP_CHECK_INIT WPP_LEVEL_FLAGS_ENABLED(LEVEL, FLAGS); \
        BOOLEAN recorderEnabled = WPP_RECORDER_CHECK_INIT WPP_RECORDER_LEVEL_FLAGS_FILTER(LEVEL, FLAGS); \
        if (wppEnabled || recorderEnabled) { \
            WPP_INVOKE_WPP_DEBUG((MSG, _a12)); \
            WPP_RECORDER_AND_TRACE_SF_sDd( \
                     WPP_LEVEL_FLAGS_LOGGER(LEVEL, FLAGS) \
                     wppEnabled, recorderEnabled, \
                     WPP_RECORDER_LEVEL_FLAGS_ARGS(LEVEL, FLAGS), \
                     107, \
                     WPP_LOCAL_TraceGuids+0, __FILE__, __LINE__, _a12);\
        } \
    } \
    while(0) \
    WPP_LEVEL_FLAGS_POST(LEVEL, FLAGS)
#else // ENABLE_WPP_TRACE_FILTERING_WITH_WPP_RECORDER
#define WPP_CALL_Vc4Display_cpp2078(LEVEL, FLAGS, MSG, _a12) \
    WPP_LOG_ALWAYS(WPP_EX_LEVEL_FLAGS(LEVEL, FLAGS), MSG, _a12) \
    WPP_LEVEL_FLAGS_PRE(LEVEL, FLAGS) \
    WPP_ANNOTATE(Vc4Display_cpp2078) \
    (( \
        WPP_RECORDER_CHECK_INIT WPP_RECORDER_LEVEL_FLAGS_FILTER(LEVEL, FLAGS) \
        ?   WPP_INVOKE_WPP_DEBUG((MSG, _a12)), \
            WPP_RECORDER_SF_sDd( \
                WPP_RECORDER_LEVEL_FLAGS_ARGS(LEVEL, FLAGS), \
                107, \
                WPP_LOCAL_TraceGuids+0, __FILE__, __LINE__, _a12), \
            1 \
        :   0 \
    )) \
    WPP_LEVEL_FLAGS_POST(LEVEL, FLAGS)
#endif // ENABLE_WPP_TRACE_FILTERING_WITH_WPP_RECORDER
#else  // ENABLE_WPP_RECORDER
#define WPP_CALL_Vc4Display_cpp2078(LEVEL, FLAGS, MSG, _a12) \
    WPP_LOG_ALWAYS(WPP_EX_LEVEL_FLAGS(LEVEL, FLAGS), MSG, _a12) \
    WPP_LEVEL_FLAGS_PRE(LEVEL, FLAGS) \
    WPP_ANNOTATE(Vc4Display_cpp2078) \
    (( \
        WPP_CHECK_INIT WPP_LEVEL_FLAGS_ENABLED(LEVEL, FLAGS) \
        ?   WPP_INVOKE_WPP_DEBUG((MSG, _a12)), \
            WPP_SF_sDd( \
                WPP_LEVEL_FLAGS_LOGGER(LEVEL, FLAGS) \
                107, \
                WPP_LOCAL_TraceGuids+0, __FILE__, __LINE__, _a12), \
            1 \
        :   0 \
    )) \
    WPP_LEVEL_FLAGS_POST(LEVEL, FLAGS)
#endif // ENABLE_WPP_RECORDER

// WPP_CALL_Vc4Display_cpp2087
#ifndef WPP_LEVEL_FLAGS_PRE
#  define WPP_LEVEL_FLAGS_PRE(LEVEL,FLAGS)
#endif
#ifndef WPP_LEVEL_FLAGS_POST
#  define WPP_LEVEL_FLAGS_POST(LEVEL,FLAGS)
#endif
#if ENABLE_WPP_RECORDER
#if ENABLE_WPP_TRACE_FILTERING_WITH_WPP_RECORDER
#define WPP_CALL_Vc4Display_cpp2087(LEVEL, FLAGS, MSG, _a12) \
    WPP_LOG_ALWAYS(WPP_EX_LEVEL_FLAGS(LEVEL, FLAGS), MSG, _a12) \
    WPP_LEVEL_FLAGS_PRE(LEVEL, FLAGS) \
    do {\
        WPP_ANNOTATE(Vc4Display_cpp2087) 0; \
        BOOLEAN wppEnabled = WPP_CHECK_INIT WPP_LEVEL_FLAGS_ENABLED(LEVEL, FLAGS); \
        BOOLEAN recorderEnabled = WPP_RECORDER_CHECK_INIT WPP_RECORDER_LEVEL_FLAGS_FILTER(LEVEL, FLAGS); \
        if (wppEnabled || recorderEnabled) { \
            WPP_INVOKE_WPP_DEBUG((MSG, _a12)); \
            WPP_RECORDER_AND_TRACE_SF_sDd( \
                     WPP_LEVEL_FLAGS_LOGGER(LEVEL, FLAGS) \
                     wppEnabled, recorderEnabled, \
                     WPP_RECORDER_LEVEL_FLAGS_ARGS(LEVEL, FLAGS), \
                     108, \
                     WPP_LOCAL_TraceGuids+0, __FILE__, __LINE__, _a12);\
        } \
    } \
    while(0) \
    WPP_LEVEL_FLAGS_POST(LEVEL, FLAGS)
#else // ENABLE_WPP_TRACE_FILTERING_WITH_WPP_RECORDER
#define WPP_CALL_Vc4Display_cpp2087(LEVEL, FLAGS, MSG, _a12) \
    WPP_LOG_ALWAYS(WPP_EX_LEVEL_FLAGS(LEVEL, FLAGS), MSG, _a12) \
    WPP_LEVEL_FLAGS_PRE(LEVEL, FLAGS) \
    WPP_ANNOTATE(Vc4Display_cpp2087) \
    (( \
        WPP_RECORDER_CHECK_INIT WPP_RECORDER_LEVEL_FLAGS_FILTER(LEVEL, FLAGS) \
        ?   WPP_INVOKE_WPP_DEBUG((MSG, _a12)), \
            WPP_RECORDER_SF_sDd( \
                WPP_RECORDER_LEVEL_FLAGS_ARGS(LEVEL, FLAGS), \
                108, \
                WPP_LOCAL_TraceGuids+0, __FILE__, __LINE__, _a12), \
            1 \
        :   0 \
    )) \
    WPP_LEVEL_FLAGS_POST(LEVEL, FLAGS)
#endif // ENABLE_WPP_TRACE_FILTERING_WITH_WPP_RECORDER
#else  // ENABLE_WPP_RECORDER
#define WPP_CALL_Vc4Display_cpp2087(LEVEL, FLAGS, MSG, _a12) \
    WPP_LOG_ALWAYS(WPP_EX_LEVEL_FLAGS(LEVEL, FLAGS), MSG, _a12) \
    WPP_LEVEL_FLAGS_PRE(LEVEL, FLAGS) \
    WPP_ANNOTATE(Vc4Display_cpp2087) \
    (( \
        WPP_CHECK_INIT WPP_LEVEL_FLAGS_ENABLED(LEVEL, FLAGS) \
        ?   WPP_INVOKE_WPP_DEBUG((MSG, _a12)), \
            WPP_SF_sDd( \
                WPP_LEVEL_FLAGS_LOGGER(LEVEL, FLAGS) \
                108, \
                WPP_LOCAL_TraceGuids+0, __FILE__, __LINE__, _a12), \
            1 \
        :   0 \
    )) \
    WPP_LEVEL_FLAGS_POST(LEVEL, FLAGS)
#endif // ENABLE_WPP_RECORDER

// WPP_CALL_Vc4Display_cpp2097
#ifndef WPP_LEVEL_FLAGS_PRE
#  define WPP_LEVEL_FLAGS_PRE(LEVEL,FLAGS)
#endif
#ifndef WPP_LEVEL_FLAGS_POST
#  define WPP_LEVEL_FLAGS_POST(LEVEL,FLAGS)
#endif
#if ENABLE_WPP_RECORDER
#if ENABLE_WPP_TRACE_FILTERING_WITH_WPP_RECORDER
#define WPP_CALL_Vc4Display_cpp2097(LEVEL, FLAGS, MSG, _a12) \
    WPP_LOG_ALWAYS(WPP_EX_LEVEL_FLAGS(LEVEL, FLAGS), MSG, _a12) \
    WPP_LEVEL_FLAGS_PRE(LEVEL, FLAGS) \
    do {\
        WPP_ANNOTATE(Vc4Display_cpp2097) 0; \
        BOOLEAN wppEnabled = WPP_CHECK_INIT WPP_LEVEL_FLAGS_ENABLED(LEVEL, FLAGS); \
        BOOLEAN recorderEnabled = WPP_RECORDER_CHECK_INIT WPP_RECORDER_LEVEL_FLAGS_FILTER(LEVEL, FLAGS); \
        if (wppEnabled || recorderEnabled) { \
            WPP_INVOKE_WPP_DEBUG((MSG, _a12)); \
            WPP_RECORDER_AND_TRACE_SF_sDd( \
                     WPP_LEVEL_FLAGS_LOGGER(LEVEL, FLAGS) \
                     wppEnabled, recorderEnabled, \
                     WPP_RECORDER_LEVEL_FLAGS_ARGS(LEVEL, FLAGS), \
                     109, \
                     WPP_LOCAL_TraceGuids+0, __FILE__, __LINE__, _a12);\
        } \
    } \
    while(0) \
    WPP_LEVEL_FLAGS_POST(LEVEL, FLAGS)
#else // ENABLE_WPP_TRACE_FILTERING_WITH_WPP_RECORDER
#define WPP_CALL_Vc4Display_cpp2097(LEVEL, FLAGS, MSG, _a12) \
    WPP_LOG_ALWAYS(WPP_EX_LEVEL_FLAGS(LEVEL, FLAGS), MSG, _a12) \
    WPP_LEVEL_FLAGS_PRE(LEVEL, FLAGS) \
    WPP_ANNOTATE(Vc4Display_cpp2097) \
    (( \
        WPP_RECORDER_CHECK_INIT WPP_RECORDER_LEVEL_FLAGS_FILTER(LEVEL, FLAGS) \
        ?   WPP_INVOKE_WPP_DEBUG((MSG, _a12)), \
            WPP_RECORDER_SF_sDd( \
                WPP_RECORDER_LEVEL_FLAGS_ARGS(LEVEL, FLAGS), \
                109, \
                WPP_LOCAL_TraceGuids+0, __FILE__, __LINE__, _a12), \
            1 \
        :   0 \
    )) \
    WPP_LEVEL_FLAGS_POST(LEVEL, FLAGS)
#endif // ENABLE_WPP_TRACE_FILTERING_WITH_WPP_RECORDER
#else  // ENABLE_WPP_RECORDER
#define WPP_CALL_Vc4Display_cpp2097(LEVEL, FLAGS, MSG, _a12) \
    WPP_LOG_ALWAYS(WPP_EX_LEVEL_FLAGS(LEVEL, FLAGS), MSG, _a12) \
    WPP_LEVEL_FLAGS_PRE(LEVEL, FLAGS) \
    WPP_ANNOTATE(Vc4Display_cpp2097) \
    (( \
        WPP_CHECK_INIT WPP_LEVEL_FLAGS_ENABLED(LEVEL, FLAGS) \
        ?   WPP_INVOKE_WPP_DEBUG((MSG, _a12)), \
            WPP_SF_sDd( \
                WPP_LEVEL_FLAGS_LOGGER(LEVEL, FLAGS) \
                109, \
                WPP_LOCAL_TraceGuids+0, __FILE__, __LINE__, _a12), \
            1 \
        :   0 \
    )) \
    WPP_LEVEL_FLAGS_POST(LEVEL, FLAGS)
#endif // ENABLE_WPP_RECORDER

// WPP_CALL_Vc4Display_cpp2109
#ifndef WPP_LEVEL_FLAGS_PRE
#  define WPP_LEVEL_FLAGS_PRE(LEVEL,FLAGS)
#endif
#ifndef WPP_LEVEL_FLAGS_POST
#  define WPP_LEVEL_FLAGS_POST(LEVEL,FLAGS)
#endif
#if ENABLE_WPP_RECORDER
#if ENABLE_WPP_TRACE_FILTERING_WITH_WPP_RECORDER
#define WPP_CALL_Vc4Display_cpp2109(LEVEL, FLAGS, MSG, _a12) \
    WPP_LOG_ALWAYS(WPP_EX_LEVEL_FLAGS(LEVEL, FLAGS), MSG, _a12) \
    WPP_LEVEL_FLAGS_PRE(LEVEL, FLAGS) \
    do {\
        WPP_ANNOTATE(Vc4Display_cpp2109) 0; \
        BOOLEAN wppEnabled = WPP_CHECK_INIT WPP_LEVEL_FLAGS_ENABLED(LEVEL, FLAGS); \
        BOOLEAN recorderEnabled = WPP_RECORDER_CHECK_INIT WPP_RECORDER_LEVEL_FLAGS_FILTER(LEVEL, FLAGS); \
        if (wppEnabled || recorderEnabled) { \
            WPP_INVOKE_WPP_DEBUG((MSG, _a12)); \
            WPP_RECORDER_AND_TRACE_SF_sDd( \
                     WPP_LEVEL_FLAGS_LOGGER(LEVEL, FLAGS) \
                     wppEnabled, recorderEnabled, \
                     WPP_RECORDER_LEVEL_FLAGS_ARGS(LEVEL, FLAGS), \
                     110, \
                     WPP_LOCAL_TraceGuids+0, __FILE__, __LINE__, _a12);\
        } \
    } \
    while(0) \
    WPP_LEVEL_FLAGS_POST(LEVEL, FLAGS)
#else // ENABLE_WPP_TRACE_FILTERING_WITH_WPP_RECORDER
#define WPP_CALL_Vc4Display_cpp2109(LEVEL, FLAGS, MSG, _a12) \
    WPP_LOG_ALWAYS(WPP_EX_LEVEL_FLAGS(LEVEL, FLAGS), MSG, _a12) \
    WPP_LEVEL_FLAGS_PRE(LEVEL, FLAGS) \
    WPP_ANNOTATE(Vc4Display_cpp2109) \
    (( \
        WPP_RECORDER_CHECK_INIT WPP_RECORDER_LEVEL_FLAGS_FILTER(LEVEL, FLAGS) \
        ?   WPP_INVOKE_WPP_DEBUG((MSG, _a12)), \
            WPP_RECORDER_SF_sDd( \
                WPP_RECORDER_LEVEL_FLAGS_ARGS(LEVEL, FLAGS), \
                110, \
                WPP_LOCAL_TraceGuids+0, __FILE__, __LINE__, _a12), \
            1 \
        :   0 \
    )) \
    WPP_LEVEL_FLAGS_POST(LEVEL, FLAGS)
#endif // ENABLE_WPP_TRACE_FILTERING_WITH_WPP_RECORDER
#else  // ENABLE_WPP_RECORDER
#define WPP_CALL_Vc4Display_cpp2109(LEVEL, FLAGS, MSG, _a12) \
    WPP_LOG_ALWAYS(WPP_EX_LEVEL_FLAGS(LEVEL, FLAGS), MSG, _a12) \
    WPP_LEVEL_FLAGS_PRE(LEVEL, FLAGS) \
    WPP_ANNOTATE(Vc4Display_cpp2109) \
    (( \
        WPP_CHECK_INIT WPP_LEVEL_FLAGS_ENABLED(LEVEL, FLAGS) \
        ?   WPP_INVOKE_WPP_DEBUG((MSG, _a12)), \
            WPP_SF_sDd( \
                WPP_LEVEL_FLAGS_LOGGER(LEVEL, FLAGS) \
                110, \
                WPP_LOCAL_TraceGuids+0, __FILE__, __LINE__, _a12), \
            1 \
        :   0 \
    )) \
    WPP_LEVEL_FLAGS_POST(LEVEL, FLAGS)
#endif // ENABLE_WPP_RECORDER

// WPP_CALL_Vc4Display_cpp2121
#ifndef WPP_LEVEL_FLAGS_PRE
#  define WPP_LEVEL_FLAGS_PRE(LEVEL,FLAGS)
#endif
#ifndef WPP_LEVEL_FLAGS_POST
#  define WPP_LEVEL_FLAGS_POST(LEVEL,FLAGS)
#endif
#if ENABLE_WPP_RECORDER
#if ENABLE_WPP_TRACE_FILTERING_WITH_WPP_RECORDER
#define WPP_CALL_Vc4Display_cpp2121(LEVEL, FLAGS, MSG, _a12) \
    WPP_LOG_ALWAYS(WPP_EX_LEVEL_FLAGS(LEVEL, FLAGS), MSG, _a12) \
    WPP_LEVEL_FLAGS_PRE(LEVEL, FLAGS) \
    do {\
        WPP_ANNOTATE(Vc4Display_cpp2121) 0; \
        BOOLEAN wppEnabled = WPP_CHECK_INIT WPP_LEVEL_FLAGS_ENABLED(LEVEL, FLAGS); \
        BOOLEAN recorderEnabled = WPP_RECORDER_CHECK_INIT WPP_RECORDER_LEVEL_FLAGS_FILTER(LEVEL, FLAGS); \
        if (wppEnabled || recorderEnabled) { \
            WPP_INVOKE_WPP_DEBUG((MSG, _a12)); \
            WPP_RECORDER_AND_TRACE_SF_sDd( \
                     WPP_LEVEL_FLAGS_LOGGER(LEVEL, FLAGS) \
                     wppEnabled, recorderEnabled, \
                     WPP_RECORDER_LEVEL_FLAGS_ARGS(LEVEL, FLAGS), \
                     111, \
                     WPP_LOCAL_TraceGuids+0, __FILE__, __LINE__, _a12);\
        } \
    } \
    while(0) \
    WPP_LEVEL_FLAGS_POST(LEVEL, FLAGS)
#else // ENABLE_WPP_TRACE_FILTERING_WITH_WPP_RECORDER
#define WPP_CALL_Vc4Display_cpp2121(LEVEL, FLAGS, MSG, _a12) \
    WPP_LOG_ALWAYS(WPP_EX_LEVEL_FLAGS(LEVEL, FLAGS), MSG, _a12) \
    WPP_LEVEL_FLAGS_PRE(LEVEL, FLAGS) \
    WPP_ANNOTATE(Vc4Display_cpp2121) \
    (( \
        WPP_RECORDER_CHECK_INIT WPP_RECORDER_LEVEL_FLAGS_FILTER(LEVEL, FLAGS) \
        ?   WPP_INVOKE_WPP_DEBUG((MSG, _a12)), \
            WPP_RECORDER_SF_sDd( \
                WPP_RECORDER_LEVEL_FLAGS_ARGS(LEVEL, FLAGS), \
                111, \
                WPP_LOCAL_TraceGuids+0, __FILE__, __LINE__, _a12), \
            1 \
        :   0 \
    )) \
    WPP_LEVEL_FLAGS_POST(LEVEL, FLAGS)
#endif // ENABLE_WPP_TRACE_FILTERING_WITH_WPP_RECORDER
#else  // ENABLE_WPP_RECORDER
#define WPP_CALL_Vc4Display_cpp2121(LEVEL, FLAGS, MSG, _a12) \
    WPP_LOG_ALWAYS(WPP_EX_LEVEL_FLAGS(LEVEL, FLAGS), MSG, _a12) \
    WPP_LEVEL_FLAGS_PRE(LEVEL, FLAGS) \
    WPP_ANNOTATE(Vc4Display_cpp2121) \
    (( \
        WPP_CHECK_INIT WPP_LEVEL_FLAGS_ENABLED(LEVEL, FLAGS) \
        ?   WPP_INVOKE_WPP_DEBUG((MSG, _a12)), \
            WPP_SF_sDd( \
                WPP_LEVEL_FLAGS_LOGGER(LEVEL, FLAGS) \
                111, \
                WPP_LOCAL_TraceGuids+0, __FILE__, __LINE__, _a12), \
            1 \
        :   0 \
    )) \
    WPP_LEVEL_FLAGS_POST(LEVEL, FLAGS)
#endif // ENABLE_WPP_RECORDER

// WPP_CALL_Vc4Display_cpp2132
#ifndef WPP_LEVEL_FLAGS_PRE
#  define WPP_LEVEL_FLAGS_PRE(LEVEL,FLAGS)
#endif
#ifndef WPP_LEVEL_FLAGS_POST
#  define WPP_LEVEL_FLAGS_POST(LEVEL,FLAGS)
#endif
#if ENABLE_WPP_RECORDER
#if ENABLE_WPP_TRACE_FILTERING_WITH_WPP_RECORDER
#define WPP_CALL_Vc4Display_cpp2132(LEVEL, FLAGS, MSG, _a12) \
    WPP_LOG_ALWAYS(WPP_EX_LEVEL_FLAGS(LEVEL, FLAGS), MSG, _a12) \
    WPP_LEVEL_FLAGS_PRE(LEVEL, FLAGS) \
    do {\
        WPP_ANNOTATE(Vc4Display_cpp2132) 0; \
        BOOLEAN wppEnabled = WPP_CHECK_INIT WPP_LEVEL_FLAGS_ENABLED(LEVEL, FLAGS); \
        BOOLEAN recorderEnabled = WPP_RECORDER_CHECK_INIT WPP_RECORDER_LEVEL_FLAGS_FILTER(LEVEL, FLAGS); \
        if (wppEnabled || recorderEnabled) { \
            WPP_INVOKE_WPP_DEBUG((MSG, _a12)); \
            WPP_RECORDER_AND_TRACE_SF_sDd( \
                     WPP_LEVEL_FLAGS_LOGGER(LEVEL, FLAGS) \
                     wppEnabled, recorderEnabled, \
                     WPP_RECORDER_LEVEL_FLAGS_ARGS(LEVEL, FLAGS), \
                     112, \
                     WPP_LOCAL_TraceGuids+0, __FILE__, __LINE__, _a12);\
        } \
    } \
    while(0) \
    WPP_LEVEL_FLAGS_POST(LEVEL, FLAGS)
#else // ENABLE_WPP_TRACE_FILTERING_WITH_WPP_RECORDER
#define WPP_CALL_Vc4Display_cpp2132(LEVEL, FLAGS, MSG, _a12) \
    WPP_LOG_ALWAYS(WPP_EX_LEVEL_FLAGS(LEVEL, FLAGS), MSG, _a12) \
    WPP_LEVEL_FLAGS_PRE(LEVEL, FLAGS) \
    WPP_ANNOTATE(Vc4Display_cpp2132) \
    (( \
        WPP_RECORDER_CHECK_INIT WPP_RECORDER_LEVEL_FLAGS_FILTER(LEVEL, FLAGS) \
        ?   WPP_INVOKE_WPP_DEBUG((MSG, _a12)), \
            WPP_RECORDER_SF_sDd( \
                WPP_RECORDER_LEVEL_FLAGS_ARGS(LEVEL, FLAGS), \
                112, \
                WPP_LOCAL_TraceGuids+0, __FILE__, __LINE__, _a12), \
            1 \
        :   0 \
    )) \
    WPP_LEVEL_FLAGS_POST(LEVEL, FLAGS)
#endif // ENABLE_WPP_TRACE_FILTERING_WITH_WPP_RECORDER
#else  // ENABLE_WPP_RECORDER
#define WPP_CALL_Vc4Display_cpp2132(LEVEL, FLAGS, MSG, _a12) \
    WPP_LOG_ALWAYS(WPP_EX_LEVEL_FLAGS(LEVEL, FLAGS), MSG, _a12) \
    WPP_LEVEL_FLAGS_PRE(LEVEL, FLAGS) \
    WPP_ANNOTATE(Vc4Display_cpp2132) \
    (( \
        WPP_CHECK_INIT WPP_LEVEL_FLAGS_ENABLED(LEVEL, FLAGS) \
        ?   WPP_INVOKE_WPP_DEBUG((MSG, _a12)), \
            WPP_SF_sDd( \
                WPP_LEVEL_FLAGS_LOGGER(LEVEL, FLAGS) \
                112, \
                WPP_LOCAL_TraceGuids+0, __FILE__, __LINE__, _a12), \
            1 \
        :   0 \
    )) \
    WPP_LEVEL_FLAGS_POST(LEVEL, FLAGS)
#endif // ENABLE_WPP_RECORDER

// Functions
#undef DoDebugTrace
#define DoDebugTrace WPP_(CALL)
#undef DoTraceMessage
#define DoTraceMessage WPP_(CALL)
#undef ROS_ASSERT
#define ROS_ASSERT WPP_(CALL)
#undef ROS_CRITICAL_ASSERT
#define ROS_CRITICAL_ASSERT WPP_(CALL)
#undef ROS_LOG_ASSERTION
#define ROS_LOG_ASSERTION WPP_(CALL)
#undef ROS_LOG_CRITICAL_ERROR
#define ROS_LOG_CRITICAL_ERROR WPP_(CALL)
#undef ROS_LOG_ERROR
#define ROS_LOG_ERROR WPP_(CALL)
#undef ROS_LOG_INFORMATION
#define ROS_LOG_INFORMATION WPP_(CALL)
#undef ROS_LOG_LOW_MEMORY
#define ROS_LOG_LOW_MEMORY WPP_(CALL)
#undef ROS_LOG_TRACE
#define ROS_LOG_TRACE WPP_(CALL)
#undef ROS_LOG_WARNING
#define ROS_LOG_WARNING WPP_(CALL)
#undef ROS_TRACE_EVENTS
#define ROS_TRACE_EVENTS WPP_(CALL)

#ifdef __cplusplus
} // extern "C"
#endif

