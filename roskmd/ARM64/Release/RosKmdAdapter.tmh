// 22da6affddb8d85eb01d0e3f86fc62af Generated file. Do not edit.
// File created by WPP compiler version 10.0.19041
// from template km-default.tpl

#pragma once

// template km-header.tpl

#ifdef  WPP_THIS_FILE
// included twice
#       define  WPP_ALREADY_INCLUDED
#       undef   WPP_THIS_FILE
#endif  // #ifdef WPP_THIS_FILE

#define WPP_THIS_FILE RosKmdAdapter_cpp

#ifndef WPP_ALREADY_INCLUDED

#define ENABLE_WPP_RECORDER 1
#define WPP_EMIT_FUNC_NAME 
#define WPP_KERNEL_MODE 

#include <evntrace.h>
#include <stddef.h>
#include <stdarg.h>
#include <wmistr.h>

#ifdef __cplusplus
extern "C" {
#endif

typedef
LONG
(*PFN_WPPQUERYTRACEINFORMATION) (
    IN  TRACE_INFORMATION_CLASS TraceInformationClass,
    OUT PVOID  TraceInformation,
    IN  ULONG  TraceInformationLength,
    OUT PULONG RequiredLength OPTIONAL,
    IN  PVOID  Buffer OPTIONAL
    );

typedef
LONG
(*PFN_WPPTRACEMESSAGE)(
    IN ULONG64  LoggerHandle,
    IN ULONG   MessageFlags,
    IN LPCGUID MessageGuid,
    IN USHORT  MessageNumber,
    IN ...
    );

typedef enum _WPP_TRACE_API_SUITE {
    WppTraceDisabledSuite,
    WppTraceWin2K,
    WppTraceWinXP,
    WppTraceTraceLH,
    WppTraceServer08,
    WppTraceMaxSuite
} WPP_TRACE_API_SUITE;

_IRQL_requires_same_
typedef
VOID
(NTAPI *PETW_CLASSIC_CALLBACK)(
    _In_ LPCGUID Guid,
    _In_ UCHAR ControlCode,
    _In_ PVOID EnableContext,
    _In_opt_ PVOID CallbackContext
    );

_IRQL_requires_same_
typedef
NTSTATUS
NTKERNELAPI
(FN_ETWREGISTERCLASSICPROVIDER)(
    _In_ LPCGUID ProviderGuid,
    _In_ ULONG Type,
    _In_ PETW_CLASSIC_CALLBACK EnableCallback,
    _In_opt_ PVOID CallbackContext,
    _Out_ PREGHANDLE RegHandle
    );

typedef FN_ETWREGISTERCLASSICPROVIDER *PFN_ETWREGISTERCLASSICPROVIDER;

typedef
BOOLEAN
NTKERNELAPI
(FN_WPPGETVERSION)(
    _Out_opt_ PULONG MajorVersion,
    _Out_opt_ PULONG MinorVersion,
    _Out_opt_ PULONG BuildNumber,
    _Out_opt_ PUNICODE_STRING CSDVersion
    );

typedef FN_WPPGETVERSION *PFN_WPPGETVERSION;

typedef
NTSTATUS
NTKERNELAPI
(FN_ETWUNREGISTER)(
    _In_ REGHANDLE RegHandle
    );

typedef FN_ETWUNREGISTER *PFN_ETWUNREGISTER;

#pragma prefast(suppress:__WARNING_ENCODE_GLOBAL_FUNCTION_POINTER, "this pointer can not be encoded");
__declspec(selectany) PFN_WPPQUERYTRACEINFORMATION   pfnWppQueryTraceInformation = NULL;

#pragma prefast(suppress:__WARNING_ENCODE_GLOBAL_FUNCTION_POINTER, "this pointer can not be encoded");
__declspec(selectany) PFN_WPPTRACEMESSAGE            pfnWppTraceMessage = NULL;

#pragma prefast(suppress:__WARNING_ENCODE_GLOBAL_FUNCTION_POINTER, "this pointer can not be encoded");
__declspec(selectany) PFN_ETWUNREGISTER              pfnEtwUnregister = NULL;

#pragma prefast(suppress:__WARNING_ENCODE_GLOBAL_FUNCTION_POINTER, "this pointer can not be encoded");
__declspec(selectany) PFN_ETWREGISTERCLASSICPROVIDER pfnEtwRegisterClassicProvider = NULL;

#pragma prefast(suppress:__WARNING_ENCODE_GLOBAL_FUNCTION_POINTER, "this pointer can not be encoded");
__declspec(selectany) PFN_WPPGETVERSION              pfnWppGetVersion = NULL;


__declspec(selectany) WPP_TRACE_API_SUITE            WPPTraceSuite = WppTraceDisabledSuite;

#if !defined(_NTRTL_)
#if !defined(_NTHAL_)
// fake RTL_TIME_ZONE_INFORMATION //
typedef int RTL_TIME_ZONE_INFORMATION;
#endif
#define _WMIKM_
#endif

#ifndef WPP_TRACE
#define WPP_TRACE pfnWppTraceMessage
#endif

#if ENABLE_WPP_RECORDER

#define _ENABLE_WPP_RECORDER TRUE

#ifndef WPP_RECORDER
#define WPP_RECORDER WppAutoLogTrace
#endif

//
// This setting is only applicable when IFR is enabled.
// Setting this to 1 will allow a WPP trace session to 
// capture trace messages as usual i.e it will require the
// user to provide WPP trace ENABLED and LOGGER macro. If 
// this is set to 0 by default the IFR trace filter also
// affects which trace messages land in the WPP trace session.
//
#if !defined(ENABLE_WPP_TRACE_FILTERING_WITH_WPP_RECORDER)
#define ENABLE_WPP_TRACE_FILTERING_WITH_WPP_RECORDER 0
#endif

#if !defined(WPP_RECORDER_LEVEL_FLAGS_ARGS)
#define WPP_RECORDER_LEVEL_FLAGS_ARGS(lvl, flags) WPP_CONTROL(WPP_BIT_ ## flags).AutoLogContext, lvl, WPP_BIT_ ## flags
#define WPP_RECORDER_LEVEL_FLAGS_FILTER(lvl,flags) (lvl < TRACE_LEVEL_VERBOSE || WPP_CONTROL(WPP_BIT_ ## flags).AutoLogVerboseEnabled)
#endif


#if !defined(WPP_RECORDER_LEVEL_ARGS)
#define WPP_RECORDER_LEVEL_ARGS(lvl) WPP_CONTROL(WPP_BIT_ ## lvl).AutoLogContext, 0, WPP_BIT_ ## lvl
#define WPP_RECORDER_LEVEL_FILTER(lvl) (WPP_CONTROL(WPP_BIT_ ## lvl).AutoLogVerboseEnabled)
#endif

NTSTATUS
WppAutoLogTrace(
    IN PVOID              AutoLogContext,
    IN UCHAR              MessageLevel,
    IN ULONG              MessageFlags,
    IN LPGUID             MessageGuid,
    IN USHORT             MessageNumber,
    IN ...
    );

#else
#define _ENABLE_WPP_RECORDER FALSE
#endif

VOID
WppLoadTracingSupport(
    VOID
    );

NTSTATUS
WppTraceCallback(
    _In_ UCHAR MinorFunction,
    _In_opt_ PVOID DataPath,
    _In_ ULONG BufferLength,
    _Inout_updates_bytes_(BufferLength) PVOID Buffer,
    _Inout_ PVOID Context,
    _Out_ PULONG Size
    );

#if !defined(WPP_TRACE_CONTROL_NULL_GUID)
DEFINE_GUID(WPP_TRACE_CONTROL_NULL_GUID, 0x00000000L, 0x0000, 0x0000, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00);
#endif

#define WPP_TRACE_CONTROL(Function,Buffer,BufferSize,ReturnSize) WppTraceCallback(Function,NULL,BufferSize,Buffer,&WPP_CB[0],&ReturnSize);

__inline ULONG64 WppQueryLogger(_In_opt_ PCWSTR LoggerName)
{
    if (WppTraceWinXP != WPPTraceSuite) {
        return (ULONG64)0;
    }

    ULONG ReturnLength;
    LONG Status;
    ULONG64 TraceHandle;
    UNICODE_STRING Buffer;

    RtlInitUnicodeString(&Buffer, LoggerName ? LoggerName : L"stdout");

    Status = pfnWppQueryTraceInformation(TraceHandleByNameClass,
                                         (PVOID)&TraceHandle,
                                         sizeof(TraceHandle),
                                         &ReturnLength,
                                         (PVOID)&Buffer
                                         );
    if (Status != STATUS_SUCCESS) {
        return (ULONG64)0;
    }

    return TraceHandle;
}

typedef LONG (*WMIENTRY_NEW)(
    _In_ UCHAR MinorFunction,
    _In_opt_ PVOID DataPath,
    _In_ ULONG BufferLength,
    _Inout_updates_bytes_(BufferLength) PVOID Buffer,
    _In_ PVOID Context,
    _Out_ PULONG Size
    );

typedef struct _WPP_TRACE_CONTROL_BLOCK
{
    WMIENTRY_NEW                        Callback;
    LPCGUID                             ControlGuid;
    struct _WPP_TRACE_CONTROL_BLOCK    *Next;
    __int64                             Logger;
    PUNICODE_STRING                     RegistryPath;
    UCHAR                               FlagsLen;
    UCHAR                               Level;
    USHORT                              Reserved;
    ULONG                               Flags[1];
    ULONG                               ReservedFlags;
    REGHANDLE                           RegHandle;
#if ENABLE_WPP_RECORDER
    PVOID                               AutoLogContext;
    USHORT                              AutoLogVerboseEnabled;
    USHORT                              AutoLogAttachToMiniDump;
#endif
} WPP_TRACE_CONTROL_BLOCK, *PWPP_TRACE_CONTROL_BLOCK;

VOID WppCleanupKm(_When_(_ENABLE_WPP_RECORDER, _In_) _When_(!_ENABLE_WPP_RECORDER, _In_opt_) PDRIVER_OBJECT DriverObject);

#define WPP_CLEANUP(DriverObject) WppCleanupKm((PDRIVER_OBJECT)DriverObject)

#define WPP_IsValidSid RtlValidSid
#define WPP_GetLengthSid RtlLengthSid

//
// Callback routine to be defined by the driver, which will be called from WPP callback
// WPP will pass current valued of : GUID, Logger, Enable, Flags, and Level
//
// To activate driver must define WPP_PRIVATE_ENABLE_CALLBACK in their code, sample below
// #define WPP_PRIVATE_ENABLE_CALLBACK MyPrivateCallback;
//
typedef
VOID
(*PFN_WPP_PRIVATE_ENABLE_CALLBACK)(
    _In_ LPCGUID Guid,
    _In_ __int64 Logger,
    _In_ BOOLEAN Enable,
    _In_ ULONG Flags,
    _In_ UCHAR Level);

#ifdef __cplusplus
} // extern "C"
#endif

#endif  // #ifndef WPP_ALREADY_INCLUDED

// template control.tpl

//
//     Defines a set of macro that expand control model specified
//     with WPP_CONTROL_GUIDS (example shown below)
//     into an enum of trace levels and required structures that
//     contain the mask of levels, logger handle and some information
//     required for registration.
//

#ifndef WPP_ALREADY_INCLUDED

#define WPP_EVAL(x) x
#define WPP_STR(x)  #x
#define WPP_STRINGIZE(x) WPP_STR(x)
#define WPP_GLUE(a, b)  a ## b
#define WPP_GLUE3(a, b, c)  a ## b ## c
#define WPP_GLUE4(a, b, c, d)  a ## b ## c ## d
#define WPP_XGLUE(a, b) WPP_GLUE(a, b)
#define WPP_XGLUE3(a, b, c) WPP_GLUE3(a, b, c)
#define WPP_XGLUE4(a, b, c, d) WPP_GLUE4(a, b, c, d)

///////////////////////////////////////////////////////////////////////////////////
//
// #define WPP_CONTROL_GUIDS \
//     WPP_DEFINE_CONTROL_GUID(Regular,(81b20fea,73a8,4b62,95bc,354477c97a6f), \
//       WPP_DEFINE_BIT(Error)      \
//       WPP_DEFINE_BIT(Unusual)    \
//       WPP_DEFINE_BIT(Noise)      \
//    )        \
//    WPP_DEFINE_CONTROL_GUID(HiFreq,(91b20fea,73a8,4b62,95bc,354477c97a6f), \
//       WPP_DEFINE_BIT(Entry)      \
//       WPP_DEFINE_BIT(Exit)       \
//       WPP_DEFINE_BIT(ApiCalls)   \
//       WPP_DEFINE_BIT(RandomJunk) \
//       WPP_DEFINE_BIT(LovePoem)   \
//    )

#ifdef __cplusplus
extern "C" {
#endif

#ifndef WPP_NO_CONTROL_GUIDS

#ifdef WPP_DEFAULT_CONTROL_GUID
#  ifdef WPP_CONTROL_GUIDS
#     error WPP_DEFAULT_CONTROL_GUID cannot be used together with WPP_CONTROL_GUIDS.
#  else // WPP_CONTROL_GUIDS
#     define WPP_CONTROL_GUIDS \
         WPP_DEFINE_CONTROL_GUID(Default,(WPP_DEFAULT_CONTROL_GUID), \
         WPP_DEFINE_BIT(Error)   \
         WPP_DEFINE_BIT(Unusual) \
         WPP_DEFINE_BIT(Noise)   \
      )
#  endif // WPP_CONTROL_GUIDS
#endif // WPP_DEFAULT_CONTROL_GUID

#ifndef WPP_CONTROL_GUIDS
#  pragma message(__FILE__ " : error : Please define control model via WPP_CONTROL_GUIDS or WPP_DEFAULT_CONTROL_GUID macros")
#  pragma message(__FILE__ " : error : don't forget to call WPP_INIT_TRACING and WPP_CLEANUP in your main, DriverEntry or DllInit")
#  pragma message(__FILE__ " : error : see tracewpp.doc for further information")
#  error WPP_CONTROL_GUIDS not defined.
#endif // WPP_CONTROL_GUIDS
// a set of macro to convert a guid in a form x(81b20fea,73a8,4b62,95bc,354477c97a6f)
// into either a a struct or text string

#define _WPPW(x) WPP_GLUE(L, x)

#define WPP_GUID_NORM(l,w1,w2,w3,ll) l ## w1 ## w2 ## w3 ## ll
#define WPP_GUID_TEXT(l,w1,w2,w3,ll) #l "-" #w1 "-" #w2 "-" #w3 "-" #ll
#define WPP_GUID_WTEXT(l,w1,w2,w3,ll) _WPPW(#l) L"-" _WPPW(#w1) L"-" _WPPW(#w2) L"-" _WPPW(#w3) L"-" _WPPW(#ll)
#define WPP_EXTRACT_BYTE(val,n) (((ULONGLONG)(0x ## val) >> (8 * n)) & 0xFF)
#define WPP_GUID_STRUCT(l,w1,w2,w3,ll) {0x ## l, 0x ## w1, 0x ## w2,\
     {WPP_EXTRACT_BYTE(w3, 1), WPP_EXTRACT_BYTE(w3, 0),\
      WPP_EXTRACT_BYTE(ll, 5), WPP_EXTRACT_BYTE(ll, 4),\
      WPP_EXTRACT_BYTE(ll, 3), WPP_EXTRACT_BYTE(ll, 2),\
      WPP_EXTRACT_BYTE(ll, 1), WPP_EXTRACT_BYTE(ll, 0)} }

#ifndef WPP_FORCEINLINE
#define WPP_FORCEINLINE __forceinline
#endif

// define an enum of control block names
//////
#define WPP_DEFINE_CONTROL_GUID(Name,Guid,Bits) WPP_XGLUE(WPP_CTL_, WPP_EVAL(Name)),
enum WPP_CTL_NAMES { WPP_CONTROL_GUIDS WPP_LAST_CTL};
#undef WPP_DEFINE_CONTROL_GUID

// define control guids
//////
#define WPP_DEFINE_CONTROL_GUID(Name,Guid,Bits) \
extern __declspec(selectany) const GUID WPP_XGLUE4(WPP_, ThisDir, _CTLGUID_, WPP_EVAL(Name)) = WPP_GUID_STRUCT Guid;
WPP_CONTROL_GUIDS
#undef WPP_DEFINE_CONTROL_GUID

// define enums of individual bits
/////
#define WPP_DEFINE_CONTROL_GUID(Name,Guid,Bits) \
    WPP_XGLUE(WPP_BLOCK_START_, WPP_EVAL(Name)) = WPP_XGLUE(WPP_CTL_, WPP_EVAL(Name)) * 0x10000, Bits WPP_XGLUE(WPP_BLOCK_END_, WPP_EVAL(Name)),
# define WPP_DEFINE_BIT(Name) WPP_BIT_ ## Name,
enum WPP_DEFINE_BIT_NAMES { WPP_CONTROL_GUIDS };
# undef WPP_DEFINE_BIT
#undef WPP_DEFINE_CONTROL_GUID

#define WPP_MASK(CTL)    (1 << ( ((CTL)-1) & 31 ))
#define WPP_FLAG_NO(CTL) ( (0xFFFF & ((CTL)-1) ) / 32)
#define WPP_CTRL_NO(CTL) ((CTL) >> 16)

// calculate how many DWORDs we need to get the required number of bits
// upper estimate. Sometimes will be off by one
#define WPP_DEFINE_CONTROL_GUID(Name,Guid,Bits) | WPP_XGLUE(WPP_BLOCK_END_, WPP_EVAL(Name))
enum _WPP_FLAG_LEN_ENUM { WPP_FLAG_LEN = 1 | ((0 WPP_CONTROL_GUIDS) & 0xFFFF) / 32 };
#undef WPP_DEFINE_CONTROL_GUID

//
// Check that maximum number of flags does not exceed 32
//
#ifndef C_ASSERT
#define C_ASSERT(e) typedef char __C_ASSERT__[(e)?1:-1]
#endif

#define MAX_NUMBER_OF_ETW_FLAGS 34 // 32 flags plus 2 separators
#define WPP_DEFINE_CONTROL_GUID(Name,Guid,Bits) && ((WPP_XGLUE(WPP_BLOCK_END_, WPP_EVAL(Name) & 0xFFFF)) < MAX_NUMBER_OF_ETW_FLAGS)
enum _WPP_FLAG_LEN_ENUM_MAX { WPP_MAX_FLAG_LEN_CHECK = (1 WPP_CONTROL_GUIDS) };
#undef WPP_DEFINE_CONTROL_GUID

#ifndef WPP_CB
#define WPP_CB      WPP_GLOBAL_Control
#endif
#ifndef WPP_CB_TYPE
#define WPP_CB_TYPE WPP_PROJECT_CONTROL_BLOCK
#endif

#ifndef WPP_CHECK_INIT
#define WPP_CHECK_INIT (WPP_CB != (WPP_CB_TYPE*)&WPP_CB) &&
#endif

typedef union {
    WPP_TRACE_CONTROL_BLOCK Control;
    UCHAR ReserveSpace[ sizeof(WPP_TRACE_CONTROL_BLOCK) + sizeof(ULONG) * (WPP_FLAG_LEN - 1) ];
} WPP_CB_TYPE ;


extern __declspec(selectany) WPP_CB_TYPE *WPP_CB = (WPP_CB_TYPE*)&WPP_CB;

#if ENABLE_WPP_RECORDER
#ifndef WPP_RECORDER_CHECK_INIT
#define WPP_RECORDER_CHECK_INIT (WPP_RECORDER_INITIALIZED != (WPP_CB_TYPE*)&WPP_RECORDER_INITIALIZED) &&
#endif
// Global varaible used to track if WPP_RECORDER was initialized.
// It will be initialized on calling WPP_INIT_TRACING macro.
extern __declspec(selectany) WPP_CB_TYPE *WPP_RECORDER_INITIALIZED = (WPP_CB_TYPE*)&WPP_RECORDER_INITIALIZED;
#endif

#define WPP_CONTROL(CTL) (WPP_CB[WPP_CTRL_NO(CTL)].Control)

// Define the default WPP_LEVEL_LOGGER/WPP_LEVEL_ENABLED macros for the
// predefined DoTraceMessage(LEVEL) function.
#ifdef WPP_USE_TRACE_LEVELS

#ifndef WPP_LEVEL_LOGGER
#define WPP_LEVEL_LOGGER(lvl) (WPP_CONTROL(WPP_BIT_ ## DUMMY).Logger),
#endif
#ifndef WPP_LEVEL_ENABLED
#define WPP_LEVEL_ENABLED(lvl) (WPP_CONTROL(WPP_BIT_ ## DUMMY).Level >= lvl)
#endif

#else // WPP_USE_TRACE_LEVELS

// For historical reasons, the use of LEVEL means flags by default.
// This was a bad choice but very difficult to undo.
#ifndef WPP_LEVEL_LOGGER
#  define WPP_LEVEL_LOGGER(CTL)  (WPP_CONTROL(WPP_BIT_ ## CTL).Logger),
#endif
#ifndef WPP_LEVEL_ENABLED
#  define WPP_LEVEL_ENABLED(CTL) (WPP_CONTROL(WPP_BIT_ ## CTL).Flags[WPP_FLAG_NO(WPP_BIT_ ## CTL)] & WPP_MASK(WPP_BIT_ ## CTL))
#endif

#endif // WPP_USE_TRACE_LEVELS

// Define default WPP_FLAG_LOGGER/WPP_FLAG_ENABLED macros for convenience in
// defining a function that takes a FLAG parameter e.g. DoTrace(FLAG).
#ifndef WPP_FLAG_LOGGER
#  define WPP_FLAG_LOGGER(CTL)  (WPP_CONTROL(WPP_BIT_ ## CTL).Logger),
#endif
#ifndef WPP_FLAG_ENABLED
#  define WPP_FLAG_ENABLED(CTL) (WPP_CONTROL(WPP_BIT_ ## CTL).Flags[WPP_FLAG_NO(WPP_BIT_ ## CTL)] & WPP_MASK(WPP_BIT_ ## CTL))
#endif

#ifndef WPP_ENABLED
#  define WPP_ENABLED() 1
#endif
#ifndef WPP_LOGGER
#  define WPP_LOGGER() (WPP_CB[0].Control.Logger),
#endif

#endif // WPP_NO_CONTROL_GUIDS

#ifndef WPP_GET_LOGGER
#  define WPP_GET_LOGGER Logger
#endif

#ifndef WPP_LOGGER_ARG
#  define WPP_LOGGER_ARG TRACEHANDLE Logger,
#endif

#ifdef __cplusplus
} // extern "C"
#endif

#endif // WPP_ALREADY_INCLUDED

// template tracemacro.tpl

// This template expects:
//      WPP_THIS_FILE defined (see header.tpl)
//      WPP_LOGGER_ARG  defined
//      WPP_GET_LOGGER  defined
//      WPP_ENABLED() defined

#ifdef __cplusplus
extern "C" {
#endif

#ifdef WPP_ALREADY_INCLUDED

#undef WPP_LOCAL_TraceGuids
#undef WPP_INVOKE_WPP_DEBUG

#else // WPP_ALREADY_INCLUDED

#ifndef NO_CHECK_FOR_NULL_STRING
#ifndef WPP_CHECK_FOR_NULL_STRING
#define WPP_CHECK_FOR_NULL_STRING
#endif
#endif // NO_CHECK_FOR_NULL_STRING

#define WPP_FLATTEN(...) __VA_ARGS__
#define WPP_GLUE5(a, b, c, d, e)  a ## b ## c ## d ## e
#define WPP_XGLUE5(a, b, c, d, e)  WPP_GLUE5(a, b, c, d, e)
#define WPP_(Id) WPP_XGLUE5(WPP_, Id, _, WPP_THIS_FILE, __LINE__)

#ifndef WPP_INLINE
#define WPP_INLINE DECLSPEC_NOINLINE __inline
#endif

#ifndef WPP_FORCEINLINE
#define WPP_FORCEINLINE __forceinline
#endif

#endif // WPP_ALREADY_INCLUDED

#ifdef WPP_NO_ANNOTATIONS

#define WPP_ANNOTATE(x)

#else // WPP_NO_ANNOTATIONS

#ifdef WPP_PUBLIC_
#define WPP_PUBLIC_ANNOT_RosKmdAdapter_cpp85
#endif
#ifdef WPP_PUBLIC_
#define WPP_PUBLIC_ANNOT_RosKmdAdapter_cpp96
#endif
#ifdef WPP_PUBLIC_
#define WPP_PUBLIC_ANNOT_RosKmdAdapter_cpp104
#endif
#ifdef WPP_PUBLIC_
#define WPP_PUBLIC_ANNOT_RosKmdAdapter_cpp116
#endif
#ifdef WPP_PUBLIC_
#define WPP_PUBLIC_ANNOT_RosKmdAdapter_cpp412
#endif
#ifdef WPP_PUBLIC_
#define WPP_PUBLIC_ANNOT_RosKmdAdapter_cpp430
#endif
#ifdef WPP_PUBLIC_
#define WPP_PUBLIC_ANNOT_RosKmdAdapter_cpp441
#endif
#ifdef WPP_PUBLIC_
#define WPP_PUBLIC_ANNOT_RosKmdAdapter_cpp501
#endif
#ifdef WPP_PUBLIC_
#define WPP_PUBLIC_ANNOT_RosKmdAdapter_cpp524
#endif
#ifdef WPP_PUBLIC_
#define WPP_PUBLIC_ANNOT_RosKmdAdapter_cpp599
#endif
#ifdef WPP_PUBLIC_
#define WPP_PUBLIC_ANNOT_RosKmdAdapter_cpp607
#endif
#ifdef WPP_PUBLIC_
#define WPP_PUBLIC_ANNOT_RosKmdAdapter_cpp632
#endif
#ifdef WPP_PUBLIC_
#define WPP_PUBLIC_ANNOT_RosKmdAdapter_cpp682
#endif
#ifdef WPP_PUBLIC_
#define WPP_PUBLIC_ANNOT_RosKmdAdapter_cpp786
#endif
#ifdef WPP_PUBLIC_
#define WPP_PUBLIC_ANNOT_RosKmdAdapter_cpp811
#endif
#ifdef WPP_PUBLIC_
#define WPP_PUBLIC_ANNOT_RosKmdAdapter_cpp878
#endif
#ifdef WPP_PUBLIC_
#define WPP_PUBLIC_ANNOT_RosKmdAdapter_cpp912
#endif
#ifdef WPP_PUBLIC_
#define WPP_PUBLIC_ANNOT_RosKmdAdapter_cpp922
#endif
#ifdef WPP_PUBLIC_
#define WPP_PUBLIC_ANNOT_RosKmdAdapter_cpp947
#endif
#ifdef WPP_PUBLIC_
#define WPP_PUBLIC_ANNOT_RosKmdAdapter_cpp1177
#endif
#ifdef WPP_PUBLIC_
#define WPP_PUBLIC_ANNOT_RosKmdAdapter_cpp1255
#endif
#ifdef WPP_PUBLIC_
#define WPP_PUBLIC_ANNOT_RosKmdAdapter_cpp1273
#endif
#ifdef WPP_PUBLIC_
#define WPP_PUBLIC_ANNOT_RosKmdAdapter_cpp1282
#endif
#ifdef WPP_PUBLIC_
#define WPP_PUBLIC_ANNOT_RosKmdAdapter_cpp1295
#endif
#ifdef WPP_PUBLIC_
#define WPP_PUBLIC_ANNOT_RosKmdAdapter_cpp1320
#endif
#ifdef WPP_PUBLIC_
#define WPP_PUBLIC_ANNOT_RosKmdAdapter_cpp1374
#endif
#ifdef WPP_PUBLIC_
#define WPP_PUBLIC_ANNOT_RosKmdAdapter_cpp1382
#endif
#ifdef WPP_PUBLIC_
#define WPP_PUBLIC_ANNOT_RosKmdAdapter_cpp1389
#endif
#ifdef WPP_PUBLIC_
#define WPP_PUBLIC_ANNOT_RosKmdAdapter_cpp1397
#endif
#ifdef WPP_PUBLIC_
#define WPP_PUBLIC_ANNOT_RosKmdAdapter_cpp1405
#endif
#ifdef WPP_PUBLIC_
#define WPP_PUBLIC_ANNOT_RosKmdAdapter_cpp1418
#endif
#ifdef WPP_PUBLIC_
#define WPP_PUBLIC_ANNOT_RosKmdAdapter_cpp1426
#endif
#ifdef WPP_PUBLIC_
#define WPP_PUBLIC_ANNOT_RosKmdAdapter_cpp1435
#endif
#ifdef WPP_PUBLIC_
#define WPP_PUBLIC_ANNOT_RosKmdAdapter_cpp1443
#endif
#ifdef WPP_PUBLIC_
#define WPP_PUBLIC_ANNOT_RosKmdAdapter_cpp1452
#endif
#ifdef WPP_PUBLIC_
#define WPP_PUBLIC_ANNOT_RosKmdAdapter_cpp1462
#endif
#ifdef WPP_PUBLIC_
#define WPP_PUBLIC_ANNOT_RosKmdAdapter_cpp1474
#endif
#ifdef WPP_PUBLIC_
#define WPP_PUBLIC_ANNOT_RosKmdAdapter_cpp1494
#endif
#ifdef WPP_PUBLIC_
#define WPP_PUBLIC_ANNOT_RosKmdAdapter_cpp1501
#endif
#ifdef WPP_PUBLIC_
#define WPP_PUBLIC_ANNOT_RosKmdAdapter_cpp1512
#endif
#ifdef WPP_PUBLIC_
#define WPP_PUBLIC_ANNOT_RosKmdAdapter_cpp1526
#endif
#ifdef WPP_PUBLIC_
#define WPP_PUBLIC_ANNOT_RosKmdAdapter_cpp1540
#endif
#ifdef WPP_PUBLIC_
#define WPP_PUBLIC_ANNOT_RosKmdAdapter_cpp1559
#endif
#ifdef WPP_PUBLIC_
#define WPP_PUBLIC_ANNOT_RosKmdAdapter_cpp1567
#endif
#ifdef WPP_PUBLIC_
#define WPP_PUBLIC_ANNOT_RosKmdAdapter_cpp1821
#endif
#ifdef WPP_PUBLIC_
#define WPP_PUBLIC_ANNOT_RosKmdAdapter_cpp1869
#endif
#ifdef WPP_PUBLIC_
#define WPP_PUBLIC_ANNOT_RosKmdAdapter_cpp1929
#endif
#ifdef WPP_PUBLIC_
#define WPP_PUBLIC_ANNOT_RosKmdAdapter_cpp1977
#endif
#ifdef WPP_PUBLIC_
#define WPP_PUBLIC_ANNOT_RosKmdAdapter_cpp1987
#endif
#ifdef WPP_PUBLIC_
#define WPP_PUBLIC_ANNOT_RosKmdAdapter_cpp1998
#endif
#ifdef WPP_PUBLIC_
#define WPP_PUBLIC_ANNOT_RosKmdAdapter_cpp2011
#endif
#ifdef WPP_PUBLIC_
#define WPP_PUBLIC_ANNOT_RosKmdAdapter_cpp2129
#endif
#ifdef WPP_EMIT_FUNC_NAME
#define WPP_FUNC_NAME L" FUNC=" _WPPW(__FUNCTION__)
#else // WPP_EMIT_FUNC_NAME
#define WPP_FUNC_NAME
#endif // WPP_EMIT_FUNC_NAME

#ifdef WPP_USER_MSG_GUID
# define WPP_ANNOTATE_RosKmdAdapter_cpp85_FINAL(P, File, Name, ...) __annotation( \
    L ## P, \
    WPP_GUID_WTEXT WPP_USER_MSG_GUID L"roskmd // SRC=" _WPPW(File) \
    L" MJ= MN=", \
    L"#typev " _WPPW(Name) \
    L" 10 \"%0 [%10!s! @ %11!u!] ERROR :Failed to get DevicePropertyHardwareID from PDO. (status=%12!s!)\" //   LEVEL=TRACE_LEVEL_ERROR FLAGS=ROS_TRACING_DEFAULT" \
    WPP_FUNC_NAME, \
    __VA_ARGS__)
#else // WPP_USER_MSG_GUID
# define WPP_ANNOTATE_RosKmdAdapter_cpp85_FINAL(P, File, Name, ...) __annotation( \
    L ## P, \
    L"bbf0cbd6-16d9-3159-edf2-825e98213b57 roskmd // SRC=" _WPPW(File) \
    L" MJ= MN=", \
    L"#typev " _WPPW(Name) \
    L" 10 \"%0 [%10!s! @ %11!u!] ERROR :Failed to get DevicePropertyHardwareID from PDO. (status=%12!s!)\" //   LEVEL=TRACE_LEVEL_ERROR FLAGS=ROS_TRACING_DEFAULT" \
    WPP_FUNC_NAME, \
    __VA_ARGS__)
#endif // WPP_USER_MSG_GUID

#ifdef WPP_PUBLIC_ANNOT_RosKmdAdapter_cpp85
# define WPP_ANNOTATE_RosKmdAdapter_cpp85 WPP_ANNOTATE_RosKmdAdapter_cpp85_FINAL( \
    "TMF:", \
    "Unknown_cxx00", \
    "Unknown_cxx00", \
    L"{", \
    L"Arg, ItemString -- 10" , \
    L"Arg, ItemLong -- 11" , \
    L"Arg, ItemNTSTATUS -- 12" , \
    L"}", \
    L"PUBLIC_TMF:")
# ifndef WPP_PUBLIC_TMC
#  define WPP_PUBLIC_TMC // Adds "PUBLIC_TMF:" to the control guid annotation
# endif
#else // WPP_PUBLIC_ANNOT_RosKmdAdapter_cpp85
# define WPP_ANNOTATE_RosKmdAdapter_cpp85 WPP_ANNOTATE_RosKmdAdapter_cpp85_FINAL( \
    "TMF:", \
    "RosKmdAdapter.cpp", \
    "RosKmdAdapter_cpp85", \
    L"{", \
    L"__FILE__, ItemString -- 10" , \
    L"__LINE__, ItemLong -- 11" , \
    L"status, ItemNTSTATUS -- 12" , \
    L"}")
#endif // WPP_PUBLIC_ANNOT_RosKmdAdapter_cpp85

#ifdef WPP_USER_MSG_GUID
# define WPP_ANNOTATE_RosKmdAdapter_cpp96_FINAL(P, File, Name, ...) __annotation( \
    L ## P, \
    WPP_GUID_WTEXT WPP_USER_MSG_GUID L"roskmd // SRC=" _WPPW(File) \
    L" MJ= MN=", \
    L"#typev " _WPPW(Name) \
    L" 11 \"%0 [%10!s! @ %11!u!] LOW MEMORY :Failed to allocate RosKmdRapAdapter.\" //   LEVEL=TRACE_LEVEL_ERROR FLAGS=ROS_TRACING_DEFAULT" \
    WPP_FUNC_NAME, \
    __VA_ARGS__)
#else // WPP_USER_MSG_GUID
# define WPP_ANNOTATE_RosKmdAdapter_cpp96_FINAL(P, File, Name, ...) __annotation( \
    L ## P, \
    L"bbf0cbd6-16d9-3159-edf2-825e98213b57 roskmd // SRC=" _WPPW(File) \
    L" MJ= MN=", \
    L"#typev " _WPPW(Name) \
    L" 11 \"%0 [%10!s! @ %11!u!] LOW MEMORY :Failed to allocate RosKmdRapAdapter.\" //   LEVEL=TRACE_LEVEL_ERROR FLAGS=ROS_TRACING_DEFAULT" \
    WPP_FUNC_NAME, \
    __VA_ARGS__)
#endif // WPP_USER_MSG_GUID

#ifdef WPP_PUBLIC_ANNOT_RosKmdAdapter_cpp96
# define WPP_ANNOTATE_RosKmdAdapter_cpp96 WPP_ANNOTATE_RosKmdAdapter_cpp96_FINAL( \
    "TMF:", \
    "Unknown_cxx00", \
    "Unknown_cxx00", \
    L"{", \
    L"Arg, ItemString -- 10" , \
    L"Arg, ItemLong -- 11" , \
    L"}", \
    L"PUBLIC_TMF:")
# ifndef WPP_PUBLIC_TMC
#  define WPP_PUBLIC_TMC // Adds "PUBLIC_TMF:" to the control guid annotation
# endif
#else // WPP_PUBLIC_ANNOT_RosKmdAdapter_cpp96
# define WPP_ANNOTATE_RosKmdAdapter_cpp96 WPP_ANNOTATE_RosKmdAdapter_cpp96_FINAL( \
    "TMF:", \
    "RosKmdAdapter.cpp", \
    "RosKmdAdapter_cpp96", \
    L"{", \
    L"__FILE__, ItemString -- 10" , \
    L"__LINE__, ItemLong -- 11" , \
    L"}")
#endif // WPP_PUBLIC_ANNOT_RosKmdAdapter_cpp96

#ifdef WPP_USER_MSG_GUID
# define WPP_ANNOTATE_RosKmdAdapter_cpp104_FINAL(P, File, Name, ...) __annotation( \
    L ## P, \
    WPP_GUID_WTEXT WPP_USER_MSG_GUID L"roskmd // SRC=" _WPPW(File) \
    L" MJ= MN=", \
    L"#typev " _WPPW(Name) \
    L" 12 \"%0 [%10!s! @ %11!u!] LOW MEMORY :Failed to allocate RosKmdSoftAdapter.\" //   LEVEL=TRACE_LEVEL_ERROR FLAGS=ROS_TRACING_DEFAULT" \
    WPP_FUNC_NAME, \
    __VA_ARGS__)
#else // WPP_USER_MSG_GUID
# define WPP_ANNOTATE_RosKmdAdapter_cpp104_FINAL(P, File, Name, ...) __annotation( \
    L ## P, \
    L"bbf0cbd6-16d9-3159-edf2-825e98213b57 roskmd // SRC=" _WPPW(File) \
    L" MJ= MN=", \
    L"#typev " _WPPW(Name) \
    L" 12 \"%0 [%10!s! @ %11!u!] LOW MEMORY :Failed to allocate RosKmdSoftAdapter.\" //   LEVEL=TRACE_LEVEL_ERROR FLAGS=ROS_TRACING_DEFAULT" \
    WPP_FUNC_NAME, \
    __VA_ARGS__)
#endif // WPP_USER_MSG_GUID

#ifdef WPP_PUBLIC_ANNOT_RosKmdAdapter_cpp104
# define WPP_ANNOTATE_RosKmdAdapter_cpp104 WPP_ANNOTATE_RosKmdAdapter_cpp104_FINAL( \
    "TMF:", \
    "Unknown_cxx00", \
    "Unknown_cxx00", \
    L"{", \
    L"Arg, ItemString -- 10" , \
    L"Arg, ItemLong -- 11" , \
    L"}", \
    L"PUBLIC_TMF:")
# ifndef WPP_PUBLIC_TMC
#  define WPP_PUBLIC_TMC // Adds "PUBLIC_TMF:" to the control guid annotation
# endif
#else // WPP_PUBLIC_ANNOT_RosKmdAdapter_cpp104
# define WPP_ANNOTATE_RosKmdAdapter_cpp104 WPP_ANNOTATE_RosKmdAdapter_cpp104_FINAL( \
    "TMF:", \
    "RosKmdAdapter.cpp", \
    "RosKmdAdapter_cpp104", \
    L"{", \
    L"__FILE__, ItemString -- 10" , \
    L"__LINE__, ItemLong -- 11" , \
    L"}")
#endif // WPP_PUBLIC_ANNOT_RosKmdAdapter_cpp104

#ifdef WPP_USER_MSG_GUID
# define WPP_ANNOTATE_RosKmdAdapter_cpp116_FINAL(P, File, Name, ...) __annotation( \
    L ## P, \
    WPP_GUID_WTEXT WPP_USER_MSG_GUID L"roskmd // SRC=" _WPPW(File) \
    L" MJ= MN=", \
    L"#typev " _WPPW(Name) \
    L" 13 \"%0 [%10!s! @ %11!u!] TRACE :QueryEngineStatus was called.\" //   LEVEL=TRACE_LEVEL_VERBOSE FLAGS=ROS_TRACING_DEFAULT" \
    WPP_FUNC_NAME, \
    __VA_ARGS__)
#else // WPP_USER_MSG_GUID
# define WPP_ANNOTATE_RosKmdAdapter_cpp116_FINAL(P, File, Name, ...) __annotation( \
    L ## P, \
    L"bbf0cbd6-16d9-3159-edf2-825e98213b57 roskmd // SRC=" _WPPW(File) \
    L" MJ= MN=", \
    L"#typev " _WPPW(Name) \
    L" 13 \"%0 [%10!s! @ %11!u!] TRACE :QueryEngineStatus was called.\" //   LEVEL=TRACE_LEVEL_VERBOSE FLAGS=ROS_TRACING_DEFAULT" \
    WPP_FUNC_NAME, \
    __VA_ARGS__)
#endif // WPP_USER_MSG_GUID

#ifdef WPP_PUBLIC_ANNOT_RosKmdAdapter_cpp116
# define WPP_ANNOTATE_RosKmdAdapter_cpp116 WPP_ANNOTATE_RosKmdAdapter_cpp116_FINAL( \
    "TMF:", \
    "Unknown_cxx00", \
    "Unknown_cxx00", \
    L"{", \
    L"Arg, ItemString -- 10" , \
    L"Arg, ItemLong -- 11" , \
    L"}", \
    L"PUBLIC_TMF:")
# ifndef WPP_PUBLIC_TMC
#  define WPP_PUBLIC_TMC // Adds "PUBLIC_TMF:" to the control guid annotation
# endif
#else // WPP_PUBLIC_ANNOT_RosKmdAdapter_cpp116
# define WPP_ANNOTATE_RosKmdAdapter_cpp116 WPP_ANNOTATE_RosKmdAdapter_cpp116_FINAL( \
    "TMF:", \
    "RosKmdAdapter.cpp", \
    "RosKmdAdapter_cpp116", \
    L"{", \
    L"__FILE__, ItemString -- 10" , \
    L"__LINE__, ItemLong -- 11" , \
    L"}")
#endif // WPP_PUBLIC_ANNOT_RosKmdAdapter_cpp116

#ifdef WPP_USER_MSG_GUID
# define WPP_ANNOTATE_RosKmdAdapter_cpp412_FINAL(P, File, Name, ...) __annotation( \
    L ## P, \
    WPP_GUID_WTEXT WPP_USER_MSG_GUID L"roskmd // SRC=" _WPPW(File) \
    L" MJ= MN=", \
    L"#typev " _WPPW(Name) \
    L" 14 \"%0 [%10!s! @ %11!u!] ERROR :PsCreateSystemThread(...) failed for RosKmAdapter::WorkerThread. (status=%12!s!)\" //   LEVEL=TRACE_LEVEL_ERROR FLAGS=ROS_TRACING_DEFAULT" \
    WPP_FUNC_NAME, \
    __VA_ARGS__)
#else // WPP_USER_MSG_GUID
# define WPP_ANNOTATE_RosKmdAdapter_cpp412_FINAL(P, File, Name, ...) __annotation( \
    L ## P, \
    L"bbf0cbd6-16d9-3159-edf2-825e98213b57 roskmd // SRC=" _WPPW(File) \
    L" MJ= MN=", \
    L"#typev " _WPPW(Name) \
    L" 14 \"%0 [%10!s! @ %11!u!] ERROR :PsCreateSystemThread(...) failed for RosKmAdapter::WorkerThread. (status=%12!s!)\" //   LEVEL=TRACE_LEVEL_ERROR FLAGS=ROS_TRACING_DEFAULT" \
    WPP_FUNC_NAME, \
    __VA_ARGS__)
#endif // WPP_USER_MSG_GUID

#ifdef WPP_PUBLIC_ANNOT_RosKmdAdapter_cpp412
# define WPP_ANNOTATE_RosKmdAdapter_cpp412 WPP_ANNOTATE_RosKmdAdapter_cpp412_FINAL( \
    "TMF:", \
    "Unknown_cxx00", \
    "Unknown_cxx00", \
    L"{", \
    L"Arg, ItemString -- 10" , \
    L"Arg, ItemLong -- 11" , \
    L"Arg, ItemNTSTATUS -- 12" , \
    L"}", \
    L"PUBLIC_TMF:")
# ifndef WPP_PUBLIC_TMC
#  define WPP_PUBLIC_TMC // Adds "PUBLIC_TMF:" to the control guid annotation
# endif
#else // WPP_PUBLIC_ANNOT_RosKmdAdapter_cpp412
# define WPP_ANNOTATE_RosKmdAdapter_cpp412 WPP_ANNOTATE_RosKmdAdapter_cpp412_FINAL( \
    "TMF:", \
    "RosKmdAdapter.cpp", \
    "RosKmdAdapter_cpp412", \
    L"{", \
    L"__FILE__, ItemString -- 10" , \
    L"__LINE__, ItemLong -- 11" , \
    L"status, ItemNTSTATUS -- 12" , \
    L"}")
#endif // WPP_PUBLIC_ANNOT_RosKmdAdapter_cpp412

#ifdef WPP_USER_MSG_GUID
# define WPP_ANNOTATE_RosKmdAdapter_cpp430_FINAL(P, File, Name, ...) __annotation( \
    L ## P, \
    WPP_GUID_WTEXT WPP_USER_MSG_GUID L"roskmd // SRC=" _WPPW(File) \
    L" MJ= MN=", \
    L"#typev " _WPPW(Name) \
    L" 15 \"%0 [%10!s! @ %11!u!] ERROR :ObReferenceObjectByHandle(...) failed for worker thread. (status=%12!s!)\" //   LEVEL=TRACE_LEVEL_ERROR FLAGS=ROS_TRACING_DEFAULT" \
    WPP_FUNC_NAME, \
    __VA_ARGS__)
#else // WPP_USER_MSG_GUID
# define WPP_ANNOTATE_RosKmdAdapter_cpp430_FINAL(P, File, Name, ...) __annotation( \
    L ## P, \
    L"bbf0cbd6-16d9-3159-edf2-825e98213b57 roskmd // SRC=" _WPPW(File) \
    L" MJ= MN=", \
    L"#typev " _WPPW(Name) \
    L" 15 \"%0 [%10!s! @ %11!u!] ERROR :ObReferenceObjectByHandle(...) failed for worker thread. (status=%12!s!)\" //   LEVEL=TRACE_LEVEL_ERROR FLAGS=ROS_TRACING_DEFAULT" \
    WPP_FUNC_NAME, \
    __VA_ARGS__)
#endif // WPP_USER_MSG_GUID

#ifdef WPP_PUBLIC_ANNOT_RosKmdAdapter_cpp430
# define WPP_ANNOTATE_RosKmdAdapter_cpp430 WPP_ANNOTATE_RosKmdAdapter_cpp430_FINAL( \
    "TMF:", \
    "Unknown_cxx00", \
    "Unknown_cxx00", \
    L"{", \
    L"Arg, ItemString -- 10" , \
    L"Arg, ItemLong -- 11" , \
    L"Arg, ItemNTSTATUS -- 12" , \
    L"}", \
    L"PUBLIC_TMF:")
# ifndef WPP_PUBLIC_TMC
#  define WPP_PUBLIC_TMC // Adds "PUBLIC_TMF:" to the control guid annotation
# endif
#else // WPP_PUBLIC_ANNOT_RosKmdAdapter_cpp430
# define WPP_ANNOTATE_RosKmdAdapter_cpp430 WPP_ANNOTATE_RosKmdAdapter_cpp430_FINAL( \
    "TMF:", \
    "RosKmdAdapter.cpp", \
    "RosKmdAdapter_cpp430", \
    L"{", \
    L"__FILE__, ItemString -- 10" , \
    L"__LINE__, ItemLong -- 11" , \
    L"status, ItemNTSTATUS -- 12" , \
    L"}")
#endif // WPP_PUBLIC_ANNOT_RosKmdAdapter_cpp430

#ifdef WPP_USER_MSG_GUID
# define WPP_ANNOTATE_RosKmdAdapter_cpp441_FINAL(P, File, Name, ...) __annotation( \
    L ## P, \
    WPP_GUID_WTEXT WPP_USER_MSG_GUID L"roskmd // SRC=" _WPPW(File) \
    L" MJ= MN=", \
    L"#typev " _WPPW(Name) \
    L" 16 \"%0 [%10!s! @ %11!u!] ERROR :DxgkCbGetDeviceInformation(...) failed. (status=%12!s!, m_DxgkInterface.DeviceHandle=0x%13!p!)\" //   LEVEL=TRACE_LEVEL_ERROR FLAGS=ROS_TRACING_DEFAULT" \
    WPP_FUNC_NAME, \
    __VA_ARGS__)
#else // WPP_USER_MSG_GUID
# define WPP_ANNOTATE_RosKmdAdapter_cpp441_FINAL(P, File, Name, ...) __annotation( \
    L ## P, \
    L"bbf0cbd6-16d9-3159-edf2-825e98213b57 roskmd // SRC=" _WPPW(File) \
    L" MJ= MN=", \
    L"#typev " _WPPW(Name) \
    L" 16 \"%0 [%10!s! @ %11!u!] ERROR :DxgkCbGetDeviceInformation(...) failed. (status=%12!s!, m_DxgkInterface.DeviceHandle=0x%13!p!)\" //   LEVEL=TRACE_LEVEL_ERROR FLAGS=ROS_TRACING_DEFAULT" \
    WPP_FUNC_NAME, \
    __VA_ARGS__)
#endif // WPP_USER_MSG_GUID

#ifdef WPP_PUBLIC_ANNOT_RosKmdAdapter_cpp441
# define WPP_ANNOTATE_RosKmdAdapter_cpp441 WPP_ANNOTATE_RosKmdAdapter_cpp441_FINAL( \
    "TMF:", \
    "Unknown_cxx00", \
    "Unknown_cxx00", \
    L"{", \
    L"Arg, ItemString -- 10" , \
    L"Arg, ItemLong -- 11" , \
    L"Arg, ItemNTSTATUS -- 12" , \
    L"Arg, ItemPtr -- 13" , \
    L"}", \
    L"PUBLIC_TMF:")
# ifndef WPP_PUBLIC_TMC
#  define WPP_PUBLIC_TMC // Adds "PUBLIC_TMF:" to the control guid annotation
# endif
#else // WPP_PUBLIC_ANNOT_RosKmdAdapter_cpp441
# define WPP_ANNOTATE_RosKmdAdapter_cpp441 WPP_ANNOTATE_RosKmdAdapter_cpp441_FINAL( \
    "TMF:", \
    "RosKmdAdapter.cpp", \
    "RosKmdAdapter_cpp441", \
    L"{", \
    L"__FILE__, ItemString -- 10" , \
    L"__LINE__, ItemLong -- 11" , \
    L"status, ItemNTSTATUS -- 12" , \
    L"m_DxgkInterface.DeviceHandle, ItemPtr -- 13" , \
    L"}")
#endif // WPP_PUBLIC_ANNOT_RosKmdAdapter_cpp441

#ifdef WPP_USER_MSG_GUID
# define WPP_ANNOTATE_RosKmdAdapter_cpp501_FINAL(P, File, Name, ...) __annotation( \
    L ## P, \
    WPP_GUID_WTEXT WPP_USER_MSG_GUID L"roskmd // SRC=" _WPPW(File) \
    L" MJ= MN=", \
    L"#typev " _WPPW(Name) \
    L" 17 \"%0 [%10!s! @ %11!u!] TRACE :Adapter was successfully started.\" //   LEVEL=TRACE_LEVEL_VERBOSE FLAGS=ROS_TRACING_DEFAULT" \
    WPP_FUNC_NAME, \
    __VA_ARGS__)
#else // WPP_USER_MSG_GUID
# define WPP_ANNOTATE_RosKmdAdapter_cpp501_FINAL(P, File, Name, ...) __annotation( \
    L ## P, \
    L"bbf0cbd6-16d9-3159-edf2-825e98213b57 roskmd // SRC=" _WPPW(File) \
    L" MJ= MN=", \
    L"#typev " _WPPW(Name) \
    L" 17 \"%0 [%10!s! @ %11!u!] TRACE :Adapter was successfully started.\" //   LEVEL=TRACE_LEVEL_VERBOSE FLAGS=ROS_TRACING_DEFAULT" \
    WPP_FUNC_NAME, \
    __VA_ARGS__)
#endif // WPP_USER_MSG_GUID

#ifdef WPP_PUBLIC_ANNOT_RosKmdAdapter_cpp501
# define WPP_ANNOTATE_RosKmdAdapter_cpp501 WPP_ANNOTATE_RosKmdAdapter_cpp501_FINAL( \
    "TMF:", \
    "Unknown_cxx00", \
    "Unknown_cxx00", \
    L"{", \
    L"Arg, ItemString -- 10" , \
    L"Arg, ItemLong -- 11" , \
    L"}", \
    L"PUBLIC_TMF:")
# ifndef WPP_PUBLIC_TMC
#  define WPP_PUBLIC_TMC // Adds "PUBLIC_TMF:" to the control guid annotation
# endif
#else // WPP_PUBLIC_ANNOT_RosKmdAdapter_cpp501
# define WPP_ANNOTATE_RosKmdAdapter_cpp501 WPP_ANNOTATE_RosKmdAdapter_cpp501_FINAL( \
    "TMF:", \
    "RosKmdAdapter.cpp", \
    "RosKmdAdapter_cpp501", \
    L"{", \
    L"__FILE__, ItemString -- 10" , \
    L"__LINE__, ItemLong -- 11" , \
    L"}")
#endif // WPP_PUBLIC_ANNOT_RosKmdAdapter_cpp501

#ifdef WPP_USER_MSG_GUID
# define WPP_ANNOTATE_RosKmdAdapter_cpp524_FINAL(P, File, Name, ...) __annotation( \
    L ## P, \
    WPP_GUID_WTEXT WPP_USER_MSG_GUID L"roskmd // SRC=" _WPPW(File) \
    L" MJ= MN=", \
    L"#typev " _WPPW(Name) \
    L" 18 \"%0 [%10!s! @ %11!u!] TRACE :Adapter was successfully stopped.\" //   LEVEL=TRACE_LEVEL_VERBOSE FLAGS=ROS_TRACING_DEFAULT" \
    WPP_FUNC_NAME, \
    __VA_ARGS__)
#else // WPP_USER_MSG_GUID
# define WPP_ANNOTATE_RosKmdAdapter_cpp524_FINAL(P, File, Name, ...) __annotation( \
    L ## P, \
    L"bbf0cbd6-16d9-3159-edf2-825e98213b57 roskmd // SRC=" _WPPW(File) \
    L" MJ= MN=", \
    L"#typev " _WPPW(Name) \
    L" 18 \"%0 [%10!s! @ %11!u!] TRACE :Adapter was successfully stopped.\" //   LEVEL=TRACE_LEVEL_VERBOSE FLAGS=ROS_TRACING_DEFAULT" \
    WPP_FUNC_NAME, \
    __VA_ARGS__)
#endif // WPP_USER_MSG_GUID

#ifdef WPP_PUBLIC_ANNOT_RosKmdAdapter_cpp524
# define WPP_ANNOTATE_RosKmdAdapter_cpp524 WPP_ANNOTATE_RosKmdAdapter_cpp524_FINAL( \
    "TMF:", \
    "Unknown_cxx00", \
    "Unknown_cxx00", \
    L"{", \
    L"Arg, ItemString -- 10" , \
    L"Arg, ItemLong -- 11" , \
    L"}", \
    L"PUBLIC_TMF:")
# ifndef WPP_PUBLIC_TMC
#  define WPP_PUBLIC_TMC // Adds "PUBLIC_TMF:" to the control guid annotation
# endif
#else // WPP_PUBLIC_ANNOT_RosKmdAdapter_cpp524
# define WPP_ANNOTATE_RosKmdAdapter_cpp524 WPP_ANNOTATE_RosKmdAdapter_cpp524_FINAL( \
    "TMF:", \
    "RosKmdAdapter.cpp", \
    "RosKmdAdapter_cpp524", \
    L"{", \
    L"__FILE__, ItemString -- 10" , \
    L"__LINE__, ItemLong -- 11" , \
    L"}")
#endif // WPP_PUBLIC_ANNOT_RosKmdAdapter_cpp524

#ifdef WPP_USER_MSG_GUID
# define WPP_ANNOTATE_RosKmdAdapter_cpp599_FINAL(P, File, Name, ...) __annotation( \
    L ## P, \
    WPP_GUID_WTEXT WPP_USER_MSG_GUID L"roskmd // SRC=" _WPPW(File) \
    L" MJ= MN=", \
    L"#typev " _WPPW(Name) \
    L" 19 \"%0 [%10!s! @ %11!u!] TRACE :Filling DMA buffer. (Destination.SegmentAddress=0x%12!I64x!, FillPattern=0x%13!x!, FillSize=%14!Id!)\" //   LEVEL=TRACE_LEVEL_VERBOSE FLAGS=ROS_TRACING_DEFAULT" \
    WPP_FUNC_NAME, \
    __VA_ARGS__)
#else // WPP_USER_MSG_GUID
# define WPP_ANNOTATE_RosKmdAdapter_cpp599_FINAL(P, File, Name, ...) __annotation( \
    L ## P, \
    L"bbf0cbd6-16d9-3159-edf2-825e98213b57 roskmd // SRC=" _WPPW(File) \
    L" MJ= MN=", \
    L"#typev " _WPPW(Name) \
    L" 19 \"%0 [%10!s! @ %11!u!] TRACE :Filling DMA buffer. (Destination.SegmentAddress=0x%12!I64x!, FillPattern=0x%13!x!, FillSize=%14!Id!)\" //   LEVEL=TRACE_LEVEL_VERBOSE FLAGS=ROS_TRACING_DEFAULT" \
    WPP_FUNC_NAME, \
    __VA_ARGS__)
#endif // WPP_USER_MSG_GUID

#ifdef WPP_PUBLIC_ANNOT_RosKmdAdapter_cpp599
# define WPP_ANNOTATE_RosKmdAdapter_cpp599 WPP_ANNOTATE_RosKmdAdapter_cpp599_FINAL( \
    "TMF:", \
    "Unknown_cxx00", \
    "Unknown_cxx00", \
    L"{", \
    L"Arg, ItemString -- 10" , \
    L"Arg, ItemLong -- 11" , \
    L"Arg, ItemLongLongX -- 12" , \
    L"Arg, ItemLong -- 13" , \
    L"Arg, ItemPtr -- 14" , \
    L"}", \
    L"PUBLIC_TMF:")
# ifndef WPP_PUBLIC_TMC
#  define WPP_PUBLIC_TMC // Adds "PUBLIC_TMF:" to the control guid annotation
# endif
#else // WPP_PUBLIC_ANNOT_RosKmdAdapter_cpp599
# define WPP_ANNOTATE_RosKmdAdapter_cpp599 WPP_ANNOTATE_RosKmdAdapter_cpp599_FINAL( \
    "TMF:", \
    "RosKmdAdapter.cpp", \
    "RosKmdAdapter_cpp599", \
    L"{", \
    L"__FILE__, ItemString -- 10" , \
    L"__LINE__, ItemLong -- 11" , \
    L"pArgs->Fill.Destination.SegmentAddress.QuadPart, ItemLongLongX -- 12" , \
    L"pArgs->Fill.FillPattern, ItemLong -- 13" , \
    L"pArgs->Fill.FillSize, ItemPtr -- 14" , \
    L"}")
#endif // WPP_PUBLIC_ANNOT_RosKmdAdapter_cpp599

#ifdef WPP_USER_MSG_GUID
# define WPP_ANNOTATE_RosKmdAdapter_cpp607_FINAL(P, File, Name, ...) __annotation( \
    L ## P, \
    WPP_GUID_WTEXT WPP_USER_MSG_GUID L"roskmd // SRC=" _WPPW(File) \
    L" MJ= MN=", \
    L"#typev " _WPPW(Name) \
    L" 20 \"%0 [%10!s! @ %11!u!] ERROR :DXGK_OPERATION_FILL: DMA buffer size is too small. (pArgs->DmaSize=%12!d!, sizeof(DXGKARG_BUILDPAGINGBUFFER)=%13!d!)\" //   LEVEL=TRACE_LEVEL_ERROR FLAGS=ROS_TRACING_DEFAULT" \
    WPP_FUNC_NAME, \
    __VA_ARGS__)
#else // WPP_USER_MSG_GUID
# define WPP_ANNOTATE_RosKmdAdapter_cpp607_FINAL(P, File, Name, ...) __annotation( \
    L ## P, \
    L"bbf0cbd6-16d9-3159-edf2-825e98213b57 roskmd // SRC=" _WPPW(File) \
    L" MJ= MN=", \
    L"#typev " _WPPW(Name) \
    L" 20 \"%0 [%10!s! @ %11!u!] ERROR :DXGK_OPERATION_FILL: DMA buffer size is too small. (pArgs->DmaSize=%12!d!, sizeof(DXGKARG_BUILDPAGINGBUFFER)=%13!d!)\" //   LEVEL=TRACE_LEVEL_ERROR FLAGS=ROS_TRACING_DEFAULT" \
    WPP_FUNC_NAME, \
    __VA_ARGS__)
#endif // WPP_USER_MSG_GUID

#ifdef WPP_PUBLIC_ANNOT_RosKmdAdapter_cpp607
# define WPP_ANNOTATE_RosKmdAdapter_cpp607 WPP_ANNOTATE_RosKmdAdapter_cpp607_FINAL( \
    "TMF:", \
    "Unknown_cxx00", \
    "Unknown_cxx00", \
    L"{", \
    L"Arg, ItemString -- 10" , \
    L"Arg, ItemLong -- 11" , \
    L"Arg, ItemLong -- 12" , \
    L"Arg, ItemLong -- 13" , \
    L"}", \
    L"PUBLIC_TMF:")
# ifndef WPP_PUBLIC_TMC
#  define WPP_PUBLIC_TMC // Adds "PUBLIC_TMF:" to the control guid annotation
# endif
#else // WPP_PUBLIC_ANNOT_RosKmdAdapter_cpp607
# define WPP_ANNOTATE_RosKmdAdapter_cpp607 WPP_ANNOTATE_RosKmdAdapter_cpp607_FINAL( \
    "TMF:", \
    "RosKmdAdapter.cpp", \
    "RosKmdAdapter_cpp607", \
    L"{", \
    L"__FILE__, ItemString -- 10" , \
    L"__LINE__, ItemLong -- 11" , \
    L"pArgs->DmaSize, ItemLong -- 12" , \
    L"sizeof(DXGKARG_BUILDPAGINGBUFFER), ItemLong -- 13" , \
    L"}")
#endif // WPP_PUBLIC_ANNOT_RosKmdAdapter_cpp607

#ifdef WPP_USER_MSG_GUID
# define WPP_ANNOTATE_RosKmdAdapter_cpp632_FINAL(P, File, Name, ...) __annotation( \
    L ## P, \
    WPP_GUID_WTEXT WPP_USER_MSG_GUID L"roskmd // SRC=" _WPPW(File) \
    L" MJ= MN=", \
    L"#typev " _WPPW(Name) \
    L" 21 \"%0 [%10!s! @ %11!u!] ERROR :DXGK_OPERATION_TRANSFER: DMA buffer is too small. (pArgs->DmaSize=%12!d!, sizeof(DXGKARG_BUILDPAGINGBUFFER)=%13!d!)\" //   LEVEL=TRACE_LEVEL_ERROR FLAGS=ROS_TRACING_DEFAULT" \
    WPP_FUNC_NAME, \
    __VA_ARGS__)
#else // WPP_USER_MSG_GUID
# define WPP_ANNOTATE_RosKmdAdapter_cpp632_FINAL(P, File, Name, ...) __annotation( \
    L ## P, \
    L"bbf0cbd6-16d9-3159-edf2-825e98213b57 roskmd // SRC=" _WPPW(File) \
    L" MJ= MN=", \
    L"#typev " _WPPW(Name) \
    L" 21 \"%0 [%10!s! @ %11!u!] ERROR :DXGK_OPERATION_TRANSFER: DMA buffer is too small. (pArgs->DmaSize=%12!d!, sizeof(DXGKARG_BUILDPAGINGBUFFER)=%13!d!)\" //   LEVEL=TRACE_LEVEL_ERROR FLAGS=ROS_TRACING_DEFAULT" \
    WPP_FUNC_NAME, \
    __VA_ARGS__)
#endif // WPP_USER_MSG_GUID

#ifdef WPP_PUBLIC_ANNOT_RosKmdAdapter_cpp632
# define WPP_ANNOTATE_RosKmdAdapter_cpp632 WPP_ANNOTATE_RosKmdAdapter_cpp632_FINAL( \
    "TMF:", \
    "Unknown_cxx00", \
    "Unknown_cxx00", \
    L"{", \
    L"Arg, ItemString -- 10" , \
    L"Arg, ItemLong -- 11" , \
    L"Arg, ItemLong -- 12" , \
    L"Arg, ItemLong -- 13" , \
    L"}", \
    L"PUBLIC_TMF:")
# ifndef WPP_PUBLIC_TMC
#  define WPP_PUBLIC_TMC // Adds "PUBLIC_TMF:" to the control guid annotation
# endif
#else // WPP_PUBLIC_ANNOT_RosKmdAdapter_cpp632
# define WPP_ANNOTATE_RosKmdAdapter_cpp632 WPP_ANNOTATE_RosKmdAdapter_cpp632_FINAL( \
    "TMF:", \
    "RosKmdAdapter.cpp", \
    "RosKmdAdapter_cpp632", \
    L"{", \
    L"__FILE__, ItemString -- 10" , \
    L"__LINE__, ItemLong -- 11" , \
    L"pArgs->DmaSize, ItemLong -- 12" , \
    L"sizeof(DXGKARG_BUILDPAGINGBUFFER), ItemLong -- 13" , \
    L"}")
#endif // WPP_PUBLIC_ANNOT_RosKmdAdapter_cpp632

#ifdef WPP_USER_MSG_GUID
# define WPP_ANNOTATE_RosKmdAdapter_cpp682_FINAL(P, File, Name, ...) __annotation( \
    L ## P, \
    WPP_GUID_WTEXT WPP_USER_MSG_GUID L"roskmd // SRC=" _WPPW(File) \
    L" MJ= MN=", \
    L"#typev " _WPPW(Name) \
    L" 22 \"%0 [%10!s! @ %11!u!] WARNING :Unsupported IO Control Code. (VideoRequestPacketPtr->IoControlCode = 0x%12!x!)\" //   LEVEL=TRACE_LEVEL_WARNING FLAGS=ROS_TRACING_DEFAULT" \
    WPP_FUNC_NAME, \
    __VA_ARGS__)
#else // WPP_USER_MSG_GUID
# define WPP_ANNOTATE_RosKmdAdapter_cpp682_FINAL(P, File, Name, ...) __annotation( \
    L ## P, \
    L"bbf0cbd6-16d9-3159-edf2-825e98213b57 roskmd // SRC=" _WPPW(File) \
    L" MJ= MN=", \
    L"#typev " _WPPW(Name) \
    L" 22 \"%0 [%10!s! @ %11!u!] WARNING :Unsupported IO Control Code. (VideoRequestPacketPtr->IoControlCode = 0x%12!x!)\" //   LEVEL=TRACE_LEVEL_WARNING FLAGS=ROS_TRACING_DEFAULT" \
    WPP_FUNC_NAME, \
    __VA_ARGS__)
#endif // WPP_USER_MSG_GUID

#ifdef WPP_PUBLIC_ANNOT_RosKmdAdapter_cpp682
# define WPP_ANNOTATE_RosKmdAdapter_cpp682 WPP_ANNOTATE_RosKmdAdapter_cpp682_FINAL( \
    "TMF:", \
    "Unknown_cxx00", \
    "Unknown_cxx00", \
    L"{", \
    L"Arg, ItemString -- 10" , \
    L"Arg, ItemLong -- 11" , \
    L"Arg, ItemLong -- 12" , \
    L"}", \
    L"PUBLIC_TMF:")
# ifndef WPP_PUBLIC_TMC
#  define WPP_PUBLIC_TMC // Adds "PUBLIC_TMF:" to the control guid annotation
# endif
#else // WPP_PUBLIC_ANNOT_RosKmdAdapter_cpp682
# define WPP_ANNOTATE_RosKmdAdapter_cpp682 WPP_ANNOTATE_RosKmdAdapter_cpp682_FINAL( \
    "TMF:", \
    "RosKmdAdapter.cpp", \
    "RosKmdAdapter_cpp682", \
    L"{", \
    L"__FILE__, ItemString -- 10" , \
    L"__LINE__, ItemLong -- 11" , \
    L"VideoRequestPacket->IoControlCode, ItemLong -- 12" , \
    L"}")
#endif // WPP_PUBLIC_ANNOT_RosKmdAdapter_cpp682

#ifdef WPP_USER_MSG_GUID
# define WPP_ANNOTATE_RosKmdAdapter_cpp786_FINAL(P, File, Name, ...) __annotation( \
    L ## P, \
    WPP_GUID_WTEXT WPP_USER_MSG_GUID L"roskmd // SRC=" _WPPW(File) \
    L" MJ= MN=", \
    L"#typev " _WPPW(Name) \
    L" 23 \"%0 [%10!s! @ %11!u!] LOW MEMORY :Failed to allocate nonpaged pool for sizeof(RosKmdResource) structure. (sizeof(RosKmdResource)=%12!d!)\" //   LEVEL=TRACE_LEVEL_ERROR FLAGS=ROS_TRACING_DEFAULT" \
    WPP_FUNC_NAME, \
    __VA_ARGS__)
#else // WPP_USER_MSG_GUID
# define WPP_ANNOTATE_RosKmdAdapter_cpp786_FINAL(P, File, Name, ...) __annotation( \
    L ## P, \
    L"bbf0cbd6-16d9-3159-edf2-825e98213b57 roskmd // SRC=" _WPPW(File) \
    L" MJ= MN=", \
    L"#typev " _WPPW(Name) \
    L" 23 \"%0 [%10!s! @ %11!u!] LOW MEMORY :Failed to allocate nonpaged pool for sizeof(RosKmdResource) structure. (sizeof(RosKmdResource)=%12!d!)\" //   LEVEL=TRACE_LEVEL_ERROR FLAGS=ROS_TRACING_DEFAULT" \
    WPP_FUNC_NAME, \
    __VA_ARGS__)
#endif // WPP_USER_MSG_GUID

#ifdef WPP_PUBLIC_ANNOT_RosKmdAdapter_cpp786
# define WPP_ANNOTATE_RosKmdAdapter_cpp786 WPP_ANNOTATE_RosKmdAdapter_cpp786_FINAL( \
    "TMF:", \
    "Unknown_cxx00", \
    "Unknown_cxx00", \
    L"{", \
    L"Arg, ItemString -- 10" , \
    L"Arg, ItemLong -- 11" , \
    L"Arg, ItemLong -- 12" , \
    L"}", \
    L"PUBLIC_TMF:")
# ifndef WPP_PUBLIC_TMC
#  define WPP_PUBLIC_TMC // Adds "PUBLIC_TMF:" to the control guid annotation
# endif
#else // WPP_PUBLIC_ANNOT_RosKmdAdapter_cpp786
# define WPP_ANNOTATE_RosKmdAdapter_cpp786 WPP_ANNOTATE_RosKmdAdapter_cpp786_FINAL( \
    "TMF:", \
    "RosKmdAdapter.cpp", \
    "RosKmdAdapter_cpp786", \
    L"{", \
    L"__FILE__, ItemString -- 10" , \
    L"__LINE__, ItemLong -- 11" , \
    L"sizeof(RosKmdResource), ItemLong -- 12" , \
    L"}")
#endif // WPP_PUBLIC_ANNOT_RosKmdAdapter_cpp786

#ifdef WPP_USER_MSG_GUID
# define WPP_ANNOTATE_RosKmdAdapter_cpp811_FINAL(P, File, Name, ...) __annotation( \
    L ## P, \
    WPP_GUID_WTEXT WPP_USER_MSG_GUID L"roskmd // SRC=" _WPPW(File) \
    L" MJ= MN=", \
    L"#typev " _WPPW(Name) \
    L" 24 \"%0 [%10!s! @ %11!u!] ERROR :Failed to allocated nonpaged pool for RosKmdAllocation. (sizeof(RosKmdAllocation)=%12!d!)\" //   LEVEL=TRACE_LEVEL_ERROR FLAGS=ROS_TRACING_DEFAULT" \
    WPP_FUNC_NAME, \
    __VA_ARGS__)
#else // WPP_USER_MSG_GUID
# define WPP_ANNOTATE_RosKmdAdapter_cpp811_FINAL(P, File, Name, ...) __annotation( \
    L ## P, \
    L"bbf0cbd6-16d9-3159-edf2-825e98213b57 roskmd // SRC=" _WPPW(File) \
    L" MJ= MN=", \
    L"#typev " _WPPW(Name) \
    L" 24 \"%0 [%10!s! @ %11!u!] ERROR :Failed to allocated nonpaged pool for RosKmdAllocation. (sizeof(RosKmdAllocation)=%12!d!)\" //   LEVEL=TRACE_LEVEL_ERROR FLAGS=ROS_TRACING_DEFAULT" \
    WPP_FUNC_NAME, \
    __VA_ARGS__)
#endif // WPP_USER_MSG_GUID

#ifdef WPP_PUBLIC_ANNOT_RosKmdAdapter_cpp811
# define WPP_ANNOTATE_RosKmdAdapter_cpp811 WPP_ANNOTATE_RosKmdAdapter_cpp811_FINAL( \
    "TMF:", \
    "Unknown_cxx00", \
    "Unknown_cxx00", \
    L"{", \
    L"Arg, ItemString -- 10" , \
    L"Arg, ItemLong -- 11" , \
    L"Arg, ItemLong -- 12" , \
    L"}", \
    L"PUBLIC_TMF:")
# ifndef WPP_PUBLIC_TMC
#  define WPP_PUBLIC_TMC // Adds "PUBLIC_TMF:" to the control guid annotation
# endif
#else // WPP_PUBLIC_ANNOT_RosKmdAdapter_cpp811
# define WPP_ANNOTATE_RosKmdAdapter_cpp811 WPP_ANNOTATE_RosKmdAdapter_cpp811_FINAL( \
    "TMF:", \
    "RosKmdAdapter.cpp", \
    "RosKmdAdapter_cpp811", \
    L"{", \
    L"__FILE__, ItemString -- 10" , \
    L"__LINE__, ItemLong -- 11" , \
    L"sizeof(RosKmdAllocation), ItemLong -- 12" , \
    L"}")
#endif // WPP_PUBLIC_ANNOT_RosKmdAdapter_cpp811

#ifdef WPP_USER_MSG_GUID
# define WPP_ANNOTATE_RosKmdAdapter_cpp878_FINAL(P, File, Name, ...) __annotation( \
    L ## P, \
    WPP_GUID_WTEXT WPP_USER_MSG_GUID L"roskmd // SRC=" _WPPW(File) \
    L" MJ= MN=", \
    L"#typev " _WPPW(Name) \
    L" 25 \"%0 [%10!s! @ %11!u!] TRACE :Created allocation. (Flags.CpuVisible=%12!d!, Flags.Cacheable=%13!d!, Size=%14!Id!)\" //   LEVEL=TRACE_LEVEL_VERBOSE FLAGS=ROS_TRACING_DEFAULT" \
    WPP_FUNC_NAME, \
    __VA_ARGS__)
#else // WPP_USER_MSG_GUID
# define WPP_ANNOTATE_RosKmdAdapter_cpp878_FINAL(P, File, Name, ...) __annotation( \
    L ## P, \
    L"bbf0cbd6-16d9-3159-edf2-825e98213b57 roskmd // SRC=" _WPPW(File) \
    L" MJ= MN=", \
    L"#typev " _WPPW(Name) \
    L" 25 \"%0 [%10!s! @ %11!u!] TRACE :Created allocation. (Flags.CpuVisible=%12!d!, Flags.Cacheable=%13!d!, Size=%14!Id!)\" //   LEVEL=TRACE_LEVEL_VERBOSE FLAGS=ROS_TRACING_DEFAULT" \
    WPP_FUNC_NAME, \
    __VA_ARGS__)
#endif // WPP_USER_MSG_GUID

#ifdef WPP_PUBLIC_ANNOT_RosKmdAdapter_cpp878
# define WPP_ANNOTATE_RosKmdAdapter_cpp878 WPP_ANNOTATE_RosKmdAdapter_cpp878_FINAL( \
    "TMF:", \
    "Unknown_cxx00", \
    "Unknown_cxx00", \
    L"{", \
    L"Arg, ItemString -- 10" , \
    L"Arg, ItemLong -- 11" , \
    L"Arg, ItemLong -- 12" , \
    L"Arg, ItemLong -- 13" , \
    L"Arg, ItemPtr -- 14" , \
    L"}", \
    L"PUBLIC_TMF:")
# ifndef WPP_PUBLIC_TMC
#  define WPP_PUBLIC_TMC // Adds "PUBLIC_TMF:" to the control guid annotation
# endif
#else // WPP_PUBLIC_ANNOT_RosKmdAdapter_cpp878
# define WPP_ANNOTATE_RosKmdAdapter_cpp878 WPP_ANNOTATE_RosKmdAdapter_cpp878_FINAL( \
    "TMF:", \
    "RosKmdAdapter.cpp", \
    "RosKmdAdapter_cpp878", \
    L"{", \
    L"__FILE__, ItemString -- 10" , \
    L"__LINE__, ItemLong -- 11" , \
    L"pAllocationInfo->Flags.CpuVisible, ItemLong -- 12" , \
    L"pAllocationInfo->Flags.Cached, ItemLong -- 13" , \
    L"pAllocationInfo->Size, ItemPtr -- 14" , \
    L"}")
#endif // WPP_PUBLIC_ANNOT_RosKmdAdapter_cpp878

#ifdef WPP_USER_MSG_GUID
# define WPP_ANNOTATE_RosKmdAdapter_cpp912_FINAL(P, File, Name, ...) __annotation( \
    L ## P, \
    WPP_GUID_WTEXT WPP_USER_MSG_GUID L"roskmd // SRC=" _WPPW(File) \
    L" MJ= MN=", \
    L"#typev " _WPPW(Name) \
    L" 26 \"%0 [%10!s! @ %11!u!] TRACE :QueryAdapterInfo was called. (Type=%12!d!)\" //   LEVEL=TRACE_LEVEL_VERBOSE FLAGS=ROS_TRACING_DEFAULT" \
    WPP_FUNC_NAME, \
    __VA_ARGS__)
#else // WPP_USER_MSG_GUID
# define WPP_ANNOTATE_RosKmdAdapter_cpp912_FINAL(P, File, Name, ...) __annotation( \
    L ## P, \
    L"bbf0cbd6-16d9-3159-edf2-825e98213b57 roskmd // SRC=" _WPPW(File) \
    L" MJ= MN=", \
    L"#typev " _WPPW(Name) \
    L" 26 \"%0 [%10!s! @ %11!u!] TRACE :QueryAdapterInfo was called. (Type=%12!d!)\" //   LEVEL=TRACE_LEVEL_VERBOSE FLAGS=ROS_TRACING_DEFAULT" \
    WPP_FUNC_NAME, \
    __VA_ARGS__)
#endif // WPP_USER_MSG_GUID

#ifdef WPP_PUBLIC_ANNOT_RosKmdAdapter_cpp912
# define WPP_ANNOTATE_RosKmdAdapter_cpp912 WPP_ANNOTATE_RosKmdAdapter_cpp912_FINAL( \
    "TMF:", \
    "Unknown_cxx00", \
    "Unknown_cxx00", \
    L"{", \
    L"Arg, ItemString -- 10" , \
    L"Arg, ItemLong -- 11" , \
    L"Arg, ItemLong -- 12" , \
    L"}", \
    L"PUBLIC_TMF:")
# ifndef WPP_PUBLIC_TMC
#  define WPP_PUBLIC_TMC // Adds "PUBLIC_TMF:" to the control guid annotation
# endif
#else // WPP_PUBLIC_ANNOT_RosKmdAdapter_cpp912
# define WPP_ANNOTATE_RosKmdAdapter_cpp912 WPP_ANNOTATE_RosKmdAdapter_cpp912_FINAL( \
    "TMF:", \
    "RosKmdAdapter.cpp", \
    "RosKmdAdapter_cpp912", \
    L"{", \
    L"__FILE__, ItemString -- 10" , \
    L"__LINE__, ItemLong -- 11" , \
    L"pQueryAdapterInfo->Type, ItemLong -- 12" , \
    L"}")
#endif // WPP_PUBLIC_ANNOT_RosKmdAdapter_cpp912

#ifdef WPP_USER_MSG_GUID
# define WPP_ANNOTATE_RosKmdAdapter_cpp922_FINAL(P, File, Name, ...) __annotation( \
    L ## P, \
    WPP_GUID_WTEXT WPP_USER_MSG_GUID L"roskmd // SRC=" _WPPW(File) \
    L" MJ= MN=", \
    L"#typev " _WPPW(Name) \
    L" 27 \"%0 [%10!s! @ %11!u!] ERROR :Output buffer is too small. (pQueryAdapterInfo->OutputDataSize=%12!d!, sizeof(ROSADAPTERINFO)=%13!d!)\" //   LEVEL=TRACE_LEVEL_ERROR FLAGS=ROS_TRACING_DEFAULT" \
    WPP_FUNC_NAME, \
    __VA_ARGS__)
#else // WPP_USER_MSG_GUID
# define WPP_ANNOTATE_RosKmdAdapter_cpp922_FINAL(P, File, Name, ...) __annotation( \
    L ## P, \
    L"bbf0cbd6-16d9-3159-edf2-825e98213b57 roskmd // SRC=" _WPPW(File) \
    L" MJ= MN=", \
    L"#typev " _WPPW(Name) \
    L" 27 \"%0 [%10!s! @ %11!u!] ERROR :Output buffer is too small. (pQueryAdapterInfo->OutputDataSize=%12!d!, sizeof(ROSADAPTERINFO)=%13!d!)\" //   LEVEL=TRACE_LEVEL_ERROR FLAGS=ROS_TRACING_DEFAULT" \
    WPP_FUNC_NAME, \
    __VA_ARGS__)
#endif // WPP_USER_MSG_GUID

#ifdef WPP_PUBLIC_ANNOT_RosKmdAdapter_cpp922
# define WPP_ANNOTATE_RosKmdAdapter_cpp922 WPP_ANNOTATE_RosKmdAdapter_cpp922_FINAL( \
    "TMF:", \
    "Unknown_cxx00", \
    "Unknown_cxx00", \
    L"{", \
    L"Arg, ItemString -- 10" , \
    L"Arg, ItemLong -- 11" , \
    L"Arg, ItemLong -- 12" , \
    L"Arg, ItemLong -- 13" , \
    L"}", \
    L"PUBLIC_TMF:")
# ifndef WPP_PUBLIC_TMC
#  define WPP_PUBLIC_TMC // Adds "PUBLIC_TMF:" to the control guid annotation
# endif
#else // WPP_PUBLIC_ANNOT_RosKmdAdapter_cpp922
# define WPP_ANNOTATE_RosKmdAdapter_cpp922 WPP_ANNOTATE_RosKmdAdapter_cpp922_FINAL( \
    "TMF:", \
    "RosKmdAdapter.cpp", \
    "RosKmdAdapter_cpp922", \
    L"{", \
    L"__FILE__, ItemString -- 10" , \
    L"__LINE__, ItemLong -- 11" , \
    L"pQueryAdapterInfo->OutputDataSize, ItemLong -- 12" , \
    L"sizeof(ROSADAPTERINFO), ItemLong -- 13" , \
    L"}")
#endif // WPP_PUBLIC_ANNOT_RosKmdAdapter_cpp922

#ifdef WPP_USER_MSG_GUID
# define WPP_ANNOTATE_RosKmdAdapter_cpp947_FINAL(P, File, Name, ...) __annotation( \
    L ## P, \
    WPP_GUID_WTEXT WPP_USER_MSG_GUID L"roskmd // SRC=" _WPPW(File) \
    L" MJ= MN=", \
    L"#typev " _WPPW(Name) \
    L" 28 \"%0 [%10!s! @ %11!u!] ASSERTION :Output buffer is too small. (pQueryAdapterInfo->OutputDataSize=%12!d!, sizeof(DXGK_DRIVERCAPS)=%13!d!)\" //   LEVEL=TRACE_LEVEL_ERROR FLAGS=ROS_TRACING_DEBUG" \
    WPP_FUNC_NAME, \
    __VA_ARGS__)
#else // WPP_USER_MSG_GUID
# define WPP_ANNOTATE_RosKmdAdapter_cpp947_FINAL(P, File, Name, ...) __annotation( \
    L ## P, \
    L"bbf0cbd6-16d9-3159-edf2-825e98213b57 roskmd // SRC=" _WPPW(File) \
    L" MJ= MN=", \
    L"#typev " _WPPW(Name) \
    L" 28 \"%0 [%10!s! @ %11!u!] ASSERTION :Output buffer is too small. (pQueryAdapterInfo->OutputDataSize=%12!d!, sizeof(DXGK_DRIVERCAPS)=%13!d!)\" //   LEVEL=TRACE_LEVEL_ERROR FLAGS=ROS_TRACING_DEBUG" \
    WPP_FUNC_NAME, \
    __VA_ARGS__)
#endif // WPP_USER_MSG_GUID

#ifdef WPP_PUBLIC_ANNOT_RosKmdAdapter_cpp947
# define WPP_ANNOTATE_RosKmdAdapter_cpp947 WPP_ANNOTATE_RosKmdAdapter_cpp947_FINAL( \
    "TMF:", \
    "Unknown_cxx00", \
    "Unknown_cxx00", \
    L"{", \
    L"Arg, ItemString -- 10" , \
    L"Arg, ItemLong -- 11" , \
    L"Arg, ItemLong -- 12" , \
    L"Arg, ItemLong -- 13" , \
    L"}", \
    L"PUBLIC_TMF:")
# ifndef WPP_PUBLIC_TMC
#  define WPP_PUBLIC_TMC // Adds "PUBLIC_TMF:" to the control guid annotation
# endif
#else // WPP_PUBLIC_ANNOT_RosKmdAdapter_cpp947
# define WPP_ANNOTATE_RosKmdAdapter_cpp947 WPP_ANNOTATE_RosKmdAdapter_cpp947_FINAL( \
    "TMF:", \
    "RosKmdAdapter.cpp", \
    "RosKmdAdapter_cpp947", \
    L"{", \
    L"__FILE__, ItemString -- 10" , \
    L"__LINE__, ItemLong -- 11" , \
    L"pQueryAdapterInfo->OutputDataSize, ItemLong -- 12" , \
    L"sizeof(DXGK_DRIVERCAPS), ItemLong -- 13" , \
    L"}")
#endif // WPP_PUBLIC_ANNOT_RosKmdAdapter_cpp947

#ifdef WPP_USER_MSG_GUID
# define WPP_ANNOTATE_RosKmdAdapter_cpp1177_FINAL(P, File, Name, ...) __annotation( \
    L ## P, \
    WPP_GUID_WTEXT WPP_USER_MSG_GUID L"roskmd // SRC=" _WPPW(File) \
    L" MJ= MN=", \
    L"#typev " _WPPW(Name) \
    L" 29 \"%0 [%10!s! @ %11!u!] ASSERTION :Output buffer is too small. (pQueryAdapterInfo->OutputDataSize=%12!d!, sizeof(DXGK_QUERYSEGMENTOUT3)=%13!d!)\" //   LEVEL=TRACE_LEVEL_ERROR FLAGS=ROS_TRACING_DEBUG" \
    WPP_FUNC_NAME, \
    __VA_ARGS__)
#else // WPP_USER_MSG_GUID
# define WPP_ANNOTATE_RosKmdAdapter_cpp1177_FINAL(P, File, Name, ...) __annotation( \
    L ## P, \
    L"bbf0cbd6-16d9-3159-edf2-825e98213b57 roskmd // SRC=" _WPPW(File) \
    L" MJ= MN=", \
    L"#typev " _WPPW(Name) \
    L" 29 \"%0 [%10!s! @ %11!u!] ASSERTION :Output buffer is too small. (pQueryAdapterInfo->OutputDataSize=%12!d!, sizeof(DXGK_QUERYSEGMENTOUT3)=%13!d!)\" //   LEVEL=TRACE_LEVEL_ERROR FLAGS=ROS_TRACING_DEBUG" \
    WPP_FUNC_NAME, \
    __VA_ARGS__)
#endif // WPP_USER_MSG_GUID

#ifdef WPP_PUBLIC_ANNOT_RosKmdAdapter_cpp1177
# define WPP_ANNOTATE_RosKmdAdapter_cpp1177 WPP_ANNOTATE_RosKmdAdapter_cpp1177_FINAL( \
    "TMF:", \
    "Unknown_cxx00", \
    "Unknown_cxx00", \
    L"{", \
    L"Arg, ItemString -- 10" , \
    L"Arg, ItemLong -- 11" , \
    L"Arg, ItemLong -- 12" , \
    L"Arg, ItemLong -- 13" , \
    L"}", \
    L"PUBLIC_TMF:")
# ifndef WPP_PUBLIC_TMC
#  define WPP_PUBLIC_TMC // Adds "PUBLIC_TMF:" to the control guid annotation
# endif
#else // WPP_PUBLIC_ANNOT_RosKmdAdapter_cpp1177
# define WPP_ANNOTATE_RosKmdAdapter_cpp1177 WPP_ANNOTATE_RosKmdAdapter_cpp1177_FINAL( \
    "TMF:", \
    "RosKmdAdapter.cpp", \
    "RosKmdAdapter_cpp1177", \
    L"{", \
    L"__FILE__, ItemString -- 10" , \
    L"__LINE__, ItemLong -- 11" , \
    L"pQueryAdapterInfo->OutputDataSize, ItemLong -- 12" , \
    L"sizeof(DXGK_QUERYSEGMENTOUT3), ItemLong -- 13" , \
    L"}")
#endif // WPP_PUBLIC_ANNOT_RosKmdAdapter_cpp1177

#ifdef WPP_USER_MSG_GUID
# define WPP_ANNOTATE_RosKmdAdapter_cpp1255_FINAL(P, File, Name, ...) __annotation( \
    L ## P, \
    WPP_GUID_WTEXT WPP_USER_MSG_GUID L"roskmd // SRC=" _WPPW(File) \
    L" MJ= MN=", \
    L"#typev " _WPPW(Name) \
    L" 30 \"%0 [%10!s! @ %11!u!] ASSERTION :Output buffer is unexpected size. (pQueryAdapterInfo->OutputDataSize=%12!d!, sizeof(UINT)=%13!d!)\" //   LEVEL=TRACE_LEVEL_ERROR FLAGS=ROS_TRACING_DEBUG" \
    WPP_FUNC_NAME, \
    __VA_ARGS__)
#else // WPP_USER_MSG_GUID
# define WPP_ANNOTATE_RosKmdAdapter_cpp1255_FINAL(P, File, Name, ...) __annotation( \
    L ## P, \
    L"bbf0cbd6-16d9-3159-edf2-825e98213b57 roskmd // SRC=" _WPPW(File) \
    L" MJ= MN=", \
    L"#typev " _WPPW(Name) \
    L" 30 \"%0 [%10!s! @ %11!u!] ASSERTION :Output buffer is unexpected size. (pQueryAdapterInfo->OutputDataSize=%12!d!, sizeof(UINT)=%13!d!)\" //   LEVEL=TRACE_LEVEL_ERROR FLAGS=ROS_TRACING_DEBUG" \
    WPP_FUNC_NAME, \
    __VA_ARGS__)
#endif // WPP_USER_MSG_GUID

#ifdef WPP_PUBLIC_ANNOT_RosKmdAdapter_cpp1255
# define WPP_ANNOTATE_RosKmdAdapter_cpp1255 WPP_ANNOTATE_RosKmdAdapter_cpp1255_FINAL( \
    "TMF:", \
    "Unknown_cxx00", \
    "Unknown_cxx00", \
    L"{", \
    L"Arg, ItemString -- 10" , \
    L"Arg, ItemLong -- 11" , \
    L"Arg, ItemLong -- 12" , \
    L"Arg, ItemLong -- 13" , \
    L"}", \
    L"PUBLIC_TMF:")
# ifndef WPP_PUBLIC_TMC
#  define WPP_PUBLIC_TMC // Adds "PUBLIC_TMF:" to the control guid annotation
# endif
#else // WPP_PUBLIC_ANNOT_RosKmdAdapter_cpp1255
# define WPP_ANNOTATE_RosKmdAdapter_cpp1255 WPP_ANNOTATE_RosKmdAdapter_cpp1255_FINAL( \
    "TMF:", \
    "RosKmdAdapter.cpp", \
    "RosKmdAdapter_cpp1255", \
    L"{", \
    L"__FILE__, ItemString -- 10" , \
    L"__LINE__, ItemLong -- 11" , \
    L"pQueryAdapterInfo->OutputDataSize, ItemLong -- 12" , \
    L"sizeof(UINT), ItemLong -- 13" , \
    L"}")
#endif // WPP_PUBLIC_ANNOT_RosKmdAdapter_cpp1255

#ifdef WPP_USER_MSG_GUID
# define WPP_ANNOTATE_RosKmdAdapter_cpp1273_FINAL(P, File, Name, ...) __annotation( \
    L ## P, \
    WPP_GUID_WTEXT WPP_USER_MSG_GUID L"roskmd // SRC=" _WPPW(File) \
    L" MJ= MN=", \
    L"#typev " _WPPW(Name) \
    L" 31 \"%0 [%10!s! @ %11!u!] ASSERTION :Input buffer is not of the expected size. (pQueryAdapterInfo->InputDataSize=%12!d!, sizeof(UINT)=%13!d!)\" //   LEVEL=TRACE_LEVEL_ERROR FLAGS=ROS_TRACING_DEBUG" \
    WPP_FUNC_NAME, \
    __VA_ARGS__)
#else // WPP_USER_MSG_GUID
# define WPP_ANNOTATE_RosKmdAdapter_cpp1273_FINAL(P, File, Name, ...) __annotation( \
    L ## P, \
    L"bbf0cbd6-16d9-3159-edf2-825e98213b57 roskmd // SRC=" _WPPW(File) \
    L" MJ= MN=", \
    L"#typev " _WPPW(Name) \
    L" 31 \"%0 [%10!s! @ %11!u!] ASSERTION :Input buffer is not of the expected size. (pQueryAdapterInfo->InputDataSize=%12!d!, sizeof(UINT)=%13!d!)\" //   LEVEL=TRACE_LEVEL_ERROR FLAGS=ROS_TRACING_DEBUG" \
    WPP_FUNC_NAME, \
    __VA_ARGS__)
#endif // WPP_USER_MSG_GUID

#ifdef WPP_PUBLIC_ANNOT_RosKmdAdapter_cpp1273
# define WPP_ANNOTATE_RosKmdAdapter_cpp1273 WPP_ANNOTATE_RosKmdAdapter_cpp1273_FINAL( \
    "TMF:", \
    "Unknown_cxx00", \
    "Unknown_cxx00", \
    L"{", \
    L"Arg, ItemString -- 10" , \
    L"Arg, ItemLong -- 11" , \
    L"Arg, ItemLong -- 12" , \
    L"Arg, ItemLong -- 13" , \
    L"}", \
    L"PUBLIC_TMF:")
# ifndef WPP_PUBLIC_TMC
#  define WPP_PUBLIC_TMC // Adds "PUBLIC_TMF:" to the control guid annotation
# endif
#else // WPP_PUBLIC_ANNOT_RosKmdAdapter_cpp1273
# define WPP_ANNOTATE_RosKmdAdapter_cpp1273 WPP_ANNOTATE_RosKmdAdapter_cpp1273_FINAL( \
    "TMF:", \
    "RosKmdAdapter.cpp", \
    "RosKmdAdapter_cpp1273", \
    L"{", \
    L"__FILE__, ItemString -- 10" , \
    L"__LINE__, ItemLong -- 11" , \
    L"pQueryAdapterInfo->InputDataSize, ItemLong -- 12" , \
    L"sizeof(UINT), ItemLong -- 13" , \
    L"}")
#endif // WPP_PUBLIC_ANNOT_RosKmdAdapter_cpp1273

#ifdef WPP_USER_MSG_GUID
# define WPP_ANNOTATE_RosKmdAdapter_cpp1282_FINAL(P, File, Name, ...) __annotation( \
    L ## P, \
    WPP_GUID_WTEXT WPP_USER_MSG_GUID L"roskmd // SRC=" _WPPW(File) \
    L" MJ= MN=", \
    L"#typev " _WPPW(Name) \
    L" 32 \"%0 [%10!s! @ %11!u!] ASSERTION :Output buffer is too small. (pQueryAdapterInfo->OutputDataSize=%12!d!, sizeof(DXGK_POWER_RUNTIME_COMPONENT)=%13!d!)\" //   LEVEL=TRACE_LEVEL_ERROR FLAGS=ROS_TRACING_DEBUG" \
    WPP_FUNC_NAME, \
    __VA_ARGS__)
#else // WPP_USER_MSG_GUID
# define WPP_ANNOTATE_RosKmdAdapter_cpp1282_FINAL(P, File, Name, ...) __annotation( \
    L ## P, \
    L"bbf0cbd6-16d9-3159-edf2-825e98213b57 roskmd // SRC=" _WPPW(File) \
    L" MJ= MN=", \
    L"#typev " _WPPW(Name) \
    L" 32 \"%0 [%10!s! @ %11!u!] ASSERTION :Output buffer is too small. (pQueryAdapterInfo->OutputDataSize=%12!d!, sizeof(DXGK_POWER_RUNTIME_COMPONENT)=%13!d!)\" //   LEVEL=TRACE_LEVEL_ERROR FLAGS=ROS_TRACING_DEBUG" \
    WPP_FUNC_NAME, \
    __VA_ARGS__)
#endif // WPP_USER_MSG_GUID

#ifdef WPP_PUBLIC_ANNOT_RosKmdAdapter_cpp1282
# define WPP_ANNOTATE_RosKmdAdapter_cpp1282 WPP_ANNOTATE_RosKmdAdapter_cpp1282_FINAL( \
    "TMF:", \
    "Unknown_cxx00", \
    "Unknown_cxx00", \
    L"{", \
    L"Arg, ItemString -- 10" , \
    L"Arg, ItemLong -- 11" , \
    L"Arg, ItemLong -- 12" , \
    L"Arg, ItemLong -- 13" , \
    L"}", \
    L"PUBLIC_TMF:")
# ifndef WPP_PUBLIC_TMC
#  define WPP_PUBLIC_TMC // Adds "PUBLIC_TMF:" to the control guid annotation
# endif
#else // WPP_PUBLIC_ANNOT_RosKmdAdapter_cpp1282
# define WPP_ANNOTATE_RosKmdAdapter_cpp1282 WPP_ANNOTATE_RosKmdAdapter_cpp1282_FINAL( \
    "TMF:", \
    "RosKmdAdapter.cpp", \
    "RosKmdAdapter_cpp1282", \
    L"{", \
    L"__FILE__, ItemString -- 10" , \
    L"__LINE__, ItemLong -- 11" , \
    L"pQueryAdapterInfo->OutputDataSize, ItemLong -- 12" , \
    L"sizeof(DXGK_POWER_RUNTIME_COMPONENT), ItemLong -- 13" , \
    L"}")
#endif // WPP_PUBLIC_ANNOT_RosKmdAdapter_cpp1282

#ifdef WPP_USER_MSG_GUID
# define WPP_ANNOTATE_RosKmdAdapter_cpp1295_FINAL(P, File, Name, ...) __annotation( \
    L ## P, \
    WPP_GUID_WTEXT WPP_USER_MSG_GUID L"roskmd // SRC=" _WPPW(File) \
    L" MJ= MN=", \
    L"#typev " _WPPW(Name) \
    L" 33 \"%0 [%10!s! @ %11!u!] ERROR :GetPowerComponentInfo(...) failed. (status=%12!s!, ComponentIndex=%13!d!, pPowerComponent=0x%14!p!)\" //   LEVEL=TRACE_LEVEL_ERROR FLAGS=ROS_TRACING_DEFAULT" \
    WPP_FUNC_NAME, \
    __VA_ARGS__)
#else // WPP_USER_MSG_GUID
# define WPP_ANNOTATE_RosKmdAdapter_cpp1295_FINAL(P, File, Name, ...) __annotation( \
    L ## P, \
    L"bbf0cbd6-16d9-3159-edf2-825e98213b57 roskmd // SRC=" _WPPW(File) \
    L" MJ= MN=", \
    L"#typev " _WPPW(Name) \
    L" 33 \"%0 [%10!s! @ %11!u!] ERROR :GetPowerComponentInfo(...) failed. (status=%12!s!, ComponentIndex=%13!d!, pPowerComponent=0x%14!p!)\" //   LEVEL=TRACE_LEVEL_ERROR FLAGS=ROS_TRACING_DEFAULT" \
    WPP_FUNC_NAME, \
    __VA_ARGS__)
#endif // WPP_USER_MSG_GUID

#ifdef WPP_PUBLIC_ANNOT_RosKmdAdapter_cpp1295
# define WPP_ANNOTATE_RosKmdAdapter_cpp1295 WPP_ANNOTATE_RosKmdAdapter_cpp1295_FINAL( \
    "TMF:", \
    "Unknown_cxx00", \
    "Unknown_cxx00", \
    L"{", \
    L"Arg, ItemString -- 10" , \
    L"Arg, ItemLong -- 11" , \
    L"Arg, ItemNTSTATUS -- 12" , \
    L"Arg, ItemLong -- 13" , \
    L"Arg, ItemPtr -- 14" , \
    L"}", \
    L"PUBLIC_TMF:")
# ifndef WPP_PUBLIC_TMC
#  define WPP_PUBLIC_TMC // Adds "PUBLIC_TMF:" to the control guid annotation
# endif
#else // WPP_PUBLIC_ANNOT_RosKmdAdapter_cpp1295
# define WPP_ANNOTATE_RosKmdAdapter_cpp1295 WPP_ANNOTATE_RosKmdAdapter_cpp1295_FINAL( \
    "TMF:", \
    "RosKmdAdapter.cpp", \
    "RosKmdAdapter_cpp1295", \
    L"{", \
    L"__FILE__, ItemString -- 10" , \
    L"__LINE__, ItemLong -- 11" , \
    L"status, ItemNTSTATUS -- 12" , \
    L"ComponentIndex, ItemLong -- 13" , \
    L"pPowerComponent, ItemPtr -- 14" , \
    L"}")
#endif // WPP_PUBLIC_ANNOT_RosKmdAdapter_cpp1295

#ifdef WPP_USER_MSG_GUID
# define WPP_ANNOTATE_RosKmdAdapter_cpp1320_FINAL(P, File, Name, ...) __annotation( \
    L ## P, \
    WPP_GUID_WTEXT WPP_USER_MSG_GUID L"roskmd // SRC=" _WPPW(File) \
    L" MJ= MN=", \
    L"#typev " _WPPW(Name) \
    L" 34 \"%0 [%10!s! @ %11!u!] WARNING :Unsupported query type. (pQueryAdapterInfo->Type=%12!d!, pQueryAdapterInfo=0x%13!p!)\" //   LEVEL=TRACE_LEVEL_WARNING FLAGS=ROS_TRACING_DEFAULT" \
    WPP_FUNC_NAME, \
    __VA_ARGS__)
#else // WPP_USER_MSG_GUID
# define WPP_ANNOTATE_RosKmdAdapter_cpp1320_FINAL(P, File, Name, ...) __annotation( \
    L ## P, \
    L"bbf0cbd6-16d9-3159-edf2-825e98213b57 roskmd // SRC=" _WPPW(File) \
    L" MJ= MN=", \
    L"#typev " _WPPW(Name) \
    L" 34 \"%0 [%10!s! @ %11!u!] WARNING :Unsupported query type. (pQueryAdapterInfo->Type=%12!d!, pQueryAdapterInfo=0x%13!p!)\" //   LEVEL=TRACE_LEVEL_WARNING FLAGS=ROS_TRACING_DEFAULT" \
    WPP_FUNC_NAME, \
    __VA_ARGS__)
#endif // WPP_USER_MSG_GUID

#ifdef WPP_PUBLIC_ANNOT_RosKmdAdapter_cpp1320
# define WPP_ANNOTATE_RosKmdAdapter_cpp1320 WPP_ANNOTATE_RosKmdAdapter_cpp1320_FINAL( \
    "TMF:", \
    "Unknown_cxx00", \
    "Unknown_cxx00", \
    L"{", \
    L"Arg, ItemString -- 10" , \
    L"Arg, ItemLong -- 11" , \
    L"Arg, ItemLong -- 12" , \
    L"Arg, ItemPtr -- 13" , \
    L"}", \
    L"PUBLIC_TMF:")
# ifndef WPP_PUBLIC_TMC
#  define WPP_PUBLIC_TMC // Adds "PUBLIC_TMF:" to the control guid annotation
# endif
#else // WPP_PUBLIC_ANNOT_RosKmdAdapter_cpp1320
# define WPP_ANNOTATE_RosKmdAdapter_cpp1320 WPP_ANNOTATE_RosKmdAdapter_cpp1320_FINAL( \
    "TMF:", \
    "RosKmdAdapter.cpp", \
    "RosKmdAdapter_cpp1320", \
    L"{", \
    L"__FILE__, ItemString -- 10" , \
    L"__LINE__, ItemLong -- 11" , \
    L"pQueryAdapterInfo->Type, ItemLong -- 12" , \
    L"pQueryAdapterInfo, ItemPtr -- 13" , \
    L"}")
#endif // WPP_PUBLIC_ANNOT_RosKmdAdapter_cpp1320

#ifdef WPP_USER_MSG_GUID
# define WPP_ANNOTATE_RosKmdAdapter_cpp1374_FINAL(P, File, Name, ...) __annotation( \
    L ## P, \
    WPP_GUID_WTEXT WPP_USER_MSG_GUID L"roskmd // SRC=" _WPPW(File) \
    L" MJ= MN=", \
    L"#typev " _WPPW(Name) \
    L" 35 \"%0 [%10!s! @ %11!u!] ASSERTION :Not implemented\" //   LEVEL=TRACE_LEVEL_ERROR FLAGS=ROS_TRACING_DEBUG" \
    WPP_FUNC_NAME, \
    __VA_ARGS__)
#else // WPP_USER_MSG_GUID
# define WPP_ANNOTATE_RosKmdAdapter_cpp1374_FINAL(P, File, Name, ...) __annotation( \
    L ## P, \
    L"bbf0cbd6-16d9-3159-edf2-825e98213b57 roskmd // SRC=" _WPPW(File) \
    L" MJ= MN=", \
    L"#typev " _WPPW(Name) \
    L" 35 \"%0 [%10!s! @ %11!u!] ASSERTION :Not implemented\" //   LEVEL=TRACE_LEVEL_ERROR FLAGS=ROS_TRACING_DEBUG" \
    WPP_FUNC_NAME, \
    __VA_ARGS__)
#endif // WPP_USER_MSG_GUID

#ifdef WPP_PUBLIC_ANNOT_RosKmdAdapter_cpp1374
# define WPP_ANNOTATE_RosKmdAdapter_cpp1374 WPP_ANNOTATE_RosKmdAdapter_cpp1374_FINAL( \
    "TMF:", \
    "Unknown_cxx00", \
    "Unknown_cxx00", \
    L"{", \
    L"Arg, ItemString -- 10" , \
    L"Arg, ItemLong -- 11" , \
    L"}", \
    L"PUBLIC_TMF:")
# ifndef WPP_PUBLIC_TMC
#  define WPP_PUBLIC_TMC // Adds "PUBLIC_TMF:" to the control guid annotation
# endif
#else // WPP_PUBLIC_ANNOT_RosKmdAdapter_cpp1374
# define WPP_ANNOTATE_RosKmdAdapter_cpp1374 WPP_ANNOTATE_RosKmdAdapter_cpp1374_FINAL( \
    "TMF:", \
    "RosKmdAdapter.cpp", \
    "RosKmdAdapter_cpp1374", \
    L"{", \
    L"__FILE__, ItemString -- 10" , \
    L"__LINE__, ItemLong -- 11" , \
    L"}")
#endif // WPP_PUBLIC_ANNOT_RosKmdAdapter_cpp1374

#ifdef WPP_USER_MSG_GUID
# define WPP_ANNOTATE_RosKmdAdapter_cpp1382_FINAL(P, File, Name, ...) __annotation( \
    L ## P, \
    WPP_GUID_WTEXT WPP_USER_MSG_GUID L"roskmd // SRC=" _WPPW(File) \
    L" MJ= MN=", \
    L"#typev " _WPPW(Name) \
    L" 36 \"%0 [%10!s! @ %11!u!] WARNING :Not implemented\" //   LEVEL=TRACE_LEVEL_WARNING FLAGS=ROS_TRACING_DEFAULT" \
    WPP_FUNC_NAME, \
    __VA_ARGS__)
#else // WPP_USER_MSG_GUID
# define WPP_ANNOTATE_RosKmdAdapter_cpp1382_FINAL(P, File, Name, ...) __annotation( \
    L ## P, \
    L"bbf0cbd6-16d9-3159-edf2-825e98213b57 roskmd // SRC=" _WPPW(File) \
    L" MJ= MN=", \
    L"#typev " _WPPW(Name) \
    L" 36 \"%0 [%10!s! @ %11!u!] WARNING :Not implemented\" //   LEVEL=TRACE_LEVEL_WARNING FLAGS=ROS_TRACING_DEFAULT" \
    WPP_FUNC_NAME, \
    __VA_ARGS__)
#endif // WPP_USER_MSG_GUID

#ifdef WPP_PUBLIC_ANNOT_RosKmdAdapter_cpp1382
# define WPP_ANNOTATE_RosKmdAdapter_cpp1382 WPP_ANNOTATE_RosKmdAdapter_cpp1382_FINAL( \
    "TMF:", \
    "Unknown_cxx00", \
    "Unknown_cxx00", \
    L"{", \
    L"Arg, ItemString -- 10" , \
    L"Arg, ItemLong -- 11" , \
    L"}", \
    L"PUBLIC_TMF:")
# ifndef WPP_PUBLIC_TMC
#  define WPP_PUBLIC_TMC // Adds "PUBLIC_TMF:" to the control guid annotation
# endif
#else // WPP_PUBLIC_ANNOT_RosKmdAdapter_cpp1382
# define WPP_ANNOTATE_RosKmdAdapter_cpp1382 WPP_ANNOTATE_RosKmdAdapter_cpp1382_FINAL( \
    "TMF:", \
    "RosKmdAdapter.cpp", \
    "RosKmdAdapter_cpp1382", \
    L"{", \
    L"__FILE__, ItemString -- 10" , \
    L"__LINE__, ItemLong -- 11" , \
    L"}")
#endif // WPP_PUBLIC_ANNOT_RosKmdAdapter_cpp1382

#ifdef WPP_USER_MSG_GUID
# define WPP_ANNOTATE_RosKmdAdapter_cpp1389_FINAL(P, File, Name, ...) __annotation( \
    L ## P, \
    WPP_GUID_WTEXT WPP_USER_MSG_GUID L"roskmd // SRC=" _WPPW(File) \
    L" MJ= MN=", \
    L"#typev " _WPPW(Name) \
    L" 37 \"%0 [%10!s! @ %11!u!] ASSERTION :Not implemented\" //   LEVEL=TRACE_LEVEL_ERROR FLAGS=ROS_TRACING_DEBUG" \
    WPP_FUNC_NAME, \
    __VA_ARGS__)
#else // WPP_USER_MSG_GUID
# define WPP_ANNOTATE_RosKmdAdapter_cpp1389_FINAL(P, File, Name, ...) __annotation( \
    L ## P, \
    L"bbf0cbd6-16d9-3159-edf2-825e98213b57 roskmd // SRC=" _WPPW(File) \
    L" MJ= MN=", \
    L"#typev " _WPPW(Name) \
    L" 37 \"%0 [%10!s! @ %11!u!] ASSERTION :Not implemented\" //   LEVEL=TRACE_LEVEL_ERROR FLAGS=ROS_TRACING_DEBUG" \
    WPP_FUNC_NAME, \
    __VA_ARGS__)
#endif // WPP_USER_MSG_GUID

#ifdef WPP_PUBLIC_ANNOT_RosKmdAdapter_cpp1389
# define WPP_ANNOTATE_RosKmdAdapter_cpp1389 WPP_ANNOTATE_RosKmdAdapter_cpp1389_FINAL( \
    "TMF:", \
    "Unknown_cxx00", \
    "Unknown_cxx00", \
    L"{", \
    L"Arg, ItemString -- 10" , \
    L"Arg, ItemLong -- 11" , \
    L"}", \
    L"PUBLIC_TMF:")
# ifndef WPP_PUBLIC_TMC
#  define WPP_PUBLIC_TMC // Adds "PUBLIC_TMF:" to the control guid annotation
# endif
#else // WPP_PUBLIC_ANNOT_RosKmdAdapter_cpp1389
# define WPP_ANNOTATE_RosKmdAdapter_cpp1389 WPP_ANNOTATE_RosKmdAdapter_cpp1389_FINAL( \
    "TMF:", \
    "RosKmdAdapter.cpp", \
    "RosKmdAdapter_cpp1389", \
    L"{", \
    L"__FILE__, ItemString -- 10" , \
    L"__LINE__, ItemLong -- 11" , \
    L"}")
#endif // WPP_PUBLIC_ANNOT_RosKmdAdapter_cpp1389

#ifdef WPP_USER_MSG_GUID
# define WPP_ANNOTATE_RosKmdAdapter_cpp1397_FINAL(P, File, Name, ...) __annotation( \
    L ## P, \
    WPP_GUID_WTEXT WPP_USER_MSG_GUID L"roskmd // SRC=" _WPPW(File) \
    L" MJ= MN=", \
    L"#typev " _WPPW(Name) \
    L" 38 \"%0 [%10!s! @ %11!u!] ASSERTION :Not implemented\" //   LEVEL=TRACE_LEVEL_ERROR FLAGS=ROS_TRACING_DEBUG" \
    WPP_FUNC_NAME, \
    __VA_ARGS__)
#else // WPP_USER_MSG_GUID
# define WPP_ANNOTATE_RosKmdAdapter_cpp1397_FINAL(P, File, Name, ...) __annotation( \
    L ## P, \
    L"bbf0cbd6-16d9-3159-edf2-825e98213b57 roskmd // SRC=" _WPPW(File) \
    L" MJ= MN=", \
    L"#typev " _WPPW(Name) \
    L" 38 \"%0 [%10!s! @ %11!u!] ASSERTION :Not implemented\" //   LEVEL=TRACE_LEVEL_ERROR FLAGS=ROS_TRACING_DEBUG" \
    WPP_FUNC_NAME, \
    __VA_ARGS__)
#endif // WPP_USER_MSG_GUID

#ifdef WPP_PUBLIC_ANNOT_RosKmdAdapter_cpp1397
# define WPP_ANNOTATE_RosKmdAdapter_cpp1397 WPP_ANNOTATE_RosKmdAdapter_cpp1397_FINAL( \
    "TMF:", \
    "Unknown_cxx00", \
    "Unknown_cxx00", \
    L"{", \
    L"Arg, ItemString -- 10" , \
    L"Arg, ItemLong -- 11" , \
    L"}", \
    L"PUBLIC_TMF:")
# ifndef WPP_PUBLIC_TMC
#  define WPP_PUBLIC_TMC // Adds "PUBLIC_TMF:" to the control guid annotation
# endif
#else // WPP_PUBLIC_ANNOT_RosKmdAdapter_cpp1397
# define WPP_ANNOTATE_RosKmdAdapter_cpp1397 WPP_ANNOTATE_RosKmdAdapter_cpp1397_FINAL( \
    "TMF:", \
    "RosKmdAdapter.cpp", \
    "RosKmdAdapter_cpp1397", \
    L"{", \
    L"__FILE__, ItemString -- 10" , \
    L"__LINE__, ItemLong -- 11" , \
    L"}")
#endif // WPP_PUBLIC_ANNOT_RosKmdAdapter_cpp1397

#ifdef WPP_USER_MSG_GUID
# define WPP_ANNOTATE_RosKmdAdapter_cpp1405_FINAL(P, File, Name, ...) __annotation( \
    L ## P, \
    WPP_GUID_WTEXT WPP_USER_MSG_GUID L"roskmd // SRC=" _WPPW(File) \
    L" MJ= MN=", \
    L"#typev " _WPPW(Name) \
    L" 39 \"%0 [%10!s! @ %11!u!] WARNING :Not implemented\" //   LEVEL=TRACE_LEVEL_WARNING FLAGS=ROS_TRACING_DEFAULT" \
    WPP_FUNC_NAME, \
    __VA_ARGS__)
#else // WPP_USER_MSG_GUID
# define WPP_ANNOTATE_RosKmdAdapter_cpp1405_FINAL(P, File, Name, ...) __annotation( \
    L ## P, \
    L"bbf0cbd6-16d9-3159-edf2-825e98213b57 roskmd // SRC=" _WPPW(File) \
    L" MJ= MN=", \
    L"#typev " _WPPW(Name) \
    L" 39 \"%0 [%10!s! @ %11!u!] WARNING :Not implemented\" //   LEVEL=TRACE_LEVEL_WARNING FLAGS=ROS_TRACING_DEFAULT" \
    WPP_FUNC_NAME, \
    __VA_ARGS__)
#endif // WPP_USER_MSG_GUID

#ifdef WPP_PUBLIC_ANNOT_RosKmdAdapter_cpp1405
# define WPP_ANNOTATE_RosKmdAdapter_cpp1405 WPP_ANNOTATE_RosKmdAdapter_cpp1405_FINAL( \
    "TMF:", \
    "Unknown_cxx00", \
    "Unknown_cxx00", \
    L"{", \
    L"Arg, ItemString -- 10" , \
    L"Arg, ItemLong -- 11" , \
    L"}", \
    L"PUBLIC_TMF:")
# ifndef WPP_PUBLIC_TMC
#  define WPP_PUBLIC_TMC // Adds "PUBLIC_TMF:" to the control guid annotation
# endif
#else // WPP_PUBLIC_ANNOT_RosKmdAdapter_cpp1405
# define WPP_ANNOTATE_RosKmdAdapter_cpp1405 WPP_ANNOTATE_RosKmdAdapter_cpp1405_FINAL( \
    "TMF:", \
    "RosKmdAdapter.cpp", \
    "RosKmdAdapter_cpp1405", \
    L"{", \
    L"__FILE__, ItemString -- 10" , \
    L"__LINE__, ItemLong -- 11" , \
    L"}")
#endif // WPP_PUBLIC_ANNOT_RosKmdAdapter_cpp1405

#ifdef WPP_USER_MSG_GUID
# define WPP_ANNOTATE_RosKmdAdapter_cpp1418_FINAL(P, File, Name, ...) __annotation( \
    L ## P, \
    WPP_GUID_WTEXT WPP_USER_MSG_GUID L"roskmd // SRC=" _WPPW(File) \
    L" MJ= MN=", \
    L"#typev " _WPPW(Name) \
    L" 40 \"%0 [%10!s! @ %11!u!] WARNING :Not implemented\" //   LEVEL=TRACE_LEVEL_WARNING FLAGS=ROS_TRACING_DEFAULT" \
    WPP_FUNC_NAME, \
    __VA_ARGS__)
#else // WPP_USER_MSG_GUID
# define WPP_ANNOTATE_RosKmdAdapter_cpp1418_FINAL(P, File, Name, ...) __annotation( \
    L ## P, \
    L"bbf0cbd6-16d9-3159-edf2-825e98213b57 roskmd // SRC=" _WPPW(File) \
    L" MJ= MN=", \
    L"#typev " _WPPW(Name) \
    L" 40 \"%0 [%10!s! @ %11!u!] WARNING :Not implemented\" //   LEVEL=TRACE_LEVEL_WARNING FLAGS=ROS_TRACING_DEFAULT" \
    WPP_FUNC_NAME, \
    __VA_ARGS__)
#endif // WPP_USER_MSG_GUID

#ifdef WPP_PUBLIC_ANNOT_RosKmdAdapter_cpp1418
# define WPP_ANNOTATE_RosKmdAdapter_cpp1418 WPP_ANNOTATE_RosKmdAdapter_cpp1418_FINAL( \
    "TMF:", \
    "Unknown_cxx00", \
    "Unknown_cxx00", \
    L"{", \
    L"Arg, ItemString -- 10" , \
    L"Arg, ItemLong -- 11" , \
    L"}", \
    L"PUBLIC_TMF:")
# ifndef WPP_PUBLIC_TMC
#  define WPP_PUBLIC_TMC // Adds "PUBLIC_TMF:" to the control guid annotation
# endif
#else // WPP_PUBLIC_ANNOT_RosKmdAdapter_cpp1418
# define WPP_ANNOTATE_RosKmdAdapter_cpp1418 WPP_ANNOTATE_RosKmdAdapter_cpp1418_FINAL( \
    "TMF:", \
    "RosKmdAdapter.cpp", \
    "RosKmdAdapter_cpp1418", \
    L"{", \
    L"__FILE__, ItemString -- 10" , \
    L"__LINE__, ItemLong -- 11" , \
    L"}")
#endif // WPP_PUBLIC_ANNOT_RosKmdAdapter_cpp1418

#ifdef WPP_USER_MSG_GUID
# define WPP_ANNOTATE_RosKmdAdapter_cpp1426_FINAL(P, File, Name, ...) __annotation( \
    L ## P, \
    WPP_GUID_WTEXT WPP_USER_MSG_GUID L"roskmd // SRC=" _WPPW(File) \
    L" MJ= MN=", \
    L"#typev " _WPPW(Name) \
    L" 41 \"%0 [%10!s! @ %11!u!] WARNING :Not implemented\" //   LEVEL=TRACE_LEVEL_WARNING FLAGS=ROS_TRACING_DEFAULT" \
    WPP_FUNC_NAME, \
    __VA_ARGS__)
#else // WPP_USER_MSG_GUID
# define WPP_ANNOTATE_RosKmdAdapter_cpp1426_FINAL(P, File, Name, ...) __annotation( \
    L ## P, \
    L"bbf0cbd6-16d9-3159-edf2-825e98213b57 roskmd // SRC=" _WPPW(File) \
    L" MJ= MN=", \
    L"#typev " _WPPW(Name) \
    L" 41 \"%0 [%10!s! @ %11!u!] WARNING :Not implemented\" //   LEVEL=TRACE_LEVEL_WARNING FLAGS=ROS_TRACING_DEFAULT" \
    WPP_FUNC_NAME, \
    __VA_ARGS__)
#endif // WPP_USER_MSG_GUID

#ifdef WPP_PUBLIC_ANNOT_RosKmdAdapter_cpp1426
# define WPP_ANNOTATE_RosKmdAdapter_cpp1426 WPP_ANNOTATE_RosKmdAdapter_cpp1426_FINAL( \
    "TMF:", \
    "Unknown_cxx00", \
    "Unknown_cxx00", \
    L"{", \
    L"Arg, ItemString -- 10" , \
    L"Arg, ItemLong -- 11" , \
    L"}", \
    L"PUBLIC_TMF:")
# ifndef WPP_PUBLIC_TMC
#  define WPP_PUBLIC_TMC // Adds "PUBLIC_TMF:" to the control guid annotation
# endif
#else // WPP_PUBLIC_ANNOT_RosKmdAdapter_cpp1426
# define WPP_ANNOTATE_RosKmdAdapter_cpp1426 WPP_ANNOTATE_RosKmdAdapter_cpp1426_FINAL( \
    "TMF:", \
    "RosKmdAdapter.cpp", \
    "RosKmdAdapter_cpp1426", \
    L"{", \
    L"__FILE__, ItemString -- 10" , \
    L"__LINE__, ItemLong -- 11" , \
    L"}")
#endif // WPP_PUBLIC_ANNOT_RosKmdAdapter_cpp1426

#ifdef WPP_USER_MSG_GUID
# define WPP_ANNOTATE_RosKmdAdapter_cpp1435_FINAL(P, File, Name, ...) __annotation( \
    L ## P, \
    WPP_GUID_WTEXT WPP_USER_MSG_GUID L"roskmd // SRC=" _WPPW(File) \
    L" MJ= MN=", \
    L"#typev " _WPPW(Name) \
    L" 42 \"%0 [%10!s! @ %11!u!] ASSERTION :Not implemented\" //   LEVEL=TRACE_LEVEL_ERROR FLAGS=ROS_TRACING_DEBUG" \
    WPP_FUNC_NAME, \
    __VA_ARGS__)
#else // WPP_USER_MSG_GUID
# define WPP_ANNOTATE_RosKmdAdapter_cpp1435_FINAL(P, File, Name, ...) __annotation( \
    L ## P, \
    L"bbf0cbd6-16d9-3159-edf2-825e98213b57 roskmd // SRC=" _WPPW(File) \
    L" MJ= MN=", \
    L"#typev " _WPPW(Name) \
    L" 42 \"%0 [%10!s! @ %11!u!] ASSERTION :Not implemented\" //   LEVEL=TRACE_LEVEL_ERROR FLAGS=ROS_TRACING_DEBUG" \
    WPP_FUNC_NAME, \
    __VA_ARGS__)
#endif // WPP_USER_MSG_GUID

#ifdef WPP_PUBLIC_ANNOT_RosKmdAdapter_cpp1435
# define WPP_ANNOTATE_RosKmdAdapter_cpp1435 WPP_ANNOTATE_RosKmdAdapter_cpp1435_FINAL( \
    "TMF:", \
    "Unknown_cxx00", \
    "Unknown_cxx00", \
    L"{", \
    L"Arg, ItemString -- 10" , \
    L"Arg, ItemLong -- 11" , \
    L"}", \
    L"PUBLIC_TMF:")
# ifndef WPP_PUBLIC_TMC
#  define WPP_PUBLIC_TMC // Adds "PUBLIC_TMF:" to the control guid annotation
# endif
#else // WPP_PUBLIC_ANNOT_RosKmdAdapter_cpp1435
# define WPP_ANNOTATE_RosKmdAdapter_cpp1435 WPP_ANNOTATE_RosKmdAdapter_cpp1435_FINAL( \
    "TMF:", \
    "RosKmdAdapter.cpp", \
    "RosKmdAdapter_cpp1435", \
    L"{", \
    L"__FILE__, ItemString -- 10" , \
    L"__LINE__, ItemLong -- 11" , \
    L"}")
#endif // WPP_PUBLIC_ANNOT_RosKmdAdapter_cpp1435

#ifdef WPP_USER_MSG_GUID
# define WPP_ANNOTATE_RosKmdAdapter_cpp1443_FINAL(P, File, Name, ...) __annotation( \
    L ## P, \
    WPP_GUID_WTEXT WPP_USER_MSG_GUID L"roskmd // SRC=" _WPPW(File) \
    L" MJ= MN=", \
    L"#typev " _WPPW(Name) \
    L" 43 \"%0 [%10!s! @ %11!u!] ASSERTION :Not implemented\" //   LEVEL=TRACE_LEVEL_ERROR FLAGS=ROS_TRACING_DEBUG" \
    WPP_FUNC_NAME, \
    __VA_ARGS__)
#else // WPP_USER_MSG_GUID
# define WPP_ANNOTATE_RosKmdAdapter_cpp1443_FINAL(P, File, Name, ...) __annotation( \
    L ## P, \
    L"bbf0cbd6-16d9-3159-edf2-825e98213b57 roskmd // SRC=" _WPPW(File) \
    L" MJ= MN=", \
    L"#typev " _WPPW(Name) \
    L" 43 \"%0 [%10!s! @ %11!u!] ASSERTION :Not implemented\" //   LEVEL=TRACE_LEVEL_ERROR FLAGS=ROS_TRACING_DEBUG" \
    WPP_FUNC_NAME, \
    __VA_ARGS__)
#endif // WPP_USER_MSG_GUID

#ifdef WPP_PUBLIC_ANNOT_RosKmdAdapter_cpp1443
# define WPP_ANNOTATE_RosKmdAdapter_cpp1443 WPP_ANNOTATE_RosKmdAdapter_cpp1443_FINAL( \
    "TMF:", \
    "Unknown_cxx00", \
    "Unknown_cxx00", \
    L"{", \
    L"Arg, ItemString -- 10" , \
    L"Arg, ItemLong -- 11" , \
    L"}", \
    L"PUBLIC_TMF:")
# ifndef WPP_PUBLIC_TMC
#  define WPP_PUBLIC_TMC // Adds "PUBLIC_TMF:" to the control guid annotation
# endif
#else // WPP_PUBLIC_ANNOT_RosKmdAdapter_cpp1443
# define WPP_ANNOTATE_RosKmdAdapter_cpp1443 WPP_ANNOTATE_RosKmdAdapter_cpp1443_FINAL( \
    "TMF:", \
    "RosKmdAdapter.cpp", \
    "RosKmdAdapter_cpp1443", \
    L"{", \
    L"__FILE__, ItemString -- 10" , \
    L"__LINE__, ItemLong -- 11" , \
    L"}")
#endif // WPP_PUBLIC_ANNOT_RosKmdAdapter_cpp1443

#ifdef WPP_USER_MSG_GUID
# define WPP_ANNOTATE_RosKmdAdapter_cpp1452_FINAL(P, File, Name, ...) __annotation( \
    L ## P, \
    WPP_GUID_WTEXT WPP_USER_MSG_GUID L"roskmd // SRC=" _WPPW(File) \
    L" MJ= MN=", \
    L"#typev " _WPPW(Name) \
    L" 44 \"%0 [%10!s! @ %11!u!] ASSERTION :Not implemented\" //   LEVEL=TRACE_LEVEL_ERROR FLAGS=ROS_TRACING_DEBUG" \
    WPP_FUNC_NAME, \
    __VA_ARGS__)
#else // WPP_USER_MSG_GUID
# define WPP_ANNOTATE_RosKmdAdapter_cpp1452_FINAL(P, File, Name, ...) __annotation( \
    L ## P, \
    L"bbf0cbd6-16d9-3159-edf2-825e98213b57 roskmd // SRC=" _WPPW(File) \
    L" MJ= MN=", \
    L"#typev " _WPPW(Name) \
    L" 44 \"%0 [%10!s! @ %11!u!] ASSERTION :Not implemented\" //   LEVEL=TRACE_LEVEL_ERROR FLAGS=ROS_TRACING_DEBUG" \
    WPP_FUNC_NAME, \
    __VA_ARGS__)
#endif // WPP_USER_MSG_GUID

#ifdef WPP_PUBLIC_ANNOT_RosKmdAdapter_cpp1452
# define WPP_ANNOTATE_RosKmdAdapter_cpp1452 WPP_ANNOTATE_RosKmdAdapter_cpp1452_FINAL( \
    "TMF:", \
    "Unknown_cxx00", \
    "Unknown_cxx00", \
    L"{", \
    L"Arg, ItemString -- 10" , \
    L"Arg, ItemLong -- 11" , \
    L"}", \
    L"PUBLIC_TMF:")
# ifndef WPP_PUBLIC_TMC
#  define WPP_PUBLIC_TMC // Adds "PUBLIC_TMF:" to the control guid annotation
# endif
#else // WPP_PUBLIC_ANNOT_RosKmdAdapter_cpp1452
# define WPP_ANNOTATE_RosKmdAdapter_cpp1452 WPP_ANNOTATE_RosKmdAdapter_cpp1452_FINAL( \
    "TMF:", \
    "RosKmdAdapter.cpp", \
    "RosKmdAdapter_cpp1452", \
    L"{", \
    L"__FILE__, ItemString -- 10" , \
    L"__LINE__, ItemLong -- 11" , \
    L"}")
#endif // WPP_PUBLIC_ANNOT_RosKmdAdapter_cpp1452

#ifdef WPP_USER_MSG_GUID
# define WPP_ANNOTATE_RosKmdAdapter_cpp1462_FINAL(P, File, Name, ...) __annotation( \
    L ## P, \
    WPP_GUID_WTEXT WPP_USER_MSG_GUID L"roskmd // SRC=" _WPPW(File) \
    L" MJ= MN=", \
    L"#typev " _WPPW(Name) \
    L" 45 \"%0 [%10!s! @ %11!u!] ASSERTION :Not implemented\" //   LEVEL=TRACE_LEVEL_ERROR FLAGS=ROS_TRACING_DEBUG" \
    WPP_FUNC_NAME, \
    __VA_ARGS__)
#else // WPP_USER_MSG_GUID
# define WPP_ANNOTATE_RosKmdAdapter_cpp1462_FINAL(P, File, Name, ...) __annotation( \
    L ## P, \
    L"bbf0cbd6-16d9-3159-edf2-825e98213b57 roskmd // SRC=" _WPPW(File) \
    L" MJ= MN=", \
    L"#typev " _WPPW(Name) \
    L" 45 \"%0 [%10!s! @ %11!u!] ASSERTION :Not implemented\" //   LEVEL=TRACE_LEVEL_ERROR FLAGS=ROS_TRACING_DEBUG" \
    WPP_FUNC_NAME, \
    __VA_ARGS__)
#endif // WPP_USER_MSG_GUID

#ifdef WPP_PUBLIC_ANNOT_RosKmdAdapter_cpp1462
# define WPP_ANNOTATE_RosKmdAdapter_cpp1462 WPP_ANNOTATE_RosKmdAdapter_cpp1462_FINAL( \
    "TMF:", \
    "Unknown_cxx00", \
    "Unknown_cxx00", \
    L"{", \
    L"Arg, ItemString -- 10" , \
    L"Arg, ItemLong -- 11" , \
    L"}", \
    L"PUBLIC_TMF:")
# ifndef WPP_PUBLIC_TMC
#  define WPP_PUBLIC_TMC // Adds "PUBLIC_TMF:" to the control guid annotation
# endif
#else // WPP_PUBLIC_ANNOT_RosKmdAdapter_cpp1462
# define WPP_ANNOTATE_RosKmdAdapter_cpp1462 WPP_ANNOTATE_RosKmdAdapter_cpp1462_FINAL( \
    "TMF:", \
    "RosKmdAdapter.cpp", \
    "RosKmdAdapter_cpp1462", \
    L"{", \
    L"__FILE__, ItemString -- 10" , \
    L"__LINE__, ItemLong -- 11" , \
    L"}")
#endif // WPP_PUBLIC_ANNOT_RosKmdAdapter_cpp1462

#ifdef WPP_USER_MSG_GUID
# define WPP_ANNOTATE_RosKmdAdapter_cpp1474_FINAL(P, File, Name, ...) __annotation( \
    L ## P, \
    WPP_GUID_WTEXT WPP_USER_MSG_GUID L"roskmd // SRC=" _WPPW(File) \
    L" MJ= MN=", \
    L"#typev " _WPPW(Name) \
    L" 46 \"%0 [%10!s! @ %11!u!] ERROR :PrivateDriverDataSize is too small. (pEscape->PrivateDriverDataSize=%12!d!, sizeof(UINT)=%13!d!)\" //   LEVEL=TRACE_LEVEL_ERROR FLAGS=ROS_TRACING_DEFAULT" \
    WPP_FUNC_NAME, \
    __VA_ARGS__)
#else // WPP_USER_MSG_GUID
# define WPP_ANNOTATE_RosKmdAdapter_cpp1474_FINAL(P, File, Name, ...) __annotation( \
    L ## P, \
    L"bbf0cbd6-16d9-3159-edf2-825e98213b57 roskmd // SRC=" _WPPW(File) \
    L" MJ= MN=", \
    L"#typev " _WPPW(Name) \
    L" 46 \"%0 [%10!s! @ %11!u!] ERROR :PrivateDriverDataSize is too small. (pEscape->PrivateDriverDataSize=%12!d!, sizeof(UINT)=%13!d!)\" //   LEVEL=TRACE_LEVEL_ERROR FLAGS=ROS_TRACING_DEFAULT" \
    WPP_FUNC_NAME, \
    __VA_ARGS__)
#endif // WPP_USER_MSG_GUID

#ifdef WPP_PUBLIC_ANNOT_RosKmdAdapter_cpp1474
# define WPP_ANNOTATE_RosKmdAdapter_cpp1474 WPP_ANNOTATE_RosKmdAdapter_cpp1474_FINAL( \
    "TMF:", \
    "Unknown_cxx00", \
    "Unknown_cxx00", \
    L"{", \
    L"Arg, ItemString -- 10" , \
    L"Arg, ItemLong -- 11" , \
    L"Arg, ItemLong -- 12" , \
    L"Arg, ItemLong -- 13" , \
    L"}", \
    L"PUBLIC_TMF:")
# ifndef WPP_PUBLIC_TMC
#  define WPP_PUBLIC_TMC // Adds "PUBLIC_TMF:" to the control guid annotation
# endif
#else // WPP_PUBLIC_ANNOT_RosKmdAdapter_cpp1474
# define WPP_ANNOTATE_RosKmdAdapter_cpp1474 WPP_ANNOTATE_RosKmdAdapter_cpp1474_FINAL( \
    "TMF:", \
    "RosKmdAdapter.cpp", \
    "RosKmdAdapter_cpp1474", \
    L"{", \
    L"__FILE__, ItemString -- 10" , \
    L"__LINE__, ItemLong -- 11" , \
    L"pEscape->PrivateDriverDataSize, ItemLong -- 12" , \
    L"sizeof(UINT), ItemLong -- 13" , \
    L"}")
#endif // WPP_PUBLIC_ANNOT_RosKmdAdapter_cpp1474

#ifdef WPP_USER_MSG_GUID
# define WPP_ANNOTATE_RosKmdAdapter_cpp1494_FINAL(P, File, Name, ...) __annotation( \
    L ## P, \
    WPP_GUID_WTEXT WPP_USER_MSG_GUID L"roskmd // SRC=" _WPPW(File) \
    L" MJ= MN=", \
    L"#typev " _WPPW(Name) \
    L" 47 \"%0 [%10!s! @ %11!u!] ASSERTION :Not implemented\" //   LEVEL=TRACE_LEVEL_ERROR FLAGS=ROS_TRACING_DEBUG" \
    WPP_FUNC_NAME, \
    __VA_ARGS__)
#else // WPP_USER_MSG_GUID
# define WPP_ANNOTATE_RosKmdAdapter_cpp1494_FINAL(P, File, Name, ...) __annotation( \
    L ## P, \
    L"bbf0cbd6-16d9-3159-edf2-825e98213b57 roskmd // SRC=" _WPPW(File) \
    L" MJ= MN=", \
    L"#typev " _WPPW(Name) \
    L" 47 \"%0 [%10!s! @ %11!u!] ASSERTION :Not implemented\" //   LEVEL=TRACE_LEVEL_ERROR FLAGS=ROS_TRACING_DEBUG" \
    WPP_FUNC_NAME, \
    __VA_ARGS__)
#endif // WPP_USER_MSG_GUID

#ifdef WPP_PUBLIC_ANNOT_RosKmdAdapter_cpp1494
# define WPP_ANNOTATE_RosKmdAdapter_cpp1494 WPP_ANNOTATE_RosKmdAdapter_cpp1494_FINAL( \
    "TMF:", \
    "Unknown_cxx00", \
    "Unknown_cxx00", \
    L"{", \
    L"Arg, ItemString -- 10" , \
    L"Arg, ItemLong -- 11" , \
    L"}", \
    L"PUBLIC_TMF:")
# ifndef WPP_PUBLIC_TMC
#  define WPP_PUBLIC_TMC // Adds "PUBLIC_TMF:" to the control guid annotation
# endif
#else // WPP_PUBLIC_ANNOT_RosKmdAdapter_cpp1494
# define WPP_ANNOTATE_RosKmdAdapter_cpp1494 WPP_ANNOTATE_RosKmdAdapter_cpp1494_FINAL( \
    "TMF:", \
    "RosKmdAdapter.cpp", \
    "RosKmdAdapter_cpp1494", \
    L"{", \
    L"__FILE__, ItemString -- 10" , \
    L"__LINE__, ItemLong -- 11" , \
    L"}")
#endif // WPP_PUBLIC_ANNOT_RosKmdAdapter_cpp1494

#ifdef WPP_USER_MSG_GUID
# define WPP_ANNOTATE_RosKmdAdapter_cpp1501_FINAL(P, File, Name, ...) __annotation( \
    L ## P, \
    WPP_GUID_WTEXT WPP_USER_MSG_GUID L"roskmd // SRC=" _WPPW(File) \
    L" MJ= MN=", \
    L"#typev " _WPPW(Name) \
    L" 48 \"%0 [%10!s! @ %11!u!] ASSERTION :Not implemented\" //   LEVEL=TRACE_LEVEL_ERROR FLAGS=ROS_TRACING_DEBUG" \
    WPP_FUNC_NAME, \
    __VA_ARGS__)
#else // WPP_USER_MSG_GUID
# define WPP_ANNOTATE_RosKmdAdapter_cpp1501_FINAL(P, File, Name, ...) __annotation( \
    L ## P, \
    L"bbf0cbd6-16d9-3159-edf2-825e98213b57 roskmd // SRC=" _WPPW(File) \
    L" MJ= MN=", \
    L"#typev " _WPPW(Name) \
    L" 48 \"%0 [%10!s! @ %11!u!] ASSERTION :Not implemented\" //   LEVEL=TRACE_LEVEL_ERROR FLAGS=ROS_TRACING_DEBUG" \
    WPP_FUNC_NAME, \
    __VA_ARGS__)
#endif // WPP_USER_MSG_GUID

#ifdef WPP_PUBLIC_ANNOT_RosKmdAdapter_cpp1501
# define WPP_ANNOTATE_RosKmdAdapter_cpp1501 WPP_ANNOTATE_RosKmdAdapter_cpp1501_FINAL( \
    "TMF:", \
    "Unknown_cxx00", \
    "Unknown_cxx00", \
    L"{", \
    L"Arg, ItemString -- 10" , \
    L"Arg, ItemLong -- 11" , \
    L"}", \
    L"PUBLIC_TMF:")
# ifndef WPP_PUBLIC_TMC
#  define WPP_PUBLIC_TMC // Adds "PUBLIC_TMF:" to the control guid annotation
# endif
#else // WPP_PUBLIC_ANNOT_RosKmdAdapter_cpp1501
# define WPP_ANNOTATE_RosKmdAdapter_cpp1501 WPP_ANNOTATE_RosKmdAdapter_cpp1501_FINAL( \
    "TMF:", \
    "RosKmdAdapter.cpp", \
    "RosKmdAdapter_cpp1501", \
    L"{", \
    L"__FILE__, ItemString -- 10" , \
    L"__LINE__, ItemLong -- 11" , \
    L"}")
#endif // WPP_PUBLIC_ANNOT_RosKmdAdapter_cpp1501

#ifdef WPP_USER_MSG_GUID
# define WPP_ANNOTATE_RosKmdAdapter_cpp1512_FINAL(P, File, Name, ...) __annotation( \
    L ## P, \
    WPP_GUID_WTEXT WPP_USER_MSG_GUID L"roskmd // SRC=" _WPPW(File) \
    L" MJ= MN=", \
    L"#typev " _WPPW(Name) \
    L" 49 \"%0 [%10!s! @ %11!u!] ASSERTION :QueryChildRelations() is not supported by render-only driver.\" //   LEVEL=TRACE_LEVEL_ERROR FLAGS=ROS_TRACING_DEBUG" \
    WPP_FUNC_NAME, \
    __VA_ARGS__)
#else // WPP_USER_MSG_GUID
# define WPP_ANNOTATE_RosKmdAdapter_cpp1512_FINAL(P, File, Name, ...) __annotation( \
    L ## P, \
    L"bbf0cbd6-16d9-3159-edf2-825e98213b57 roskmd // SRC=" _WPPW(File) \
    L" MJ= MN=", \
    L"#typev " _WPPW(Name) \
    L" 49 \"%0 [%10!s! @ %11!u!] ASSERTION :QueryChildRelations() is not supported by render-only driver.\" //   LEVEL=TRACE_LEVEL_ERROR FLAGS=ROS_TRACING_DEBUG" \
    WPP_FUNC_NAME, \
    __VA_ARGS__)
#endif // WPP_USER_MSG_GUID

#ifdef WPP_PUBLIC_ANNOT_RosKmdAdapter_cpp1512
# define WPP_ANNOTATE_RosKmdAdapter_cpp1512 WPP_ANNOTATE_RosKmdAdapter_cpp1512_FINAL( \
    "TMF:", \
    "Unknown_cxx00", \
    "Unknown_cxx00", \
    L"{", \
    L"Arg, ItemString -- 10" , \
    L"Arg, ItemLong -- 11" , \
    L"}", \
    L"PUBLIC_TMF:")
# ifndef WPP_PUBLIC_TMC
#  define WPP_PUBLIC_TMC // Adds "PUBLIC_TMF:" to the control guid annotation
# endif
#else // WPP_PUBLIC_ANNOT_RosKmdAdapter_cpp1512
# define WPP_ANNOTATE_RosKmdAdapter_cpp1512 WPP_ANNOTATE_RosKmdAdapter_cpp1512_FINAL( \
    "TMF:", \
    "RosKmdAdapter.cpp", \
    "RosKmdAdapter_cpp1512", \
    L"{", \
    L"__FILE__, ItemString -- 10" , \
    L"__LINE__, ItemLong -- 11" , \
    L"}")
#endif // WPP_PUBLIC_ANNOT_RosKmdAdapter_cpp1512

#ifdef WPP_USER_MSG_GUID
# define WPP_ANNOTATE_RosKmdAdapter_cpp1526_FINAL(P, File, Name, ...) __annotation( \
    L ## P, \
    WPP_GUID_WTEXT WPP_USER_MSG_GUID L"roskmd // SRC=" _WPPW(File) \
    L" MJ= MN=", \
    L"#typev " _WPPW(Name) \
    L" 50 \"%0 [%10!s! @ %11!u!] ASSERTION :QueryChildStatus() is not supported by render-only driver.\" //   LEVEL=TRACE_LEVEL_ERROR FLAGS=ROS_TRACING_DEBUG" \
    WPP_FUNC_NAME, \
    __VA_ARGS__)
#else // WPP_USER_MSG_GUID
# define WPP_ANNOTATE_RosKmdAdapter_cpp1526_FINAL(P, File, Name, ...) __annotation( \
    L ## P, \
    L"bbf0cbd6-16d9-3159-edf2-825e98213b57 roskmd // SRC=" _WPPW(File) \
    L" MJ= MN=", \
    L"#typev " _WPPW(Name) \
    L" 50 \"%0 [%10!s! @ %11!u!] ASSERTION :QueryChildStatus() is not supported by render-only driver.\" //   LEVEL=TRACE_LEVEL_ERROR FLAGS=ROS_TRACING_DEBUG" \
    WPP_FUNC_NAME, \
    __VA_ARGS__)
#endif // WPP_USER_MSG_GUID

#ifdef WPP_PUBLIC_ANNOT_RosKmdAdapter_cpp1526
# define WPP_ANNOTATE_RosKmdAdapter_cpp1526 WPP_ANNOTATE_RosKmdAdapter_cpp1526_FINAL( \
    "TMF:", \
    "Unknown_cxx00", \
    "Unknown_cxx00", \
    L"{", \
    L"Arg, ItemString -- 10" , \
    L"Arg, ItemLong -- 11" , \
    L"}", \
    L"PUBLIC_TMF:")
# ifndef WPP_PUBLIC_TMC
#  define WPP_PUBLIC_TMC // Adds "PUBLIC_TMF:" to the control guid annotation
# endif
#else // WPP_PUBLIC_ANNOT_RosKmdAdapter_cpp1526
# define WPP_ANNOTATE_RosKmdAdapter_cpp1526 WPP_ANNOTATE_RosKmdAdapter_cpp1526_FINAL( \
    "TMF:", \
    "RosKmdAdapter.cpp", \
    "RosKmdAdapter_cpp1526", \
    L"{", \
    L"__FILE__, ItemString -- 10" , \
    L"__LINE__, ItemLong -- 11" , \
    L"}")
#endif // WPP_PUBLIC_ANNOT_RosKmdAdapter_cpp1526

#ifdef WPP_USER_MSG_GUID
# define WPP_ANNOTATE_RosKmdAdapter_cpp1540_FINAL(P, File, Name, ...) __annotation( \
    L ## P, \
    WPP_GUID_WTEXT WPP_USER_MSG_GUID L"roskmd // SRC=" _WPPW(File) \
    L" MJ= MN=", \
    L"#typev " _WPPW(Name) \
    L" 51 \"%0 [%10!s! @ %11!u!] ASSERTION :QueryChildStatus() is not supported by render-only driver.\" //   LEVEL=TRACE_LEVEL_ERROR FLAGS=ROS_TRACING_DEBUG" \
    WPP_FUNC_NAME, \
    __VA_ARGS__)
#else // WPP_USER_MSG_GUID
# define WPP_ANNOTATE_RosKmdAdapter_cpp1540_FINAL(P, File, Name, ...) __annotation( \
    L ## P, \
    L"bbf0cbd6-16d9-3159-edf2-825e98213b57 roskmd // SRC=" _WPPW(File) \
    L" MJ= MN=", \
    L"#typev " _WPPW(Name) \
    L" 51 \"%0 [%10!s! @ %11!u!] ASSERTION :QueryChildStatus() is not supported by render-only driver.\" //   LEVEL=TRACE_LEVEL_ERROR FLAGS=ROS_TRACING_DEBUG" \
    WPP_FUNC_NAME, \
    __VA_ARGS__)
#endif // WPP_USER_MSG_GUID

#ifdef WPP_PUBLIC_ANNOT_RosKmdAdapter_cpp1540
# define WPP_ANNOTATE_RosKmdAdapter_cpp1540 WPP_ANNOTATE_RosKmdAdapter_cpp1540_FINAL( \
    "TMF:", \
    "Unknown_cxx00", \
    "Unknown_cxx00", \
    L"{", \
    L"Arg, ItemString -- 10" , \
    L"Arg, ItemLong -- 11" , \
    L"}", \
    L"PUBLIC_TMF:")
# ifndef WPP_PUBLIC_TMC
#  define WPP_PUBLIC_TMC // Adds "PUBLIC_TMF:" to the control guid annotation
# endif
#else // WPP_PUBLIC_ANNOT_RosKmdAdapter_cpp1540
# define WPP_ANNOTATE_RosKmdAdapter_cpp1540 WPP_ANNOTATE_RosKmdAdapter_cpp1540_FINAL( \
    "TMF:", \
    "RosKmdAdapter.cpp", \
    "RosKmdAdapter_cpp1540", \
    L"{", \
    L"__FILE__, ItemString -- 10" , \
    L"__LINE__, ItemLong -- 11" , \
    L"}")
#endif // WPP_PUBLIC_ANNOT_RosKmdAdapter_cpp1540

#ifdef WPP_USER_MSG_GUID
# define WPP_ANNOTATE_RosKmdAdapter_cpp1559_FINAL(P, File, Name, ...) __annotation( \
    L ## P, \
    WPP_GUID_WTEXT WPP_USER_MSG_GUID L"roskmd // SRC=" _WPPW(File) \
    L" MJ= MN=", \
    L"#typev " _WPPW(Name) \
    L" 52 \"%0 [%10!s! @ %11!u!] ASSERTION :Not implemented\" //   LEVEL=TRACE_LEVEL_ERROR FLAGS=ROS_TRACING_DEBUG" \
    WPP_FUNC_NAME, \
    __VA_ARGS__)
#else // WPP_USER_MSG_GUID
# define WPP_ANNOTATE_RosKmdAdapter_cpp1559_FINAL(P, File, Name, ...) __annotation( \
    L ## P, \
    L"bbf0cbd6-16d9-3159-edf2-825e98213b57 roskmd // SRC=" _WPPW(File) \
    L" MJ= MN=", \
    L"#typev " _WPPW(Name) \
    L" 52 \"%0 [%10!s! @ %11!u!] ASSERTION :Not implemented\" //   LEVEL=TRACE_LEVEL_ERROR FLAGS=ROS_TRACING_DEBUG" \
    WPP_FUNC_NAME, \
    __VA_ARGS__)
#endif // WPP_USER_MSG_GUID

#ifdef WPP_PUBLIC_ANNOT_RosKmdAdapter_cpp1559
# define WPP_ANNOTATE_RosKmdAdapter_cpp1559 WPP_ANNOTATE_RosKmdAdapter_cpp1559_FINAL( \
    "TMF:", \
    "Unknown_cxx00", \
    "Unknown_cxx00", \
    L"{", \
    L"Arg, ItemString -- 10" , \
    L"Arg, ItemLong -- 11" , \
    L"}", \
    L"PUBLIC_TMF:")
# ifndef WPP_PUBLIC_TMC
#  define WPP_PUBLIC_TMC // Adds "PUBLIC_TMF:" to the control guid annotation
# endif
#else // WPP_PUBLIC_ANNOT_RosKmdAdapter_cpp1559
# define WPP_ANNOTATE_RosKmdAdapter_cpp1559 WPP_ANNOTATE_RosKmdAdapter_cpp1559_FINAL( \
    "TMF:", \
    "RosKmdAdapter.cpp", \
    "RosKmdAdapter_cpp1559", \
    L"{", \
    L"__FILE__, ItemString -- 10" , \
    L"__LINE__, ItemLong -- 11" , \
    L"}")
#endif // WPP_PUBLIC_ANNOT_RosKmdAdapter_cpp1559

#ifdef WPP_USER_MSG_GUID
# define WPP_ANNOTATE_RosKmdAdapter_cpp1567_FINAL(P, File, Name, ...) __annotation( \
    L ## P, \
    WPP_GUID_WTEXT WPP_USER_MSG_GUID L"roskmd // SRC=" _WPPW(File) \
    L" MJ= MN=", \
    L"#typev " _WPPW(Name) \
    L" 53 \"%0 [%10!s! @ %11!u!] ASSERTION :Not implemented\" //   LEVEL=TRACE_LEVEL_ERROR FLAGS=ROS_TRACING_DEBUG" \
    WPP_FUNC_NAME, \
    __VA_ARGS__)
#else // WPP_USER_MSG_GUID
# define WPP_ANNOTATE_RosKmdAdapter_cpp1567_FINAL(P, File, Name, ...) __annotation( \
    L ## P, \
    L"bbf0cbd6-16d9-3159-edf2-825e98213b57 roskmd // SRC=" _WPPW(File) \
    L" MJ= MN=", \
    L"#typev " _WPPW(Name) \
    L" 53 \"%0 [%10!s! @ %11!u!] ASSERTION :Not implemented\" //   LEVEL=TRACE_LEVEL_ERROR FLAGS=ROS_TRACING_DEBUG" \
    WPP_FUNC_NAME, \
    __VA_ARGS__)
#endif // WPP_USER_MSG_GUID

#ifdef WPP_PUBLIC_ANNOT_RosKmdAdapter_cpp1567
# define WPP_ANNOTATE_RosKmdAdapter_cpp1567 WPP_ANNOTATE_RosKmdAdapter_cpp1567_FINAL( \
    "TMF:", \
    "Unknown_cxx00", \
    "Unknown_cxx00", \
    L"{", \
    L"Arg, ItemString -- 10" , \
    L"Arg, ItemLong -- 11" , \
    L"}", \
    L"PUBLIC_TMF:")
# ifndef WPP_PUBLIC_TMC
#  define WPP_PUBLIC_TMC // Adds "PUBLIC_TMF:" to the control guid annotation
# endif
#else // WPP_PUBLIC_ANNOT_RosKmdAdapter_cpp1567
# define WPP_ANNOTATE_RosKmdAdapter_cpp1567 WPP_ANNOTATE_RosKmdAdapter_cpp1567_FINAL( \
    "TMF:", \
    "RosKmdAdapter.cpp", \
    "RosKmdAdapter_cpp1567", \
    L"{", \
    L"__FILE__, ItemString -- 10" , \
    L"__LINE__, ItemLong -- 11" , \
    L"}")
#endif // WPP_PUBLIC_ANNOT_RosKmdAdapter_cpp1567

#ifdef WPP_USER_MSG_GUID
# define WPP_ANNOTATE_RosKmdAdapter_cpp1821_FINAL(P, File, Name, ...) __annotation( \
    L ## P, \
    WPP_GUID_WTEXT WPP_USER_MSG_GUID L"roskmd // SRC=" _WPPW(File) \
    L" MJ= MN=", \
    L"#typev " _WPPW(Name) \
    L" 54 \"%0 [%10!s! @ %11!u!] WARNING :Received QueryInterface for unsupported interface. (InterfaceType=%12!s!)\" //   LEVEL=TRACE_LEVEL_WARNING FLAGS=ROS_TRACING_DEFAULT" \
    WPP_FUNC_NAME, \
    __VA_ARGS__)
#else // WPP_USER_MSG_GUID
# define WPP_ANNOTATE_RosKmdAdapter_cpp1821_FINAL(P, File, Name, ...) __annotation( \
    L ## P, \
    L"bbf0cbd6-16d9-3159-edf2-825e98213b57 roskmd // SRC=" _WPPW(File) \
    L" MJ= MN=", \
    L"#typev " _WPPW(Name) \
    L" 54 \"%0 [%10!s! @ %11!u!] WARNING :Received QueryInterface for unsupported interface. (InterfaceType=%12!s!)\" //   LEVEL=TRACE_LEVEL_WARNING FLAGS=ROS_TRACING_DEFAULT" \
    WPP_FUNC_NAME, \
    __VA_ARGS__)
#endif // WPP_USER_MSG_GUID

#ifdef WPP_PUBLIC_ANNOT_RosKmdAdapter_cpp1821
# define WPP_ANNOTATE_RosKmdAdapter_cpp1821 WPP_ANNOTATE_RosKmdAdapter_cpp1821_FINAL( \
    "TMF:", \
    "Unknown_cxx00", \
    "Unknown_cxx00", \
    L"{", \
    L"Arg, ItemString -- 10" , \
    L"Arg, ItemLong -- 11" , \
    L"Arg, ItemGuid -- 12" , \
    L"}", \
    L"PUBLIC_TMF:")
# ifndef WPP_PUBLIC_TMC
#  define WPP_PUBLIC_TMC // Adds "PUBLIC_TMF:" to the control guid annotation
# endif
#else // WPP_PUBLIC_ANNOT_RosKmdAdapter_cpp1821
# define WPP_ANNOTATE_RosKmdAdapter_cpp1821 WPP_ANNOTATE_RosKmdAdapter_cpp1821_FINAL( \
    "TMF:", \
    "RosKmdAdapter.cpp", \
    "RosKmdAdapter_cpp1821", \
    L"{", \
    L"__FILE__, ItemString -- 10" , \
    L"__LINE__, ItemLong -- 11" , \
    L"Args->InterfaceType, ItemGuid -- 12" , \
    L"}")
#endif // WPP_PUBLIC_ANNOT_RosKmdAdapter_cpp1821

#ifdef WPP_USER_MSG_GUID
# define WPP_ANNOTATE_RosKmdAdapter_cpp1869_FINAL(P, File, Name, ...) __annotation( \
    L ## P, \
    WPP_GUID_WTEXT WPP_USER_MSG_GUID L"roskmd // SRC=" _WPPW(File) \
    L" MJ= MN=", \
    L"#typev " _WPPW(Name) \
    L" 55 \"%0 [%10!s! @ %11!u!] TRACE :Preparing private allocation data for SHAREDPRIMARYSURFACEDATA. (Width=%12!d!, Height=%13!d!, Format=%14!d!, RefreshRate=%15!d!/%16!d!, VidPnSourceId=%17!d!)\" //   LEVEL=TRACE_LEVEL_VERBOSE FLAGS=ROS_TRACING_DEFAULT" \
    WPP_FUNC_NAME, \
    __VA_ARGS__)
#else // WPP_USER_MSG_GUID
# define WPP_ANNOTATE_RosKmdAdapter_cpp1869_FINAL(P, File, Name, ...) __annotation( \
    L ## P, \
    L"bbf0cbd6-16d9-3159-edf2-825e98213b57 roskmd // SRC=" _WPPW(File) \
    L" MJ= MN=", \
    L"#typev " _WPPW(Name) \
    L" 55 \"%0 [%10!s! @ %11!u!] TRACE :Preparing private allocation data for SHAREDPRIMARYSURFACEDATA. (Width=%12!d!, Height=%13!d!, Format=%14!d!, RefreshRate=%15!d!/%16!d!, VidPnSourceId=%17!d!)\" //   LEVEL=TRACE_LEVEL_VERBOSE FLAGS=ROS_TRACING_DEFAULT" \
    WPP_FUNC_NAME, \
    __VA_ARGS__)
#endif // WPP_USER_MSG_GUID

#ifdef WPP_PUBLIC_ANNOT_RosKmdAdapter_cpp1869
# define WPP_ANNOTATE_RosKmdAdapter_cpp1869 WPP_ANNOTATE_RosKmdAdapter_cpp1869_FINAL( \
    "TMF:", \
    "Unknown_cxx00", \
    "Unknown_cxx00", \
    L"{", \
    L"Arg, ItemString -- 10" , \
    L"Arg, ItemLong -- 11" , \
    L"Arg, ItemLong -- 12" , \
    L"Arg, ItemLong -- 13" , \
    L"Arg, ItemLong -- 14" , \
    L"Arg, ItemLong -- 15" , \
    L"Arg, ItemLong -- 16" , \
    L"Arg, ItemLong -- 17" , \
    L"}", \
    L"PUBLIC_TMF:")
# ifndef WPP_PUBLIC_TMC
#  define WPP_PUBLIC_TMC // Adds "PUBLIC_TMF:" to the control guid annotation
# endif
#else // WPP_PUBLIC_ANNOT_RosKmdAdapter_cpp1869
# define WPP_ANNOTATE_RosKmdAdapter_cpp1869 WPP_ANNOTATE_RosKmdAdapter_cpp1869_FINAL( \
    "TMF:", \
    "RosKmdAdapter.cpp", \
    "RosKmdAdapter_cpp1869", \
    L"{", \
    L"__FILE__, ItemString -- 10" , \
    L"__LINE__, ItemLong -- 11" , \
    L"surfData->Width, ItemLong -- 12" , \
    L"surfData->Height, ItemLong -- 13" , \
    L"surfData->Format, ItemLong -- 14" , \
    L"surfData->RefreshRate.Numerator, ItemLong -- 15" , \
    L"surfData->RefreshRate.Denominator, ItemLong -- 16" , \
    L"surfData->VidPnSourceId, ItemLong -- 17" , \
    L"}")
#endif // WPP_PUBLIC_ANNOT_RosKmdAdapter_cpp1869

#ifdef WPP_USER_MSG_GUID
# define WPP_ANNOTATE_RosKmdAdapter_cpp1929_FINAL(P, File, Name, ...) __annotation( \
    L ## P, \
    WPP_GUID_WTEXT WPP_USER_MSG_GUID L"roskmd // SRC=" _WPPW(File) \
    L" MJ= MN=", \
    L"#typev " _WPPW(Name) \
    L" 56 \"%0 [%10!s! @ %11!u!] TRACE :Preparing private allocation data for SHADOWSURFACE. (Width=%12!d!, Height=%13!d!, Format=%14!d!)\" //   LEVEL=TRACE_LEVEL_VERBOSE FLAGS=ROS_TRACING_DEFAULT" \
    WPP_FUNC_NAME, \
    __VA_ARGS__)
#else // WPP_USER_MSG_GUID
# define WPP_ANNOTATE_RosKmdAdapter_cpp1929_FINAL(P, File, Name, ...) __annotation( \
    L ## P, \
    L"bbf0cbd6-16d9-3159-edf2-825e98213b57 roskmd // SRC=" _WPPW(File) \
    L" MJ= MN=", \
    L"#typev " _WPPW(Name) \
    L" 56 \"%0 [%10!s! @ %11!u!] TRACE :Preparing private allocation data for SHADOWSURFACE. (Width=%12!d!, Height=%13!d!, Format=%14!d!)\" //   LEVEL=TRACE_LEVEL_VERBOSE FLAGS=ROS_TRACING_DEFAULT" \
    WPP_FUNC_NAME, \
    __VA_ARGS__)
#endif // WPP_USER_MSG_GUID

#ifdef WPP_PUBLIC_ANNOT_RosKmdAdapter_cpp1929
# define WPP_ANNOTATE_RosKmdAdapter_cpp1929 WPP_ANNOTATE_RosKmdAdapter_cpp1929_FINAL( \
    "TMF:", \
    "Unknown_cxx00", \
    "Unknown_cxx00", \
    L"{", \
    L"Arg, ItemString -- 10" , \
    L"Arg, ItemLong -- 11" , \
    L"Arg, ItemLong -- 12" , \
    L"Arg, ItemLong -- 13" , \
    L"Arg, ItemLong -- 14" , \
    L"}", \
    L"PUBLIC_TMF:")
# ifndef WPP_PUBLIC_TMC
#  define WPP_PUBLIC_TMC // Adds "PUBLIC_TMF:" to the control guid annotation
# endif
#else // WPP_PUBLIC_ANNOT_RosKmdAdapter_cpp1929
# define WPP_ANNOTATE_RosKmdAdapter_cpp1929 WPP_ANNOTATE_RosKmdAdapter_cpp1929_FINAL( \
    "TMF:", \
    "RosKmdAdapter.cpp", \
    "RosKmdAdapter_cpp1929", \
    L"{", \
    L"__FILE__, ItemString -- 10" , \
    L"__LINE__, ItemLong -- 11" , \
    L"surfData->Width, ItemLong -- 12" , \
    L"surfData->Height, ItemLong -- 13" , \
    L"surfData->Format, ItemLong -- 14" , \
    L"}")
#endif // WPP_PUBLIC_ANNOT_RosKmdAdapter_cpp1929

#ifdef WPP_USER_MSG_GUID
# define WPP_ANNOTATE_RosKmdAdapter_cpp1977_FINAL(P, File, Name, ...) __annotation( \
    L ## P, \
    WPP_GUID_WTEXT WPP_USER_MSG_GUID L"roskmd // SRC=" _WPPW(File) \
    L" MJ= MN=", \
    L"#typev " _WPPW(Name) \
    L" 57 \"%0 [%10!s! @ %11!u!] ASSERTION :STAGINGSURFACEDATA is not implemented. (Width=%12!d!, Height=%13!d!, Pitch=%14!d!)\" //   LEVEL=TRACE_LEVEL_ERROR FLAGS=ROS_TRACING_DEBUG" \
    WPP_FUNC_NAME, \
    __VA_ARGS__)
#else // WPP_USER_MSG_GUID
# define WPP_ANNOTATE_RosKmdAdapter_cpp1977_FINAL(P, File, Name, ...) __annotation( \
    L ## P, \
    L"bbf0cbd6-16d9-3159-edf2-825e98213b57 roskmd // SRC=" _WPPW(File) \
    L" MJ= MN=", \
    L"#typev " _WPPW(Name) \
    L" 57 \"%0 [%10!s! @ %11!u!] ASSERTION :STAGINGSURFACEDATA is not implemented. (Width=%12!d!, Height=%13!d!, Pitch=%14!d!)\" //   LEVEL=TRACE_LEVEL_ERROR FLAGS=ROS_TRACING_DEBUG" \
    WPP_FUNC_NAME, \
    __VA_ARGS__)
#endif // WPP_USER_MSG_GUID

#ifdef WPP_PUBLIC_ANNOT_RosKmdAdapter_cpp1977
# define WPP_ANNOTATE_RosKmdAdapter_cpp1977 WPP_ANNOTATE_RosKmdAdapter_cpp1977_FINAL( \
    "TMF:", \
    "Unknown_cxx00", \
    "Unknown_cxx00", \
    L"{", \
    L"Arg, ItemString -- 10" , \
    L"Arg, ItemLong -- 11" , \
    L"Arg, ItemLong -- 12" , \
    L"Arg, ItemLong -- 13" , \
    L"Arg, ItemLong -- 14" , \
    L"}", \
    L"PUBLIC_TMF:")
# ifndef WPP_PUBLIC_TMC
#  define WPP_PUBLIC_TMC // Adds "PUBLIC_TMF:" to the control guid annotation
# endif
#else // WPP_PUBLIC_ANNOT_RosKmdAdapter_cpp1977
# define WPP_ANNOTATE_RosKmdAdapter_cpp1977 WPP_ANNOTATE_RosKmdAdapter_cpp1977_FINAL( \
    "TMF:", \
    "RosKmdAdapter.cpp", \
    "RosKmdAdapter_cpp1977", \
    L"{", \
    L"__FILE__, ItemString -- 10" , \
    L"__LINE__, ItemLong -- 11" , \
    L"surfData->Width, ItemLong -- 12" , \
    L"surfData->Height, ItemLong -- 13" , \
    L"surfData->Pitch, ItemLong -- 14" , \
    L"}")
#endif // WPP_PUBLIC_ANNOT_RosKmdAdapter_cpp1977

#ifdef WPP_USER_MSG_GUID
# define WPP_ANNOTATE_RosKmdAdapter_cpp1987_FINAL(P, File, Name, ...) __annotation( \
    L ## P, \
    WPP_GUID_WTEXT WPP_USER_MSG_GUID L"roskmd // SRC=" _WPPW(File) \
    L" MJ= MN=", \
    L"#typev " _WPPW(Name) \
    L" 58 \"%0 [%10!s! @ %11!u!] ASSERTION :GDISURFACEDATA is not implemented. We must return a nonzero Pitch if allocation is CPU visible. (Width=%12!d!, Height=%13!d!, Format=%14!d!, Type=%15!d!, Flags=0x%16!x!, Pitch=%17!d!)\" //   LEVEL=TRACE_LEVEL_ERROR FLAGS=ROS_TRACING_DEBUG" \
    WPP_FUNC_NAME, \
    __VA_ARGS__)
#else // WPP_USER_MSG_GUID
# define WPP_ANNOTATE_RosKmdAdapter_cpp1987_FINAL(P, File, Name, ...) __annotation( \
    L ## P, \
    L"bbf0cbd6-16d9-3159-edf2-825e98213b57 roskmd // SRC=" _WPPW(File) \
    L" MJ= MN=", \
    L"#typev " _WPPW(Name) \
    L" 58 \"%0 [%10!s! @ %11!u!] ASSERTION :GDISURFACEDATA is not implemented. We must return a nonzero Pitch if allocation is CPU visible. (Width=%12!d!, Height=%13!d!, Format=%14!d!, Type=%15!d!, Flags=0x%16!x!, Pitch=%17!d!)\" //   LEVEL=TRACE_LEVEL_ERROR FLAGS=ROS_TRACING_DEBUG" \
    WPP_FUNC_NAME, \
    __VA_ARGS__)
#endif // WPP_USER_MSG_GUID

#ifdef WPP_PUBLIC_ANNOT_RosKmdAdapter_cpp1987
# define WPP_ANNOTATE_RosKmdAdapter_cpp1987 WPP_ANNOTATE_RosKmdAdapter_cpp1987_FINAL( \
    "TMF:", \
    "Unknown_cxx00", \
    "Unknown_cxx00", \
    L"{", \
    L"Arg, ItemString -- 10" , \
    L"Arg, ItemLong -- 11" , \
    L"Arg, ItemLong -- 12" , \
    L"Arg, ItemLong -- 13" , \
    L"Arg, ItemLong -- 14" , \
    L"Arg, ItemLong -- 15" , \
    L"Arg, ItemLong -- 16" , \
    L"Arg, ItemLong -- 17" , \
    L"}", \
    L"PUBLIC_TMF:")
# ifndef WPP_PUBLIC_TMC
#  define WPP_PUBLIC_TMC // Adds "PUBLIC_TMF:" to the control guid annotation
# endif
#else // WPP_PUBLIC_ANNOT_RosKmdAdapter_cpp1987
# define WPP_ANNOTATE_RosKmdAdapter_cpp1987 WPP_ANNOTATE_RosKmdAdapter_cpp1987_FINAL( \
    "TMF:", \
    "RosKmdAdapter.cpp", \
    "RosKmdAdapter_cpp1987", \
    L"{", \
    L"__FILE__, ItemString -- 10" , \
    L"__LINE__, ItemLong -- 11" , \
    L"surfData->Width, ItemLong -- 12" , \
    L"surfData->Height, ItemLong -- 13" , \
    L"surfData->Format, ItemLong -- 14" , \
    L"surfData->Type, ItemLong -- 15" , \
    L"surfData->Flags.Value, ItemLong -- 16" , \
    L"surfData->Pitch, ItemLong -- 17" , \
    L"}")
#endif // WPP_PUBLIC_ANNOT_RosKmdAdapter_cpp1987

#ifdef WPP_USER_MSG_GUID
# define WPP_ANNOTATE_RosKmdAdapter_cpp1998_FINAL(P, File, Name, ...) __annotation( \
    L ## P, \
    WPP_GUID_WTEXT WPP_USER_MSG_GUID L"roskmd // SRC=" _WPPW(File) \
    L" MJ= MN=", \
    L"#typev " _WPPW(Name) \
    L" 59 \"%0 [%10!s! @ %11!u!] ASSERTION :Unknown standard allocation type. (StandardAllocationType=%12!d!)\" //   LEVEL=TRACE_LEVEL_ERROR FLAGS=ROS_TRACING_DEBUG" \
    WPP_FUNC_NAME, \
    __VA_ARGS__)
#else // WPP_USER_MSG_GUID
# define WPP_ANNOTATE_RosKmdAdapter_cpp1998_FINAL(P, File, Name, ...) __annotation( \
    L ## P, \
    L"bbf0cbd6-16d9-3159-edf2-825e98213b57 roskmd // SRC=" _WPPW(File) \
    L" MJ= MN=", \
    L"#typev " _WPPW(Name) \
    L" 59 \"%0 [%10!s! @ %11!u!] ASSERTION :Unknown standard allocation type. (StandardAllocationType=%12!d!)\" //   LEVEL=TRACE_LEVEL_ERROR FLAGS=ROS_TRACING_DEBUG" \
    WPP_FUNC_NAME, \
    __VA_ARGS__)
#endif // WPP_USER_MSG_GUID

#ifdef WPP_PUBLIC_ANNOT_RosKmdAdapter_cpp1998
# define WPP_ANNOTATE_RosKmdAdapter_cpp1998 WPP_ANNOTATE_RosKmdAdapter_cpp1998_FINAL( \
    "TMF:", \
    "Unknown_cxx00", \
    "Unknown_cxx00", \
    L"{", \
    L"Arg, ItemString -- 10" , \
    L"Arg, ItemLong -- 11" , \
    L"Arg, ItemLong -- 12" , \
    L"}", \
    L"PUBLIC_TMF:")
# ifndef WPP_PUBLIC_TMC
#  define WPP_PUBLIC_TMC // Adds "PUBLIC_TMF:" to the control guid annotation
# endif
#else // WPP_PUBLIC_ANNOT_RosKmdAdapter_cpp1998
# define WPP_ANNOTATE_RosKmdAdapter_cpp1998 WPP_ANNOTATE_RosKmdAdapter_cpp1998_FINAL( \
    "TMF:", \
    "RosKmdAdapter.cpp", \
    "RosKmdAdapter_cpp1998", \
    L"{", \
    L"__FILE__, ItemString -- 10" , \
    L"__LINE__, ItemLong -- 11" , \
    L"Args->StandardAllocationType, ItemLong -- 12" , \
    L"}")
#endif // WPP_PUBLIC_ANNOT_RosKmdAdapter_cpp1998

#ifdef WPP_USER_MSG_GUID
# define WPP_ANNOTATE_RosKmdAdapter_cpp2011_FINAL(P, File, Name, ...) __annotation( \
    L ## P, \
    WPP_GUID_WTEXT WPP_USER_MSG_GUID L"roskmd // SRC=" _WPPW(File) \
    L" MJ= MN=", \
    L"#typev " _WPPW(Name) \
    L" 60 \"%0 [%10!s! @ %11!u!] ASSERTION :Not implemented.\" //   LEVEL=TRACE_LEVEL_ERROR FLAGS=ROS_TRACING_DEBUG" \
    WPP_FUNC_NAME, \
    __VA_ARGS__)
#else // WPP_USER_MSG_GUID
# define WPP_ANNOTATE_RosKmdAdapter_cpp2011_FINAL(P, File, Name, ...) __annotation( \
    L ## P, \
    L"bbf0cbd6-16d9-3159-edf2-825e98213b57 roskmd // SRC=" _WPPW(File) \
    L" MJ= MN=", \
    L"#typev " _WPPW(Name) \
    L" 60 \"%0 [%10!s! @ %11!u!] ASSERTION :Not implemented.\" //   LEVEL=TRACE_LEVEL_ERROR FLAGS=ROS_TRACING_DEBUG" \
    WPP_FUNC_NAME, \
    __VA_ARGS__)
#endif // WPP_USER_MSG_GUID

#ifdef WPP_PUBLIC_ANNOT_RosKmdAdapter_cpp2011
# define WPP_ANNOTATE_RosKmdAdapter_cpp2011 WPP_ANNOTATE_RosKmdAdapter_cpp2011_FINAL( \
    "TMF:", \
    "Unknown_cxx00", \
    "Unknown_cxx00", \
    L"{", \
    L"Arg, ItemString -- 10" , \
    L"Arg, ItemLong -- 11" , \
    L"}", \
    L"PUBLIC_TMF:")
# ifndef WPP_PUBLIC_TMC
#  define WPP_PUBLIC_TMC // Adds "PUBLIC_TMF:" to the control guid annotation
# endif
#else // WPP_PUBLIC_ANNOT_RosKmdAdapter_cpp2011
# define WPP_ANNOTATE_RosKmdAdapter_cpp2011 WPP_ANNOTATE_RosKmdAdapter_cpp2011_FINAL( \
    "TMF:", \
    "RosKmdAdapter.cpp", \
    "RosKmdAdapter_cpp2011", \
    L"{", \
    L"__FILE__, ItemString -- 10" , \
    L"__LINE__, ItemLong -- 11" , \
    L"}")
#endif // WPP_PUBLIC_ANNOT_RosKmdAdapter_cpp2011

#ifdef WPP_USER_MSG_GUID
# define WPP_ANNOTATE_RosKmdAdapter_cpp2129_FINAL(P, File, Name, ...) __annotation( \
    L ## P, \
    WPP_GUID_WTEXT WPP_USER_MSG_GUID L"roskmd // SRC=" _WPPW(File) \
    L" MJ= MN=", \
    L"#typev " _WPPW(Name) \
    L" 61 \"%0 [%10!s! @ %11!u!] ASSERTION :Not implemented\" //   LEVEL=TRACE_LEVEL_ERROR FLAGS=ROS_TRACING_DEBUG" \
    WPP_FUNC_NAME, \
    __VA_ARGS__)
#else // WPP_USER_MSG_GUID
# define WPP_ANNOTATE_RosKmdAdapter_cpp2129_FINAL(P, File, Name, ...) __annotation( \
    L ## P, \
    L"bbf0cbd6-16d9-3159-edf2-825e98213b57 roskmd // SRC=" _WPPW(File) \
    L" MJ= MN=", \
    L"#typev " _WPPW(Name) \
    L" 61 \"%0 [%10!s! @ %11!u!] ASSERTION :Not implemented\" //   LEVEL=TRACE_LEVEL_ERROR FLAGS=ROS_TRACING_DEBUG" \
    WPP_FUNC_NAME, \
    __VA_ARGS__)
#endif // WPP_USER_MSG_GUID

#ifdef WPP_PUBLIC_ANNOT_RosKmdAdapter_cpp2129
# define WPP_ANNOTATE_RosKmdAdapter_cpp2129 WPP_ANNOTATE_RosKmdAdapter_cpp2129_FINAL( \
    "TMF:", \
    "Unknown_cxx00", \
    "Unknown_cxx00", \
    L"{", \
    L"Arg, ItemString -- 10" , \
    L"Arg, ItemLong -- 11" , \
    L"}", \
    L"PUBLIC_TMF:")
# ifndef WPP_PUBLIC_TMC
#  define WPP_PUBLIC_TMC // Adds "PUBLIC_TMF:" to the control guid annotation
# endif
#else // WPP_PUBLIC_ANNOT_RosKmdAdapter_cpp2129
# define WPP_ANNOTATE_RosKmdAdapter_cpp2129 WPP_ANNOTATE_RosKmdAdapter_cpp2129_FINAL( \
    "TMF:", \
    "RosKmdAdapter.cpp", \
    "RosKmdAdapter_cpp2129", \
    L"{", \
    L"__FILE__, ItemString -- 10" , \
    L"__LINE__, ItemLong -- 11" , \
    L"}")
#endif // WPP_PUBLIC_ANNOT_RosKmdAdapter_cpp2129

# define WPP_ANNOTATE(x) WPP_ANNOTATE_ ## x,

#endif // WPP_NO_ANNOTATIONS

#ifdef WPP_USER_MSG_GUID

#define WPP_LOCAL_MSG_VAR(Guid) WPP_XGLUE3(WPP_, WPP_GUID_NORM Guid, _Traceguids)

#define WPP_LOCAL_MSG_GUID(Guid) \
extern const __declspec(selectany) GUID WPP_LOCAL_MSG_VAR(Guid)[] = { WPP_GUID_STRUCT Guid }

WPP_LOCAL_MSG_GUID(WPP_USER_MSG_GUID);
#define WPP_LOCAL_TraceGuids WPP_LOCAL_MSG_VAR(WPP_USER_MSG_GUID)

#else // WPP_USER_MSG_GUID

#define WPP_LOCAL_TraceGuids WPP_bbf0cbd616d93159edf2825e98213b57_Traceguids
extern const __declspec(selectany) GUID WPP_LOCAL_TraceGuids[] = { {0xbbf0cbd6,0x16d9,0x3159,{0xed,0xf2,0x82,0x5e,0x98,0x21,0x3b,0x57}}, };

#endif // WPP_USER_MSG_GUID

#ifndef WPP_ALREADY_INCLUDED

#ifndef WPP_TRACE_OPTIONS
enum { WPP_TRACE_OPTIONS =
    TRACE_MESSAGE_SEQUENCE   |
    TRACE_MESSAGE_GUID       |
    TRACE_MESSAGE_SYSTEMINFO |
    TRACE_MESSAGE_TIMESTAMP };
#endif // WPP_TRACE_OPTIONS

#ifndef WPP_LOGPAIR_SEPARATOR
# define WPP_LOGPAIR_SEPARATOR ,
#endif
#ifndef WPP_LOGPAIR_SIZET
# define WPP_LOGPAIR_SIZET SIZE_T
#endif
#ifndef WPP_LOGPAIR
# define WPP_LOGPAIR(_Size, _Addr)     (_Addr),((WPP_LOGPAIR_SIZET)(_Size))WPP_LOGPAIR_SEPARATOR
#endif

#define WPP_LOGTYPEVAL(_Type, _Value) WPP_LOGPAIR(sizeof(_Type), &(_Value))
#define WPP_LOGTYPEPTR(_Value)        WPP_LOGPAIR(sizeof(*(_Value)), (_Value))

// Marshalling macros.

#ifndef WPP_LOGASTR
# ifdef WPP_CHECK_FOR_NULL_STRING
#  define WPP_LOGASTR(_value)  WPP_LOGPAIR( \
    (_value) ? strlen(_value) + 1 : 5, \
    (_value) ?       (_value)     : "NULL" )
# else // WPP_CHECK_FOR_NULL_STRING
#  define WPP_LOGASTR(_value)  WPP_LOGPAIR( \
    strlen(_value) + 1, \
    _value )
# endif // WPP_CHECK_FOR_NULL_STRING
#endif // WPP_LOGASTR

#ifndef WPP_LOGWSTR
# ifdef WPP_CHECK_FOR_NULL_STRING
#  define WPP_LOGWSTR(_value)  WPP_LOGPAIR( \
    ((_value) ? wcslen(_value) + 1 : 5) * sizeof(WCHAR), \
     (_value) ?       (_value)     : L"NULL" )
# else // WPP_CHECK_FOR_NULL_STRING
#  define WPP_LOGWSTR(_value)  WPP_LOGPAIR( \
    (wcslen(_value) + 1) * sizeof(WCHAR), \
    _value )
# endif // WPP_CHECK_FOR_NULL_STRING
#endif // WPP_LOGWSTR

#ifndef WPP_LOGPGUID
# define WPP_LOGPGUID(_value) WPP_LOGPAIR( sizeof(GUID), (_value) )
#endif // WPP_LOGPGUID

#ifndef WPP_LOGPSID
# ifdef WPP_CHECK_FOR_NULL_STRING
# define WPP_LOGPSID(_value)  WPP_LOGPAIR( \
    (_value) && WPP_IsValidSid(_value) ? WPP_GetLengthSid(_value) : 5, \
    (_value) && WPP_IsValidSid(_value) ? (_value) : (void const*)"NULL")
# else // WPP_CHECK_FOR_NULL_STRING
# define WPP_LOGPSID(_value)  WPP_LOGPAIR( \
    WPP_GetLengthSid(_value), \
    (_value) )
#endif // WPP_CHECK_FOR_NULL_STRING
#endif // WPP_LOGPSID

#ifndef WPP_LOGCSTR
# define WPP_LOGCSTR(_x) \
    WPP_LOGPAIR( sizeof(USHORT),      &(_x).Length ) \
    WPP_LOGPAIR( (USHORT)(_x).Length, (USHORT)(_x).Length ? (_x).Buffer : "" )
#endif // WPP_LOGCSTR

#ifndef WPP_LOGUSTR
# define WPP_LOGUSTR(_x) \
    WPP_LOGPAIR( sizeof(USHORT),      &(_x).Length ) \
    WPP_LOGPAIR( (USHORT)(_x).Length, (USHORT)(_x).Length ? (_x).Buffer : L"" )
#endif // WPP_LOGUSTR

#ifndef WPP_LOGPUSTR
#ifdef WPP_CHECK_FOR_NULL_STRING
# define WPP_LOGPUSTR(_x) \
    WPP_LOGPAIR( \
        sizeof(USHORT), \
        (_x) ? &(_x)->Length : (void const*)L"\x08" ) \
    WPP_LOGPAIR( \
        (_x)                         ? (USHORT)(_x)->Length : 0x08, \
        (_x) && (USHORT)(_x)->Length ? (_x)->Buffer         : L"NULL" )
#else // WPP_CHECK_FOR_NULL_STRING
# define WPP_LOGPUSTR(_x) WPP_LOGUSTR(*(_x))
#endif // WPP_CHECK_FOR_NULL_STRING
#endif // WPP_LOGPUSTR

#ifndef WPP_LOGPCSTR
#ifdef WPP_CHECK_FOR_NULL_STRING
# define WPP_LOGPCSTR(_x) \
    WPP_LOGPAIR( \
        sizeof(USHORT), \
        (_x) ? &(_x)->Length : (void const*)L"\x04" ) \
    WPP_LOGPAIR( \
        (_x)                         ? (USHORT)(_x)->Length : 0x04, \
        (_x) && (USHORT)(_x)->Length ? (_x)->Buffer         : "NULL" )
#else // WPP_CHECK_FOR_NULL_STRING
# define WPP_LOGPCSTR(_x) WPP_LOGCSTR(*(_x))
#endif // WPP_CHECK_FOR_NULL_STRING
#endif // WPP_LOGPCSTR

#ifdef __cplusplus

#ifndef WPP_POINTER_TO_USHORT
struct WppPointerToUshort
{
    USHORT m_val;
    WPP_FORCEINLINE explicit WppPointerToUshort(USHORT val) : m_val(val) {}
    WPP_FORCEINLINE USHORT const* get() const { return &m_val; }
};
#define WPP_POINTER_TO_USHORT(val) (WppPointerToUshort((val)).get())
#endif // WPP_POINTER_TO_USHORT

#ifndef WPP_LOGCPPSTR
#define WPP_LOGCPPSTR(_value) \
    WPP_LOGPAIR( \
        sizeof(USHORT), \
        WPP_POINTER_TO_USHORT((USHORT)((_value).size()*sizeof(*(_value).c_str()))) ) \
    WPP_LOGPAIR( \
        (USHORT)((_value).size()*sizeof(*(_value).c_str())), \
        (_value).c_str() )
#endif // WPP_LOGCPPSTR

#ifndef WPP_LOGCPPVEC
#define WPP_LOGCPPVEC(_value) \
    WPP_LOGPAIR( \
        sizeof(USHORT), \
        WPP_POINTER_TO_USHORT((USHORT)((_value).size()*sizeof(*(_value).data()))) ) \
    WPP_LOGPAIR( \
        (USHORT)((_value).size()*sizeof(*(_value).data())), \
        (_value).data() + ((_value).data() == NULL) )
#endif // WPP_LOGCPPVEC

#endif // __cplusplus

#ifndef WPP_BINARY_def
# define WPP_BINARY_def
typedef struct tagWPP_BINARY
{
    _Field_size_bytes_(Length) void const* Buffer;
    USHORT Length;
} WPP_BINARY;
#endif // WPP_BINARY_def

#ifndef WPP_BINARY_func
# define WPP_BINARY_func
WPP_FORCEINLINE WPP_BINARY
WppBinary(_In_reads_bytes_(Length) void const* Buffer, USHORT Length)
{
    WPP_BINARY data;
    data.Buffer = Buffer;
    data.Length = Length;
    return data;
}
#endif // WPP_BINARY_func

#endif // WPP_ALREADY_INCLUDED

#ifndef WPP_ENABLE_FLAG_BIT
#define WPP_ENABLE_FLAG_BIT(flag) (WPP_CB[((flag) >> 16)].Control).Flags[( (0xFFFF & ((flag)-1) ) / 32)] & (1 << ( ((flag)-1) & 31 ))
#endif

#ifndef WPP_SF_sD_def
# define WPP_SF_sD_def
WPP_INLINE void WPP_SF_sD(WPP_LOGGER_ARG unsigned short id, LPCGUID TraceGuid, LPCSTR _a1, unsigned int _a2)
{ WPP_TRACE(WPP_GET_LOGGER, WPP_TRACE_OPTIONS, (LPGUID)TraceGuid, id, WPP_LOGASTR(_a1) WPP_LOGTYPEVAL(unsigned int, _a2)  (void*)0); }
#endif // WPP_SF_sD_def

#if ENABLE_WPP_RECORDER

#if ENABLE_WPP_TRACE_FILTERING_WITH_WPP_RECORDER

//
// Generate the WPP_RECORDER_AND_TRACE_SF_sD function
//
#ifndef WPP_RECORDER_AND_TRACE_SF_sD_def
#define WPP_RECORDER_AND_TRACE_SF_sD_def
WPP_INLINE
VOID
WPP_RECORDER_AND_TRACE_SF_sD(
    WPP_LOGGER_ARG
    BOOLEAN  wppEnabled,
    BOOLEAN  recorderEnabled,
    PVOID    AutoLogContext,
    UCHAR    level,
    ULONG    flags,
    USHORT   id,
    LPCGUID  traceGuid
    , LPCSTR _a1, unsigned int _a2
    )
{
    if (wppEnabled)
    {
        WPP_TRACE( WPP_GET_LOGGER,
                   WPP_TRACE_OPTIONS,
                   (LPGUID)traceGuid,
                   id,
                   WPP_LOGASTR(_a1) WPP_LOGTYPEVAL(unsigned int, _a2)  (void*)0);
    }

    if (recorderEnabled)
    {
        WPP_RECORDER( AutoLogContext, level, flags, (LPGUID) traceGuid, id, WPP_LOGASTR(_a1) WPP_LOGTYPEVAL(unsigned int, _a2)  (void*)0 );
    }
}
#endif // WPP_RECORDER_AND_TRACE_SF_sD_def

#else  // ENABLE_WPP_TRACE_FILTERING_WITH_WPP_RECORDER

//
// Generate the WPP_RECORDER_SP_sD function
//
#ifndef WPP_RECORDER_SF_sD_def
#define WPP_RECORDER_SF_sD_def
WPP_INLINE
VOID
WPP_RECORDER_SF_sD(
    PVOID    AutoLogContext,
    UCHAR    level,
    ULONG    flags,
    USHORT   id,
    LPCGUID  traceGuid
    , LPCSTR _a1, unsigned int _a2
    )
{
    if (WPP_ENABLE_FLAG_BIT(flags) &&
        (WPP_CONTROL(flags).Level >= level))
    {
        WPP_TRACE(
            WPP_CONTROL(flags).Logger,
            WPP_TRACE_OPTIONS,
            (LPGUID)traceGuid,
            id,
            WPP_LOGASTR(_a1) WPP_LOGTYPEVAL(unsigned int, _a2)  (void*)0);
    }

    WPP_RECORDER(AutoLogContext, level, flags, (LPGUID) traceGuid, id, WPP_LOGASTR(_a1) WPP_LOGTYPEVAL(unsigned int, _a2)  (void*)0);
}
#endif // WPP_RECORDER_SF_sD_def

#endif // ENABLE_WPP_TRACE_FILTERING_WITH_WPP_RECORDER

#endif // ENABLE_WPP_RECORDER

#ifndef WPP_SF_sDL_def
# define WPP_SF_sDL_def
WPP_INLINE void WPP_SF_sDL(WPP_LOGGER_ARG unsigned short id, LPCGUID TraceGuid, LPCSTR _a1, unsigned int _a2, unsigned long _a3)
{ WPP_TRACE(WPP_GET_LOGGER, WPP_TRACE_OPTIONS, (LPGUID)TraceGuid, id, WPP_LOGASTR(_a1) WPP_LOGTYPEVAL(unsigned int, _a2) WPP_LOGTYPEVAL(unsigned long, _a3)  (void*)0); }
#endif // WPP_SF_sDL_def

#if ENABLE_WPP_RECORDER

#if ENABLE_WPP_TRACE_FILTERING_WITH_WPP_RECORDER

//
// Generate the WPP_RECORDER_AND_TRACE_SF_sDL function
//
#ifndef WPP_RECORDER_AND_TRACE_SF_sDL_def
#define WPP_RECORDER_AND_TRACE_SF_sDL_def
WPP_INLINE
VOID
WPP_RECORDER_AND_TRACE_SF_sDL(
    WPP_LOGGER_ARG
    BOOLEAN  wppEnabled,
    BOOLEAN  recorderEnabled,
    PVOID    AutoLogContext,
    UCHAR    level,
    ULONG    flags,
    USHORT   id,
    LPCGUID  traceGuid
    , LPCSTR _a1, unsigned int _a2, unsigned long _a3
    )
{
    if (wppEnabled)
    {
        WPP_TRACE( WPP_GET_LOGGER,
                   WPP_TRACE_OPTIONS,
                   (LPGUID)traceGuid,
                   id,
                   WPP_LOGASTR(_a1) WPP_LOGTYPEVAL(unsigned int, _a2) WPP_LOGTYPEVAL(unsigned long, _a3)  (void*)0);
    }

    if (recorderEnabled)
    {
        WPP_RECORDER( AutoLogContext, level, flags, (LPGUID) traceGuid, id, WPP_LOGASTR(_a1) WPP_LOGTYPEVAL(unsigned int, _a2) WPP_LOGTYPEVAL(unsigned long, _a3)  (void*)0 );
    }
}
#endif // WPP_RECORDER_AND_TRACE_SF_sDL_def

#else  // ENABLE_WPP_TRACE_FILTERING_WITH_WPP_RECORDER

//
// Generate the WPP_RECORDER_SP_sDL function
//
#ifndef WPP_RECORDER_SF_sDL_def
#define WPP_RECORDER_SF_sDL_def
WPP_INLINE
VOID
WPP_RECORDER_SF_sDL(
    PVOID    AutoLogContext,
    UCHAR    level,
    ULONG    flags,
    USHORT   id,
    LPCGUID  traceGuid
    , LPCSTR _a1, unsigned int _a2, unsigned long _a3
    )
{
    if (WPP_ENABLE_FLAG_BIT(flags) &&
        (WPP_CONTROL(flags).Level >= level))
    {
        WPP_TRACE(
            WPP_CONTROL(flags).Logger,
            WPP_TRACE_OPTIONS,
            (LPGUID)traceGuid,
            id,
            WPP_LOGASTR(_a1) WPP_LOGTYPEVAL(unsigned int, _a2) WPP_LOGTYPEVAL(unsigned long, _a3)  (void*)0);
    }

    WPP_RECORDER(AutoLogContext, level, flags, (LPGUID) traceGuid, id, WPP_LOGASTR(_a1) WPP_LOGTYPEVAL(unsigned int, _a2) WPP_LOGTYPEVAL(unsigned long, _a3)  (void*)0);
}
#endif // WPP_RECORDER_SF_sDL_def

#endif // ENABLE_WPP_TRACE_FILTERING_WITH_WPP_RECORDER

#endif // ENABLE_WPP_RECORDER

#ifndef WPP_SF_sD_guid__def
# define WPP_SF_sD_guid__def
WPP_INLINE void WPP_SF_sD_guid_(WPP_LOGGER_ARG unsigned short id, LPCGUID TraceGuid, LPCSTR _a1, unsigned int _a2, LPCGUID _a3)
{ WPP_TRACE(WPP_GET_LOGGER, WPP_TRACE_OPTIONS, (LPGUID)TraceGuid, id, WPP_LOGASTR(_a1) WPP_LOGTYPEVAL(unsigned int, _a2) WPP_LOGTYPEPTR(_a3)  (void*)0); }
#endif // WPP_SF_sD_guid__def

#if ENABLE_WPP_RECORDER

#if ENABLE_WPP_TRACE_FILTERING_WITH_WPP_RECORDER

//
// Generate the WPP_RECORDER_AND_TRACE_SF_sD_guid_ function
//
#ifndef WPP_RECORDER_AND_TRACE_SF_sD_guid__def
#define WPP_RECORDER_AND_TRACE_SF_sD_guid__def
WPP_INLINE
VOID
WPP_RECORDER_AND_TRACE_SF_sD_guid_(
    WPP_LOGGER_ARG
    BOOLEAN  wppEnabled,
    BOOLEAN  recorderEnabled,
    PVOID    AutoLogContext,
    UCHAR    level,
    ULONG    flags,
    USHORT   id,
    LPCGUID  traceGuid
    , LPCSTR _a1, unsigned int _a2, LPCGUID _a3
    )
{
    if (wppEnabled)
    {
        WPP_TRACE( WPP_GET_LOGGER,
                   WPP_TRACE_OPTIONS,
                   (LPGUID)traceGuid,
                   id,
                   WPP_LOGASTR(_a1) WPP_LOGTYPEVAL(unsigned int, _a2) WPP_LOGTYPEPTR(_a3)  (void*)0);
    }

    if (recorderEnabled)
    {
        WPP_RECORDER( AutoLogContext, level, flags, (LPGUID) traceGuid, id, WPP_LOGASTR(_a1) WPP_LOGTYPEVAL(unsigned int, _a2) WPP_LOGTYPEPTR(_a3)  (void*)0 );
    }
}
#endif // WPP_RECORDER_AND_TRACE_SF_sD_guid__def

#else  // ENABLE_WPP_TRACE_FILTERING_WITH_WPP_RECORDER

//
// Generate the WPP_RECORDER_SP_sD_guid_ function
//
#ifndef WPP_RECORDER_SF_sD_guid__def
#define WPP_RECORDER_SF_sD_guid__def
WPP_INLINE
VOID
WPP_RECORDER_SF_sD_guid_(
    PVOID    AutoLogContext,
    UCHAR    level,
    ULONG    flags,
    USHORT   id,
    LPCGUID  traceGuid
    , LPCSTR _a1, unsigned int _a2, LPCGUID _a3
    )
{
    if (WPP_ENABLE_FLAG_BIT(flags) &&
        (WPP_CONTROL(flags).Level >= level))
    {
        WPP_TRACE(
            WPP_CONTROL(flags).Logger,
            WPP_TRACE_OPTIONS,
            (LPGUID)traceGuid,
            id,
            WPP_LOGASTR(_a1) WPP_LOGTYPEVAL(unsigned int, _a2) WPP_LOGTYPEPTR(_a3)  (void*)0);
    }

    WPP_RECORDER(AutoLogContext, level, flags, (LPGUID) traceGuid, id, WPP_LOGASTR(_a1) WPP_LOGTYPEVAL(unsigned int, _a2) WPP_LOGTYPEPTR(_a3)  (void*)0);
}
#endif // WPP_RECORDER_SF_sD_guid__def

#endif // ENABLE_WPP_TRACE_FILTERING_WITH_WPP_RECORDER

#endif // ENABLE_WPP_RECORDER

#ifndef WPP_SF_sDd_def
# define WPP_SF_sDd_def
WPP_INLINE void WPP_SF_sDd(WPP_LOGGER_ARG unsigned short id, LPCGUID TraceGuid, LPCSTR _a1, unsigned int _a2, signed int _a3)
{ WPP_TRACE(WPP_GET_LOGGER, WPP_TRACE_OPTIONS, (LPGUID)TraceGuid, id, WPP_LOGASTR(_a1) WPP_LOGTYPEVAL(unsigned int, _a2) WPP_LOGTYPEVAL(signed int, _a3)  (void*)0); }
#endif // WPP_SF_sDd_def

#if ENABLE_WPP_RECORDER

#if ENABLE_WPP_TRACE_FILTERING_WITH_WPP_RECORDER

//
// Generate the WPP_RECORDER_AND_TRACE_SF_sDd function
//
#ifndef WPP_RECORDER_AND_TRACE_SF_sDd_def
#define WPP_RECORDER_AND_TRACE_SF_sDd_def
WPP_INLINE
VOID
WPP_RECORDER_AND_TRACE_SF_sDd(
    WPP_LOGGER_ARG
    BOOLEAN  wppEnabled,
    BOOLEAN  recorderEnabled,
    PVOID    AutoLogContext,
    UCHAR    level,
    ULONG    flags,
    USHORT   id,
    LPCGUID  traceGuid
    , LPCSTR _a1, unsigned int _a2, signed int _a3
    )
{
    if (wppEnabled)
    {
        WPP_TRACE( WPP_GET_LOGGER,
                   WPP_TRACE_OPTIONS,
                   (LPGUID)traceGuid,
                   id,
                   WPP_LOGASTR(_a1) WPP_LOGTYPEVAL(unsigned int, _a2) WPP_LOGTYPEVAL(signed int, _a3)  (void*)0);
    }

    if (recorderEnabled)
    {
        WPP_RECORDER( AutoLogContext, level, flags, (LPGUID) traceGuid, id, WPP_LOGASTR(_a1) WPP_LOGTYPEVAL(unsigned int, _a2) WPP_LOGTYPEVAL(signed int, _a3)  (void*)0 );
    }
}
#endif // WPP_RECORDER_AND_TRACE_SF_sDd_def

#else  // ENABLE_WPP_TRACE_FILTERING_WITH_WPP_RECORDER

//
// Generate the WPP_RECORDER_SP_sDd function
//
#ifndef WPP_RECORDER_SF_sDd_def
#define WPP_RECORDER_SF_sDd_def
WPP_INLINE
VOID
WPP_RECORDER_SF_sDd(
    PVOID    AutoLogContext,
    UCHAR    level,
    ULONG    flags,
    USHORT   id,
    LPCGUID  traceGuid
    , LPCSTR _a1, unsigned int _a2, signed int _a3
    )
{
    if (WPP_ENABLE_FLAG_BIT(flags) &&
        (WPP_CONTROL(flags).Level >= level))
    {
        WPP_TRACE(
            WPP_CONTROL(flags).Logger,
            WPP_TRACE_OPTIONS,
            (LPGUID)traceGuid,
            id,
            WPP_LOGASTR(_a1) WPP_LOGTYPEVAL(unsigned int, _a2) WPP_LOGTYPEVAL(signed int, _a3)  (void*)0);
    }

    WPP_RECORDER(AutoLogContext, level, flags, (LPGUID) traceGuid, id, WPP_LOGASTR(_a1) WPP_LOGTYPEVAL(unsigned int, _a2) WPP_LOGTYPEVAL(signed int, _a3)  (void*)0);
}
#endif // WPP_RECORDER_SF_sDd_def

#endif // ENABLE_WPP_TRACE_FILTERING_WITH_WPP_RECORDER

#endif // ENABLE_WPP_RECORDER

#ifndef WPP_SF_sDdd_def
# define WPP_SF_sDdd_def
WPP_INLINE void WPP_SF_sDdd(WPP_LOGGER_ARG unsigned short id, LPCGUID TraceGuid, LPCSTR _a1, unsigned int _a2, signed int _a3, signed int _a4)
{ WPP_TRACE(WPP_GET_LOGGER, WPP_TRACE_OPTIONS, (LPGUID)TraceGuid, id, WPP_LOGASTR(_a1) WPP_LOGTYPEVAL(unsigned int, _a2) WPP_LOGTYPEVAL(signed int, _a3) WPP_LOGTYPEVAL(signed int, _a4)  (void*)0); }
#endif // WPP_SF_sDdd_def

#if ENABLE_WPP_RECORDER

#if ENABLE_WPP_TRACE_FILTERING_WITH_WPP_RECORDER

//
// Generate the WPP_RECORDER_AND_TRACE_SF_sDdd function
//
#ifndef WPP_RECORDER_AND_TRACE_SF_sDdd_def
#define WPP_RECORDER_AND_TRACE_SF_sDdd_def
WPP_INLINE
VOID
WPP_RECORDER_AND_TRACE_SF_sDdd(
    WPP_LOGGER_ARG
    BOOLEAN  wppEnabled,
    BOOLEAN  recorderEnabled,
    PVOID    AutoLogContext,
    UCHAR    level,
    ULONG    flags,
    USHORT   id,
    LPCGUID  traceGuid
    , LPCSTR _a1, unsigned int _a2, signed int _a3, signed int _a4
    )
{
    if (wppEnabled)
    {
        WPP_TRACE( WPP_GET_LOGGER,
                   WPP_TRACE_OPTIONS,
                   (LPGUID)traceGuid,
                   id,
                   WPP_LOGASTR(_a1) WPP_LOGTYPEVAL(unsigned int, _a2) WPP_LOGTYPEVAL(signed int, _a3) WPP_LOGTYPEVAL(signed int, _a4)  (void*)0);
    }

    if (recorderEnabled)
    {
        WPP_RECORDER( AutoLogContext, level, flags, (LPGUID) traceGuid, id, WPP_LOGASTR(_a1) WPP_LOGTYPEVAL(unsigned int, _a2) WPP_LOGTYPEVAL(signed int, _a3) WPP_LOGTYPEVAL(signed int, _a4)  (void*)0 );
    }
}
#endif // WPP_RECORDER_AND_TRACE_SF_sDdd_def

#else  // ENABLE_WPP_TRACE_FILTERING_WITH_WPP_RECORDER

//
// Generate the WPP_RECORDER_SP_sDdd function
//
#ifndef WPP_RECORDER_SF_sDdd_def
#define WPP_RECORDER_SF_sDdd_def
WPP_INLINE
VOID
WPP_RECORDER_SF_sDdd(
    PVOID    AutoLogContext,
    UCHAR    level,
    ULONG    flags,
    USHORT   id,
    LPCGUID  traceGuid
    , LPCSTR _a1, unsigned int _a2, signed int _a3, signed int _a4
    )
{
    if (WPP_ENABLE_FLAG_BIT(flags) &&
        (WPP_CONTROL(flags).Level >= level))
    {
        WPP_TRACE(
            WPP_CONTROL(flags).Logger,
            WPP_TRACE_OPTIONS,
            (LPGUID)traceGuid,
            id,
            WPP_LOGASTR(_a1) WPP_LOGTYPEVAL(unsigned int, _a2) WPP_LOGTYPEVAL(signed int, _a3) WPP_LOGTYPEVAL(signed int, _a4)  (void*)0);
    }

    WPP_RECORDER(AutoLogContext, level, flags, (LPGUID) traceGuid, id, WPP_LOGASTR(_a1) WPP_LOGTYPEVAL(unsigned int, _a2) WPP_LOGTYPEVAL(signed int, _a3) WPP_LOGTYPEVAL(signed int, _a4)  (void*)0);
}
#endif // WPP_RECORDER_SF_sDdd_def

#endif // ENABLE_WPP_TRACE_FILTERING_WITH_WPP_RECORDER

#endif // ENABLE_WPP_RECORDER

#ifndef WPP_SF_sDddP_def
# define WPP_SF_sDddP_def
WPP_INLINE void WPP_SF_sDddP(WPP_LOGGER_ARG unsigned short id, LPCGUID TraceGuid, LPCSTR _a1, unsigned int _a2, signed int _a3, signed int _a4, ULONG_PTR _a5)
{ WPP_TRACE(WPP_GET_LOGGER, WPP_TRACE_OPTIONS, (LPGUID)TraceGuid, id, WPP_LOGASTR(_a1) WPP_LOGTYPEVAL(unsigned int, _a2) WPP_LOGTYPEVAL(signed int, _a3) WPP_LOGTYPEVAL(signed int, _a4) WPP_LOGTYPEVAL(ULONG_PTR, _a5)  (void*)0); }
#endif // WPP_SF_sDddP_def

#if ENABLE_WPP_RECORDER

#if ENABLE_WPP_TRACE_FILTERING_WITH_WPP_RECORDER

//
// Generate the WPP_RECORDER_AND_TRACE_SF_sDddP function
//
#ifndef WPP_RECORDER_AND_TRACE_SF_sDddP_def
#define WPP_RECORDER_AND_TRACE_SF_sDddP_def
WPP_INLINE
VOID
WPP_RECORDER_AND_TRACE_SF_sDddP(
    WPP_LOGGER_ARG
    BOOLEAN  wppEnabled,
    BOOLEAN  recorderEnabled,
    PVOID    AutoLogContext,
    UCHAR    level,
    ULONG    flags,
    USHORT   id,
    LPCGUID  traceGuid
    , LPCSTR _a1, unsigned int _a2, signed int _a3, signed int _a4, ULONG_PTR _a5
    )
{
    if (wppEnabled)
    {
        WPP_TRACE( WPP_GET_LOGGER,
                   WPP_TRACE_OPTIONS,
                   (LPGUID)traceGuid,
                   id,
                   WPP_LOGASTR(_a1) WPP_LOGTYPEVAL(unsigned int, _a2) WPP_LOGTYPEVAL(signed int, _a3) WPP_LOGTYPEVAL(signed int, _a4) WPP_LOGTYPEVAL(ULONG_PTR, _a5)  (void*)0);
    }

    if (recorderEnabled)
    {
        WPP_RECORDER( AutoLogContext, level, flags, (LPGUID) traceGuid, id, WPP_LOGASTR(_a1) WPP_LOGTYPEVAL(unsigned int, _a2) WPP_LOGTYPEVAL(signed int, _a3) WPP_LOGTYPEVAL(signed int, _a4) WPP_LOGTYPEVAL(ULONG_PTR, _a5)  (void*)0 );
    }
}
#endif // WPP_RECORDER_AND_TRACE_SF_sDddP_def

#else  // ENABLE_WPP_TRACE_FILTERING_WITH_WPP_RECORDER

//
// Generate the WPP_RECORDER_SP_sDddP function
//
#ifndef WPP_RECORDER_SF_sDddP_def
#define WPP_RECORDER_SF_sDddP_def
WPP_INLINE
VOID
WPP_RECORDER_SF_sDddP(
    PVOID    AutoLogContext,
    UCHAR    level,
    ULONG    flags,
    USHORT   id,
    LPCGUID  traceGuid
    , LPCSTR _a1, unsigned int _a2, signed int _a3, signed int _a4, ULONG_PTR _a5
    )
{
    if (WPP_ENABLE_FLAG_BIT(flags) &&
        (WPP_CONTROL(flags).Level >= level))
    {
        WPP_TRACE(
            WPP_CONTROL(flags).Logger,
            WPP_TRACE_OPTIONS,
            (LPGUID)traceGuid,
            id,
            WPP_LOGASTR(_a1) WPP_LOGTYPEVAL(unsigned int, _a2) WPP_LOGTYPEVAL(signed int, _a3) WPP_LOGTYPEVAL(signed int, _a4) WPP_LOGTYPEVAL(ULONG_PTR, _a5)  (void*)0);
    }

    WPP_RECORDER(AutoLogContext, level, flags, (LPGUID) traceGuid, id, WPP_LOGASTR(_a1) WPP_LOGTYPEVAL(unsigned int, _a2) WPP_LOGTYPEVAL(signed int, _a3) WPP_LOGTYPEVAL(signed int, _a4) WPP_LOGTYPEVAL(ULONG_PTR, _a5)  (void*)0);
}
#endif // WPP_RECORDER_SF_sDddP_def

#endif // ENABLE_WPP_TRACE_FILTERING_WITH_WPP_RECORDER

#endif // ENABLE_WPP_RECORDER

#ifndef WPP_SF_sDddd_def
# define WPP_SF_sDddd_def
WPP_INLINE void WPP_SF_sDddd(WPP_LOGGER_ARG unsigned short id, LPCGUID TraceGuid, LPCSTR _a1, unsigned int _a2, signed int _a3, signed int _a4, signed int _a5)
{ WPP_TRACE(WPP_GET_LOGGER, WPP_TRACE_OPTIONS, (LPGUID)TraceGuid, id, WPP_LOGASTR(_a1) WPP_LOGTYPEVAL(unsigned int, _a2) WPP_LOGTYPEVAL(signed int, _a3) WPP_LOGTYPEVAL(signed int, _a4) WPP_LOGTYPEVAL(signed int, _a5)  (void*)0); }
#endif // WPP_SF_sDddd_def

#if ENABLE_WPP_RECORDER

#if ENABLE_WPP_TRACE_FILTERING_WITH_WPP_RECORDER

//
// Generate the WPP_RECORDER_AND_TRACE_SF_sDddd function
//
#ifndef WPP_RECORDER_AND_TRACE_SF_sDddd_def
#define WPP_RECORDER_AND_TRACE_SF_sDddd_def
WPP_INLINE
VOID
WPP_RECORDER_AND_TRACE_SF_sDddd(
    WPP_LOGGER_ARG
    BOOLEAN  wppEnabled,
    BOOLEAN  recorderEnabled,
    PVOID    AutoLogContext,
    UCHAR    level,
    ULONG    flags,
    USHORT   id,
    LPCGUID  traceGuid
    , LPCSTR _a1, unsigned int _a2, signed int _a3, signed int _a4, signed int _a5
    )
{
    if (wppEnabled)
    {
        WPP_TRACE( WPP_GET_LOGGER,
                   WPP_TRACE_OPTIONS,
                   (LPGUID)traceGuid,
                   id,
                   WPP_LOGASTR(_a1) WPP_LOGTYPEVAL(unsigned int, _a2) WPP_LOGTYPEVAL(signed int, _a3) WPP_LOGTYPEVAL(signed int, _a4) WPP_LOGTYPEVAL(signed int, _a5)  (void*)0);
    }

    if (recorderEnabled)
    {
        WPP_RECORDER( AutoLogContext, level, flags, (LPGUID) traceGuid, id, WPP_LOGASTR(_a1) WPP_LOGTYPEVAL(unsigned int, _a2) WPP_LOGTYPEVAL(signed int, _a3) WPP_LOGTYPEVAL(signed int, _a4) WPP_LOGTYPEVAL(signed int, _a5)  (void*)0 );
    }
}
#endif // WPP_RECORDER_AND_TRACE_SF_sDddd_def

#else  // ENABLE_WPP_TRACE_FILTERING_WITH_WPP_RECORDER

//
// Generate the WPP_RECORDER_SP_sDddd function
//
#ifndef WPP_RECORDER_SF_sDddd_def
#define WPP_RECORDER_SF_sDddd_def
WPP_INLINE
VOID
WPP_RECORDER_SF_sDddd(
    PVOID    AutoLogContext,
    UCHAR    level,
    ULONG    flags,
    USHORT   id,
    LPCGUID  traceGuid
    , LPCSTR _a1, unsigned int _a2, signed int _a3, signed int _a4, signed int _a5
    )
{
    if (WPP_ENABLE_FLAG_BIT(flags) &&
        (WPP_CONTROL(flags).Level >= level))
    {
        WPP_TRACE(
            WPP_CONTROL(flags).Logger,
            WPP_TRACE_OPTIONS,
            (LPGUID)traceGuid,
            id,
            WPP_LOGASTR(_a1) WPP_LOGTYPEVAL(unsigned int, _a2) WPP_LOGTYPEVAL(signed int, _a3) WPP_LOGTYPEVAL(signed int, _a4) WPP_LOGTYPEVAL(signed int, _a5)  (void*)0);
    }

    WPP_RECORDER(AutoLogContext, level, flags, (LPGUID) traceGuid, id, WPP_LOGASTR(_a1) WPP_LOGTYPEVAL(unsigned int, _a2) WPP_LOGTYPEVAL(signed int, _a3) WPP_LOGTYPEVAL(signed int, _a4) WPP_LOGTYPEVAL(signed int, _a5)  (void*)0);
}
#endif // WPP_RECORDER_SF_sDddd_def

#endif // ENABLE_WPP_TRACE_FILTERING_WITH_WPP_RECORDER

#endif // ENABLE_WPP_RECORDER

#ifndef WPP_SF_sDddddDd_def
# define WPP_SF_sDddddDd_def
WPP_INLINE void WPP_SF_sDddddDd(WPP_LOGGER_ARG unsigned short id, LPCGUID TraceGuid, LPCSTR _a1, unsigned int _a2, signed int _a3, signed int _a4, signed int _a5, signed int _a6, unsigned int _a7, signed int _a8)
{ WPP_TRACE(WPP_GET_LOGGER, WPP_TRACE_OPTIONS, (LPGUID)TraceGuid, id, WPP_LOGASTR(_a1) WPP_LOGTYPEVAL(unsigned int, _a2) WPP_LOGTYPEVAL(signed int, _a3) WPP_LOGTYPEVAL(signed int, _a4) WPP_LOGTYPEVAL(signed int, _a5) WPP_LOGTYPEVAL(signed int, _a6) WPP_LOGTYPEVAL(unsigned int, _a7) WPP_LOGTYPEVAL(signed int, _a8)  (void*)0); }
#endif // WPP_SF_sDddddDd_def

#if ENABLE_WPP_RECORDER

#if ENABLE_WPP_TRACE_FILTERING_WITH_WPP_RECORDER

//
// Generate the WPP_RECORDER_AND_TRACE_SF_sDddddDd function
//
#ifndef WPP_RECORDER_AND_TRACE_SF_sDddddDd_def
#define WPP_RECORDER_AND_TRACE_SF_sDddddDd_def
WPP_INLINE
VOID
WPP_RECORDER_AND_TRACE_SF_sDddddDd(
    WPP_LOGGER_ARG
    BOOLEAN  wppEnabled,
    BOOLEAN  recorderEnabled,
    PVOID    AutoLogContext,
    UCHAR    level,
    ULONG    flags,
    USHORT   id,
    LPCGUID  traceGuid
    , LPCSTR _a1, unsigned int _a2, signed int _a3, signed int _a4, signed int _a5, signed int _a6, unsigned int _a7, signed int _a8
    )
{
    if (wppEnabled)
    {
        WPP_TRACE( WPP_GET_LOGGER,
                   WPP_TRACE_OPTIONS,
                   (LPGUID)traceGuid,
                   id,
                   WPP_LOGASTR(_a1) WPP_LOGTYPEVAL(unsigned int, _a2) WPP_LOGTYPEVAL(signed int, _a3) WPP_LOGTYPEVAL(signed int, _a4) WPP_LOGTYPEVAL(signed int, _a5) WPP_LOGTYPEVAL(signed int, _a6) WPP_LOGTYPEVAL(unsigned int, _a7) WPP_LOGTYPEVAL(signed int, _a8)  (void*)0);
    }

    if (recorderEnabled)
    {
        WPP_RECORDER( AutoLogContext, level, flags, (LPGUID) traceGuid, id, WPP_LOGASTR(_a1) WPP_LOGTYPEVAL(unsigned int, _a2) WPP_LOGTYPEVAL(signed int, _a3) WPP_LOGTYPEVAL(signed int, _a4) WPP_LOGTYPEVAL(signed int, _a5) WPP_LOGTYPEVAL(signed int, _a6) WPP_LOGTYPEVAL(unsigned int, _a7) WPP_LOGTYPEVAL(signed int, _a8)  (void*)0 );
    }
}
#endif // WPP_RECORDER_AND_TRACE_SF_sDddddDd_def

#else  // ENABLE_WPP_TRACE_FILTERING_WITH_WPP_RECORDER

//
// Generate the WPP_RECORDER_SP_sDddddDd function
//
#ifndef WPP_RECORDER_SF_sDddddDd_def
#define WPP_RECORDER_SF_sDddddDd_def
WPP_INLINE
VOID
WPP_RECORDER_SF_sDddddDd(
    PVOID    AutoLogContext,
    UCHAR    level,
    ULONG    flags,
    USHORT   id,
    LPCGUID  traceGuid
    , LPCSTR _a1, unsigned int _a2, signed int _a3, signed int _a4, signed int _a5, signed int _a6, unsigned int _a7, signed int _a8
    )
{
    if (WPP_ENABLE_FLAG_BIT(flags) &&
        (WPP_CONTROL(flags).Level >= level))
    {
        WPP_TRACE(
            WPP_CONTROL(flags).Logger,
            WPP_TRACE_OPTIONS,
            (LPGUID)traceGuid,
            id,
            WPP_LOGASTR(_a1) WPP_LOGTYPEVAL(unsigned int, _a2) WPP_LOGTYPEVAL(signed int, _a3) WPP_LOGTYPEVAL(signed int, _a4) WPP_LOGTYPEVAL(signed int, _a5) WPP_LOGTYPEVAL(signed int, _a6) WPP_LOGTYPEVAL(unsigned int, _a7) WPP_LOGTYPEVAL(signed int, _a8)  (void*)0);
    }

    WPP_RECORDER(AutoLogContext, level, flags, (LPGUID) traceGuid, id, WPP_LOGASTR(_a1) WPP_LOGTYPEVAL(unsigned int, _a2) WPP_LOGTYPEVAL(signed int, _a3) WPP_LOGTYPEVAL(signed int, _a4) WPP_LOGTYPEVAL(signed int, _a5) WPP_LOGTYPEVAL(signed int, _a6) WPP_LOGTYPEVAL(unsigned int, _a7) WPP_LOGTYPEVAL(signed int, _a8)  (void*)0);
}
#endif // WPP_RECORDER_SF_sDddddDd_def

#endif // ENABLE_WPP_TRACE_FILTERING_WITH_WPP_RECORDER

#endif // ENABLE_WPP_RECORDER

#ifndef WPP_SF_sDdddddd_def
# define WPP_SF_sDdddddd_def
WPP_INLINE void WPP_SF_sDdddddd(WPP_LOGGER_ARG unsigned short id, LPCGUID TraceGuid, LPCSTR _a1, unsigned int _a2, signed int _a3, signed int _a4, signed int _a5, signed int _a6, signed int _a7, signed int _a8)
{ WPP_TRACE(WPP_GET_LOGGER, WPP_TRACE_OPTIONS, (LPGUID)TraceGuid, id, WPP_LOGASTR(_a1) WPP_LOGTYPEVAL(unsigned int, _a2) WPP_LOGTYPEVAL(signed int, _a3) WPP_LOGTYPEVAL(signed int, _a4) WPP_LOGTYPEVAL(signed int, _a5) WPP_LOGTYPEVAL(signed int, _a6) WPP_LOGTYPEVAL(signed int, _a7) WPP_LOGTYPEVAL(signed int, _a8)  (void*)0); }
#endif // WPP_SF_sDdddddd_def

#if ENABLE_WPP_RECORDER

#if ENABLE_WPP_TRACE_FILTERING_WITH_WPP_RECORDER

//
// Generate the WPP_RECORDER_AND_TRACE_SF_sDdddddd function
//
#ifndef WPP_RECORDER_AND_TRACE_SF_sDdddddd_def
#define WPP_RECORDER_AND_TRACE_SF_sDdddddd_def
WPP_INLINE
VOID
WPP_RECORDER_AND_TRACE_SF_sDdddddd(
    WPP_LOGGER_ARG
    BOOLEAN  wppEnabled,
    BOOLEAN  recorderEnabled,
    PVOID    AutoLogContext,
    UCHAR    level,
    ULONG    flags,
    USHORT   id,
    LPCGUID  traceGuid
    , LPCSTR _a1, unsigned int _a2, signed int _a3, signed int _a4, signed int _a5, signed int _a6, signed int _a7, signed int _a8
    )
{
    if (wppEnabled)
    {
        WPP_TRACE( WPP_GET_LOGGER,
                   WPP_TRACE_OPTIONS,
                   (LPGUID)traceGuid,
                   id,
                   WPP_LOGASTR(_a1) WPP_LOGTYPEVAL(unsigned int, _a2) WPP_LOGTYPEVAL(signed int, _a3) WPP_LOGTYPEVAL(signed int, _a4) WPP_LOGTYPEVAL(signed int, _a5) WPP_LOGTYPEVAL(signed int, _a6) WPP_LOGTYPEVAL(signed int, _a7) WPP_LOGTYPEVAL(signed int, _a8)  (void*)0);
    }

    if (recorderEnabled)
    {
        WPP_RECORDER( AutoLogContext, level, flags, (LPGUID) traceGuid, id, WPP_LOGASTR(_a1) WPP_LOGTYPEVAL(unsigned int, _a2) WPP_LOGTYPEVAL(signed int, _a3) WPP_LOGTYPEVAL(signed int, _a4) WPP_LOGTYPEVAL(signed int, _a5) WPP_LOGTYPEVAL(signed int, _a6) WPP_LOGTYPEVAL(signed int, _a7) WPP_LOGTYPEVAL(signed int, _a8)  (void*)0 );
    }
}
#endif // WPP_RECORDER_AND_TRACE_SF_sDdddddd_def

#else  // ENABLE_WPP_TRACE_FILTERING_WITH_WPP_RECORDER

//
// Generate the WPP_RECORDER_SP_sDdddddd function
//
#ifndef WPP_RECORDER_SF_sDdddddd_def
#define WPP_RECORDER_SF_sDdddddd_def
WPP_INLINE
VOID
WPP_RECORDER_SF_sDdddddd(
    PVOID    AutoLogContext,
    UCHAR    level,
    ULONG    flags,
    USHORT   id,
    LPCGUID  traceGuid
    , LPCSTR _a1, unsigned int _a2, signed int _a3, signed int _a4, signed int _a5, signed int _a6, signed int _a7, signed int _a8
    )
{
    if (WPP_ENABLE_FLAG_BIT(flags) &&
        (WPP_CONTROL(flags).Level >= level))
    {
        WPP_TRACE(
            WPP_CONTROL(flags).Logger,
            WPP_TRACE_OPTIONS,
            (LPGUID)traceGuid,
            id,
            WPP_LOGASTR(_a1) WPP_LOGTYPEVAL(unsigned int, _a2) WPP_LOGTYPEVAL(signed int, _a3) WPP_LOGTYPEVAL(signed int, _a4) WPP_LOGTYPEVAL(signed int, _a5) WPP_LOGTYPEVAL(signed int, _a6) WPP_LOGTYPEVAL(signed int, _a7) WPP_LOGTYPEVAL(signed int, _a8)  (void*)0);
    }

    WPP_RECORDER(AutoLogContext, level, flags, (LPGUID) traceGuid, id, WPP_LOGASTR(_a1) WPP_LOGTYPEVAL(unsigned int, _a2) WPP_LOGTYPEVAL(signed int, _a3) WPP_LOGTYPEVAL(signed int, _a4) WPP_LOGTYPEVAL(signed int, _a5) WPP_LOGTYPEVAL(signed int, _a6) WPP_LOGTYPEVAL(signed int, _a7) WPP_LOGTYPEVAL(signed int, _a8)  (void*)0);
}
#endif // WPP_RECORDER_SF_sDdddddd_def

#endif // ENABLE_WPP_TRACE_FILTERING_WITH_WPP_RECORDER

#endif // ENABLE_WPP_RECORDER

#ifndef WPP_SF_sDddq_def
# define WPP_SF_sDddq_def
WPP_INLINE void WPP_SF_sDddq(WPP_LOGGER_ARG unsigned short id, LPCGUID TraceGuid, LPCSTR _a1, unsigned int _a2, signed int _a3, signed int _a4, const void* _a5)
{ WPP_TRACE(WPP_GET_LOGGER, WPP_TRACE_OPTIONS, (LPGUID)TraceGuid, id, WPP_LOGASTR(_a1) WPP_LOGTYPEVAL(unsigned int, _a2) WPP_LOGTYPEVAL(signed int, _a3) WPP_LOGTYPEVAL(signed int, _a4) WPP_LOGTYPEVAL(const void*, _a5)  (void*)0); }
#endif // WPP_SF_sDddq_def

#if ENABLE_WPP_RECORDER

#if ENABLE_WPP_TRACE_FILTERING_WITH_WPP_RECORDER

//
// Generate the WPP_RECORDER_AND_TRACE_SF_sDddq function
//
#ifndef WPP_RECORDER_AND_TRACE_SF_sDddq_def
#define WPP_RECORDER_AND_TRACE_SF_sDddq_def
WPP_INLINE
VOID
WPP_RECORDER_AND_TRACE_SF_sDddq(
    WPP_LOGGER_ARG
    BOOLEAN  wppEnabled,
    BOOLEAN  recorderEnabled,
    PVOID    AutoLogContext,
    UCHAR    level,
    ULONG    flags,
    USHORT   id,
    LPCGUID  traceGuid
    , LPCSTR _a1, unsigned int _a2, signed int _a3, signed int _a4, const void* _a5
    )
{
    if (wppEnabled)
    {
        WPP_TRACE( WPP_GET_LOGGER,
                   WPP_TRACE_OPTIONS,
                   (LPGUID)traceGuid,
                   id,
                   WPP_LOGASTR(_a1) WPP_LOGTYPEVAL(unsigned int, _a2) WPP_LOGTYPEVAL(signed int, _a3) WPP_LOGTYPEVAL(signed int, _a4) WPP_LOGTYPEVAL(const void*, _a5)  (void*)0);
    }

    if (recorderEnabled)
    {
        WPP_RECORDER( AutoLogContext, level, flags, (LPGUID) traceGuid, id, WPP_LOGASTR(_a1) WPP_LOGTYPEVAL(unsigned int, _a2) WPP_LOGTYPEVAL(signed int, _a3) WPP_LOGTYPEVAL(signed int, _a4) WPP_LOGTYPEVAL(const void*, _a5)  (void*)0 );
    }
}
#endif // WPP_RECORDER_AND_TRACE_SF_sDddq_def

#else  // ENABLE_WPP_TRACE_FILTERING_WITH_WPP_RECORDER

//
// Generate the WPP_RECORDER_SP_sDddq function
//
#ifndef WPP_RECORDER_SF_sDddq_def
#define WPP_RECORDER_SF_sDddq_def
WPP_INLINE
VOID
WPP_RECORDER_SF_sDddq(
    PVOID    AutoLogContext,
    UCHAR    level,
    ULONG    flags,
    USHORT   id,
    LPCGUID  traceGuid
    , LPCSTR _a1, unsigned int _a2, signed int _a3, signed int _a4, const void* _a5
    )
{
    if (WPP_ENABLE_FLAG_BIT(flags) &&
        (WPP_CONTROL(flags).Level >= level))
    {
        WPP_TRACE(
            WPP_CONTROL(flags).Logger,
            WPP_TRACE_OPTIONS,
            (LPGUID)traceGuid,
            id,
            WPP_LOGASTR(_a1) WPP_LOGTYPEVAL(unsigned int, _a2) WPP_LOGTYPEVAL(signed int, _a3) WPP_LOGTYPEVAL(signed int, _a4) WPP_LOGTYPEVAL(const void*, _a5)  (void*)0);
    }

    WPP_RECORDER(AutoLogContext, level, flags, (LPGUID) traceGuid, id, WPP_LOGASTR(_a1) WPP_LOGTYPEVAL(unsigned int, _a2) WPP_LOGTYPEVAL(signed int, _a3) WPP_LOGTYPEVAL(signed int, _a4) WPP_LOGTYPEVAL(const void*, _a5)  (void*)0);
}
#endif // WPP_RECORDER_SF_sDddq_def

#endif // ENABLE_WPP_TRACE_FILTERING_WITH_WPP_RECORDER

#endif // ENABLE_WPP_RECORDER

#ifndef WPP_SF_sDdq_def
# define WPP_SF_sDdq_def
WPP_INLINE void WPP_SF_sDdq(WPP_LOGGER_ARG unsigned short id, LPCGUID TraceGuid, LPCSTR _a1, unsigned int _a2, signed int _a3, const void* _a4)
{ WPP_TRACE(WPP_GET_LOGGER, WPP_TRACE_OPTIONS, (LPGUID)TraceGuid, id, WPP_LOGASTR(_a1) WPP_LOGTYPEVAL(unsigned int, _a2) WPP_LOGTYPEVAL(signed int, _a3) WPP_LOGTYPEVAL(const void*, _a4)  (void*)0); }
#endif // WPP_SF_sDdq_def

#if ENABLE_WPP_RECORDER

#if ENABLE_WPP_TRACE_FILTERING_WITH_WPP_RECORDER

//
// Generate the WPP_RECORDER_AND_TRACE_SF_sDdq function
//
#ifndef WPP_RECORDER_AND_TRACE_SF_sDdq_def
#define WPP_RECORDER_AND_TRACE_SF_sDdq_def
WPP_INLINE
VOID
WPP_RECORDER_AND_TRACE_SF_sDdq(
    WPP_LOGGER_ARG
    BOOLEAN  wppEnabled,
    BOOLEAN  recorderEnabled,
    PVOID    AutoLogContext,
    UCHAR    level,
    ULONG    flags,
    USHORT   id,
    LPCGUID  traceGuid
    , LPCSTR _a1, unsigned int _a2, signed int _a3, const void* _a4
    )
{
    if (wppEnabled)
    {
        WPP_TRACE( WPP_GET_LOGGER,
                   WPP_TRACE_OPTIONS,
                   (LPGUID)traceGuid,
                   id,
                   WPP_LOGASTR(_a1) WPP_LOGTYPEVAL(unsigned int, _a2) WPP_LOGTYPEVAL(signed int, _a3) WPP_LOGTYPEVAL(const void*, _a4)  (void*)0);
    }

    if (recorderEnabled)
    {
        WPP_RECORDER( AutoLogContext, level, flags, (LPGUID) traceGuid, id, WPP_LOGASTR(_a1) WPP_LOGTYPEVAL(unsigned int, _a2) WPP_LOGTYPEVAL(signed int, _a3) WPP_LOGTYPEVAL(const void*, _a4)  (void*)0 );
    }
}
#endif // WPP_RECORDER_AND_TRACE_SF_sDdq_def

#else  // ENABLE_WPP_TRACE_FILTERING_WITH_WPP_RECORDER

//
// Generate the WPP_RECORDER_SP_sDdq function
//
#ifndef WPP_RECORDER_SF_sDdq_def
#define WPP_RECORDER_SF_sDdq_def
WPP_INLINE
VOID
WPP_RECORDER_SF_sDdq(
    PVOID    AutoLogContext,
    UCHAR    level,
    ULONG    flags,
    USHORT   id,
    LPCGUID  traceGuid
    , LPCSTR _a1, unsigned int _a2, signed int _a3, const void* _a4
    )
{
    if (WPP_ENABLE_FLAG_BIT(flags) &&
        (WPP_CONTROL(flags).Level >= level))
    {
        WPP_TRACE(
            WPP_CONTROL(flags).Logger,
            WPP_TRACE_OPTIONS,
            (LPGUID)traceGuid,
            id,
            WPP_LOGASTR(_a1) WPP_LOGTYPEVAL(unsigned int, _a2) WPP_LOGTYPEVAL(signed int, _a3) WPP_LOGTYPEVAL(const void*, _a4)  (void*)0);
    }

    WPP_RECORDER(AutoLogContext, level, flags, (LPGUID) traceGuid, id, WPP_LOGASTR(_a1) WPP_LOGTYPEVAL(unsigned int, _a2) WPP_LOGTYPEVAL(signed int, _a3) WPP_LOGTYPEVAL(const void*, _a4)  (void*)0);
}
#endif // WPP_RECORDER_SF_sDdq_def

#endif // ENABLE_WPP_TRACE_FILTERING_WITH_WPP_RECORDER

#endif // ENABLE_WPP_RECORDER

#ifndef WPP_SF_sDiLP_def
# define WPP_SF_sDiLP_def
WPP_INLINE void WPP_SF_sDiLP(WPP_LOGGER_ARG unsigned short id, LPCGUID TraceGuid, LPCSTR _a1, unsigned int _a2, signed __int64 _a3, unsigned long _a4, ULONG_PTR _a5)
{ WPP_TRACE(WPP_GET_LOGGER, WPP_TRACE_OPTIONS, (LPGUID)TraceGuid, id, WPP_LOGASTR(_a1) WPP_LOGTYPEVAL(unsigned int, _a2) WPP_LOGTYPEVAL(signed __int64, _a3) WPP_LOGTYPEVAL(unsigned long, _a4) WPP_LOGTYPEVAL(ULONG_PTR, _a5)  (void*)0); }
#endif // WPP_SF_sDiLP_def

#if ENABLE_WPP_RECORDER

#if ENABLE_WPP_TRACE_FILTERING_WITH_WPP_RECORDER

//
// Generate the WPP_RECORDER_AND_TRACE_SF_sDiLP function
//
#ifndef WPP_RECORDER_AND_TRACE_SF_sDiLP_def
#define WPP_RECORDER_AND_TRACE_SF_sDiLP_def
WPP_INLINE
VOID
WPP_RECORDER_AND_TRACE_SF_sDiLP(
    WPP_LOGGER_ARG
    BOOLEAN  wppEnabled,
    BOOLEAN  recorderEnabled,
    PVOID    AutoLogContext,
    UCHAR    level,
    ULONG    flags,
    USHORT   id,
    LPCGUID  traceGuid
    , LPCSTR _a1, unsigned int _a2, signed __int64 _a3, unsigned long _a4, ULONG_PTR _a5
    )
{
    if (wppEnabled)
    {
        WPP_TRACE( WPP_GET_LOGGER,
                   WPP_TRACE_OPTIONS,
                   (LPGUID)traceGuid,
                   id,
                   WPP_LOGASTR(_a1) WPP_LOGTYPEVAL(unsigned int, _a2) WPP_LOGTYPEVAL(signed __int64, _a3) WPP_LOGTYPEVAL(unsigned long, _a4) WPP_LOGTYPEVAL(ULONG_PTR, _a5)  (void*)0);
    }

    if (recorderEnabled)
    {
        WPP_RECORDER( AutoLogContext, level, flags, (LPGUID) traceGuid, id, WPP_LOGASTR(_a1) WPP_LOGTYPEVAL(unsigned int, _a2) WPP_LOGTYPEVAL(signed __int64, _a3) WPP_LOGTYPEVAL(unsigned long, _a4) WPP_LOGTYPEVAL(ULONG_PTR, _a5)  (void*)0 );
    }
}
#endif // WPP_RECORDER_AND_TRACE_SF_sDiLP_def

#else  // ENABLE_WPP_TRACE_FILTERING_WITH_WPP_RECORDER

//
// Generate the WPP_RECORDER_SP_sDiLP function
//
#ifndef WPP_RECORDER_SF_sDiLP_def
#define WPP_RECORDER_SF_sDiLP_def
WPP_INLINE
VOID
WPP_RECORDER_SF_sDiLP(
    PVOID    AutoLogContext,
    UCHAR    level,
    ULONG    flags,
    USHORT   id,
    LPCGUID  traceGuid
    , LPCSTR _a1, unsigned int _a2, signed __int64 _a3, unsigned long _a4, ULONG_PTR _a5
    )
{
    if (WPP_ENABLE_FLAG_BIT(flags) &&
        (WPP_CONTROL(flags).Level >= level))
    {
        WPP_TRACE(
            WPP_CONTROL(flags).Logger,
            WPP_TRACE_OPTIONS,
            (LPGUID)traceGuid,
            id,
            WPP_LOGASTR(_a1) WPP_LOGTYPEVAL(unsigned int, _a2) WPP_LOGTYPEVAL(signed __int64, _a3) WPP_LOGTYPEVAL(unsigned long, _a4) WPP_LOGTYPEVAL(ULONG_PTR, _a5)  (void*)0);
    }

    WPP_RECORDER(AutoLogContext, level, flags, (LPGUID) traceGuid, id, WPP_LOGASTR(_a1) WPP_LOGTYPEVAL(unsigned int, _a2) WPP_LOGTYPEVAL(signed __int64, _a3) WPP_LOGTYPEVAL(unsigned long, _a4) WPP_LOGTYPEVAL(ULONG_PTR, _a5)  (void*)0);
}
#endif // WPP_RECORDER_SF_sDiLP_def

#endif // ENABLE_WPP_TRACE_FILTERING_WITH_WPP_RECORDER

#endif // ENABLE_WPP_RECORDER

// WPP_LOG_ALWAYS:
// Called for each event: WPP_LOG_ALWAYS(EX, MSG, arg1, arg2, arg3...) Other()
// If defined, the definition needs to include a trailing comma or semicolon.
// In addition, you will need to define a WPP_EX_[args](args...) macro to
// extract any needed information from the other arguments (e.g. LEVEL).
#ifndef WPP_LOG_ALWAYS
#define WPP_LOG_ALWAYS(...)
#endif

// WPP_DEBUG:
// Called for each enabled event: WPP_DEBUG((MSG, arg1, arg2, arg3...)), Other()
// Potential definition: printf MsgArgs
// Definition should not include any trailing comma or semicolon.
#ifdef WPP_DEBUG
#define WPP_INVOKE_WPP_DEBUG(MsgArgs) WPP_DEBUG(MsgArgs)
#else // WPP_DEBUG
#define WPP_INVOKE_WPP_DEBUG(MsgArgs) (void)0
#endif // WPP_DEBUG

// WPP_CALL_RosKmdAdapter_cpp85
#ifndef WPP_LEVEL_FLAGS_PRE
#  define WPP_LEVEL_FLAGS_PRE(LEVEL,FLAGS)
#endif
#ifndef WPP_LEVEL_FLAGS_POST
#  define WPP_LEVEL_FLAGS_POST(LEVEL,FLAGS)
#endif
#if ENABLE_WPP_RECORDER
#if ENABLE_WPP_TRACE_FILTERING_WITH_WPP_RECORDER
#define WPP_CALL_RosKmdAdapter_cpp85(MSG, _a12) \
    WPP_LOG_ALWAYS(WPP_EX_LEVEL_FLAGS(TRACE_LEVEL_ERROR, ROS_TRACING_DEFAULT), MSG, _a12) \
    WPP_LEVEL_FLAGS_PRE(TRACE_LEVEL_ERROR, ROS_TRACING_DEFAULT) \
    do {\
        WPP_ANNOTATE(RosKmdAdapter_cpp85) 0; \
        BOOLEAN wppEnabled = WPP_CHECK_INIT WPP_LEVEL_FLAGS_ENABLED(TRACE_LEVEL_ERROR, ROS_TRACING_DEFAULT); \
        BOOLEAN recorderEnabled = WPP_RECORDER_CHECK_INIT WPP_RECORDER_LEVEL_FLAGS_FILTER(TRACE_LEVEL_ERROR, ROS_TRACING_DEFAULT); \
        if (wppEnabled || recorderEnabled) { \
            WPP_INVOKE_WPP_DEBUG((MSG, _a12)); \
            WPP_RECORDER_AND_TRACE_SF_sDd( \
                     WPP_LEVEL_FLAGS_LOGGER(TRACE_LEVEL_ERROR, ROS_TRACING_DEFAULT) \
                     wppEnabled, recorderEnabled, \
                     WPP_RECORDER_LEVEL_FLAGS_ARGS(TRACE_LEVEL_ERROR, ROS_TRACING_DEFAULT), \
                     10, \
                     WPP_LOCAL_TraceGuids+0, __FILE__, __LINE__, _a12);\
        } \
    } \
    while(0) \
    WPP_LEVEL_FLAGS_POST(TRACE_LEVEL_ERROR, ROS_TRACING_DEFAULT)
#else // ENABLE_WPP_TRACE_FILTERING_WITH_WPP_RECORDER
#define WPP_CALL_RosKmdAdapter_cpp85(MSG, _a12) \
    WPP_LOG_ALWAYS(WPP_EX_LEVEL_FLAGS(TRACE_LEVEL_ERROR, ROS_TRACING_DEFAULT), MSG, _a12) \
    WPP_LEVEL_FLAGS_PRE(TRACE_LEVEL_ERROR, ROS_TRACING_DEFAULT) \
    WPP_ANNOTATE(RosKmdAdapter_cpp85) \
    (( \
        WPP_RECORDER_CHECK_INIT WPP_RECORDER_LEVEL_FLAGS_FILTER(TRACE_LEVEL_ERROR, ROS_TRACING_DEFAULT) \
        ?   WPP_INVOKE_WPP_DEBUG((MSG, _a12)), \
            WPP_RECORDER_SF_sDd( \
                WPP_RECORDER_LEVEL_FLAGS_ARGS(TRACE_LEVEL_ERROR, ROS_TRACING_DEFAULT), \
                10, \
                WPP_LOCAL_TraceGuids+0, __FILE__, __LINE__, _a12), \
            1 \
        :   0 \
    )) \
    WPP_LEVEL_FLAGS_POST(TRACE_LEVEL_ERROR, ROS_TRACING_DEFAULT)
#endif // ENABLE_WPP_TRACE_FILTERING_WITH_WPP_RECORDER
#else  // ENABLE_WPP_RECORDER
#define WPP_CALL_RosKmdAdapter_cpp85(MSG, _a12) \
    WPP_LOG_ALWAYS(WPP_EX_LEVEL_FLAGS(TRACE_LEVEL_ERROR, ROS_TRACING_DEFAULT), MSG, _a12) \
    WPP_LEVEL_FLAGS_PRE(TRACE_LEVEL_ERROR, ROS_TRACING_DEFAULT) \
    WPP_ANNOTATE(RosKmdAdapter_cpp85) \
    (( \
        WPP_CHECK_INIT WPP_LEVEL_FLAGS_ENABLED(TRACE_LEVEL_ERROR, ROS_TRACING_DEFAULT) \
        ?   WPP_INVOKE_WPP_DEBUG((MSG, _a12)), \
            WPP_SF_sDd( \
                WPP_LEVEL_FLAGS_LOGGER(TRACE_LEVEL_ERROR, ROS_TRACING_DEFAULT) \
                10, \
                WPP_LOCAL_TraceGuids+0, __FILE__, __LINE__, _a12), \
            1 \
        :   0 \
    )) \
    WPP_LEVEL_FLAGS_POST(TRACE_LEVEL_ERROR, ROS_TRACING_DEFAULT)
#endif // ENABLE_WPP_RECORDER

// WPP_CALL_RosKmdAdapter_cpp96
#ifndef WPP_LEVEL_FLAGS_PRE
#  define WPP_LEVEL_FLAGS_PRE(LEVEL,FLAGS)
#endif
#ifndef WPP_LEVEL_FLAGS_POST
#  define WPP_LEVEL_FLAGS_POST(LEVEL,FLAGS)
#endif
#if ENABLE_WPP_RECORDER
#if ENABLE_WPP_TRACE_FILTERING_WITH_WPP_RECORDER
#define WPP_CALL_RosKmdAdapter_cpp96(MSG) \
    WPP_LOG_ALWAYS(WPP_EX_LEVEL_FLAGS(TRACE_LEVEL_ERROR, ROS_TRACING_DEFAULT), MSG) \
    WPP_LEVEL_FLAGS_PRE(TRACE_LEVEL_ERROR, ROS_TRACING_DEFAULT) \
    do {\
        WPP_ANNOTATE(RosKmdAdapter_cpp96) 0; \
        BOOLEAN wppEnabled = WPP_CHECK_INIT WPP_LEVEL_FLAGS_ENABLED(TRACE_LEVEL_ERROR, ROS_TRACING_DEFAULT); \
        BOOLEAN recorderEnabled = WPP_RECORDER_CHECK_INIT WPP_RECORDER_LEVEL_FLAGS_FILTER(TRACE_LEVEL_ERROR, ROS_TRACING_DEFAULT); \
        if (wppEnabled || recorderEnabled) { \
            WPP_INVOKE_WPP_DEBUG((MSG)); \
            WPP_RECORDER_AND_TRACE_SF_sD( \
                     WPP_LEVEL_FLAGS_LOGGER(TRACE_LEVEL_ERROR, ROS_TRACING_DEFAULT) \
                     wppEnabled, recorderEnabled, \
                     WPP_RECORDER_LEVEL_FLAGS_ARGS(TRACE_LEVEL_ERROR, ROS_TRACING_DEFAULT), \
                     11, \
                     WPP_LOCAL_TraceGuids+0, __FILE__, __LINE__);\
        } \
    } \
    while(0) \
    WPP_LEVEL_FLAGS_POST(TRACE_LEVEL_ERROR, ROS_TRACING_DEFAULT)
#else // ENABLE_WPP_TRACE_FILTERING_WITH_WPP_RECORDER
#define WPP_CALL_RosKmdAdapter_cpp96(MSG) \
    WPP_LOG_ALWAYS(WPP_EX_LEVEL_FLAGS(TRACE_LEVEL_ERROR, ROS_TRACING_DEFAULT), MSG) \
    WPP_LEVEL_FLAGS_PRE(TRACE_LEVEL_ERROR, ROS_TRACING_DEFAULT) \
    WPP_ANNOTATE(RosKmdAdapter_cpp96) \
    (( \
        WPP_RECORDER_CHECK_INIT WPP_RECORDER_LEVEL_FLAGS_FILTER(TRACE_LEVEL_ERROR, ROS_TRACING_DEFAULT) \
        ?   WPP_INVOKE_WPP_DEBUG((MSG)), \
            WPP_RECORDER_SF_sD( \
                WPP_RECORDER_LEVEL_FLAGS_ARGS(TRACE_LEVEL_ERROR, ROS_TRACING_DEFAULT), \
                11, \
                WPP_LOCAL_TraceGuids+0, __FILE__, __LINE__), \
            1 \
        :   0 \
    )) \
    WPP_LEVEL_FLAGS_POST(TRACE_LEVEL_ERROR, ROS_TRACING_DEFAULT)
#endif // ENABLE_WPP_TRACE_FILTERING_WITH_WPP_RECORDER
#else  // ENABLE_WPP_RECORDER
#define WPP_CALL_RosKmdAdapter_cpp96(MSG) \
    WPP_LOG_ALWAYS(WPP_EX_LEVEL_FLAGS(TRACE_LEVEL_ERROR, ROS_TRACING_DEFAULT), MSG) \
    WPP_LEVEL_FLAGS_PRE(TRACE_LEVEL_ERROR, ROS_TRACING_DEFAULT) \
    WPP_ANNOTATE(RosKmdAdapter_cpp96) \
    (( \
        WPP_CHECK_INIT WPP_LEVEL_FLAGS_ENABLED(TRACE_LEVEL_ERROR, ROS_TRACING_DEFAULT) \
        ?   WPP_INVOKE_WPP_DEBUG((MSG)), \
            WPP_SF_sD( \
                WPP_LEVEL_FLAGS_LOGGER(TRACE_LEVEL_ERROR, ROS_TRACING_DEFAULT) \
                11, \
                WPP_LOCAL_TraceGuids+0, __FILE__, __LINE__), \
            1 \
        :   0 \
    )) \
    WPP_LEVEL_FLAGS_POST(TRACE_LEVEL_ERROR, ROS_TRACING_DEFAULT)
#endif // ENABLE_WPP_RECORDER

// WPP_CALL_RosKmdAdapter_cpp104
#ifndef WPP_LEVEL_FLAGS_PRE
#  define WPP_LEVEL_FLAGS_PRE(LEVEL,FLAGS)
#endif
#ifndef WPP_LEVEL_FLAGS_POST
#  define WPP_LEVEL_FLAGS_POST(LEVEL,FLAGS)
#endif
#if ENABLE_WPP_RECORDER
#if ENABLE_WPP_TRACE_FILTERING_WITH_WPP_RECORDER
#define WPP_CALL_RosKmdAdapter_cpp104(MSG) \
    WPP_LOG_ALWAYS(WPP_EX_LEVEL_FLAGS(TRACE_LEVEL_ERROR, ROS_TRACING_DEFAULT), MSG) \
    WPP_LEVEL_FLAGS_PRE(TRACE_LEVEL_ERROR, ROS_TRACING_DEFAULT) \
    do {\
        WPP_ANNOTATE(RosKmdAdapter_cpp104) 0; \
        BOOLEAN wppEnabled = WPP_CHECK_INIT WPP_LEVEL_FLAGS_ENABLED(TRACE_LEVEL_ERROR, ROS_TRACING_DEFAULT); \
        BOOLEAN recorderEnabled = WPP_RECORDER_CHECK_INIT WPP_RECORDER_LEVEL_FLAGS_FILTER(TRACE_LEVEL_ERROR, ROS_TRACING_DEFAULT); \
        if (wppEnabled || recorderEnabled) { \
            WPP_INVOKE_WPP_DEBUG((MSG)); \
            WPP_RECORDER_AND_TRACE_SF_sD( \
                     WPP_LEVEL_FLAGS_LOGGER(TRACE_LEVEL_ERROR, ROS_TRACING_DEFAULT) \
                     wppEnabled, recorderEnabled, \
                     WPP_RECORDER_LEVEL_FLAGS_ARGS(TRACE_LEVEL_ERROR, ROS_TRACING_DEFAULT), \
                     12, \
                     WPP_LOCAL_TraceGuids+0, __FILE__, __LINE__);\
        } \
    } \
    while(0) \
    WPP_LEVEL_FLAGS_POST(TRACE_LEVEL_ERROR, ROS_TRACING_DEFAULT)
#else // ENABLE_WPP_TRACE_FILTERING_WITH_WPP_RECORDER
#define WPP_CALL_RosKmdAdapter_cpp104(MSG) \
    WPP_LOG_ALWAYS(WPP_EX_LEVEL_FLAGS(TRACE_LEVEL_ERROR, ROS_TRACING_DEFAULT), MSG) \
    WPP_LEVEL_FLAGS_PRE(TRACE_LEVEL_ERROR, ROS_TRACING_DEFAULT) \
    WPP_ANNOTATE(RosKmdAdapter_cpp104) \
    (( \
        WPP_RECORDER_CHECK_INIT WPP_RECORDER_LEVEL_FLAGS_FILTER(TRACE_LEVEL_ERROR, ROS_TRACING_DEFAULT) \
        ?   WPP_INVOKE_WPP_DEBUG((MSG)), \
            WPP_RECORDER_SF_sD( \
                WPP_RECORDER_LEVEL_FLAGS_ARGS(TRACE_LEVEL_ERROR, ROS_TRACING_DEFAULT), \
                12, \
                WPP_LOCAL_TraceGuids+0, __FILE__, __LINE__), \
            1 \
        :   0 \
    )) \
    WPP_LEVEL_FLAGS_POST(TRACE_LEVEL_ERROR, ROS_TRACING_DEFAULT)
#endif // ENABLE_WPP_TRACE_FILTERING_WITH_WPP_RECORDER
#else  // ENABLE_WPP_RECORDER
#define WPP_CALL_RosKmdAdapter_cpp104(MSG) \
    WPP_LOG_ALWAYS(WPP_EX_LEVEL_FLAGS(TRACE_LEVEL_ERROR, ROS_TRACING_DEFAULT), MSG) \
    WPP_LEVEL_FLAGS_PRE(TRACE_LEVEL_ERROR, ROS_TRACING_DEFAULT) \
    WPP_ANNOTATE(RosKmdAdapter_cpp104) \
    (( \
        WPP_CHECK_INIT WPP_LEVEL_FLAGS_ENABLED(TRACE_LEVEL_ERROR, ROS_TRACING_DEFAULT) \
        ?   WPP_INVOKE_WPP_DEBUG((MSG)), \
            WPP_SF_sD( \
                WPP_LEVEL_FLAGS_LOGGER(TRACE_LEVEL_ERROR, ROS_TRACING_DEFAULT) \
                12, \
                WPP_LOCAL_TraceGuids+0, __FILE__, __LINE__), \
            1 \
        :   0 \
    )) \
    WPP_LEVEL_FLAGS_POST(TRACE_LEVEL_ERROR, ROS_TRACING_DEFAULT)
#endif // ENABLE_WPP_RECORDER

// WPP_CALL_RosKmdAdapter_cpp116
#ifndef WPP_LEVEL_FLAGS_PRE
#  define WPP_LEVEL_FLAGS_PRE(LEVEL,FLAGS)
#endif
#ifndef WPP_LEVEL_FLAGS_POST
#  define WPP_LEVEL_FLAGS_POST(LEVEL,FLAGS)
#endif
#if ENABLE_WPP_RECORDER
#if ENABLE_WPP_TRACE_FILTERING_WITH_WPP_RECORDER
#define WPP_CALL_RosKmdAdapter_cpp116(MSG) \
    WPP_LOG_ALWAYS(WPP_EX_LEVEL_FLAGS(TRACE_LEVEL_VERBOSE, ROS_TRACING_DEFAULT), MSG) \
    WPP_LEVEL_FLAGS_PRE(TRACE_LEVEL_VERBOSE, ROS_TRACING_DEFAULT) \
    do {\
        WPP_ANNOTATE(RosKmdAdapter_cpp116) 0; \
        BOOLEAN wppEnabled = WPP_CHECK_INIT WPP_LEVEL_FLAGS_ENABLED(TRACE_LEVEL_VERBOSE, ROS_TRACING_DEFAULT); \
        BOOLEAN recorderEnabled = WPP_RECORDER_CHECK_INIT WPP_RECORDER_LEVEL_FLAGS_FILTER(TRACE_LEVEL_VERBOSE, ROS_TRACING_DEFAULT); \
        if (wppEnabled || recorderEnabled) { \
            WPP_INVOKE_WPP_DEBUG((MSG)); \
            WPP_RECORDER_AND_TRACE_SF_sD( \
                     WPP_LEVEL_FLAGS_LOGGER(TRACE_LEVEL_VERBOSE, ROS_TRACING_DEFAULT) \
                     wppEnabled, recorderEnabled, \
                     WPP_RECORDER_LEVEL_FLAGS_ARGS(TRACE_LEVEL_VERBOSE, ROS_TRACING_DEFAULT), \
                     13, \
                     WPP_LOCAL_TraceGuids+0, __FILE__, __LINE__);\
        } \
    } \
    while(0) \
    WPP_LEVEL_FLAGS_POST(TRACE_LEVEL_VERBOSE, ROS_TRACING_DEFAULT)
#else // ENABLE_WPP_TRACE_FILTERING_WITH_WPP_RECORDER
#define WPP_CALL_RosKmdAdapter_cpp116(MSG) \
    WPP_LOG_ALWAYS(WPP_EX_LEVEL_FLAGS(TRACE_LEVEL_VERBOSE, ROS_TRACING_DEFAULT), MSG) \
    WPP_LEVEL_FLAGS_PRE(TRACE_LEVEL_VERBOSE, ROS_TRACING_DEFAULT) \
    WPP_ANNOTATE(RosKmdAdapter_cpp116) \
    (( \
        WPP_RECORDER_CHECK_INIT WPP_RECORDER_LEVEL_FLAGS_FILTER(TRACE_LEVEL_VERBOSE, ROS_TRACING_DEFAULT) \
        ?   WPP_INVOKE_WPP_DEBUG((MSG)), \
            WPP_RECORDER_SF_sD( \
                WPP_RECORDER_LEVEL_FLAGS_ARGS(TRACE_LEVEL_VERBOSE, ROS_TRACING_DEFAULT), \
                13, \
                WPP_LOCAL_TraceGuids+0, __FILE__, __LINE__), \
            1 \
        :   0 \
    )) \
    WPP_LEVEL_FLAGS_POST(TRACE_LEVEL_VERBOSE, ROS_TRACING_DEFAULT)
#endif // ENABLE_WPP_TRACE_FILTERING_WITH_WPP_RECORDER
#else  // ENABLE_WPP_RECORDER
#define WPP_CALL_RosKmdAdapter_cpp116(MSG) \
    WPP_LOG_ALWAYS(WPP_EX_LEVEL_FLAGS(TRACE_LEVEL_VERBOSE, ROS_TRACING_DEFAULT), MSG) \
    WPP_LEVEL_FLAGS_PRE(TRACE_LEVEL_VERBOSE, ROS_TRACING_DEFAULT) \
    WPP_ANNOTATE(RosKmdAdapter_cpp116) \
    (( \
        WPP_CHECK_INIT WPP_LEVEL_FLAGS_ENABLED(TRACE_LEVEL_VERBOSE, ROS_TRACING_DEFAULT) \
        ?   WPP_INVOKE_WPP_DEBUG((MSG)), \
            WPP_SF_sD( \
                WPP_LEVEL_FLAGS_LOGGER(TRACE_LEVEL_VERBOSE, ROS_TRACING_DEFAULT) \
                13, \
                WPP_LOCAL_TraceGuids+0, __FILE__, __LINE__), \
            1 \
        :   0 \
    )) \
    WPP_LEVEL_FLAGS_POST(TRACE_LEVEL_VERBOSE, ROS_TRACING_DEFAULT)
#endif // ENABLE_WPP_RECORDER

// WPP_CALL_RosKmdAdapter_cpp412
#ifndef WPP_LEVEL_FLAGS_PRE
#  define WPP_LEVEL_FLAGS_PRE(LEVEL,FLAGS)
#endif
#ifndef WPP_LEVEL_FLAGS_POST
#  define WPP_LEVEL_FLAGS_POST(LEVEL,FLAGS)
#endif
#if ENABLE_WPP_RECORDER
#if ENABLE_WPP_TRACE_FILTERING_WITH_WPP_RECORDER
#define WPP_CALL_RosKmdAdapter_cpp412(MSG, _a12) \
    WPP_LOG_ALWAYS(WPP_EX_LEVEL_FLAGS(TRACE_LEVEL_ERROR, ROS_TRACING_DEFAULT), MSG, _a12) \
    WPP_LEVEL_FLAGS_PRE(TRACE_LEVEL_ERROR, ROS_TRACING_DEFAULT) \
    do {\
        WPP_ANNOTATE(RosKmdAdapter_cpp412) 0; \
        BOOLEAN wppEnabled = WPP_CHECK_INIT WPP_LEVEL_FLAGS_ENABLED(TRACE_LEVEL_ERROR, ROS_TRACING_DEFAULT); \
        BOOLEAN recorderEnabled = WPP_RECORDER_CHECK_INIT WPP_RECORDER_LEVEL_FLAGS_FILTER(TRACE_LEVEL_ERROR, ROS_TRACING_DEFAULT); \
        if (wppEnabled || recorderEnabled) { \
            WPP_INVOKE_WPP_DEBUG((MSG, _a12)); \
            WPP_RECORDER_AND_TRACE_SF_sDd( \
                     WPP_LEVEL_FLAGS_LOGGER(TRACE_LEVEL_ERROR, ROS_TRACING_DEFAULT) \
                     wppEnabled, recorderEnabled, \
                     WPP_RECORDER_LEVEL_FLAGS_ARGS(TRACE_LEVEL_ERROR, ROS_TRACING_DEFAULT), \
                     14, \
                     WPP_LOCAL_TraceGuids+0, __FILE__, __LINE__, _a12);\
        } \
    } \
    while(0) \
    WPP_LEVEL_FLAGS_POST(TRACE_LEVEL_ERROR, ROS_TRACING_DEFAULT)
#else // ENABLE_WPP_TRACE_FILTERING_WITH_WPP_RECORDER
#define WPP_CALL_RosKmdAdapter_cpp412(MSG, _a12) \
    WPP_LOG_ALWAYS(WPP_EX_LEVEL_FLAGS(TRACE_LEVEL_ERROR, ROS_TRACING_DEFAULT), MSG, _a12) \
    WPP_LEVEL_FLAGS_PRE(TRACE_LEVEL_ERROR, ROS_TRACING_DEFAULT) \
    WPP_ANNOTATE(RosKmdAdapter_cpp412) \
    (( \
        WPP_RECORDER_CHECK_INIT WPP_RECORDER_LEVEL_FLAGS_FILTER(TRACE_LEVEL_ERROR, ROS_TRACING_DEFAULT) \
        ?   WPP_INVOKE_WPP_DEBUG((MSG, _a12)), \
            WPP_RECORDER_SF_sDd( \
                WPP_RECORDER_LEVEL_FLAGS_ARGS(TRACE_LEVEL_ERROR, ROS_TRACING_DEFAULT), \
                14, \
                WPP_LOCAL_TraceGuids+0, __FILE__, __LINE__, _a12), \
            1 \
        :   0 \
    )) \
    WPP_LEVEL_FLAGS_POST(TRACE_LEVEL_ERROR, ROS_TRACING_DEFAULT)
#endif // ENABLE_WPP_TRACE_FILTERING_WITH_WPP_RECORDER
#else  // ENABLE_WPP_RECORDER
#define WPP_CALL_RosKmdAdapter_cpp412(MSG, _a12) \
    WPP_LOG_ALWAYS(WPP_EX_LEVEL_FLAGS(TRACE_LEVEL_ERROR, ROS_TRACING_DEFAULT), MSG, _a12) \
    WPP_LEVEL_FLAGS_PRE(TRACE_LEVEL_ERROR, ROS_TRACING_DEFAULT) \
    WPP_ANNOTATE(RosKmdAdapter_cpp412) \
    (( \
        WPP_CHECK_INIT WPP_LEVEL_FLAGS_ENABLED(TRACE_LEVEL_ERROR, ROS_TRACING_DEFAULT) \
        ?   WPP_INVOKE_WPP_DEBUG((MSG, _a12)), \
            WPP_SF_sDd( \
                WPP_LEVEL_FLAGS_LOGGER(TRACE_LEVEL_ERROR, ROS_TRACING_DEFAULT) \
                14, \
                WPP_LOCAL_TraceGuids+0, __FILE__, __LINE__, _a12), \
            1 \
        :   0 \
    )) \
    WPP_LEVEL_FLAGS_POST(TRACE_LEVEL_ERROR, ROS_TRACING_DEFAULT)
#endif // ENABLE_WPP_RECORDER

// WPP_CALL_RosKmdAdapter_cpp430
#ifndef WPP_LEVEL_FLAGS_PRE
#  define WPP_LEVEL_FLAGS_PRE(LEVEL,FLAGS)
#endif
#ifndef WPP_LEVEL_FLAGS_POST
#  define WPP_LEVEL_FLAGS_POST(LEVEL,FLAGS)
#endif
#if ENABLE_WPP_RECORDER
#if ENABLE_WPP_TRACE_FILTERING_WITH_WPP_RECORDER
#define WPP_CALL_RosKmdAdapter_cpp430(MSG, _a12) \
    WPP_LOG_ALWAYS(WPP_EX_LEVEL_FLAGS(TRACE_LEVEL_ERROR, ROS_TRACING_DEFAULT), MSG, _a12) \
    WPP_LEVEL_FLAGS_PRE(TRACE_LEVEL_ERROR, ROS_TRACING_DEFAULT) \
    do {\
        WPP_ANNOTATE(RosKmdAdapter_cpp430) 0; \
        BOOLEAN wppEnabled = WPP_CHECK_INIT WPP_LEVEL_FLAGS_ENABLED(TRACE_LEVEL_ERROR, ROS_TRACING_DEFAULT); \
        BOOLEAN recorderEnabled = WPP_RECORDER_CHECK_INIT WPP_RECORDER_LEVEL_FLAGS_FILTER(TRACE_LEVEL_ERROR, ROS_TRACING_DEFAULT); \
        if (wppEnabled || recorderEnabled) { \
            WPP_INVOKE_WPP_DEBUG((MSG, _a12)); \
            WPP_RECORDER_AND_TRACE_SF_sDd( \
                     WPP_LEVEL_FLAGS_LOGGER(TRACE_LEVEL_ERROR, ROS_TRACING_DEFAULT) \
                     wppEnabled, recorderEnabled, \
                     WPP_RECORDER_LEVEL_FLAGS_ARGS(TRACE_LEVEL_ERROR, ROS_TRACING_DEFAULT), \
                     15, \
                     WPP_LOCAL_TraceGuids+0, __FILE__, __LINE__, _a12);\
        } \
    } \
    while(0) \
    WPP_LEVEL_FLAGS_POST(TRACE_LEVEL_ERROR, ROS_TRACING_DEFAULT)
#else // ENABLE_WPP_TRACE_FILTERING_WITH_WPP_RECORDER
#define WPP_CALL_RosKmdAdapter_cpp430(MSG, _a12) \
    WPP_LOG_ALWAYS(WPP_EX_LEVEL_FLAGS(TRACE_LEVEL_ERROR, ROS_TRACING_DEFAULT), MSG, _a12) \
    WPP_LEVEL_FLAGS_PRE(TRACE_LEVEL_ERROR, ROS_TRACING_DEFAULT) \
    WPP_ANNOTATE(RosKmdAdapter_cpp430) \
    (( \
        WPP_RECORDER_CHECK_INIT WPP_RECORDER_LEVEL_FLAGS_FILTER(TRACE_LEVEL_ERROR, ROS_TRACING_DEFAULT) \
        ?   WPP_INVOKE_WPP_DEBUG((MSG, _a12)), \
            WPP_RECORDER_SF_sDd( \
                WPP_RECORDER_LEVEL_FLAGS_ARGS(TRACE_LEVEL_ERROR, ROS_TRACING_DEFAULT), \
                15, \
                WPP_LOCAL_TraceGuids+0, __FILE__, __LINE__, _a12), \
            1 \
        :   0 \
    )) \
    WPP_LEVEL_FLAGS_POST(TRACE_LEVEL_ERROR, ROS_TRACING_DEFAULT)
#endif // ENABLE_WPP_TRACE_FILTERING_WITH_WPP_RECORDER
#else  // ENABLE_WPP_RECORDER
#define WPP_CALL_RosKmdAdapter_cpp430(MSG, _a12) \
    WPP_LOG_ALWAYS(WPP_EX_LEVEL_FLAGS(TRACE_LEVEL_ERROR, ROS_TRACING_DEFAULT), MSG, _a12) \
    WPP_LEVEL_FLAGS_PRE(TRACE_LEVEL_ERROR, ROS_TRACING_DEFAULT) \
    WPP_ANNOTATE(RosKmdAdapter_cpp430) \
    (( \
        WPP_CHECK_INIT WPP_LEVEL_FLAGS_ENABLED(TRACE_LEVEL_ERROR, ROS_TRACING_DEFAULT) \
        ?   WPP_INVOKE_WPP_DEBUG((MSG, _a12)), \
            WPP_SF_sDd( \
                WPP_LEVEL_FLAGS_LOGGER(TRACE_LEVEL_ERROR, ROS_TRACING_DEFAULT) \
                15, \
                WPP_LOCAL_TraceGuids+0, __FILE__, __LINE__, _a12), \
            1 \
        :   0 \
    )) \
    WPP_LEVEL_FLAGS_POST(TRACE_LEVEL_ERROR, ROS_TRACING_DEFAULT)
#endif // ENABLE_WPP_RECORDER

// WPP_CALL_RosKmdAdapter_cpp441
#ifndef WPP_LEVEL_FLAGS_PRE
#  define WPP_LEVEL_FLAGS_PRE(LEVEL,FLAGS)
#endif
#ifndef WPP_LEVEL_FLAGS_POST
#  define WPP_LEVEL_FLAGS_POST(LEVEL,FLAGS)
#endif
#if ENABLE_WPP_RECORDER
#if ENABLE_WPP_TRACE_FILTERING_WITH_WPP_RECORDER
#define WPP_CALL_RosKmdAdapter_cpp441(MSG, _a12, _a13) \
    WPP_LOG_ALWAYS(WPP_EX_LEVEL_FLAGS(TRACE_LEVEL_ERROR, ROS_TRACING_DEFAULT), MSG, _a12, _a13) \
    WPP_LEVEL_FLAGS_PRE(TRACE_LEVEL_ERROR, ROS_TRACING_DEFAULT) \
    do {\
        WPP_ANNOTATE(RosKmdAdapter_cpp441) 0; \
        BOOLEAN wppEnabled = WPP_CHECK_INIT WPP_LEVEL_FLAGS_ENABLED(TRACE_LEVEL_ERROR, ROS_TRACING_DEFAULT); \
        BOOLEAN recorderEnabled = WPP_RECORDER_CHECK_INIT WPP_RECORDER_LEVEL_FLAGS_FILTER(TRACE_LEVEL_ERROR, ROS_TRACING_DEFAULT); \
        if (wppEnabled || recorderEnabled) { \
            WPP_INVOKE_WPP_DEBUG((MSG, _a12, _a13)); \
            WPP_RECORDER_AND_TRACE_SF_sDdq( \
                     WPP_LEVEL_FLAGS_LOGGER(TRACE_LEVEL_ERROR, ROS_TRACING_DEFAULT) \
                     wppEnabled, recorderEnabled, \
                     WPP_RECORDER_LEVEL_FLAGS_ARGS(TRACE_LEVEL_ERROR, ROS_TRACING_DEFAULT), \
                     16, \
                     WPP_LOCAL_TraceGuids+0, __FILE__, __LINE__, _a12, _a13);\
        } \
    } \
    while(0) \
    WPP_LEVEL_FLAGS_POST(TRACE_LEVEL_ERROR, ROS_TRACING_DEFAULT)
#else // ENABLE_WPP_TRACE_FILTERING_WITH_WPP_RECORDER
#define WPP_CALL_RosKmdAdapter_cpp441(MSG, _a12, _a13) \
    WPP_LOG_ALWAYS(WPP_EX_LEVEL_FLAGS(TRACE_LEVEL_ERROR, ROS_TRACING_DEFAULT), MSG, _a12, _a13) \
    WPP_LEVEL_FLAGS_PRE(TRACE_LEVEL_ERROR, ROS_TRACING_DEFAULT) \
    WPP_ANNOTATE(RosKmdAdapter_cpp441) \
    (( \
        WPP_RECORDER_CHECK_INIT WPP_RECORDER_LEVEL_FLAGS_FILTER(TRACE_LEVEL_ERROR, ROS_TRACING_DEFAULT) \
        ?   WPP_INVOKE_WPP_DEBUG((MSG, _a12, _a13)), \
            WPP_RECORDER_SF_sDdq( \
                WPP_RECORDER_LEVEL_FLAGS_ARGS(TRACE_LEVEL_ERROR, ROS_TRACING_DEFAULT), \
                16, \
                WPP_LOCAL_TraceGuids+0, __FILE__, __LINE__, _a12, _a13), \
            1 \
        :   0 \
    )) \
    WPP_LEVEL_FLAGS_POST(TRACE_LEVEL_ERROR, ROS_TRACING_DEFAULT)
#endif // ENABLE_WPP_TRACE_FILTERING_WITH_WPP_RECORDER
#else  // ENABLE_WPP_RECORDER
#define WPP_CALL_RosKmdAdapter_cpp441(MSG, _a12, _a13) \
    WPP_LOG_ALWAYS(WPP_EX_LEVEL_FLAGS(TRACE_LEVEL_ERROR, ROS_TRACING_DEFAULT), MSG, _a12, _a13) \
    WPP_LEVEL_FLAGS_PRE(TRACE_LEVEL_ERROR, ROS_TRACING_DEFAULT) \
    WPP_ANNOTATE(RosKmdAdapter_cpp441) \
    (( \
        WPP_CHECK_INIT WPP_LEVEL_FLAGS_ENABLED(TRACE_LEVEL_ERROR, ROS_TRACING_DEFAULT) \
        ?   WPP_INVOKE_WPP_DEBUG((MSG, _a12, _a13)), \
            WPP_SF_sDdq( \
                WPP_LEVEL_FLAGS_LOGGER(TRACE_LEVEL_ERROR, ROS_TRACING_DEFAULT) \
                16, \
                WPP_LOCAL_TraceGuids+0, __FILE__, __LINE__, _a12, _a13), \
            1 \
        :   0 \
    )) \
    WPP_LEVEL_FLAGS_POST(TRACE_LEVEL_ERROR, ROS_TRACING_DEFAULT)
#endif // ENABLE_WPP_RECORDER

// WPP_CALL_RosKmdAdapter_cpp501
#ifndef WPP_LEVEL_FLAGS_PRE
#  define WPP_LEVEL_FLAGS_PRE(LEVEL,FLAGS)
#endif
#ifndef WPP_LEVEL_FLAGS_POST
#  define WPP_LEVEL_FLAGS_POST(LEVEL,FLAGS)
#endif
#if ENABLE_WPP_RECORDER
#if ENABLE_WPP_TRACE_FILTERING_WITH_WPP_RECORDER
#define WPP_CALL_RosKmdAdapter_cpp501(MSG) \
    WPP_LOG_ALWAYS(WPP_EX_LEVEL_FLAGS(TRACE_LEVEL_VERBOSE, ROS_TRACING_DEFAULT), MSG) \
    WPP_LEVEL_FLAGS_PRE(TRACE_LEVEL_VERBOSE, ROS_TRACING_DEFAULT) \
    do {\
        WPP_ANNOTATE(RosKmdAdapter_cpp501) 0; \
        BOOLEAN wppEnabled = WPP_CHECK_INIT WPP_LEVEL_FLAGS_ENABLED(TRACE_LEVEL_VERBOSE, ROS_TRACING_DEFAULT); \
        BOOLEAN recorderEnabled = WPP_RECORDER_CHECK_INIT WPP_RECORDER_LEVEL_FLAGS_FILTER(TRACE_LEVEL_VERBOSE, ROS_TRACING_DEFAULT); \
        if (wppEnabled || recorderEnabled) { \
            WPP_INVOKE_WPP_DEBUG((MSG)); \
            WPP_RECORDER_AND_TRACE_SF_sD( \
                     WPP_LEVEL_FLAGS_LOGGER(TRACE_LEVEL_VERBOSE, ROS_TRACING_DEFAULT) \
                     wppEnabled, recorderEnabled, \
                     WPP_RECORDER_LEVEL_FLAGS_ARGS(TRACE_LEVEL_VERBOSE, ROS_TRACING_DEFAULT), \
                     17, \
                     WPP_LOCAL_TraceGuids+0, __FILE__, __LINE__);\
        } \
    } \
    while(0) \
    WPP_LEVEL_FLAGS_POST(TRACE_LEVEL_VERBOSE, ROS_TRACING_DEFAULT)
#else // ENABLE_WPP_TRACE_FILTERING_WITH_WPP_RECORDER
#define WPP_CALL_RosKmdAdapter_cpp501(MSG) \
    WPP_LOG_ALWAYS(WPP_EX_LEVEL_FLAGS(TRACE_LEVEL_VERBOSE, ROS_TRACING_DEFAULT), MSG) \
    WPP_LEVEL_FLAGS_PRE(TRACE_LEVEL_VERBOSE, ROS_TRACING_DEFAULT) \
    WPP_ANNOTATE(RosKmdAdapter_cpp501) \
    (( \
        WPP_RECORDER_CHECK_INIT WPP_RECORDER_LEVEL_FLAGS_FILTER(TRACE_LEVEL_VERBOSE, ROS_TRACING_DEFAULT) \
        ?   WPP_INVOKE_WPP_DEBUG((MSG)), \
            WPP_RECORDER_SF_sD( \
                WPP_RECORDER_LEVEL_FLAGS_ARGS(TRACE_LEVEL_VERBOSE, ROS_TRACING_DEFAULT), \
                17, \
                WPP_LOCAL_TraceGuids+0, __FILE__, __LINE__), \
            1 \
        :   0 \
    )) \
    WPP_LEVEL_FLAGS_POST(TRACE_LEVEL_VERBOSE, ROS_TRACING_DEFAULT)
#endif // ENABLE_WPP_TRACE_FILTERING_WITH_WPP_RECORDER
#else  // ENABLE_WPP_RECORDER
#define WPP_CALL_RosKmdAdapter_cpp501(MSG) \
    WPP_LOG_ALWAYS(WPP_EX_LEVEL_FLAGS(TRACE_LEVEL_VERBOSE, ROS_TRACING_DEFAULT), MSG) \
    WPP_LEVEL_FLAGS_PRE(TRACE_LEVEL_VERBOSE, ROS_TRACING_DEFAULT) \
    WPP_ANNOTATE(RosKmdAdapter_cpp501) \
    (( \
        WPP_CHECK_INIT WPP_LEVEL_FLAGS_ENABLED(TRACE_LEVEL_VERBOSE, ROS_TRACING_DEFAULT) \
        ?   WPP_INVOKE_WPP_DEBUG((MSG)), \
            WPP_SF_sD( \
                WPP_LEVEL_FLAGS_LOGGER(TRACE_LEVEL_VERBOSE, ROS_TRACING_DEFAULT) \
                17, \
                WPP_LOCAL_TraceGuids+0, __FILE__, __LINE__), \
            1 \
        :   0 \
    )) \
    WPP_LEVEL_FLAGS_POST(TRACE_LEVEL_VERBOSE, ROS_TRACING_DEFAULT)
#endif // ENABLE_WPP_RECORDER

// WPP_CALL_RosKmdAdapter_cpp524
#ifndef WPP_LEVEL_FLAGS_PRE
#  define WPP_LEVEL_FLAGS_PRE(LEVEL,FLAGS)
#endif
#ifndef WPP_LEVEL_FLAGS_POST
#  define WPP_LEVEL_FLAGS_POST(LEVEL,FLAGS)
#endif
#if ENABLE_WPP_RECORDER
#if ENABLE_WPP_TRACE_FILTERING_WITH_WPP_RECORDER
#define WPP_CALL_RosKmdAdapter_cpp524(MSG) \
    WPP_LOG_ALWAYS(WPP_EX_LEVEL_FLAGS(TRACE_LEVEL_VERBOSE, ROS_TRACING_DEFAULT), MSG) \
    WPP_LEVEL_FLAGS_PRE(TRACE_LEVEL_VERBOSE, ROS_TRACING_DEFAULT) \
    do {\
        WPP_ANNOTATE(RosKmdAdapter_cpp524) 0; \
        BOOLEAN wppEnabled = WPP_CHECK_INIT WPP_LEVEL_FLAGS_ENABLED(TRACE_LEVEL_VERBOSE, ROS_TRACING_DEFAULT); \
        BOOLEAN recorderEnabled = WPP_RECORDER_CHECK_INIT WPP_RECORDER_LEVEL_FLAGS_FILTER(TRACE_LEVEL_VERBOSE, ROS_TRACING_DEFAULT); \
        if (wppEnabled || recorderEnabled) { \
            WPP_INVOKE_WPP_DEBUG((MSG)); \
            WPP_RECORDER_AND_TRACE_SF_sD( \
                     WPP_LEVEL_FLAGS_LOGGER(TRACE_LEVEL_VERBOSE, ROS_TRACING_DEFAULT) \
                     wppEnabled, recorderEnabled, \
                     WPP_RECORDER_LEVEL_FLAGS_ARGS(TRACE_LEVEL_VERBOSE, ROS_TRACING_DEFAULT), \
                     18, \
                     WPP_LOCAL_TraceGuids+0, __FILE__, __LINE__);\
        } \
    } \
    while(0) \
    WPP_LEVEL_FLAGS_POST(TRACE_LEVEL_VERBOSE, ROS_TRACING_DEFAULT)
#else // ENABLE_WPP_TRACE_FILTERING_WITH_WPP_RECORDER
#define WPP_CALL_RosKmdAdapter_cpp524(MSG) \
    WPP_LOG_ALWAYS(WPP_EX_LEVEL_FLAGS(TRACE_LEVEL_VERBOSE, ROS_TRACING_DEFAULT), MSG) \
    WPP_LEVEL_FLAGS_PRE(TRACE_LEVEL_VERBOSE, ROS_TRACING_DEFAULT) \
    WPP_ANNOTATE(RosKmdAdapter_cpp524) \
    (( \
        WPP_RECORDER_CHECK_INIT WPP_RECORDER_LEVEL_FLAGS_FILTER(TRACE_LEVEL_VERBOSE, ROS_TRACING_DEFAULT) \
        ?   WPP_INVOKE_WPP_DEBUG((MSG)), \
            WPP_RECORDER_SF_sD( \
                WPP_RECORDER_LEVEL_FLAGS_ARGS(TRACE_LEVEL_VERBOSE, ROS_TRACING_DEFAULT), \
                18, \
                WPP_LOCAL_TraceGuids+0, __FILE__, __LINE__), \
            1 \
        :   0 \
    )) \
    WPP_LEVEL_FLAGS_POST(TRACE_LEVEL_VERBOSE, ROS_TRACING_DEFAULT)
#endif // ENABLE_WPP_TRACE_FILTERING_WITH_WPP_RECORDER
#else  // ENABLE_WPP_RECORDER
#define WPP_CALL_RosKmdAdapter_cpp524(MSG) \
    WPP_LOG_ALWAYS(WPP_EX_LEVEL_FLAGS(TRACE_LEVEL_VERBOSE, ROS_TRACING_DEFAULT), MSG) \
    WPP_LEVEL_FLAGS_PRE(TRACE_LEVEL_VERBOSE, ROS_TRACING_DEFAULT) \
    WPP_ANNOTATE(RosKmdAdapter_cpp524) \
    (( \
        WPP_CHECK_INIT WPP_LEVEL_FLAGS_ENABLED(TRACE_LEVEL_VERBOSE, ROS_TRACING_DEFAULT) \
        ?   WPP_INVOKE_WPP_DEBUG((MSG)), \
            WPP_SF_sD( \
                WPP_LEVEL_FLAGS_LOGGER(TRACE_LEVEL_VERBOSE, ROS_TRACING_DEFAULT) \
                18, \
                WPP_LOCAL_TraceGuids+0, __FILE__, __LINE__), \
            1 \
        :   0 \
    )) \
    WPP_LEVEL_FLAGS_POST(TRACE_LEVEL_VERBOSE, ROS_TRACING_DEFAULT)
#endif // ENABLE_WPP_RECORDER

// WPP_CALL_RosKmdAdapter_cpp599
#ifndef WPP_LEVEL_FLAGS_PRE
#  define WPP_LEVEL_FLAGS_PRE(LEVEL,FLAGS)
#endif
#ifndef WPP_LEVEL_FLAGS_POST
#  define WPP_LEVEL_FLAGS_POST(LEVEL,FLAGS)
#endif
#if ENABLE_WPP_RECORDER
#if ENABLE_WPP_TRACE_FILTERING_WITH_WPP_RECORDER
#define WPP_CALL_RosKmdAdapter_cpp599(MSG, _a12, _a13, _a14) \
    WPP_LOG_ALWAYS(WPP_EX_LEVEL_FLAGS(TRACE_LEVEL_VERBOSE, ROS_TRACING_DEFAULT), MSG, _a12, _a13, _a14) \
    WPP_LEVEL_FLAGS_PRE(TRACE_LEVEL_VERBOSE, ROS_TRACING_DEFAULT) \
    do {\
        WPP_ANNOTATE(RosKmdAdapter_cpp599) 0; \
        BOOLEAN wppEnabled = WPP_CHECK_INIT WPP_LEVEL_FLAGS_ENABLED(TRACE_LEVEL_VERBOSE, ROS_TRACING_DEFAULT); \
        BOOLEAN recorderEnabled = WPP_RECORDER_CHECK_INIT WPP_RECORDER_LEVEL_FLAGS_FILTER(TRACE_LEVEL_VERBOSE, ROS_TRACING_DEFAULT); \
        if (wppEnabled || recorderEnabled) { \
            WPP_INVOKE_WPP_DEBUG((MSG, _a12, _a13, _a14)); \
            WPP_RECORDER_AND_TRACE_SF_sDiLP( \
                     WPP_LEVEL_FLAGS_LOGGER(TRACE_LEVEL_VERBOSE, ROS_TRACING_DEFAULT) \
                     wppEnabled, recorderEnabled, \
                     WPP_RECORDER_LEVEL_FLAGS_ARGS(TRACE_LEVEL_VERBOSE, ROS_TRACING_DEFAULT), \
                     19, \
                     WPP_LOCAL_TraceGuids+0, __FILE__, __LINE__, _a12, _a13, _a14);\
        } \
    } \
    while(0) \
    WPP_LEVEL_FLAGS_POST(TRACE_LEVEL_VERBOSE, ROS_TRACING_DEFAULT)
#else // ENABLE_WPP_TRACE_FILTERING_WITH_WPP_RECORDER
#define WPP_CALL_RosKmdAdapter_cpp599(MSG, _a12, _a13, _a14) \
    WPP_LOG_ALWAYS(WPP_EX_LEVEL_FLAGS(TRACE_LEVEL_VERBOSE, ROS_TRACING_DEFAULT), MSG, _a12, _a13, _a14) \
    WPP_LEVEL_FLAGS_PRE(TRACE_LEVEL_VERBOSE, ROS_TRACING_DEFAULT) \
    WPP_ANNOTATE(RosKmdAdapter_cpp599) \
    (( \
        WPP_RECORDER_CHECK_INIT WPP_RECORDER_LEVEL_FLAGS_FILTER(TRACE_LEVEL_VERBOSE, ROS_TRACING_DEFAULT) \
        ?   WPP_INVOKE_WPP_DEBUG((MSG, _a12, _a13, _a14)), \
            WPP_RECORDER_SF_sDiLP( \
                WPP_RECORDER_LEVEL_FLAGS_ARGS(TRACE_LEVEL_VERBOSE, ROS_TRACING_DEFAULT), \
                19, \
                WPP_LOCAL_TraceGuids+0, __FILE__, __LINE__, _a12, _a13, _a14), \
            1 \
        :   0 \
    )) \
    WPP_LEVEL_FLAGS_POST(TRACE_LEVEL_VERBOSE, ROS_TRACING_DEFAULT)
#endif // ENABLE_WPP_TRACE_FILTERING_WITH_WPP_RECORDER
#else  // ENABLE_WPP_RECORDER
#define WPP_CALL_RosKmdAdapter_cpp599(MSG, _a12, _a13, _a14) \
    WPP_LOG_ALWAYS(WPP_EX_LEVEL_FLAGS(TRACE_LEVEL_VERBOSE, ROS_TRACING_DEFAULT), MSG, _a12, _a13, _a14) \
    WPP_LEVEL_FLAGS_PRE(TRACE_LEVEL_VERBOSE, ROS_TRACING_DEFAULT) \
    WPP_ANNOTATE(RosKmdAdapter_cpp599) \
    (( \
        WPP_CHECK_INIT WPP_LEVEL_FLAGS_ENABLED(TRACE_LEVEL_VERBOSE, ROS_TRACING_DEFAULT) \
        ?   WPP_INVOKE_WPP_DEBUG((MSG, _a12, _a13, _a14)), \
            WPP_SF_sDiLP( \
                WPP_LEVEL_FLAGS_LOGGER(TRACE_LEVEL_VERBOSE, ROS_TRACING_DEFAULT) \
                19, \
                WPP_LOCAL_TraceGuids+0, __FILE__, __LINE__, _a12, _a13, _a14), \
            1 \
        :   0 \
    )) \
    WPP_LEVEL_FLAGS_POST(TRACE_LEVEL_VERBOSE, ROS_TRACING_DEFAULT)
#endif // ENABLE_WPP_RECORDER

// WPP_CALL_RosKmdAdapter_cpp607
#ifndef WPP_LEVEL_FLAGS_PRE
#  define WPP_LEVEL_FLAGS_PRE(LEVEL,FLAGS)
#endif
#ifndef WPP_LEVEL_FLAGS_POST
#  define WPP_LEVEL_FLAGS_POST(LEVEL,FLAGS)
#endif
#if ENABLE_WPP_RECORDER
#if ENABLE_WPP_TRACE_FILTERING_WITH_WPP_RECORDER
#define WPP_CALL_RosKmdAdapter_cpp607(MSG, _a12, _a13) \
    WPP_LOG_ALWAYS(WPP_EX_LEVEL_FLAGS(TRACE_LEVEL_ERROR, ROS_TRACING_DEFAULT), MSG, _a12, _a13) \
    WPP_LEVEL_FLAGS_PRE(TRACE_LEVEL_ERROR, ROS_TRACING_DEFAULT) \
    do {\
        WPP_ANNOTATE(RosKmdAdapter_cpp607) 0; \
        BOOLEAN wppEnabled = WPP_CHECK_INIT WPP_LEVEL_FLAGS_ENABLED(TRACE_LEVEL_ERROR, ROS_TRACING_DEFAULT); \
        BOOLEAN recorderEnabled = WPP_RECORDER_CHECK_INIT WPP_RECORDER_LEVEL_FLAGS_FILTER(TRACE_LEVEL_ERROR, ROS_TRACING_DEFAULT); \
        if (wppEnabled || recorderEnabled) { \
            WPP_INVOKE_WPP_DEBUG((MSG, _a12, _a13)); \
            WPP_RECORDER_AND_TRACE_SF_sDdd( \
                     WPP_LEVEL_FLAGS_LOGGER(TRACE_LEVEL_ERROR, ROS_TRACING_DEFAULT) \
                     wppEnabled, recorderEnabled, \
                     WPP_RECORDER_LEVEL_FLAGS_ARGS(TRACE_LEVEL_ERROR, ROS_TRACING_DEFAULT), \
                     20, \
                     WPP_LOCAL_TraceGuids+0, __FILE__, __LINE__, _a12, _a13);\
        } \
    } \
    while(0) \
    WPP_LEVEL_FLAGS_POST(TRACE_LEVEL_ERROR, ROS_TRACING_DEFAULT)
#else // ENABLE_WPP_TRACE_FILTERING_WITH_WPP_RECORDER
#define WPP_CALL_RosKmdAdapter_cpp607(MSG, _a12, _a13) \
    WPP_LOG_ALWAYS(WPP_EX_LEVEL_FLAGS(TRACE_LEVEL_ERROR, ROS_TRACING_DEFAULT), MSG, _a12, _a13) \
    WPP_LEVEL_FLAGS_PRE(TRACE_LEVEL_ERROR, ROS_TRACING_DEFAULT) \
    WPP_ANNOTATE(RosKmdAdapter_cpp607) \
    (( \
        WPP_RECORDER_CHECK_INIT WPP_RECORDER_LEVEL_FLAGS_FILTER(TRACE_LEVEL_ERROR, ROS_TRACING_DEFAULT) \
        ?   WPP_INVOKE_WPP_DEBUG((MSG, _a12, _a13)), \
            WPP_RECORDER_SF_sDdd( \
                WPP_RECORDER_LEVEL_FLAGS_ARGS(TRACE_LEVEL_ERROR, ROS_TRACING_DEFAULT), \
                20, \
                WPP_LOCAL_TraceGuids+0, __FILE__, __LINE__, _a12, _a13), \
            1 \
        :   0 \
    )) \
    WPP_LEVEL_FLAGS_POST(TRACE_LEVEL_ERROR, ROS_TRACING_DEFAULT)
#endif // ENABLE_WPP_TRACE_FILTERING_WITH_WPP_RECORDER
#else  // ENABLE_WPP_RECORDER
#define WPP_CALL_RosKmdAdapter_cpp607(MSG, _a12, _a13) \
    WPP_LOG_ALWAYS(WPP_EX_LEVEL_FLAGS(TRACE_LEVEL_ERROR, ROS_TRACING_DEFAULT), MSG, _a12, _a13) \
    WPP_LEVEL_FLAGS_PRE(TRACE_LEVEL_ERROR, ROS_TRACING_DEFAULT) \
    WPP_ANNOTATE(RosKmdAdapter_cpp607) \
    (( \
        WPP_CHECK_INIT WPP_LEVEL_FLAGS_ENABLED(TRACE_LEVEL_ERROR, ROS_TRACING_DEFAULT) \
        ?   WPP_INVOKE_WPP_DEBUG((MSG, _a12, _a13)), \
            WPP_SF_sDdd( \
                WPP_LEVEL_FLAGS_LOGGER(TRACE_LEVEL_ERROR, ROS_TRACING_DEFAULT) \
                20, \
                WPP_LOCAL_TraceGuids+0, __FILE__, __LINE__, _a12, _a13), \
            1 \
        :   0 \
    )) \
    WPP_LEVEL_FLAGS_POST(TRACE_LEVEL_ERROR, ROS_TRACING_DEFAULT)
#endif // ENABLE_WPP_RECORDER

// WPP_CALL_RosKmdAdapter_cpp632
#ifndef WPP_LEVEL_FLAGS_PRE
#  define WPP_LEVEL_FLAGS_PRE(LEVEL,FLAGS)
#endif
#ifndef WPP_LEVEL_FLAGS_POST
#  define WPP_LEVEL_FLAGS_POST(LEVEL,FLAGS)
#endif
#if ENABLE_WPP_RECORDER
#if ENABLE_WPP_TRACE_FILTERING_WITH_WPP_RECORDER
#define WPP_CALL_RosKmdAdapter_cpp632(MSG, _a12, _a13) \
    WPP_LOG_ALWAYS(WPP_EX_LEVEL_FLAGS(TRACE_LEVEL_ERROR, ROS_TRACING_DEFAULT), MSG, _a12, _a13) \
    WPP_LEVEL_FLAGS_PRE(TRACE_LEVEL_ERROR, ROS_TRACING_DEFAULT) \
    do {\
        WPP_ANNOTATE(RosKmdAdapter_cpp632) 0; \
        BOOLEAN wppEnabled = WPP_CHECK_INIT WPP_LEVEL_FLAGS_ENABLED(TRACE_LEVEL_ERROR, ROS_TRACING_DEFAULT); \
        BOOLEAN recorderEnabled = WPP_RECORDER_CHECK_INIT WPP_RECORDER_LEVEL_FLAGS_FILTER(TRACE_LEVEL_ERROR, ROS_TRACING_DEFAULT); \
        if (wppEnabled || recorderEnabled) { \
            WPP_INVOKE_WPP_DEBUG((MSG, _a12, _a13)); \
            WPP_RECORDER_AND_TRACE_SF_sDdd( \
                     WPP_LEVEL_FLAGS_LOGGER(TRACE_LEVEL_ERROR, ROS_TRACING_DEFAULT) \
                     wppEnabled, recorderEnabled, \
                     WPP_RECORDER_LEVEL_FLAGS_ARGS(TRACE_LEVEL_ERROR, ROS_TRACING_DEFAULT), \
                     21, \
                     WPP_LOCAL_TraceGuids+0, __FILE__, __LINE__, _a12, _a13);\
        } \
    } \
    while(0) \
    WPP_LEVEL_FLAGS_POST(TRACE_LEVEL_ERROR, ROS_TRACING_DEFAULT)
#else // ENABLE_WPP_TRACE_FILTERING_WITH_WPP_RECORDER
#define WPP_CALL_RosKmdAdapter_cpp632(MSG, _a12, _a13) \
    WPP_LOG_ALWAYS(WPP_EX_LEVEL_FLAGS(TRACE_LEVEL_ERROR, ROS_TRACING_DEFAULT), MSG, _a12, _a13) \
    WPP_LEVEL_FLAGS_PRE(TRACE_LEVEL_ERROR, ROS_TRACING_DEFAULT) \
    WPP_ANNOTATE(RosKmdAdapter_cpp632) \
    (( \
        WPP_RECORDER_CHECK_INIT WPP_RECORDER_LEVEL_FLAGS_FILTER(TRACE_LEVEL_ERROR, ROS_TRACING_DEFAULT) \
        ?   WPP_INVOKE_WPP_DEBUG((MSG, _a12, _a13)), \
            WPP_RECORDER_SF_sDdd( \
                WPP_RECORDER_LEVEL_FLAGS_ARGS(TRACE_LEVEL_ERROR, ROS_TRACING_DEFAULT), \
                21, \
                WPP_LOCAL_TraceGuids+0, __FILE__, __LINE__, _a12, _a13), \
            1 \
        :   0 \
    )) \
    WPP_LEVEL_FLAGS_POST(TRACE_LEVEL_ERROR, ROS_TRACING_DEFAULT)
#endif // ENABLE_WPP_TRACE_FILTERING_WITH_WPP_RECORDER
#else  // ENABLE_WPP_RECORDER
#define WPP_CALL_RosKmdAdapter_cpp632(MSG, _a12, _a13) \
    WPP_LOG_ALWAYS(WPP_EX_LEVEL_FLAGS(TRACE_LEVEL_ERROR, ROS_TRACING_DEFAULT), MSG, _a12, _a13) \
    WPP_LEVEL_FLAGS_PRE(TRACE_LEVEL_ERROR, ROS_TRACING_DEFAULT) \
    WPP_ANNOTATE(RosKmdAdapter_cpp632) \
    (( \
        WPP_CHECK_INIT WPP_LEVEL_FLAGS_ENABLED(TRACE_LEVEL_ERROR, ROS_TRACING_DEFAULT) \
        ?   WPP_INVOKE_WPP_DEBUG((MSG, _a12, _a13)), \
            WPP_SF_sDdd( \
                WPP_LEVEL_FLAGS_LOGGER(TRACE_LEVEL_ERROR, ROS_TRACING_DEFAULT) \
                21, \
                WPP_LOCAL_TraceGuids+0, __FILE__, __LINE__, _a12, _a13), \
            1 \
        :   0 \
    )) \
    WPP_LEVEL_FLAGS_POST(TRACE_LEVEL_ERROR, ROS_TRACING_DEFAULT)
#endif // ENABLE_WPP_RECORDER

// WPP_CALL_RosKmdAdapter_cpp682
#ifndef WPP_LEVEL_FLAGS_PRE
#  define WPP_LEVEL_FLAGS_PRE(LEVEL,FLAGS)
#endif
#ifndef WPP_LEVEL_FLAGS_POST
#  define WPP_LEVEL_FLAGS_POST(LEVEL,FLAGS)
#endif
#if ENABLE_WPP_RECORDER
#if ENABLE_WPP_TRACE_FILTERING_WITH_WPP_RECORDER
#define WPP_CALL_RosKmdAdapter_cpp682(MSG, _a12) \
    WPP_LOG_ALWAYS(WPP_EX_LEVEL_FLAGS(TRACE_LEVEL_WARNING, ROS_TRACING_DEFAULT), MSG, _a12) \
    WPP_LEVEL_FLAGS_PRE(TRACE_LEVEL_WARNING, ROS_TRACING_DEFAULT) \
    do {\
        WPP_ANNOTATE(RosKmdAdapter_cpp682) 0; \
        BOOLEAN wppEnabled = WPP_CHECK_INIT WPP_LEVEL_FLAGS_ENABLED(TRACE_LEVEL_WARNING, ROS_TRACING_DEFAULT); \
        BOOLEAN recorderEnabled = WPP_RECORDER_CHECK_INIT WPP_RECORDER_LEVEL_FLAGS_FILTER(TRACE_LEVEL_WARNING, ROS_TRACING_DEFAULT); \
        if (wppEnabled || recorderEnabled) { \
            WPP_INVOKE_WPP_DEBUG((MSG, _a12)); \
            WPP_RECORDER_AND_TRACE_SF_sDL( \
                     WPP_LEVEL_FLAGS_LOGGER(TRACE_LEVEL_WARNING, ROS_TRACING_DEFAULT) \
                     wppEnabled, recorderEnabled, \
                     WPP_RECORDER_LEVEL_FLAGS_ARGS(TRACE_LEVEL_WARNING, ROS_TRACING_DEFAULT), \
                     22, \
                     WPP_LOCAL_TraceGuids+0, __FILE__, __LINE__, _a12);\
        } \
    } \
    while(0) \
    WPP_LEVEL_FLAGS_POST(TRACE_LEVEL_WARNING, ROS_TRACING_DEFAULT)
#else // ENABLE_WPP_TRACE_FILTERING_WITH_WPP_RECORDER
#define WPP_CALL_RosKmdAdapter_cpp682(MSG, _a12) \
    WPP_LOG_ALWAYS(WPP_EX_LEVEL_FLAGS(TRACE_LEVEL_WARNING, ROS_TRACING_DEFAULT), MSG, _a12) \
    WPP_LEVEL_FLAGS_PRE(TRACE_LEVEL_WARNING, ROS_TRACING_DEFAULT) \
    WPP_ANNOTATE(RosKmdAdapter_cpp682) \
    (( \
        WPP_RECORDER_CHECK_INIT WPP_RECORDER_LEVEL_FLAGS_FILTER(TRACE_LEVEL_WARNING, ROS_TRACING_DEFAULT) \
        ?   WPP_INVOKE_WPP_DEBUG((MSG, _a12)), \
            WPP_RECORDER_SF_sDL( \
                WPP_RECORDER_LEVEL_FLAGS_ARGS(TRACE_LEVEL_WARNING, ROS_TRACING_DEFAULT), \
                22, \
                WPP_LOCAL_TraceGuids+0, __FILE__, __LINE__, _a12), \
            1 \
        :   0 \
    )) \
    WPP_LEVEL_FLAGS_POST(TRACE_LEVEL_WARNING, ROS_TRACING_DEFAULT)
#endif // ENABLE_WPP_TRACE_FILTERING_WITH_WPP_RECORDER
#else  // ENABLE_WPP_RECORDER
#define WPP_CALL_RosKmdAdapter_cpp682(MSG, _a12) \
    WPP_LOG_ALWAYS(WPP_EX_LEVEL_FLAGS(TRACE_LEVEL_WARNING, ROS_TRACING_DEFAULT), MSG, _a12) \
    WPP_LEVEL_FLAGS_PRE(TRACE_LEVEL_WARNING, ROS_TRACING_DEFAULT) \
    WPP_ANNOTATE(RosKmdAdapter_cpp682) \
    (( \
        WPP_CHECK_INIT WPP_LEVEL_FLAGS_ENABLED(TRACE_LEVEL_WARNING, ROS_TRACING_DEFAULT) \
        ?   WPP_INVOKE_WPP_DEBUG((MSG, _a12)), \
            WPP_SF_sDL( \
                WPP_LEVEL_FLAGS_LOGGER(TRACE_LEVEL_WARNING, ROS_TRACING_DEFAULT) \
                22, \
                WPP_LOCAL_TraceGuids+0, __FILE__, __LINE__, _a12), \
            1 \
        :   0 \
    )) \
    WPP_LEVEL_FLAGS_POST(TRACE_LEVEL_WARNING, ROS_TRACING_DEFAULT)
#endif // ENABLE_WPP_RECORDER

// WPP_CALL_RosKmdAdapter_cpp786
#ifndef WPP_LEVEL_FLAGS_PRE
#  define WPP_LEVEL_FLAGS_PRE(LEVEL,FLAGS)
#endif
#ifndef WPP_LEVEL_FLAGS_POST
#  define WPP_LEVEL_FLAGS_POST(LEVEL,FLAGS)
#endif
#if ENABLE_WPP_RECORDER
#if ENABLE_WPP_TRACE_FILTERING_WITH_WPP_RECORDER
#define WPP_CALL_RosKmdAdapter_cpp786(MSG, _a12) \
    WPP_LOG_ALWAYS(WPP_EX_LEVEL_FLAGS(TRACE_LEVEL_ERROR, ROS_TRACING_DEFAULT), MSG, _a12) \
    WPP_LEVEL_FLAGS_PRE(TRACE_LEVEL_ERROR, ROS_TRACING_DEFAULT) \
    do {\
        WPP_ANNOTATE(RosKmdAdapter_cpp786) 0; \
        BOOLEAN wppEnabled = WPP_CHECK_INIT WPP_LEVEL_FLAGS_ENABLED(TRACE_LEVEL_ERROR, ROS_TRACING_DEFAULT); \
        BOOLEAN recorderEnabled = WPP_RECORDER_CHECK_INIT WPP_RECORDER_LEVEL_FLAGS_FILTER(TRACE_LEVEL_ERROR, ROS_TRACING_DEFAULT); \
        if (wppEnabled || recorderEnabled) { \
            WPP_INVOKE_WPP_DEBUG((MSG, _a12)); \
            WPP_RECORDER_AND_TRACE_SF_sDd( \
                     WPP_LEVEL_FLAGS_LOGGER(TRACE_LEVEL_ERROR, ROS_TRACING_DEFAULT) \
                     wppEnabled, recorderEnabled, \
                     WPP_RECORDER_LEVEL_FLAGS_ARGS(TRACE_LEVEL_ERROR, ROS_TRACING_DEFAULT), \
                     23, \
                     WPP_LOCAL_TraceGuids+0, __FILE__, __LINE__, _a12);\
        } \
    } \
    while(0) \
    WPP_LEVEL_FLAGS_POST(TRACE_LEVEL_ERROR, ROS_TRACING_DEFAULT)
#else // ENABLE_WPP_TRACE_FILTERING_WITH_WPP_RECORDER
#define WPP_CALL_RosKmdAdapter_cpp786(MSG, _a12) \
    WPP_LOG_ALWAYS(WPP_EX_LEVEL_FLAGS(TRACE_LEVEL_ERROR, ROS_TRACING_DEFAULT), MSG, _a12) \
    WPP_LEVEL_FLAGS_PRE(TRACE_LEVEL_ERROR, ROS_TRACING_DEFAULT) \
    WPP_ANNOTATE(RosKmdAdapter_cpp786) \
    (( \
        WPP_RECORDER_CHECK_INIT WPP_RECORDER_LEVEL_FLAGS_FILTER(TRACE_LEVEL_ERROR, ROS_TRACING_DEFAULT) \
        ?   WPP_INVOKE_WPP_DEBUG((MSG, _a12)), \
            WPP_RECORDER_SF_sDd( \
                WPP_RECORDER_LEVEL_FLAGS_ARGS(TRACE_LEVEL_ERROR, ROS_TRACING_DEFAULT), \
                23, \
                WPP_LOCAL_TraceGuids+0, __FILE__, __LINE__, _a12), \
            1 \
        :   0 \
    )) \
    WPP_LEVEL_FLAGS_POST(TRACE_LEVEL_ERROR, ROS_TRACING_DEFAULT)
#endif // ENABLE_WPP_TRACE_FILTERING_WITH_WPP_RECORDER
#else  // ENABLE_WPP_RECORDER
#define WPP_CALL_RosKmdAdapter_cpp786(MSG, _a12) \
    WPP_LOG_ALWAYS(WPP_EX_LEVEL_FLAGS(TRACE_LEVEL_ERROR, ROS_TRACING_DEFAULT), MSG, _a12) \
    WPP_LEVEL_FLAGS_PRE(TRACE_LEVEL_ERROR, ROS_TRACING_DEFAULT) \
    WPP_ANNOTATE(RosKmdAdapter_cpp786) \
    (( \
        WPP_CHECK_INIT WPP_LEVEL_FLAGS_ENABLED(TRACE_LEVEL_ERROR, ROS_TRACING_DEFAULT) \
        ?   WPP_INVOKE_WPP_DEBUG((MSG, _a12)), \
            WPP_SF_sDd( \
                WPP_LEVEL_FLAGS_LOGGER(TRACE_LEVEL_ERROR, ROS_TRACING_DEFAULT) \
                23, \
                WPP_LOCAL_TraceGuids+0, __FILE__, __LINE__, _a12), \
            1 \
        :   0 \
    )) \
    WPP_LEVEL_FLAGS_POST(TRACE_LEVEL_ERROR, ROS_TRACING_DEFAULT)
#endif // ENABLE_WPP_RECORDER

// WPP_CALL_RosKmdAdapter_cpp811
#ifndef WPP_LEVEL_FLAGS_PRE
#  define WPP_LEVEL_FLAGS_PRE(LEVEL,FLAGS)
#endif
#ifndef WPP_LEVEL_FLAGS_POST
#  define WPP_LEVEL_FLAGS_POST(LEVEL,FLAGS)
#endif
#if ENABLE_WPP_RECORDER
#if ENABLE_WPP_TRACE_FILTERING_WITH_WPP_RECORDER
#define WPP_CALL_RosKmdAdapter_cpp811(MSG, _a12) \
    WPP_LOG_ALWAYS(WPP_EX_LEVEL_FLAGS(TRACE_LEVEL_ERROR, ROS_TRACING_DEFAULT), MSG, _a12) \
    WPP_LEVEL_FLAGS_PRE(TRACE_LEVEL_ERROR, ROS_TRACING_DEFAULT) \
    do {\
        WPP_ANNOTATE(RosKmdAdapter_cpp811) 0; \
        BOOLEAN wppEnabled = WPP_CHECK_INIT WPP_LEVEL_FLAGS_ENABLED(TRACE_LEVEL_ERROR, ROS_TRACING_DEFAULT); \
        BOOLEAN recorderEnabled = WPP_RECORDER_CHECK_INIT WPP_RECORDER_LEVEL_FLAGS_FILTER(TRACE_LEVEL_ERROR, ROS_TRACING_DEFAULT); \
        if (wppEnabled || recorderEnabled) { \
            WPP_INVOKE_WPP_DEBUG((MSG, _a12)); \
            WPP_RECORDER_AND_TRACE_SF_sDd( \
                     WPP_LEVEL_FLAGS_LOGGER(TRACE_LEVEL_ERROR, ROS_TRACING_DEFAULT) \
                     wppEnabled, recorderEnabled, \
                     WPP_RECORDER_LEVEL_FLAGS_ARGS(TRACE_LEVEL_ERROR, ROS_TRACING_DEFAULT), \
                     24, \
                     WPP_LOCAL_TraceGuids+0, __FILE__, __LINE__, _a12);\
        } \
    } \
    while(0) \
    WPP_LEVEL_FLAGS_POST(TRACE_LEVEL_ERROR, ROS_TRACING_DEFAULT)
#else // ENABLE_WPP_TRACE_FILTERING_WITH_WPP_RECORDER
#define WPP_CALL_RosKmdAdapter_cpp811(MSG, _a12) \
    WPP_LOG_ALWAYS(WPP_EX_LEVEL_FLAGS(TRACE_LEVEL_ERROR, ROS_TRACING_DEFAULT), MSG, _a12) \
    WPP_LEVEL_FLAGS_PRE(TRACE_LEVEL_ERROR, ROS_TRACING_DEFAULT) \
    WPP_ANNOTATE(RosKmdAdapter_cpp811) \
    (( \
        WPP_RECORDER_CHECK_INIT WPP_RECORDER_LEVEL_FLAGS_FILTER(TRACE_LEVEL_ERROR, ROS_TRACING_DEFAULT) \
        ?   WPP_INVOKE_WPP_DEBUG((MSG, _a12)), \
            WPP_RECORDER_SF_sDd( \
                WPP_RECORDER_LEVEL_FLAGS_ARGS(TRACE_LEVEL_ERROR, ROS_TRACING_DEFAULT), \
                24, \
                WPP_LOCAL_TraceGuids+0, __FILE__, __LINE__, _a12), \
            1 \
        :   0 \
    )) \
    WPP_LEVEL_FLAGS_POST(TRACE_LEVEL_ERROR, ROS_TRACING_DEFAULT)
#endif // ENABLE_WPP_TRACE_FILTERING_WITH_WPP_RECORDER
#else  // ENABLE_WPP_RECORDER
#define WPP_CALL_RosKmdAdapter_cpp811(MSG, _a12) \
    WPP_LOG_ALWAYS(WPP_EX_LEVEL_FLAGS(TRACE_LEVEL_ERROR, ROS_TRACING_DEFAULT), MSG, _a12) \
    WPP_LEVEL_FLAGS_PRE(TRACE_LEVEL_ERROR, ROS_TRACING_DEFAULT) \
    WPP_ANNOTATE(RosKmdAdapter_cpp811) \
    (( \
        WPP_CHECK_INIT WPP_LEVEL_FLAGS_ENABLED(TRACE_LEVEL_ERROR, ROS_TRACING_DEFAULT) \
        ?   WPP_INVOKE_WPP_DEBUG((MSG, _a12)), \
            WPP_SF_sDd( \
                WPP_LEVEL_FLAGS_LOGGER(TRACE_LEVEL_ERROR, ROS_TRACING_DEFAULT) \
                24, \
                WPP_LOCAL_TraceGuids+0, __FILE__, __LINE__, _a12), \
            1 \
        :   0 \
    )) \
    WPP_LEVEL_FLAGS_POST(TRACE_LEVEL_ERROR, ROS_TRACING_DEFAULT)
#endif // ENABLE_WPP_RECORDER

// WPP_CALL_RosKmdAdapter_cpp878
#ifndef WPP_LEVEL_FLAGS_PRE
#  define WPP_LEVEL_FLAGS_PRE(LEVEL,FLAGS)
#endif
#ifndef WPP_LEVEL_FLAGS_POST
#  define WPP_LEVEL_FLAGS_POST(LEVEL,FLAGS)
#endif
#if ENABLE_WPP_RECORDER
#if ENABLE_WPP_TRACE_FILTERING_WITH_WPP_RECORDER
#define WPP_CALL_RosKmdAdapter_cpp878(MSG, _a12, _a13, _a14) \
    WPP_LOG_ALWAYS(WPP_EX_LEVEL_FLAGS(TRACE_LEVEL_VERBOSE, ROS_TRACING_DEFAULT), MSG, _a12, _a13, _a14) \
    WPP_LEVEL_FLAGS_PRE(TRACE_LEVEL_VERBOSE, ROS_TRACING_DEFAULT) \
    do {\
        WPP_ANNOTATE(RosKmdAdapter_cpp878) 0; \
        BOOLEAN wppEnabled = WPP_CHECK_INIT WPP_LEVEL_FLAGS_ENABLED(TRACE_LEVEL_VERBOSE, ROS_TRACING_DEFAULT); \
        BOOLEAN recorderEnabled = WPP_RECORDER_CHECK_INIT WPP_RECORDER_LEVEL_FLAGS_FILTER(TRACE_LEVEL_VERBOSE, ROS_TRACING_DEFAULT); \
        if (wppEnabled || recorderEnabled) { \
            WPP_INVOKE_WPP_DEBUG((MSG, _a12, _a13, _a14)); \
            WPP_RECORDER_AND_TRACE_SF_sDddP( \
                     WPP_LEVEL_FLAGS_LOGGER(TRACE_LEVEL_VERBOSE, ROS_TRACING_DEFAULT) \
                     wppEnabled, recorderEnabled, \
                     WPP_RECORDER_LEVEL_FLAGS_ARGS(TRACE_LEVEL_VERBOSE, ROS_TRACING_DEFAULT), \
                     25, \
                     WPP_LOCAL_TraceGuids+0, __FILE__, __LINE__, _a12, _a13, _a14);\
        } \
    } \
    while(0) \
    WPP_LEVEL_FLAGS_POST(TRACE_LEVEL_VERBOSE, ROS_TRACING_DEFAULT)
#else // ENABLE_WPP_TRACE_FILTERING_WITH_WPP_RECORDER
#define WPP_CALL_RosKmdAdapter_cpp878(MSG, _a12, _a13, _a14) \
    WPP_LOG_ALWAYS(WPP_EX_LEVEL_FLAGS(TRACE_LEVEL_VERBOSE, ROS_TRACING_DEFAULT), MSG, _a12, _a13, _a14) \
    WPP_LEVEL_FLAGS_PRE(TRACE_LEVEL_VERBOSE, ROS_TRACING_DEFAULT) \
    WPP_ANNOTATE(RosKmdAdapter_cpp878) \
    (( \
        WPP_RECORDER_CHECK_INIT WPP_RECORDER_LEVEL_FLAGS_FILTER(TRACE_LEVEL_VERBOSE, ROS_TRACING_DEFAULT) \
        ?   WPP_INVOKE_WPP_DEBUG((MSG, _a12, _a13, _a14)), \
            WPP_RECORDER_SF_sDddP( \
                WPP_RECORDER_LEVEL_FLAGS_ARGS(TRACE_LEVEL_VERBOSE, ROS_TRACING_DEFAULT), \
                25, \
                WPP_LOCAL_TraceGuids+0, __FILE__, __LINE__, _a12, _a13, _a14), \
            1 \
        :   0 \
    )) \
    WPP_LEVEL_FLAGS_POST(TRACE_LEVEL_VERBOSE, ROS_TRACING_DEFAULT)
#endif // ENABLE_WPP_TRACE_FILTERING_WITH_WPP_RECORDER
#else  // ENABLE_WPP_RECORDER
#define WPP_CALL_RosKmdAdapter_cpp878(MSG, _a12, _a13, _a14) \
    WPP_LOG_ALWAYS(WPP_EX_LEVEL_FLAGS(TRACE_LEVEL_VERBOSE, ROS_TRACING_DEFAULT), MSG, _a12, _a13, _a14) \
    WPP_LEVEL_FLAGS_PRE(TRACE_LEVEL_VERBOSE, ROS_TRACING_DEFAULT) \
    WPP_ANNOTATE(RosKmdAdapter_cpp878) \
    (( \
        WPP_CHECK_INIT WPP_LEVEL_FLAGS_ENABLED(TRACE_LEVEL_VERBOSE, ROS_TRACING_DEFAULT) \
        ?   WPP_INVOKE_WPP_DEBUG((MSG, _a12, _a13, _a14)), \
            WPP_SF_sDddP( \
                WPP_LEVEL_FLAGS_LOGGER(TRACE_LEVEL_VERBOSE, ROS_TRACING_DEFAULT) \
                25, \
                WPP_LOCAL_TraceGuids+0, __FILE__, __LINE__, _a12, _a13, _a14), \
            1 \
        :   0 \
    )) \
    WPP_LEVEL_FLAGS_POST(TRACE_LEVEL_VERBOSE, ROS_TRACING_DEFAULT)
#endif // ENABLE_WPP_RECORDER

// WPP_CALL_RosKmdAdapter_cpp912
#ifndef WPP_LEVEL_FLAGS_PRE
#  define WPP_LEVEL_FLAGS_PRE(LEVEL,FLAGS)
#endif
#ifndef WPP_LEVEL_FLAGS_POST
#  define WPP_LEVEL_FLAGS_POST(LEVEL,FLAGS)
#endif
#if ENABLE_WPP_RECORDER
#if ENABLE_WPP_TRACE_FILTERING_WITH_WPP_RECORDER
#define WPP_CALL_RosKmdAdapter_cpp912(MSG, _a12) \
    WPP_LOG_ALWAYS(WPP_EX_LEVEL_FLAGS(TRACE_LEVEL_VERBOSE, ROS_TRACING_DEFAULT), MSG, _a12) \
    WPP_LEVEL_FLAGS_PRE(TRACE_LEVEL_VERBOSE, ROS_TRACING_DEFAULT) \
    do {\
        WPP_ANNOTATE(RosKmdAdapter_cpp912) 0; \
        BOOLEAN wppEnabled = WPP_CHECK_INIT WPP_LEVEL_FLAGS_ENABLED(TRACE_LEVEL_VERBOSE, ROS_TRACING_DEFAULT); \
        BOOLEAN recorderEnabled = WPP_RECORDER_CHECK_INIT WPP_RECORDER_LEVEL_FLAGS_FILTER(TRACE_LEVEL_VERBOSE, ROS_TRACING_DEFAULT); \
        if (wppEnabled || recorderEnabled) { \
            WPP_INVOKE_WPP_DEBUG((MSG, _a12)); \
            WPP_RECORDER_AND_TRACE_SF_sDd( \
                     WPP_LEVEL_FLAGS_LOGGER(TRACE_LEVEL_VERBOSE, ROS_TRACING_DEFAULT) \
                     wppEnabled, recorderEnabled, \
                     WPP_RECORDER_LEVEL_FLAGS_ARGS(TRACE_LEVEL_VERBOSE, ROS_TRACING_DEFAULT), \
                     26, \
                     WPP_LOCAL_TraceGuids+0, __FILE__, __LINE__, _a12);\
        } \
    } \
    while(0) \
    WPP_LEVEL_FLAGS_POST(TRACE_LEVEL_VERBOSE, ROS_TRACING_DEFAULT)
#else // ENABLE_WPP_TRACE_FILTERING_WITH_WPP_RECORDER
#define WPP_CALL_RosKmdAdapter_cpp912(MSG, _a12) \
    WPP_LOG_ALWAYS(WPP_EX_LEVEL_FLAGS(TRACE_LEVEL_VERBOSE, ROS_TRACING_DEFAULT), MSG, _a12) \
    WPP_LEVEL_FLAGS_PRE(TRACE_LEVEL_VERBOSE, ROS_TRACING_DEFAULT) \
    WPP_ANNOTATE(RosKmdAdapter_cpp912) \
    (( \
        WPP_RECORDER_CHECK_INIT WPP_RECORDER_LEVEL_FLAGS_FILTER(TRACE_LEVEL_VERBOSE, ROS_TRACING_DEFAULT) \
        ?   WPP_INVOKE_WPP_DEBUG((MSG, _a12)), \
            WPP_RECORDER_SF_sDd( \
                WPP_RECORDER_LEVEL_FLAGS_ARGS(TRACE_LEVEL_VERBOSE, ROS_TRACING_DEFAULT), \
                26, \
                WPP_LOCAL_TraceGuids+0, __FILE__, __LINE__, _a12), \
            1 \
        :   0 \
    )) \
    WPP_LEVEL_FLAGS_POST(TRACE_LEVEL_VERBOSE, ROS_TRACING_DEFAULT)
#endif // ENABLE_WPP_TRACE_FILTERING_WITH_WPP_RECORDER
#else  // ENABLE_WPP_RECORDER
#define WPP_CALL_RosKmdAdapter_cpp912(MSG, _a12) \
    WPP_LOG_ALWAYS(WPP_EX_LEVEL_FLAGS(TRACE_LEVEL_VERBOSE, ROS_TRACING_DEFAULT), MSG, _a12) \
    WPP_LEVEL_FLAGS_PRE(TRACE_LEVEL_VERBOSE, ROS_TRACING_DEFAULT) \
    WPP_ANNOTATE(RosKmdAdapter_cpp912) \
    (( \
        WPP_CHECK_INIT WPP_LEVEL_FLAGS_ENABLED(TRACE_LEVEL_VERBOSE, ROS_TRACING_DEFAULT) \
        ?   WPP_INVOKE_WPP_DEBUG((MSG, _a12)), \
            WPP_SF_sDd( \
                WPP_LEVEL_FLAGS_LOGGER(TRACE_LEVEL_VERBOSE, ROS_TRACING_DEFAULT) \
                26, \
                WPP_LOCAL_TraceGuids+0, __FILE__, __LINE__, _a12), \
            1 \
        :   0 \
    )) \
    WPP_LEVEL_FLAGS_POST(TRACE_LEVEL_VERBOSE, ROS_TRACING_DEFAULT)
#endif // ENABLE_WPP_RECORDER

// WPP_CALL_RosKmdAdapter_cpp922
#ifndef WPP_LEVEL_FLAGS_PRE
#  define WPP_LEVEL_FLAGS_PRE(LEVEL,FLAGS)
#endif
#ifndef WPP_LEVEL_FLAGS_POST
#  define WPP_LEVEL_FLAGS_POST(LEVEL,FLAGS)
#endif
#if ENABLE_WPP_RECORDER
#if ENABLE_WPP_TRACE_FILTERING_WITH_WPP_RECORDER
#define WPP_CALL_RosKmdAdapter_cpp922(MSG, _a12, _a13) \
    WPP_LOG_ALWAYS(WPP_EX_LEVEL_FLAGS(TRACE_LEVEL_ERROR, ROS_TRACING_DEFAULT), MSG, _a12, _a13) \
    WPP_LEVEL_FLAGS_PRE(TRACE_LEVEL_ERROR, ROS_TRACING_DEFAULT) \
    do {\
        WPP_ANNOTATE(RosKmdAdapter_cpp922) 0; \
        BOOLEAN wppEnabled = WPP_CHECK_INIT WPP_LEVEL_FLAGS_ENABLED(TRACE_LEVEL_ERROR, ROS_TRACING_DEFAULT); \
        BOOLEAN recorderEnabled = WPP_RECORDER_CHECK_INIT WPP_RECORDER_LEVEL_FLAGS_FILTER(TRACE_LEVEL_ERROR, ROS_TRACING_DEFAULT); \
        if (wppEnabled || recorderEnabled) { \
            WPP_INVOKE_WPP_DEBUG((MSG, _a12, _a13)); \
            WPP_RECORDER_AND_TRACE_SF_sDdd( \
                     WPP_LEVEL_FLAGS_LOGGER(TRACE_LEVEL_ERROR, ROS_TRACING_DEFAULT) \
                     wppEnabled, recorderEnabled, \
                     WPP_RECORDER_LEVEL_FLAGS_ARGS(TRACE_LEVEL_ERROR, ROS_TRACING_DEFAULT), \
                     27, \
                     WPP_LOCAL_TraceGuids+0, __FILE__, __LINE__, _a12, _a13);\
        } \
    } \
    while(0) \
    WPP_LEVEL_FLAGS_POST(TRACE_LEVEL_ERROR, ROS_TRACING_DEFAULT)
#else // ENABLE_WPP_TRACE_FILTERING_WITH_WPP_RECORDER
#define WPP_CALL_RosKmdAdapter_cpp922(MSG, _a12, _a13) \
    WPP_LOG_ALWAYS(WPP_EX_LEVEL_FLAGS(TRACE_LEVEL_ERROR, ROS_TRACING_DEFAULT), MSG, _a12, _a13) \
    WPP_LEVEL_FLAGS_PRE(TRACE_LEVEL_ERROR, ROS_TRACING_DEFAULT) \
    WPP_ANNOTATE(RosKmdAdapter_cpp922) \
    (( \
        WPP_RECORDER_CHECK_INIT WPP_RECORDER_LEVEL_FLAGS_FILTER(TRACE_LEVEL_ERROR, ROS_TRACING_DEFAULT) \
        ?   WPP_INVOKE_WPP_DEBUG((MSG, _a12, _a13)), \
            WPP_RECORDER_SF_sDdd( \
                WPP_RECORDER_LEVEL_FLAGS_ARGS(TRACE_LEVEL_ERROR, ROS_TRACING_DEFAULT), \
                27, \
                WPP_LOCAL_TraceGuids+0, __FILE__, __LINE__, _a12, _a13), \
            1 \
        :   0 \
    )) \
    WPP_LEVEL_FLAGS_POST(TRACE_LEVEL_ERROR, ROS_TRACING_DEFAULT)
#endif // ENABLE_WPP_TRACE_FILTERING_WITH_WPP_RECORDER
#else  // ENABLE_WPP_RECORDER
#define WPP_CALL_RosKmdAdapter_cpp922(MSG, _a12, _a13) \
    WPP_LOG_ALWAYS(WPP_EX_LEVEL_FLAGS(TRACE_LEVEL_ERROR, ROS_TRACING_DEFAULT), MSG, _a12, _a13) \
    WPP_LEVEL_FLAGS_PRE(TRACE_LEVEL_ERROR, ROS_TRACING_DEFAULT) \
    WPP_ANNOTATE(RosKmdAdapter_cpp922) \
    (( \
        WPP_CHECK_INIT WPP_LEVEL_FLAGS_ENABLED(TRACE_LEVEL_ERROR, ROS_TRACING_DEFAULT) \
        ?   WPP_INVOKE_WPP_DEBUG((MSG, _a12, _a13)), \
            WPP_SF_sDdd( \
                WPP_LEVEL_FLAGS_LOGGER(TRACE_LEVEL_ERROR, ROS_TRACING_DEFAULT) \
                27, \
                WPP_LOCAL_TraceGuids+0, __FILE__, __LINE__, _a12, _a13), \
            1 \
        :   0 \
    )) \
    WPP_LEVEL_FLAGS_POST(TRACE_LEVEL_ERROR, ROS_TRACING_DEFAULT)
#endif // ENABLE_WPP_RECORDER

// WPP_CALL_RosKmdAdapter_cpp947
#ifndef WPP_LEVEL_FLAGS_PRE
#  define WPP_LEVEL_FLAGS_PRE(LEVEL,FLAGS)
#endif
#ifndef WPP_LEVEL_FLAGS_POST
#  define WPP_LEVEL_FLAGS_POST(LEVEL,FLAGS)
#endif
#if ENABLE_WPP_RECORDER
#if ENABLE_WPP_TRACE_FILTERING_WITH_WPP_RECORDER
#define WPP_CALL_RosKmdAdapter_cpp947(MSG, _a12, _a13) \
    WPP_LOG_ALWAYS(WPP_EX_LEVEL_FLAGS(TRACE_LEVEL_ERROR, ROS_TRACING_DEBUG), MSG, _a12, _a13) \
    WPP_LEVEL_FLAGS_PRE(TRACE_LEVEL_ERROR, ROS_TRACING_DEBUG) \
    do {\
        WPP_ANNOTATE(RosKmdAdapter_cpp947) 0; \
        BOOLEAN wppEnabled = WPP_CHECK_INIT WPP_LEVEL_FLAGS_ENABLED(TRACE_LEVEL_ERROR, ROS_TRACING_DEBUG); \
        BOOLEAN recorderEnabled = WPP_RECORDER_CHECK_INIT WPP_RECORDER_LEVEL_FLAGS_FILTER(TRACE_LEVEL_ERROR, ROS_TRACING_DEBUG); \
        if (wppEnabled || recorderEnabled) { \
            WPP_INVOKE_WPP_DEBUG((MSG, _a12, _a13)); \
            WPP_RECORDER_AND_TRACE_SF_sDdd( \
                     WPP_LEVEL_FLAGS_LOGGER(TRACE_LEVEL_ERROR, ROS_TRACING_DEBUG) \
                     wppEnabled, recorderEnabled, \
                     WPP_RECORDER_LEVEL_FLAGS_ARGS(TRACE_LEVEL_ERROR, ROS_TRACING_DEBUG), \
                     28, \
                     WPP_LOCAL_TraceGuids+0, __FILE__, __LINE__, _a12, _a13);\
        } \
    } \
    while(0) \
    WPP_LEVEL_FLAGS_POST(TRACE_LEVEL_ERROR, ROS_TRACING_DEBUG)
#else // ENABLE_WPP_TRACE_FILTERING_WITH_WPP_RECORDER
#define WPP_CALL_RosKmdAdapter_cpp947(MSG, _a12, _a13) \
    WPP_LOG_ALWAYS(WPP_EX_LEVEL_FLAGS(TRACE_LEVEL_ERROR, ROS_TRACING_DEBUG), MSG, _a12, _a13) \
    WPP_LEVEL_FLAGS_PRE(TRACE_LEVEL_ERROR, ROS_TRACING_DEBUG) \
    WPP_ANNOTATE(RosKmdAdapter_cpp947) \
    (( \
        WPP_RECORDER_CHECK_INIT WPP_RECORDER_LEVEL_FLAGS_FILTER(TRACE_LEVEL_ERROR, ROS_TRACING_DEBUG) \
        ?   WPP_INVOKE_WPP_DEBUG((MSG, _a12, _a13)), \
            WPP_RECORDER_SF_sDdd( \
                WPP_RECORDER_LEVEL_FLAGS_ARGS(TRACE_LEVEL_ERROR, ROS_TRACING_DEBUG), \
                28, \
                WPP_LOCAL_TraceGuids+0, __FILE__, __LINE__, _a12, _a13), \
            1 \
        :   0 \
    )) \
    WPP_LEVEL_FLAGS_POST(TRACE_LEVEL_ERROR, ROS_TRACING_DEBUG)
#endif // ENABLE_WPP_TRACE_FILTERING_WITH_WPP_RECORDER
#else  // ENABLE_WPP_RECORDER
#define WPP_CALL_RosKmdAdapter_cpp947(MSG, _a12, _a13) \
    WPP_LOG_ALWAYS(WPP_EX_LEVEL_FLAGS(TRACE_LEVEL_ERROR, ROS_TRACING_DEBUG), MSG, _a12, _a13) \
    WPP_LEVEL_FLAGS_PRE(TRACE_LEVEL_ERROR, ROS_TRACING_DEBUG) \
    WPP_ANNOTATE(RosKmdAdapter_cpp947) \
    (( \
        WPP_CHECK_INIT WPP_LEVEL_FLAGS_ENABLED(TRACE_LEVEL_ERROR, ROS_TRACING_DEBUG) \
        ?   WPP_INVOKE_WPP_DEBUG((MSG, _a12, _a13)), \
            WPP_SF_sDdd( \
                WPP_LEVEL_FLAGS_LOGGER(TRACE_LEVEL_ERROR, ROS_TRACING_DEBUG) \
                28, \
                WPP_LOCAL_TraceGuids+0, __FILE__, __LINE__, _a12, _a13), \
            1 \
        :   0 \
    )) \
    WPP_LEVEL_FLAGS_POST(TRACE_LEVEL_ERROR, ROS_TRACING_DEBUG)
#endif // ENABLE_WPP_RECORDER

// WPP_CALL_RosKmdAdapter_cpp1177
#ifndef WPP_LEVEL_FLAGS_PRE
#  define WPP_LEVEL_FLAGS_PRE(LEVEL,FLAGS)
#endif
#ifndef WPP_LEVEL_FLAGS_POST
#  define WPP_LEVEL_FLAGS_POST(LEVEL,FLAGS)
#endif
#if ENABLE_WPP_RECORDER
#if ENABLE_WPP_TRACE_FILTERING_WITH_WPP_RECORDER
#define WPP_CALL_RosKmdAdapter_cpp1177(MSG, _a12, _a13) \
    WPP_LOG_ALWAYS(WPP_EX_LEVEL_FLAGS(TRACE_LEVEL_ERROR, ROS_TRACING_DEBUG), MSG, _a12, _a13) \
    WPP_LEVEL_FLAGS_PRE(TRACE_LEVEL_ERROR, ROS_TRACING_DEBUG) \
    do {\
        WPP_ANNOTATE(RosKmdAdapter_cpp1177) 0; \
        BOOLEAN wppEnabled = WPP_CHECK_INIT WPP_LEVEL_FLAGS_ENABLED(TRACE_LEVEL_ERROR, ROS_TRACING_DEBUG); \
        BOOLEAN recorderEnabled = WPP_RECORDER_CHECK_INIT WPP_RECORDER_LEVEL_FLAGS_FILTER(TRACE_LEVEL_ERROR, ROS_TRACING_DEBUG); \
        if (wppEnabled || recorderEnabled) { \
            WPP_INVOKE_WPP_DEBUG((MSG, _a12, _a13)); \
            WPP_RECORDER_AND_TRACE_SF_sDdd( \
                     WPP_LEVEL_FLAGS_LOGGER(TRACE_LEVEL_ERROR, ROS_TRACING_DEBUG) \
                     wppEnabled, recorderEnabled, \
                     WPP_RECORDER_LEVEL_FLAGS_ARGS(TRACE_LEVEL_ERROR, ROS_TRACING_DEBUG), \
                     29, \
                     WPP_LOCAL_TraceGuids+0, __FILE__, __LINE__, _a12, _a13);\
        } \
    } \
    while(0) \
    WPP_LEVEL_FLAGS_POST(TRACE_LEVEL_ERROR, ROS_TRACING_DEBUG)
#else // ENABLE_WPP_TRACE_FILTERING_WITH_WPP_RECORDER
#define WPP_CALL_RosKmdAdapter_cpp1177(MSG, _a12, _a13) \
    WPP_LOG_ALWAYS(WPP_EX_LEVEL_FLAGS(TRACE_LEVEL_ERROR, ROS_TRACING_DEBUG), MSG, _a12, _a13) \
    WPP_LEVEL_FLAGS_PRE(TRACE_LEVEL_ERROR, ROS_TRACING_DEBUG) \
    WPP_ANNOTATE(RosKmdAdapter_cpp1177) \
    (( \
        WPP_RECORDER_CHECK_INIT WPP_RECORDER_LEVEL_FLAGS_FILTER(TRACE_LEVEL_ERROR, ROS_TRACING_DEBUG) \
        ?   WPP_INVOKE_WPP_DEBUG((MSG, _a12, _a13)), \
            WPP_RECORDER_SF_sDdd( \
                WPP_RECORDER_LEVEL_FLAGS_ARGS(TRACE_LEVEL_ERROR, ROS_TRACING_DEBUG), \
                29, \
                WPP_LOCAL_TraceGuids+0, __FILE__, __LINE__, _a12, _a13), \
            1 \
        :   0 \
    )) \
    WPP_LEVEL_FLAGS_POST(TRACE_LEVEL_ERROR, ROS_TRACING_DEBUG)
#endif // ENABLE_WPP_TRACE_FILTERING_WITH_WPP_RECORDER
#else  // ENABLE_WPP_RECORDER
#define WPP_CALL_RosKmdAdapter_cpp1177(MSG, _a12, _a13) \
    WPP_LOG_ALWAYS(WPP_EX_LEVEL_FLAGS(TRACE_LEVEL_ERROR, ROS_TRACING_DEBUG), MSG, _a12, _a13) \
    WPP_LEVEL_FLAGS_PRE(TRACE_LEVEL_ERROR, ROS_TRACING_DEBUG) \
    WPP_ANNOTATE(RosKmdAdapter_cpp1177) \
    (( \
        WPP_CHECK_INIT WPP_LEVEL_FLAGS_ENABLED(TRACE_LEVEL_ERROR, ROS_TRACING_DEBUG) \
        ?   WPP_INVOKE_WPP_DEBUG((MSG, _a12, _a13)), \
            WPP_SF_sDdd( \
                WPP_LEVEL_FLAGS_LOGGER(TRACE_LEVEL_ERROR, ROS_TRACING_DEBUG) \
                29, \
                WPP_LOCAL_TraceGuids+0, __FILE__, __LINE__, _a12, _a13), \
            1 \
        :   0 \
    )) \
    WPP_LEVEL_FLAGS_POST(TRACE_LEVEL_ERROR, ROS_TRACING_DEBUG)
#endif // ENABLE_WPP_RECORDER

// WPP_CALL_RosKmdAdapter_cpp1255
#ifndef WPP_LEVEL_FLAGS_PRE
#  define WPP_LEVEL_FLAGS_PRE(LEVEL,FLAGS)
#endif
#ifndef WPP_LEVEL_FLAGS_POST
#  define WPP_LEVEL_FLAGS_POST(LEVEL,FLAGS)
#endif
#if ENABLE_WPP_RECORDER
#if ENABLE_WPP_TRACE_FILTERING_WITH_WPP_RECORDER
#define WPP_CALL_RosKmdAdapter_cpp1255(MSG, _a12, _a13) \
    WPP_LOG_ALWAYS(WPP_EX_LEVEL_FLAGS(TRACE_LEVEL_ERROR, ROS_TRACING_DEBUG), MSG, _a12, _a13) \
    WPP_LEVEL_FLAGS_PRE(TRACE_LEVEL_ERROR, ROS_TRACING_DEBUG) \
    do {\
        WPP_ANNOTATE(RosKmdAdapter_cpp1255) 0; \
        BOOLEAN wppEnabled = WPP_CHECK_INIT WPP_LEVEL_FLAGS_ENABLED(TRACE_LEVEL_ERROR, ROS_TRACING_DEBUG); \
        BOOLEAN recorderEnabled = WPP_RECORDER_CHECK_INIT WPP_RECORDER_LEVEL_FLAGS_FILTER(TRACE_LEVEL_ERROR, ROS_TRACING_DEBUG); \
        if (wppEnabled || recorderEnabled) { \
            WPP_INVOKE_WPP_DEBUG((MSG, _a12, _a13)); \
            WPP_RECORDER_AND_TRACE_SF_sDdd( \
                     WPP_LEVEL_FLAGS_LOGGER(TRACE_LEVEL_ERROR, ROS_TRACING_DEBUG) \
                     wppEnabled, recorderEnabled, \
                     WPP_RECORDER_LEVEL_FLAGS_ARGS(TRACE_LEVEL_ERROR, ROS_TRACING_DEBUG), \
                     30, \
                     WPP_LOCAL_TraceGuids+0, __FILE__, __LINE__, _a12, _a13);\
        } \
    } \
    while(0) \
    WPP_LEVEL_FLAGS_POST(TRACE_LEVEL_ERROR, ROS_TRACING_DEBUG)
#else // ENABLE_WPP_TRACE_FILTERING_WITH_WPP_RECORDER
#define WPP_CALL_RosKmdAdapter_cpp1255(MSG, _a12, _a13) \
    WPP_LOG_ALWAYS(WPP_EX_LEVEL_FLAGS(TRACE_LEVEL_ERROR, ROS_TRACING_DEBUG), MSG, _a12, _a13) \
    WPP_LEVEL_FLAGS_PRE(TRACE_LEVEL_ERROR, ROS_TRACING_DEBUG) \
    WPP_ANNOTATE(RosKmdAdapter_cpp1255) \
    (( \
        WPP_RECORDER_CHECK_INIT WPP_RECORDER_LEVEL_FLAGS_FILTER(TRACE_LEVEL_ERROR, ROS_TRACING_DEBUG) \
        ?   WPP_INVOKE_WPP_DEBUG((MSG, _a12, _a13)), \
            WPP_RECORDER_SF_sDdd( \
                WPP_RECORDER_LEVEL_FLAGS_ARGS(TRACE_LEVEL_ERROR, ROS_TRACING_DEBUG), \
                30, \
                WPP_LOCAL_TraceGuids+0, __FILE__, __LINE__, _a12, _a13), \
            1 \
        :   0 \
    )) \
    WPP_LEVEL_FLAGS_POST(TRACE_LEVEL_ERROR, ROS_TRACING_DEBUG)
#endif // ENABLE_WPP_TRACE_FILTERING_WITH_WPP_RECORDER
#else  // ENABLE_WPP_RECORDER
#define WPP_CALL_RosKmdAdapter_cpp1255(MSG, _a12, _a13) \
    WPP_LOG_ALWAYS(WPP_EX_LEVEL_FLAGS(TRACE_LEVEL_ERROR, ROS_TRACING_DEBUG), MSG, _a12, _a13) \
    WPP_LEVEL_FLAGS_PRE(TRACE_LEVEL_ERROR, ROS_TRACING_DEBUG) \
    WPP_ANNOTATE(RosKmdAdapter_cpp1255) \
    (( \
        WPP_CHECK_INIT WPP_LEVEL_FLAGS_ENABLED(TRACE_LEVEL_ERROR, ROS_TRACING_DEBUG) \
        ?   WPP_INVOKE_WPP_DEBUG((MSG, _a12, _a13)), \
            WPP_SF_sDdd( \
                WPP_LEVEL_FLAGS_LOGGER(TRACE_LEVEL_ERROR, ROS_TRACING_DEBUG) \
                30, \
                WPP_LOCAL_TraceGuids+0, __FILE__, __LINE__, _a12, _a13), \
            1 \
        :   0 \
    )) \
    WPP_LEVEL_FLAGS_POST(TRACE_LEVEL_ERROR, ROS_TRACING_DEBUG)
#endif // ENABLE_WPP_RECORDER

// WPP_CALL_RosKmdAdapter_cpp1273
#ifndef WPP_LEVEL_FLAGS_PRE
#  define WPP_LEVEL_FLAGS_PRE(LEVEL,FLAGS)
#endif
#ifndef WPP_LEVEL_FLAGS_POST
#  define WPP_LEVEL_FLAGS_POST(LEVEL,FLAGS)
#endif
#if ENABLE_WPP_RECORDER
#if ENABLE_WPP_TRACE_FILTERING_WITH_WPP_RECORDER
#define WPP_CALL_RosKmdAdapter_cpp1273(MSG, _a12, _a13) \
    WPP_LOG_ALWAYS(WPP_EX_LEVEL_FLAGS(TRACE_LEVEL_ERROR, ROS_TRACING_DEBUG), MSG, _a12, _a13) \
    WPP_LEVEL_FLAGS_PRE(TRACE_LEVEL_ERROR, ROS_TRACING_DEBUG) \
    do {\
        WPP_ANNOTATE(RosKmdAdapter_cpp1273) 0; \
        BOOLEAN wppEnabled = WPP_CHECK_INIT WPP_LEVEL_FLAGS_ENABLED(TRACE_LEVEL_ERROR, ROS_TRACING_DEBUG); \
        BOOLEAN recorderEnabled = WPP_RECORDER_CHECK_INIT WPP_RECORDER_LEVEL_FLAGS_FILTER(TRACE_LEVEL_ERROR, ROS_TRACING_DEBUG); \
        if (wppEnabled || recorderEnabled) { \
            WPP_INVOKE_WPP_DEBUG((MSG, _a12, _a13)); \
            WPP_RECORDER_AND_TRACE_SF_sDdd( \
                     WPP_LEVEL_FLAGS_LOGGER(TRACE_LEVEL_ERROR, ROS_TRACING_DEBUG) \
                     wppEnabled, recorderEnabled, \
                     WPP_RECORDER_LEVEL_FLAGS_ARGS(TRACE_LEVEL_ERROR, ROS_TRACING_DEBUG), \
                     31, \
                     WPP_LOCAL_TraceGuids+0, __FILE__, __LINE__, _a12, _a13);\
        } \
    } \
    while(0) \
    WPP_LEVEL_FLAGS_POST(TRACE_LEVEL_ERROR, ROS_TRACING_DEBUG)
#else // ENABLE_WPP_TRACE_FILTERING_WITH_WPP_RECORDER
#define WPP_CALL_RosKmdAdapter_cpp1273(MSG, _a12, _a13) \
    WPP_LOG_ALWAYS(WPP_EX_LEVEL_FLAGS(TRACE_LEVEL_ERROR, ROS_TRACING_DEBUG), MSG, _a12, _a13) \
    WPP_LEVEL_FLAGS_PRE(TRACE_LEVEL_ERROR, ROS_TRACING_DEBUG) \
    WPP_ANNOTATE(RosKmdAdapter_cpp1273) \
    (( \
        WPP_RECORDER_CHECK_INIT WPP_RECORDER_LEVEL_FLAGS_FILTER(TRACE_LEVEL_ERROR, ROS_TRACING_DEBUG) \
        ?   WPP_INVOKE_WPP_DEBUG((MSG, _a12, _a13)), \
            WPP_RECORDER_SF_sDdd( \
                WPP_RECORDER_LEVEL_FLAGS_ARGS(TRACE_LEVEL_ERROR, ROS_TRACING_DEBUG), \
                31, \
                WPP_LOCAL_TraceGuids+0, __FILE__, __LINE__, _a12, _a13), \
            1 \
        :   0 \
    )) \
    WPP_LEVEL_FLAGS_POST(TRACE_LEVEL_ERROR, ROS_TRACING_DEBUG)
#endif // ENABLE_WPP_TRACE_FILTERING_WITH_WPP_RECORDER
#else  // ENABLE_WPP_RECORDER
#define WPP_CALL_RosKmdAdapter_cpp1273(MSG, _a12, _a13) \
    WPP_LOG_ALWAYS(WPP_EX_LEVEL_FLAGS(TRACE_LEVEL_ERROR, ROS_TRACING_DEBUG), MSG, _a12, _a13) \
    WPP_LEVEL_FLAGS_PRE(TRACE_LEVEL_ERROR, ROS_TRACING_DEBUG) \
    WPP_ANNOTATE(RosKmdAdapter_cpp1273) \
    (( \
        WPP_CHECK_INIT WPP_LEVEL_FLAGS_ENABLED(TRACE_LEVEL_ERROR, ROS_TRACING_DEBUG) \
        ?   WPP_INVOKE_WPP_DEBUG((MSG, _a12, _a13)), \
            WPP_SF_sDdd( \
                WPP_LEVEL_FLAGS_LOGGER(TRACE_LEVEL_ERROR, ROS_TRACING_DEBUG) \
                31, \
                WPP_LOCAL_TraceGuids+0, __FILE__, __LINE__, _a12, _a13), \
            1 \
        :   0 \
    )) \
    WPP_LEVEL_FLAGS_POST(TRACE_LEVEL_ERROR, ROS_TRACING_DEBUG)
#endif // ENABLE_WPP_RECORDER

// WPP_CALL_RosKmdAdapter_cpp1282
#ifndef WPP_LEVEL_FLAGS_PRE
#  define WPP_LEVEL_FLAGS_PRE(LEVEL,FLAGS)
#endif
#ifndef WPP_LEVEL_FLAGS_POST
#  define WPP_LEVEL_FLAGS_POST(LEVEL,FLAGS)
#endif
#if ENABLE_WPP_RECORDER
#if ENABLE_WPP_TRACE_FILTERING_WITH_WPP_RECORDER
#define WPP_CALL_RosKmdAdapter_cpp1282(MSG, _a12, _a13) \
    WPP_LOG_ALWAYS(WPP_EX_LEVEL_FLAGS(TRACE_LEVEL_ERROR, ROS_TRACING_DEBUG), MSG, _a12, _a13) \
    WPP_LEVEL_FLAGS_PRE(TRACE_LEVEL_ERROR, ROS_TRACING_DEBUG) \
    do {\
        WPP_ANNOTATE(RosKmdAdapter_cpp1282) 0; \
        BOOLEAN wppEnabled = WPP_CHECK_INIT WPP_LEVEL_FLAGS_ENABLED(TRACE_LEVEL_ERROR, ROS_TRACING_DEBUG); \
        BOOLEAN recorderEnabled = WPP_RECORDER_CHECK_INIT WPP_RECORDER_LEVEL_FLAGS_FILTER(TRACE_LEVEL_ERROR, ROS_TRACING_DEBUG); \
        if (wppEnabled || recorderEnabled) { \
            WPP_INVOKE_WPP_DEBUG((MSG, _a12, _a13)); \
            WPP_RECORDER_AND_TRACE_SF_sDdd( \
                     WPP_LEVEL_FLAGS_LOGGER(TRACE_LEVEL_ERROR, ROS_TRACING_DEBUG) \
                     wppEnabled, recorderEnabled, \
                     WPP_RECORDER_LEVEL_FLAGS_ARGS(TRACE_LEVEL_ERROR, ROS_TRACING_DEBUG), \
                     32, \
                     WPP_LOCAL_TraceGuids+0, __FILE__, __LINE__, _a12, _a13);\
        } \
    } \
    while(0) \
    WPP_LEVEL_FLAGS_POST(TRACE_LEVEL_ERROR, ROS_TRACING_DEBUG)
#else // ENABLE_WPP_TRACE_FILTERING_WITH_WPP_RECORDER
#define WPP_CALL_RosKmdAdapter_cpp1282(MSG, _a12, _a13) \
    WPP_LOG_ALWAYS(WPP_EX_LEVEL_FLAGS(TRACE_LEVEL_ERROR, ROS_TRACING_DEBUG), MSG, _a12, _a13) \
    WPP_LEVEL_FLAGS_PRE(TRACE_LEVEL_ERROR, ROS_TRACING_DEBUG) \
    WPP_ANNOTATE(RosKmdAdapter_cpp1282) \
    (( \
        WPP_RECORDER_CHECK_INIT WPP_RECORDER_LEVEL_FLAGS_FILTER(TRACE_LEVEL_ERROR, ROS_TRACING_DEBUG) \
        ?   WPP_INVOKE_WPP_DEBUG((MSG, _a12, _a13)), \
            WPP_RECORDER_SF_sDdd( \
                WPP_RECORDER_LEVEL_FLAGS_ARGS(TRACE_LEVEL_ERROR, ROS_TRACING_DEBUG), \
                32, \
                WPP_LOCAL_TraceGuids+0, __FILE__, __LINE__, _a12, _a13), \
            1 \
        :   0 \
    )) \
    WPP_LEVEL_FLAGS_POST(TRACE_LEVEL_ERROR, ROS_TRACING_DEBUG)
#endif // ENABLE_WPP_TRACE_FILTERING_WITH_WPP_RECORDER
#else  // ENABLE_WPP_RECORDER
#define WPP_CALL_RosKmdAdapter_cpp1282(MSG, _a12, _a13) \
    WPP_LOG_ALWAYS(WPP_EX_LEVEL_FLAGS(TRACE_LEVEL_ERROR, ROS_TRACING_DEBUG), MSG, _a12, _a13) \
    WPP_LEVEL_FLAGS_PRE(TRACE_LEVEL_ERROR, ROS_TRACING_DEBUG) \
    WPP_ANNOTATE(RosKmdAdapter_cpp1282) \
    (( \
        WPP_CHECK_INIT WPP_LEVEL_FLAGS_ENABLED(TRACE_LEVEL_ERROR, ROS_TRACING_DEBUG) \
        ?   WPP_INVOKE_WPP_DEBUG((MSG, _a12, _a13)), \
            WPP_SF_sDdd( \
                WPP_LEVEL_FLAGS_LOGGER(TRACE_LEVEL_ERROR, ROS_TRACING_DEBUG) \
                32, \
                WPP_LOCAL_TraceGuids+0, __FILE__, __LINE__, _a12, _a13), \
            1 \
        :   0 \
    )) \
    WPP_LEVEL_FLAGS_POST(TRACE_LEVEL_ERROR, ROS_TRACING_DEBUG)
#endif // ENABLE_WPP_RECORDER

// WPP_CALL_RosKmdAdapter_cpp1295
#ifndef WPP_LEVEL_FLAGS_PRE
#  define WPP_LEVEL_FLAGS_PRE(LEVEL,FLAGS)
#endif
#ifndef WPP_LEVEL_FLAGS_POST
#  define WPP_LEVEL_FLAGS_POST(LEVEL,FLAGS)
#endif
#if ENABLE_WPP_RECORDER
#if ENABLE_WPP_TRACE_FILTERING_WITH_WPP_RECORDER
#define WPP_CALL_RosKmdAdapter_cpp1295(MSG, _a12, _a13, _a14) \
    WPP_LOG_ALWAYS(WPP_EX_LEVEL_FLAGS(TRACE_LEVEL_ERROR, ROS_TRACING_DEFAULT), MSG, _a12, _a13, _a14) \
    WPP_LEVEL_FLAGS_PRE(TRACE_LEVEL_ERROR, ROS_TRACING_DEFAULT) \
    do {\
        WPP_ANNOTATE(RosKmdAdapter_cpp1295) 0; \
        BOOLEAN wppEnabled = WPP_CHECK_INIT WPP_LEVEL_FLAGS_ENABLED(TRACE_LEVEL_ERROR, ROS_TRACING_DEFAULT); \
        BOOLEAN recorderEnabled = WPP_RECORDER_CHECK_INIT WPP_RECORDER_LEVEL_FLAGS_FILTER(TRACE_LEVEL_ERROR, ROS_TRACING_DEFAULT); \
        if (wppEnabled || recorderEnabled) { \
            WPP_INVOKE_WPP_DEBUG((MSG, _a12, _a13, _a14)); \
            WPP_RECORDER_AND_TRACE_SF_sDddq( \
                     WPP_LEVEL_FLAGS_LOGGER(TRACE_LEVEL_ERROR, ROS_TRACING_DEFAULT) \
                     wppEnabled, recorderEnabled, \
                     WPP_RECORDER_LEVEL_FLAGS_ARGS(TRACE_LEVEL_ERROR, ROS_TRACING_DEFAULT), \
                     33, \
                     WPP_LOCAL_TraceGuids+0, __FILE__, __LINE__, _a12, _a13, _a14);\
        } \
    } \
    while(0) \
    WPP_LEVEL_FLAGS_POST(TRACE_LEVEL_ERROR, ROS_TRACING_DEFAULT)
#else // ENABLE_WPP_TRACE_FILTERING_WITH_WPP_RECORDER
#define WPP_CALL_RosKmdAdapter_cpp1295(MSG, _a12, _a13, _a14) \
    WPP_LOG_ALWAYS(WPP_EX_LEVEL_FLAGS(TRACE_LEVEL_ERROR, ROS_TRACING_DEFAULT), MSG, _a12, _a13, _a14) \
    WPP_LEVEL_FLAGS_PRE(TRACE_LEVEL_ERROR, ROS_TRACING_DEFAULT) \
    WPP_ANNOTATE(RosKmdAdapter_cpp1295) \
    (( \
        WPP_RECORDER_CHECK_INIT WPP_RECORDER_LEVEL_FLAGS_FILTER(TRACE_LEVEL_ERROR, ROS_TRACING_DEFAULT) \
        ?   WPP_INVOKE_WPP_DEBUG((MSG, _a12, _a13, _a14)), \
            WPP_RECORDER_SF_sDddq( \
                WPP_RECORDER_LEVEL_FLAGS_ARGS(TRACE_LEVEL_ERROR, ROS_TRACING_DEFAULT), \
                33, \
                WPP_LOCAL_TraceGuids+0, __FILE__, __LINE__, _a12, _a13, _a14), \
            1 \
        :   0 \
    )) \
    WPP_LEVEL_FLAGS_POST(TRACE_LEVEL_ERROR, ROS_TRACING_DEFAULT)
#endif // ENABLE_WPP_TRACE_FILTERING_WITH_WPP_RECORDER
#else  // ENABLE_WPP_RECORDER
#define WPP_CALL_RosKmdAdapter_cpp1295(MSG, _a12, _a13, _a14) \
    WPP_LOG_ALWAYS(WPP_EX_LEVEL_FLAGS(TRACE_LEVEL_ERROR, ROS_TRACING_DEFAULT), MSG, _a12, _a13, _a14) \
    WPP_LEVEL_FLAGS_PRE(TRACE_LEVEL_ERROR, ROS_TRACING_DEFAULT) \
    WPP_ANNOTATE(RosKmdAdapter_cpp1295) \
    (( \
        WPP_CHECK_INIT WPP_LEVEL_FLAGS_ENABLED(TRACE_LEVEL_ERROR, ROS_TRACING_DEFAULT) \
        ?   WPP_INVOKE_WPP_DEBUG((MSG, _a12, _a13, _a14)), \
            WPP_SF_sDddq( \
                WPP_LEVEL_FLAGS_LOGGER(TRACE_LEVEL_ERROR, ROS_TRACING_DEFAULT) \
                33, \
                WPP_LOCAL_TraceGuids+0, __FILE__, __LINE__, _a12, _a13, _a14), \
            1 \
        :   0 \
    )) \
    WPP_LEVEL_FLAGS_POST(TRACE_LEVEL_ERROR, ROS_TRACING_DEFAULT)
#endif // ENABLE_WPP_RECORDER

// WPP_CALL_RosKmdAdapter_cpp1320
#ifndef WPP_LEVEL_FLAGS_PRE
#  define WPP_LEVEL_FLAGS_PRE(LEVEL,FLAGS)
#endif
#ifndef WPP_LEVEL_FLAGS_POST
#  define WPP_LEVEL_FLAGS_POST(LEVEL,FLAGS)
#endif
#if ENABLE_WPP_RECORDER
#if ENABLE_WPP_TRACE_FILTERING_WITH_WPP_RECORDER
#define WPP_CALL_RosKmdAdapter_cpp1320(MSG, _a12, _a13) \
    WPP_LOG_ALWAYS(WPP_EX_LEVEL_FLAGS(TRACE_LEVEL_WARNING, ROS_TRACING_DEFAULT), MSG, _a12, _a13) \
    WPP_LEVEL_FLAGS_PRE(TRACE_LEVEL_WARNING, ROS_TRACING_DEFAULT) \
    do {\
        WPP_ANNOTATE(RosKmdAdapter_cpp1320) 0; \
        BOOLEAN wppEnabled = WPP_CHECK_INIT WPP_LEVEL_FLAGS_ENABLED(TRACE_LEVEL_WARNING, ROS_TRACING_DEFAULT); \
        BOOLEAN recorderEnabled = WPP_RECORDER_CHECK_INIT WPP_RECORDER_LEVEL_FLAGS_FILTER(TRACE_LEVEL_WARNING, ROS_TRACING_DEFAULT); \
        if (wppEnabled || recorderEnabled) { \
            WPP_INVOKE_WPP_DEBUG((MSG, _a12, _a13)); \
            WPP_RECORDER_AND_TRACE_SF_sDdq( \
                     WPP_LEVEL_FLAGS_LOGGER(TRACE_LEVEL_WARNING, ROS_TRACING_DEFAULT) \
                     wppEnabled, recorderEnabled, \
                     WPP_RECORDER_LEVEL_FLAGS_ARGS(TRACE_LEVEL_WARNING, ROS_TRACING_DEFAULT), \
                     34, \
                     WPP_LOCAL_TraceGuids+0, __FILE__, __LINE__, _a12, _a13);\
        } \
    } \
    while(0) \
    WPP_LEVEL_FLAGS_POST(TRACE_LEVEL_WARNING, ROS_TRACING_DEFAULT)
#else // ENABLE_WPP_TRACE_FILTERING_WITH_WPP_RECORDER
#define WPP_CALL_RosKmdAdapter_cpp1320(MSG, _a12, _a13) \
    WPP_LOG_ALWAYS(WPP_EX_LEVEL_FLAGS(TRACE_LEVEL_WARNING, ROS_TRACING_DEFAULT), MSG, _a12, _a13) \
    WPP_LEVEL_FLAGS_PRE(TRACE_LEVEL_WARNING, ROS_TRACING_DEFAULT) \
    WPP_ANNOTATE(RosKmdAdapter_cpp1320) \
    (( \
        WPP_RECORDER_CHECK_INIT WPP_RECORDER_LEVEL_FLAGS_FILTER(TRACE_LEVEL_WARNING, ROS_TRACING_DEFAULT) \
        ?   WPP_INVOKE_WPP_DEBUG((MSG, _a12, _a13)), \
            WPP_RECORDER_SF_sDdq( \
                WPP_RECORDER_LEVEL_FLAGS_ARGS(TRACE_LEVEL_WARNING, ROS_TRACING_DEFAULT), \
                34, \
                WPP_LOCAL_TraceGuids+0, __FILE__, __LINE__, _a12, _a13), \
            1 \
        :   0 \
    )) \
    WPP_LEVEL_FLAGS_POST(TRACE_LEVEL_WARNING, ROS_TRACING_DEFAULT)
#endif // ENABLE_WPP_TRACE_FILTERING_WITH_WPP_RECORDER
#else  // ENABLE_WPP_RECORDER
#define WPP_CALL_RosKmdAdapter_cpp1320(MSG, _a12, _a13) \
    WPP_LOG_ALWAYS(WPP_EX_LEVEL_FLAGS(TRACE_LEVEL_WARNING, ROS_TRACING_DEFAULT), MSG, _a12, _a13) \
    WPP_LEVEL_FLAGS_PRE(TRACE_LEVEL_WARNING, ROS_TRACING_DEFAULT) \
    WPP_ANNOTATE(RosKmdAdapter_cpp1320) \
    (( \
        WPP_CHECK_INIT WPP_LEVEL_FLAGS_ENABLED(TRACE_LEVEL_WARNING, ROS_TRACING_DEFAULT) \
        ?   WPP_INVOKE_WPP_DEBUG((MSG, _a12, _a13)), \
            WPP_SF_sDdq( \
                WPP_LEVEL_FLAGS_LOGGER(TRACE_LEVEL_WARNING, ROS_TRACING_DEFAULT) \
                34, \
                WPP_LOCAL_TraceGuids+0, __FILE__, __LINE__, _a12, _a13), \
            1 \
        :   0 \
    )) \
    WPP_LEVEL_FLAGS_POST(TRACE_LEVEL_WARNING, ROS_TRACING_DEFAULT)
#endif // ENABLE_WPP_RECORDER

// WPP_CALL_RosKmdAdapter_cpp1374
#ifndef WPP_LEVEL_FLAGS_PRE
#  define WPP_LEVEL_FLAGS_PRE(LEVEL,FLAGS)
#endif
#ifndef WPP_LEVEL_FLAGS_POST
#  define WPP_LEVEL_FLAGS_POST(LEVEL,FLAGS)
#endif
#if ENABLE_WPP_RECORDER
#if ENABLE_WPP_TRACE_FILTERING_WITH_WPP_RECORDER
#define WPP_CALL_RosKmdAdapter_cpp1374(MSG) \
    WPP_LOG_ALWAYS(WPP_EX_LEVEL_FLAGS(TRACE_LEVEL_ERROR, ROS_TRACING_DEBUG), MSG) \
    WPP_LEVEL_FLAGS_PRE(TRACE_LEVEL_ERROR, ROS_TRACING_DEBUG) \
    do {\
        WPP_ANNOTATE(RosKmdAdapter_cpp1374) 0; \
        BOOLEAN wppEnabled = WPP_CHECK_INIT WPP_LEVEL_FLAGS_ENABLED(TRACE_LEVEL_ERROR, ROS_TRACING_DEBUG); \
        BOOLEAN recorderEnabled = WPP_RECORDER_CHECK_INIT WPP_RECORDER_LEVEL_FLAGS_FILTER(TRACE_LEVEL_ERROR, ROS_TRACING_DEBUG); \
        if (wppEnabled || recorderEnabled) { \
            WPP_INVOKE_WPP_DEBUG((MSG)); \
            WPP_RECORDER_AND_TRACE_SF_sD( \
                     WPP_LEVEL_FLAGS_LOGGER(TRACE_LEVEL_ERROR, ROS_TRACING_DEBUG) \
                     wppEnabled, recorderEnabled, \
                     WPP_RECORDER_LEVEL_FLAGS_ARGS(TRACE_LEVEL_ERROR, ROS_TRACING_DEBUG), \
                     35, \
                     WPP_LOCAL_TraceGuids+0, __FILE__, __LINE__);\
        } \
    } \
    while(0) \
    WPP_LEVEL_FLAGS_POST(TRACE_LEVEL_ERROR, ROS_TRACING_DEBUG)
#else // ENABLE_WPP_TRACE_FILTERING_WITH_WPP_RECORDER
#define WPP_CALL_RosKmdAdapter_cpp1374(MSG) \
    WPP_LOG_ALWAYS(WPP_EX_LEVEL_FLAGS(TRACE_LEVEL_ERROR, ROS_TRACING_DEBUG), MSG) \
    WPP_LEVEL_FLAGS_PRE(TRACE_LEVEL_ERROR, ROS_TRACING_DEBUG) \
    WPP_ANNOTATE(RosKmdAdapter_cpp1374) \
    (( \
        WPP_RECORDER_CHECK_INIT WPP_RECORDER_LEVEL_FLAGS_FILTER(TRACE_LEVEL_ERROR, ROS_TRACING_DEBUG) \
        ?   WPP_INVOKE_WPP_DEBUG((MSG)), \
            WPP_RECORDER_SF_sD( \
                WPP_RECORDER_LEVEL_FLAGS_ARGS(TRACE_LEVEL_ERROR, ROS_TRACING_DEBUG), \
                35, \
                WPP_LOCAL_TraceGuids+0, __FILE__, __LINE__), \
            1 \
        :   0 \
    )) \
    WPP_LEVEL_FLAGS_POST(TRACE_LEVEL_ERROR, ROS_TRACING_DEBUG)
#endif // ENABLE_WPP_TRACE_FILTERING_WITH_WPP_RECORDER
#else  // ENABLE_WPP_RECORDER
#define WPP_CALL_RosKmdAdapter_cpp1374(MSG) \
    WPP_LOG_ALWAYS(WPP_EX_LEVEL_FLAGS(TRACE_LEVEL_ERROR, ROS_TRACING_DEBUG), MSG) \
    WPP_LEVEL_FLAGS_PRE(TRACE_LEVEL_ERROR, ROS_TRACING_DEBUG) \
    WPP_ANNOTATE(RosKmdAdapter_cpp1374) \
    (( \
        WPP_CHECK_INIT WPP_LEVEL_FLAGS_ENABLED(TRACE_LEVEL_ERROR, ROS_TRACING_DEBUG) \
        ?   WPP_INVOKE_WPP_DEBUG((MSG)), \
            WPP_SF_sD( \
                WPP_LEVEL_FLAGS_LOGGER(TRACE_LEVEL_ERROR, ROS_TRACING_DEBUG) \
                35, \
                WPP_LOCAL_TraceGuids+0, __FILE__, __LINE__), \
            1 \
        :   0 \
    )) \
    WPP_LEVEL_FLAGS_POST(TRACE_LEVEL_ERROR, ROS_TRACING_DEBUG)
#endif // ENABLE_WPP_RECORDER

// WPP_CALL_RosKmdAdapter_cpp1382
#ifndef WPP_LEVEL_FLAGS_PRE
#  define WPP_LEVEL_FLAGS_PRE(LEVEL,FLAGS)
#endif
#ifndef WPP_LEVEL_FLAGS_POST
#  define WPP_LEVEL_FLAGS_POST(LEVEL,FLAGS)
#endif
#if ENABLE_WPP_RECORDER
#if ENABLE_WPP_TRACE_FILTERING_WITH_WPP_RECORDER
#define WPP_CALL_RosKmdAdapter_cpp1382(MSG) \
    WPP_LOG_ALWAYS(WPP_EX_LEVEL_FLAGS(TRACE_LEVEL_WARNING, ROS_TRACING_DEFAULT), MSG) \
    WPP_LEVEL_FLAGS_PRE(TRACE_LEVEL_WARNING, ROS_TRACING_DEFAULT) \
    do {\
        WPP_ANNOTATE(RosKmdAdapter_cpp1382) 0; \
        BOOLEAN wppEnabled = WPP_CHECK_INIT WPP_LEVEL_FLAGS_ENABLED(TRACE_LEVEL_WARNING, ROS_TRACING_DEFAULT); \
        BOOLEAN recorderEnabled = WPP_RECORDER_CHECK_INIT WPP_RECORDER_LEVEL_FLAGS_FILTER(TRACE_LEVEL_WARNING, ROS_TRACING_DEFAULT); \
        if (wppEnabled || recorderEnabled) { \
            WPP_INVOKE_WPP_DEBUG((MSG)); \
            WPP_RECORDER_AND_TRACE_SF_sD( \
                     WPP_LEVEL_FLAGS_LOGGER(TRACE_LEVEL_WARNING, ROS_TRACING_DEFAULT) \
                     wppEnabled, recorderEnabled, \
                     WPP_RECORDER_LEVEL_FLAGS_ARGS(TRACE_LEVEL_WARNING, ROS_TRACING_DEFAULT), \
                     36, \
                     WPP_LOCAL_TraceGuids+0, __FILE__, __LINE__);\
        } \
    } \
    while(0) \
    WPP_LEVEL_FLAGS_POST(TRACE_LEVEL_WARNING, ROS_TRACING_DEFAULT)
#else // ENABLE_WPP_TRACE_FILTERING_WITH_WPP_RECORDER
#define WPP_CALL_RosKmdAdapter_cpp1382(MSG) \
    WPP_LOG_ALWAYS(WPP_EX_LEVEL_FLAGS(TRACE_LEVEL_WARNING, ROS_TRACING_DEFAULT), MSG) \
    WPP_LEVEL_FLAGS_PRE(TRACE_LEVEL_WARNING, ROS_TRACING_DEFAULT) \
    WPP_ANNOTATE(RosKmdAdapter_cpp1382) \
    (( \
        WPP_RECORDER_CHECK_INIT WPP_RECORDER_LEVEL_FLAGS_FILTER(TRACE_LEVEL_WARNING, ROS_TRACING_DEFAULT) \
        ?   WPP_INVOKE_WPP_DEBUG((MSG)), \
            WPP_RECORDER_SF_sD( \
                WPP_RECORDER_LEVEL_FLAGS_ARGS(TRACE_LEVEL_WARNING, ROS_TRACING_DEFAULT), \
                36, \
                WPP_LOCAL_TraceGuids+0, __FILE__, __LINE__), \
            1 \
        :   0 \
    )) \
    WPP_LEVEL_FLAGS_POST(TRACE_LEVEL_WARNING, ROS_TRACING_DEFAULT)
#endif // ENABLE_WPP_TRACE_FILTERING_WITH_WPP_RECORDER
#else  // ENABLE_WPP_RECORDER
#define WPP_CALL_RosKmdAdapter_cpp1382(MSG) \
    WPP_LOG_ALWAYS(WPP_EX_LEVEL_FLAGS(TRACE_LEVEL_WARNING, ROS_TRACING_DEFAULT), MSG) \
    WPP_LEVEL_FLAGS_PRE(TRACE_LEVEL_WARNING, ROS_TRACING_DEFAULT) \
    WPP_ANNOTATE(RosKmdAdapter_cpp1382) \
    (( \
        WPP_CHECK_INIT WPP_LEVEL_FLAGS_ENABLED(TRACE_LEVEL_WARNING, ROS_TRACING_DEFAULT) \
        ?   WPP_INVOKE_WPP_DEBUG((MSG)), \
            WPP_SF_sD( \
                WPP_LEVEL_FLAGS_LOGGER(TRACE_LEVEL_WARNING, ROS_TRACING_DEFAULT) \
                36, \
                WPP_LOCAL_TraceGuids+0, __FILE__, __LINE__), \
            1 \
        :   0 \
    )) \
    WPP_LEVEL_FLAGS_POST(TRACE_LEVEL_WARNING, ROS_TRACING_DEFAULT)
#endif // ENABLE_WPP_RECORDER

// WPP_CALL_RosKmdAdapter_cpp1389
#ifndef WPP_LEVEL_FLAGS_PRE
#  define WPP_LEVEL_FLAGS_PRE(LEVEL,FLAGS)
#endif
#ifndef WPP_LEVEL_FLAGS_POST
#  define WPP_LEVEL_FLAGS_POST(LEVEL,FLAGS)
#endif
#if ENABLE_WPP_RECORDER
#if ENABLE_WPP_TRACE_FILTERING_WITH_WPP_RECORDER
#define WPP_CALL_RosKmdAdapter_cpp1389(MSG) \
    WPP_LOG_ALWAYS(WPP_EX_LEVEL_FLAGS(TRACE_LEVEL_ERROR, ROS_TRACING_DEBUG), MSG) \
    WPP_LEVEL_FLAGS_PRE(TRACE_LEVEL_ERROR, ROS_TRACING_DEBUG) \
    do {\
        WPP_ANNOTATE(RosKmdAdapter_cpp1389) 0; \
        BOOLEAN wppEnabled = WPP_CHECK_INIT WPP_LEVEL_FLAGS_ENABLED(TRACE_LEVEL_ERROR, ROS_TRACING_DEBUG); \
        BOOLEAN recorderEnabled = WPP_RECORDER_CHECK_INIT WPP_RECORDER_LEVEL_FLAGS_FILTER(TRACE_LEVEL_ERROR, ROS_TRACING_DEBUG); \
        if (wppEnabled || recorderEnabled) { \
            WPP_INVOKE_WPP_DEBUG((MSG)); \
            WPP_RECORDER_AND_TRACE_SF_sD( \
                     WPP_LEVEL_FLAGS_LOGGER(TRACE_LEVEL_ERROR, ROS_TRACING_DEBUG) \
                     wppEnabled, recorderEnabled, \
                     WPP_RECORDER_LEVEL_FLAGS_ARGS(TRACE_LEVEL_ERROR, ROS_TRACING_DEBUG), \
                     37, \
                     WPP_LOCAL_TraceGuids+0, __FILE__, __LINE__);\
        } \
    } \
    while(0) \
    WPP_LEVEL_FLAGS_POST(TRACE_LEVEL_ERROR, ROS_TRACING_DEBUG)
#else // ENABLE_WPP_TRACE_FILTERING_WITH_WPP_RECORDER
#define WPP_CALL_RosKmdAdapter_cpp1389(MSG) \
    WPP_LOG_ALWAYS(WPP_EX_LEVEL_FLAGS(TRACE_LEVEL_ERROR, ROS_TRACING_DEBUG), MSG) \
    WPP_LEVEL_FLAGS_PRE(TRACE_LEVEL_ERROR, ROS_TRACING_DEBUG) \
    WPP_ANNOTATE(RosKmdAdapter_cpp1389) \
    (( \
        WPP_RECORDER_CHECK_INIT WPP_RECORDER_LEVEL_FLAGS_FILTER(TRACE_LEVEL_ERROR, ROS_TRACING_DEBUG) \
        ?   WPP_INVOKE_WPP_DEBUG((MSG)), \
            WPP_RECORDER_SF_sD( \
                WPP_RECORDER_LEVEL_FLAGS_ARGS(TRACE_LEVEL_ERROR, ROS_TRACING_DEBUG), \
                37, \
                WPP_LOCAL_TraceGuids+0, __FILE__, __LINE__), \
            1 \
        :   0 \
    )) \
    WPP_LEVEL_FLAGS_POST(TRACE_LEVEL_ERROR, ROS_TRACING_DEBUG)
#endif // ENABLE_WPP_TRACE_FILTERING_WITH_WPP_RECORDER
#else  // ENABLE_WPP_RECORDER
#define WPP_CALL_RosKmdAdapter_cpp1389(MSG) \
    WPP_LOG_ALWAYS(WPP_EX_LEVEL_FLAGS(TRACE_LEVEL_ERROR, ROS_TRACING_DEBUG), MSG) \
    WPP_LEVEL_FLAGS_PRE(TRACE_LEVEL_ERROR, ROS_TRACING_DEBUG) \
    WPP_ANNOTATE(RosKmdAdapter_cpp1389) \
    (( \
        WPP_CHECK_INIT WPP_LEVEL_FLAGS_ENABLED(TRACE_LEVEL_ERROR, ROS_TRACING_DEBUG) \
        ?   WPP_INVOKE_WPP_DEBUG((MSG)), \
            WPP_SF_sD( \
                WPP_LEVEL_FLAGS_LOGGER(TRACE_LEVEL_ERROR, ROS_TRACING_DEBUG) \
                37, \
                WPP_LOCAL_TraceGuids+0, __FILE__, __LINE__), \
            1 \
        :   0 \
    )) \
    WPP_LEVEL_FLAGS_POST(TRACE_LEVEL_ERROR, ROS_TRACING_DEBUG)
#endif // ENABLE_WPP_RECORDER

// WPP_CALL_RosKmdAdapter_cpp1397
#ifndef WPP_LEVEL_FLAGS_PRE
#  define WPP_LEVEL_FLAGS_PRE(LEVEL,FLAGS)
#endif
#ifndef WPP_LEVEL_FLAGS_POST
#  define WPP_LEVEL_FLAGS_POST(LEVEL,FLAGS)
#endif
#if ENABLE_WPP_RECORDER
#if ENABLE_WPP_TRACE_FILTERING_WITH_WPP_RECORDER
#define WPP_CALL_RosKmdAdapter_cpp1397(MSG) \
    WPP_LOG_ALWAYS(WPP_EX_LEVEL_FLAGS(TRACE_LEVEL_ERROR, ROS_TRACING_DEBUG), MSG) \
    WPP_LEVEL_FLAGS_PRE(TRACE_LEVEL_ERROR, ROS_TRACING_DEBUG) \
    do {\
        WPP_ANNOTATE(RosKmdAdapter_cpp1397) 0; \
        BOOLEAN wppEnabled = WPP_CHECK_INIT WPP_LEVEL_FLAGS_ENABLED(TRACE_LEVEL_ERROR, ROS_TRACING_DEBUG); \
        BOOLEAN recorderEnabled = WPP_RECORDER_CHECK_INIT WPP_RECORDER_LEVEL_FLAGS_FILTER(TRACE_LEVEL_ERROR, ROS_TRACING_DEBUG); \
        if (wppEnabled || recorderEnabled) { \
            WPP_INVOKE_WPP_DEBUG((MSG)); \
            WPP_RECORDER_AND_TRACE_SF_sD( \
                     WPP_LEVEL_FLAGS_LOGGER(TRACE_LEVEL_ERROR, ROS_TRACING_DEBUG) \
                     wppEnabled, recorderEnabled, \
                     WPP_RECORDER_LEVEL_FLAGS_ARGS(TRACE_LEVEL_ERROR, ROS_TRACING_DEBUG), \
                     38, \
                     WPP_LOCAL_TraceGuids+0, __FILE__, __LINE__);\
        } \
    } \
    while(0) \
    WPP_LEVEL_FLAGS_POST(TRACE_LEVEL_ERROR, ROS_TRACING_DEBUG)
#else // ENABLE_WPP_TRACE_FILTERING_WITH_WPP_RECORDER
#define WPP_CALL_RosKmdAdapter_cpp1397(MSG) \
    WPP_LOG_ALWAYS(WPP_EX_LEVEL_FLAGS(TRACE_LEVEL_ERROR, ROS_TRACING_DEBUG), MSG) \
    WPP_LEVEL_FLAGS_PRE(TRACE_LEVEL_ERROR, ROS_TRACING_DEBUG) \
    WPP_ANNOTATE(RosKmdAdapter_cpp1397) \
    (( \
        WPP_RECORDER_CHECK_INIT WPP_RECORDER_LEVEL_FLAGS_FILTER(TRACE_LEVEL_ERROR, ROS_TRACING_DEBUG) \
        ?   WPP_INVOKE_WPP_DEBUG((MSG)), \
            WPP_RECORDER_SF_sD( \
                WPP_RECORDER_LEVEL_FLAGS_ARGS(TRACE_LEVEL_ERROR, ROS_TRACING_DEBUG), \
                38, \
                WPP_LOCAL_TraceGuids+0, __FILE__, __LINE__), \
            1 \
        :   0 \
    )) \
    WPP_LEVEL_FLAGS_POST(TRACE_LEVEL_ERROR, ROS_TRACING_DEBUG)
#endif // ENABLE_WPP_TRACE_FILTERING_WITH_WPP_RECORDER
#else  // ENABLE_WPP_RECORDER
#define WPP_CALL_RosKmdAdapter_cpp1397(MSG) \
    WPP_LOG_ALWAYS(WPP_EX_LEVEL_FLAGS(TRACE_LEVEL_ERROR, ROS_TRACING_DEBUG), MSG) \
    WPP_LEVEL_FLAGS_PRE(TRACE_LEVEL_ERROR, ROS_TRACING_DEBUG) \
    WPP_ANNOTATE(RosKmdAdapter_cpp1397) \
    (( \
        WPP_CHECK_INIT WPP_LEVEL_FLAGS_ENABLED(TRACE_LEVEL_ERROR, ROS_TRACING_DEBUG) \
        ?   WPP_INVOKE_WPP_DEBUG((MSG)), \
            WPP_SF_sD( \
                WPP_LEVEL_FLAGS_LOGGER(TRACE_LEVEL_ERROR, ROS_TRACING_DEBUG) \
                38, \
                WPP_LOCAL_TraceGuids+0, __FILE__, __LINE__), \
            1 \
        :   0 \
    )) \
    WPP_LEVEL_FLAGS_POST(TRACE_LEVEL_ERROR, ROS_TRACING_DEBUG)
#endif // ENABLE_WPP_RECORDER

// WPP_CALL_RosKmdAdapter_cpp1405
#ifndef WPP_LEVEL_FLAGS_PRE
#  define WPP_LEVEL_FLAGS_PRE(LEVEL,FLAGS)
#endif
#ifndef WPP_LEVEL_FLAGS_POST
#  define WPP_LEVEL_FLAGS_POST(LEVEL,FLAGS)
#endif
#if ENABLE_WPP_RECORDER
#if ENABLE_WPP_TRACE_FILTERING_WITH_WPP_RECORDER
#define WPP_CALL_RosKmdAdapter_cpp1405(MSG) \
    WPP_LOG_ALWAYS(WPP_EX_LEVEL_FLAGS(TRACE_LEVEL_WARNING, ROS_TRACING_DEFAULT), MSG) \
    WPP_LEVEL_FLAGS_PRE(TRACE_LEVEL_WARNING, ROS_TRACING_DEFAULT) \
    do {\
        WPP_ANNOTATE(RosKmdAdapter_cpp1405) 0; \
        BOOLEAN wppEnabled = WPP_CHECK_INIT WPP_LEVEL_FLAGS_ENABLED(TRACE_LEVEL_WARNING, ROS_TRACING_DEFAULT); \
        BOOLEAN recorderEnabled = WPP_RECORDER_CHECK_INIT WPP_RECORDER_LEVEL_FLAGS_FILTER(TRACE_LEVEL_WARNING, ROS_TRACING_DEFAULT); \
        if (wppEnabled || recorderEnabled) { \
            WPP_INVOKE_WPP_DEBUG((MSG)); \
            WPP_RECORDER_AND_TRACE_SF_sD( \
                     WPP_LEVEL_FLAGS_LOGGER(TRACE_LEVEL_WARNING, ROS_TRACING_DEFAULT) \
                     wppEnabled, recorderEnabled, \
                     WPP_RECORDER_LEVEL_FLAGS_ARGS(TRACE_LEVEL_WARNING, ROS_TRACING_DEFAULT), \
                     39, \
                     WPP_LOCAL_TraceGuids+0, __FILE__, __LINE__);\
        } \
    } \
    while(0) \
    WPP_LEVEL_FLAGS_POST(TRACE_LEVEL_WARNING, ROS_TRACING_DEFAULT)
#else // ENABLE_WPP_TRACE_FILTERING_WITH_WPP_RECORDER
#define WPP_CALL_RosKmdAdapter_cpp1405(MSG) \
    WPP_LOG_ALWAYS(WPP_EX_LEVEL_FLAGS(TRACE_LEVEL_WARNING, ROS_TRACING_DEFAULT), MSG) \
    WPP_LEVEL_FLAGS_PRE(TRACE_LEVEL_WARNING, ROS_TRACING_DEFAULT) \
    WPP_ANNOTATE(RosKmdAdapter_cpp1405) \
    (( \
        WPP_RECORDER_CHECK_INIT WPP_RECORDER_LEVEL_FLAGS_FILTER(TRACE_LEVEL_WARNING, ROS_TRACING_DEFAULT) \
        ?   WPP_INVOKE_WPP_DEBUG((MSG)), \
            WPP_RECORDER_SF_sD( \
                WPP_RECORDER_LEVEL_FLAGS_ARGS(TRACE_LEVEL_WARNING, ROS_TRACING_DEFAULT), \
                39, \
                WPP_LOCAL_TraceGuids+0, __FILE__, __LINE__), \
            1 \
        :   0 \
    )) \
    WPP_LEVEL_FLAGS_POST(TRACE_LEVEL_WARNING, ROS_TRACING_DEFAULT)
#endif // ENABLE_WPP_TRACE_FILTERING_WITH_WPP_RECORDER
#else  // ENABLE_WPP_RECORDER
#define WPP_CALL_RosKmdAdapter_cpp1405(MSG) \
    WPP_LOG_ALWAYS(WPP_EX_LEVEL_FLAGS(TRACE_LEVEL_WARNING, ROS_TRACING_DEFAULT), MSG) \
    WPP_LEVEL_FLAGS_PRE(TRACE_LEVEL_WARNING, ROS_TRACING_DEFAULT) \
    WPP_ANNOTATE(RosKmdAdapter_cpp1405) \
    (( \
        WPP_CHECK_INIT WPP_LEVEL_FLAGS_ENABLED(TRACE_LEVEL_WARNING, ROS_TRACING_DEFAULT) \
        ?   WPP_INVOKE_WPP_DEBUG((MSG)), \
            WPP_SF_sD( \
                WPP_LEVEL_FLAGS_LOGGER(TRACE_LEVEL_WARNING, ROS_TRACING_DEFAULT) \
                39, \
                WPP_LOCAL_TraceGuids+0, __FILE__, __LINE__), \
            1 \
        :   0 \
    )) \
    WPP_LEVEL_FLAGS_POST(TRACE_LEVEL_WARNING, ROS_TRACING_DEFAULT)
#endif // ENABLE_WPP_RECORDER

// WPP_CALL_RosKmdAdapter_cpp1418
#ifndef WPP_LEVEL_FLAGS_PRE
#  define WPP_LEVEL_FLAGS_PRE(LEVEL,FLAGS)
#endif
#ifndef WPP_LEVEL_FLAGS_POST
#  define WPP_LEVEL_FLAGS_POST(LEVEL,FLAGS)
#endif
#if ENABLE_WPP_RECORDER
#if ENABLE_WPP_TRACE_FILTERING_WITH_WPP_RECORDER
#define WPP_CALL_RosKmdAdapter_cpp1418(MSG) \
    WPP_LOG_ALWAYS(WPP_EX_LEVEL_FLAGS(TRACE_LEVEL_WARNING, ROS_TRACING_DEFAULT), MSG) \
    WPP_LEVEL_FLAGS_PRE(TRACE_LEVEL_WARNING, ROS_TRACING_DEFAULT) \
    do {\
        WPP_ANNOTATE(RosKmdAdapter_cpp1418) 0; \
        BOOLEAN wppEnabled = WPP_CHECK_INIT WPP_LEVEL_FLAGS_ENABLED(TRACE_LEVEL_WARNING, ROS_TRACING_DEFAULT); \
        BOOLEAN recorderEnabled = WPP_RECORDER_CHECK_INIT WPP_RECORDER_LEVEL_FLAGS_FILTER(TRACE_LEVEL_WARNING, ROS_TRACING_DEFAULT); \
        if (wppEnabled || recorderEnabled) { \
            WPP_INVOKE_WPP_DEBUG((MSG)); \
            WPP_RECORDER_AND_TRACE_SF_sD( \
                     WPP_LEVEL_FLAGS_LOGGER(TRACE_LEVEL_WARNING, ROS_TRACING_DEFAULT) \
                     wppEnabled, recorderEnabled, \
                     WPP_RECORDER_LEVEL_FLAGS_ARGS(TRACE_LEVEL_WARNING, ROS_TRACING_DEFAULT), \
                     40, \
                     WPP_LOCAL_TraceGuids+0, __FILE__, __LINE__);\
        } \
    } \
    while(0) \
    WPP_LEVEL_FLAGS_POST(TRACE_LEVEL_WARNING, ROS_TRACING_DEFAULT)
#else // ENABLE_WPP_TRACE_FILTERING_WITH_WPP_RECORDER
#define WPP_CALL_RosKmdAdapter_cpp1418(MSG) \
    WPP_LOG_ALWAYS(WPP_EX_LEVEL_FLAGS(TRACE_LEVEL_WARNING, ROS_TRACING_DEFAULT), MSG) \
    WPP_LEVEL_FLAGS_PRE(TRACE_LEVEL_WARNING, ROS_TRACING_DEFAULT) \
    WPP_ANNOTATE(RosKmdAdapter_cpp1418) \
    (( \
        WPP_RECORDER_CHECK_INIT WPP_RECORDER_LEVEL_FLAGS_FILTER(TRACE_LEVEL_WARNING, ROS_TRACING_DEFAULT) \
        ?   WPP_INVOKE_WPP_DEBUG((MSG)), \
            WPP_RECORDER_SF_sD( \
                WPP_RECORDER_LEVEL_FLAGS_ARGS(TRACE_LEVEL_WARNING, ROS_TRACING_DEFAULT), \
                40, \
                WPP_LOCAL_TraceGuids+0, __FILE__, __LINE__), \
            1 \
        :   0 \
    )) \
    WPP_LEVEL_FLAGS_POST(TRACE_LEVEL_WARNING, ROS_TRACING_DEFAULT)
#endif // ENABLE_WPP_TRACE_FILTERING_WITH_WPP_RECORDER
#else  // ENABLE_WPP_RECORDER
#define WPP_CALL_RosKmdAdapter_cpp1418(MSG) \
    WPP_LOG_ALWAYS(WPP_EX_LEVEL_FLAGS(TRACE_LEVEL_WARNING, ROS_TRACING_DEFAULT), MSG) \
    WPP_LEVEL_FLAGS_PRE(TRACE_LEVEL_WARNING, ROS_TRACING_DEFAULT) \
    WPP_ANNOTATE(RosKmdAdapter_cpp1418) \
    (( \
        WPP_CHECK_INIT WPP_LEVEL_FLAGS_ENABLED(TRACE_LEVEL_WARNING, ROS_TRACING_DEFAULT) \
        ?   WPP_INVOKE_WPP_DEBUG((MSG)), \
            WPP_SF_sD( \
                WPP_LEVEL_FLAGS_LOGGER(TRACE_LEVEL_WARNING, ROS_TRACING_DEFAULT) \
                40, \
                WPP_LOCAL_TraceGuids+0, __FILE__, __LINE__), \
            1 \
        :   0 \
    )) \
    WPP_LEVEL_FLAGS_POST(TRACE_LEVEL_WARNING, ROS_TRACING_DEFAULT)
#endif // ENABLE_WPP_RECORDER

// WPP_CALL_RosKmdAdapter_cpp1426
#ifndef WPP_LEVEL_FLAGS_PRE
#  define WPP_LEVEL_FLAGS_PRE(LEVEL,FLAGS)
#endif
#ifndef WPP_LEVEL_FLAGS_POST
#  define WPP_LEVEL_FLAGS_POST(LEVEL,FLAGS)
#endif
#if ENABLE_WPP_RECORDER
#if ENABLE_WPP_TRACE_FILTERING_WITH_WPP_RECORDER
#define WPP_CALL_RosKmdAdapter_cpp1426(MSG) \
    WPP_LOG_ALWAYS(WPP_EX_LEVEL_FLAGS(TRACE_LEVEL_WARNING, ROS_TRACING_DEFAULT), MSG) \
    WPP_LEVEL_FLAGS_PRE(TRACE_LEVEL_WARNING, ROS_TRACING_DEFAULT) \
    do {\
        WPP_ANNOTATE(RosKmdAdapter_cpp1426) 0; \
        BOOLEAN wppEnabled = WPP_CHECK_INIT WPP_LEVEL_FLAGS_ENABLED(TRACE_LEVEL_WARNING, ROS_TRACING_DEFAULT); \
        BOOLEAN recorderEnabled = WPP_RECORDER_CHECK_INIT WPP_RECORDER_LEVEL_FLAGS_FILTER(TRACE_LEVEL_WARNING, ROS_TRACING_DEFAULT); \
        if (wppEnabled || recorderEnabled) { \
            WPP_INVOKE_WPP_DEBUG((MSG)); \
            WPP_RECORDER_AND_TRACE_SF_sD( \
                     WPP_LEVEL_FLAGS_LOGGER(TRACE_LEVEL_WARNING, ROS_TRACING_DEFAULT) \
                     wppEnabled, recorderEnabled, \
                     WPP_RECORDER_LEVEL_FLAGS_ARGS(TRACE_LEVEL_WARNING, ROS_TRACING_DEFAULT), \
                     41, \
                     WPP_LOCAL_TraceGuids+0, __FILE__, __LINE__);\
        } \
    } \
    while(0) \
    WPP_LEVEL_FLAGS_POST(TRACE_LEVEL_WARNING, ROS_TRACING_DEFAULT)
#else // ENABLE_WPP_TRACE_FILTERING_WITH_WPP_RECORDER
#define WPP_CALL_RosKmdAdapter_cpp1426(MSG) \
    WPP_LOG_ALWAYS(WPP_EX_LEVEL_FLAGS(TRACE_LEVEL_WARNING, ROS_TRACING_DEFAULT), MSG) \
    WPP_LEVEL_FLAGS_PRE(TRACE_LEVEL_WARNING, ROS_TRACING_DEFAULT) \
    WPP_ANNOTATE(RosKmdAdapter_cpp1426) \
    (( \
        WPP_RECORDER_CHECK_INIT WPP_RECORDER_LEVEL_FLAGS_FILTER(TRACE_LEVEL_WARNING, ROS_TRACING_DEFAULT) \
        ?   WPP_INVOKE_WPP_DEBUG((MSG)), \
            WPP_RECORDER_SF_sD( \
                WPP_RECORDER_LEVEL_FLAGS_ARGS(TRACE_LEVEL_WARNING, ROS_TRACING_DEFAULT), \
                41, \
                WPP_LOCAL_TraceGuids+0, __FILE__, __LINE__), \
            1 \
        :   0 \
    )) \
    WPP_LEVEL_FLAGS_POST(TRACE_LEVEL_WARNING, ROS_TRACING_DEFAULT)
#endif // ENABLE_WPP_TRACE_FILTERING_WITH_WPP_RECORDER
#else  // ENABLE_WPP_RECORDER
#define WPP_CALL_RosKmdAdapter_cpp1426(MSG) \
    WPP_LOG_ALWAYS(WPP_EX_LEVEL_FLAGS(TRACE_LEVEL_WARNING, ROS_TRACING_DEFAULT), MSG) \
    WPP_LEVEL_FLAGS_PRE(TRACE_LEVEL_WARNING, ROS_TRACING_DEFAULT) \
    WPP_ANNOTATE(RosKmdAdapter_cpp1426) \
    (( \
        WPP_CHECK_INIT WPP_LEVEL_FLAGS_ENABLED(TRACE_LEVEL_WARNING, ROS_TRACING_DEFAULT) \
        ?   WPP_INVOKE_WPP_DEBUG((MSG)), \
            WPP_SF_sD( \
                WPP_LEVEL_FLAGS_LOGGER(TRACE_LEVEL_WARNING, ROS_TRACING_DEFAULT) \
                41, \
                WPP_LOCAL_TraceGuids+0, __FILE__, __LINE__), \
            1 \
        :   0 \
    )) \
    WPP_LEVEL_FLAGS_POST(TRACE_LEVEL_WARNING, ROS_TRACING_DEFAULT)
#endif // ENABLE_WPP_RECORDER

// WPP_CALL_RosKmdAdapter_cpp1435
#ifndef WPP_LEVEL_FLAGS_PRE
#  define WPP_LEVEL_FLAGS_PRE(LEVEL,FLAGS)
#endif
#ifndef WPP_LEVEL_FLAGS_POST
#  define WPP_LEVEL_FLAGS_POST(LEVEL,FLAGS)
#endif
#if ENABLE_WPP_RECORDER
#if ENABLE_WPP_TRACE_FILTERING_WITH_WPP_RECORDER
#define WPP_CALL_RosKmdAdapter_cpp1435(MSG) \
    WPP_LOG_ALWAYS(WPP_EX_LEVEL_FLAGS(TRACE_LEVEL_ERROR, ROS_TRACING_DEBUG), MSG) \
    WPP_LEVEL_FLAGS_PRE(TRACE_LEVEL_ERROR, ROS_TRACING_DEBUG) \
    do {\
        WPP_ANNOTATE(RosKmdAdapter_cpp1435) 0; \
        BOOLEAN wppEnabled = WPP_CHECK_INIT WPP_LEVEL_FLAGS_ENABLED(TRACE_LEVEL_ERROR, ROS_TRACING_DEBUG); \
        BOOLEAN recorderEnabled = WPP_RECORDER_CHECK_INIT WPP_RECORDER_LEVEL_FLAGS_FILTER(TRACE_LEVEL_ERROR, ROS_TRACING_DEBUG); \
        if (wppEnabled || recorderEnabled) { \
            WPP_INVOKE_WPP_DEBUG((MSG)); \
            WPP_RECORDER_AND_TRACE_SF_sD( \
                     WPP_LEVEL_FLAGS_LOGGER(TRACE_LEVEL_ERROR, ROS_TRACING_DEBUG) \
                     wppEnabled, recorderEnabled, \
                     WPP_RECORDER_LEVEL_FLAGS_ARGS(TRACE_LEVEL_ERROR, ROS_TRACING_DEBUG), \
                     42, \
                     WPP_LOCAL_TraceGuids+0, __FILE__, __LINE__);\
        } \
    } \
    while(0) \
    WPP_LEVEL_FLAGS_POST(TRACE_LEVEL_ERROR, ROS_TRACING_DEBUG)
#else // ENABLE_WPP_TRACE_FILTERING_WITH_WPP_RECORDER
#define WPP_CALL_RosKmdAdapter_cpp1435(MSG) \
    WPP_LOG_ALWAYS(WPP_EX_LEVEL_FLAGS(TRACE_LEVEL_ERROR, ROS_TRACING_DEBUG), MSG) \
    WPP_LEVEL_FLAGS_PRE(TRACE_LEVEL_ERROR, ROS_TRACING_DEBUG) \
    WPP_ANNOTATE(RosKmdAdapter_cpp1435) \
    (( \
        WPP_RECORDER_CHECK_INIT WPP_RECORDER_LEVEL_FLAGS_FILTER(TRACE_LEVEL_ERROR, ROS_TRACING_DEBUG) \
        ?   WPP_INVOKE_WPP_DEBUG((MSG)), \
            WPP_RECORDER_SF_sD( \
                WPP_RECORDER_LEVEL_FLAGS_ARGS(TRACE_LEVEL_ERROR, ROS_TRACING_DEBUG), \
                42, \
                WPP_LOCAL_TraceGuids+0, __FILE__, __LINE__), \
            1 \
        :   0 \
    )) \
    WPP_LEVEL_FLAGS_POST(TRACE_LEVEL_ERROR, ROS_TRACING_DEBUG)
#endif // ENABLE_WPP_TRACE_FILTERING_WITH_WPP_RECORDER
#else  // ENABLE_WPP_RECORDER
#define WPP_CALL_RosKmdAdapter_cpp1435(MSG) \
    WPP_LOG_ALWAYS(WPP_EX_LEVEL_FLAGS(TRACE_LEVEL_ERROR, ROS_TRACING_DEBUG), MSG) \
    WPP_LEVEL_FLAGS_PRE(TRACE_LEVEL_ERROR, ROS_TRACING_DEBUG) \
    WPP_ANNOTATE(RosKmdAdapter_cpp1435) \
    (( \
        WPP_CHECK_INIT WPP_LEVEL_FLAGS_ENABLED(TRACE_LEVEL_ERROR, ROS_TRACING_DEBUG) \
        ?   WPP_INVOKE_WPP_DEBUG((MSG)), \
            WPP_SF_sD( \
                WPP_LEVEL_FLAGS_LOGGER(TRACE_LEVEL_ERROR, ROS_TRACING_DEBUG) \
                42, \
                WPP_LOCAL_TraceGuids+0, __FILE__, __LINE__), \
            1 \
        :   0 \
    )) \
    WPP_LEVEL_FLAGS_POST(TRACE_LEVEL_ERROR, ROS_TRACING_DEBUG)
#endif // ENABLE_WPP_RECORDER

// WPP_CALL_RosKmdAdapter_cpp1443
#ifndef WPP_LEVEL_FLAGS_PRE
#  define WPP_LEVEL_FLAGS_PRE(LEVEL,FLAGS)
#endif
#ifndef WPP_LEVEL_FLAGS_POST
#  define WPP_LEVEL_FLAGS_POST(LEVEL,FLAGS)
#endif
#if ENABLE_WPP_RECORDER
#if ENABLE_WPP_TRACE_FILTERING_WITH_WPP_RECORDER
#define WPP_CALL_RosKmdAdapter_cpp1443(MSG) \
    WPP_LOG_ALWAYS(WPP_EX_LEVEL_FLAGS(TRACE_LEVEL_ERROR, ROS_TRACING_DEBUG), MSG) \
    WPP_LEVEL_FLAGS_PRE(TRACE_LEVEL_ERROR, ROS_TRACING_DEBUG) \
    do {\
        WPP_ANNOTATE(RosKmdAdapter_cpp1443) 0; \
        BOOLEAN wppEnabled = WPP_CHECK_INIT WPP_LEVEL_FLAGS_ENABLED(TRACE_LEVEL_ERROR, ROS_TRACING_DEBUG); \
        BOOLEAN recorderEnabled = WPP_RECORDER_CHECK_INIT WPP_RECORDER_LEVEL_FLAGS_FILTER(TRACE_LEVEL_ERROR, ROS_TRACING_DEBUG); \
        if (wppEnabled || recorderEnabled) { \
            WPP_INVOKE_WPP_DEBUG((MSG)); \
            WPP_RECORDER_AND_TRACE_SF_sD( \
                     WPP_LEVEL_FLAGS_LOGGER(TRACE_LEVEL_ERROR, ROS_TRACING_DEBUG) \
                     wppEnabled, recorderEnabled, \
                     WPP_RECORDER_LEVEL_FLAGS_ARGS(TRACE_LEVEL_ERROR, ROS_TRACING_DEBUG), \
                     43, \
                     WPP_LOCAL_TraceGuids+0, __FILE__, __LINE__);\
        } \
    } \
    while(0) \
    WPP_LEVEL_FLAGS_POST(TRACE_LEVEL_ERROR, ROS_TRACING_DEBUG)
#else // ENABLE_WPP_TRACE_FILTERING_WITH_WPP_RECORDER
#define WPP_CALL_RosKmdAdapter_cpp1443(MSG) \
    WPP_LOG_ALWAYS(WPP_EX_LEVEL_FLAGS(TRACE_LEVEL_ERROR, ROS_TRACING_DEBUG), MSG) \
    WPP_LEVEL_FLAGS_PRE(TRACE_LEVEL_ERROR, ROS_TRACING_DEBUG) \
    WPP_ANNOTATE(RosKmdAdapter_cpp1443) \
    (( \
        WPP_RECORDER_CHECK_INIT WPP_RECORDER_LEVEL_FLAGS_FILTER(TRACE_LEVEL_ERROR, ROS_TRACING_DEBUG) \
        ?   WPP_INVOKE_WPP_DEBUG((MSG)), \
            WPP_RECORDER_SF_sD( \
                WPP_RECORDER_LEVEL_FLAGS_ARGS(TRACE_LEVEL_ERROR, ROS_TRACING_DEBUG), \
                43, \
                WPP_LOCAL_TraceGuids+0, __FILE__, __LINE__), \
            1 \
        :   0 \
    )) \
    WPP_LEVEL_FLAGS_POST(TRACE_LEVEL_ERROR, ROS_TRACING_DEBUG)
#endif // ENABLE_WPP_TRACE_FILTERING_WITH_WPP_RECORDER
#else  // ENABLE_WPP_RECORDER
#define WPP_CALL_RosKmdAdapter_cpp1443(MSG) \
    WPP_LOG_ALWAYS(WPP_EX_LEVEL_FLAGS(TRACE_LEVEL_ERROR, ROS_TRACING_DEBUG), MSG) \
    WPP_LEVEL_FLAGS_PRE(TRACE_LEVEL_ERROR, ROS_TRACING_DEBUG) \
    WPP_ANNOTATE(RosKmdAdapter_cpp1443) \
    (( \
        WPP_CHECK_INIT WPP_LEVEL_FLAGS_ENABLED(TRACE_LEVEL_ERROR, ROS_TRACING_DEBUG) \
        ?   WPP_INVOKE_WPP_DEBUG((MSG)), \
            WPP_SF_sD( \
                WPP_LEVEL_FLAGS_LOGGER(TRACE_LEVEL_ERROR, ROS_TRACING_DEBUG) \
                43, \
                WPP_LOCAL_TraceGuids+0, __FILE__, __LINE__), \
            1 \
        :   0 \
    )) \
    WPP_LEVEL_FLAGS_POST(TRACE_LEVEL_ERROR, ROS_TRACING_DEBUG)
#endif // ENABLE_WPP_RECORDER

// WPP_CALL_RosKmdAdapter_cpp1452
#ifndef WPP_LEVEL_FLAGS_PRE
#  define WPP_LEVEL_FLAGS_PRE(LEVEL,FLAGS)
#endif
#ifndef WPP_LEVEL_FLAGS_POST
#  define WPP_LEVEL_FLAGS_POST(LEVEL,FLAGS)
#endif
#if ENABLE_WPP_RECORDER
#if ENABLE_WPP_TRACE_FILTERING_WITH_WPP_RECORDER
#define WPP_CALL_RosKmdAdapter_cpp1452(MSG) \
    WPP_LOG_ALWAYS(WPP_EX_LEVEL_FLAGS(TRACE_LEVEL_ERROR, ROS_TRACING_DEBUG), MSG) \
    WPP_LEVEL_FLAGS_PRE(TRACE_LEVEL_ERROR, ROS_TRACING_DEBUG) \
    do {\
        WPP_ANNOTATE(RosKmdAdapter_cpp1452) 0; \
        BOOLEAN wppEnabled = WPP_CHECK_INIT WPP_LEVEL_FLAGS_ENABLED(TRACE_LEVEL_ERROR, ROS_TRACING_DEBUG); \
        BOOLEAN recorderEnabled = WPP_RECORDER_CHECK_INIT WPP_RECORDER_LEVEL_FLAGS_FILTER(TRACE_LEVEL_ERROR, ROS_TRACING_DEBUG); \
        if (wppEnabled || recorderEnabled) { \
            WPP_INVOKE_WPP_DEBUG((MSG)); \
            WPP_RECORDER_AND_TRACE_SF_sD( \
                     WPP_LEVEL_FLAGS_LOGGER(TRACE_LEVEL_ERROR, ROS_TRACING_DEBUG) \
                     wppEnabled, recorderEnabled, \
                     WPP_RECORDER_LEVEL_FLAGS_ARGS(TRACE_LEVEL_ERROR, ROS_TRACING_DEBUG), \
                     44, \
                     WPP_LOCAL_TraceGuids+0, __FILE__, __LINE__);\
        } \
    } \
    while(0) \
    WPP_LEVEL_FLAGS_POST(TRACE_LEVEL_ERROR, ROS_TRACING_DEBUG)
#else // ENABLE_WPP_TRACE_FILTERING_WITH_WPP_RECORDER
#define WPP_CALL_RosKmdAdapter_cpp1452(MSG) \
    WPP_LOG_ALWAYS(WPP_EX_LEVEL_FLAGS(TRACE_LEVEL_ERROR, ROS_TRACING_DEBUG), MSG) \
    WPP_LEVEL_FLAGS_PRE(TRACE_LEVEL_ERROR, ROS_TRACING_DEBUG) \
    WPP_ANNOTATE(RosKmdAdapter_cpp1452) \
    (( \
        WPP_RECORDER_CHECK_INIT WPP_RECORDER_LEVEL_FLAGS_FILTER(TRACE_LEVEL_ERROR, ROS_TRACING_DEBUG) \
        ?   WPP_INVOKE_WPP_DEBUG((MSG)), \
            WPP_RECORDER_SF_sD( \
                WPP_RECORDER_LEVEL_FLAGS_ARGS(TRACE_LEVEL_ERROR, ROS_TRACING_DEBUG), \
                44, \
                WPP_LOCAL_TraceGuids+0, __FILE__, __LINE__), \
            1 \
        :   0 \
    )) \
    WPP_LEVEL_FLAGS_POST(TRACE_LEVEL_ERROR, ROS_TRACING_DEBUG)
#endif // ENABLE_WPP_TRACE_FILTERING_WITH_WPP_RECORDER
#else  // ENABLE_WPP_RECORDER
#define WPP_CALL_RosKmdAdapter_cpp1452(MSG) \
    WPP_LOG_ALWAYS(WPP_EX_LEVEL_FLAGS(TRACE_LEVEL_ERROR, ROS_TRACING_DEBUG), MSG) \
    WPP_LEVEL_FLAGS_PRE(TRACE_LEVEL_ERROR, ROS_TRACING_DEBUG) \
    WPP_ANNOTATE(RosKmdAdapter_cpp1452) \
    (( \
        WPP_CHECK_INIT WPP_LEVEL_FLAGS_ENABLED(TRACE_LEVEL_ERROR, ROS_TRACING_DEBUG) \
        ?   WPP_INVOKE_WPP_DEBUG((MSG)), \
            WPP_SF_sD( \
                WPP_LEVEL_FLAGS_LOGGER(TRACE_LEVEL_ERROR, ROS_TRACING_DEBUG) \
                44, \
                WPP_LOCAL_TraceGuids+0, __FILE__, __LINE__), \
            1 \
        :   0 \
    )) \
    WPP_LEVEL_FLAGS_POST(TRACE_LEVEL_ERROR, ROS_TRACING_DEBUG)
#endif // ENABLE_WPP_RECORDER

// WPP_CALL_RosKmdAdapter_cpp1462
#ifndef WPP_LEVEL_FLAGS_PRE
#  define WPP_LEVEL_FLAGS_PRE(LEVEL,FLAGS)
#endif
#ifndef WPP_LEVEL_FLAGS_POST
#  define WPP_LEVEL_FLAGS_POST(LEVEL,FLAGS)
#endif
#if ENABLE_WPP_RECORDER
#if ENABLE_WPP_TRACE_FILTERING_WITH_WPP_RECORDER
#define WPP_CALL_RosKmdAdapter_cpp1462(MSG) \
    WPP_LOG_ALWAYS(WPP_EX_LEVEL_FLAGS(TRACE_LEVEL_ERROR, ROS_TRACING_DEBUG), MSG) \
    WPP_LEVEL_FLAGS_PRE(TRACE_LEVEL_ERROR, ROS_TRACING_DEBUG) \
    do {\
        WPP_ANNOTATE(RosKmdAdapter_cpp1462) 0; \
        BOOLEAN wppEnabled = WPP_CHECK_INIT WPP_LEVEL_FLAGS_ENABLED(TRACE_LEVEL_ERROR, ROS_TRACING_DEBUG); \
        BOOLEAN recorderEnabled = WPP_RECORDER_CHECK_INIT WPP_RECORDER_LEVEL_FLAGS_FILTER(TRACE_LEVEL_ERROR, ROS_TRACING_DEBUG); \
        if (wppEnabled || recorderEnabled) { \
            WPP_INVOKE_WPP_DEBUG((MSG)); \
            WPP_RECORDER_AND_TRACE_SF_sD( \
                     WPP_LEVEL_FLAGS_LOGGER(TRACE_LEVEL_ERROR, ROS_TRACING_DEBUG) \
                     wppEnabled, recorderEnabled, \
                     WPP_RECORDER_LEVEL_FLAGS_ARGS(TRACE_LEVEL_ERROR, ROS_TRACING_DEBUG), \
                     45, \
                     WPP_LOCAL_TraceGuids+0, __FILE__, __LINE__);\
        } \
    } \
    while(0) \
    WPP_LEVEL_FLAGS_POST(TRACE_LEVEL_ERROR, ROS_TRACING_DEBUG)
#else // ENABLE_WPP_TRACE_FILTERING_WITH_WPP_RECORDER
#define WPP_CALL_RosKmdAdapter_cpp1462(MSG) \
    WPP_LOG_ALWAYS(WPP_EX_LEVEL_FLAGS(TRACE_LEVEL_ERROR, ROS_TRACING_DEBUG), MSG) \
    WPP_LEVEL_FLAGS_PRE(TRACE_LEVEL_ERROR, ROS_TRACING_DEBUG) \
    WPP_ANNOTATE(RosKmdAdapter_cpp1462) \
    (( \
        WPP_RECORDER_CHECK_INIT WPP_RECORDER_LEVEL_FLAGS_FILTER(TRACE_LEVEL_ERROR, ROS_TRACING_DEBUG) \
        ?   WPP_INVOKE_WPP_DEBUG((MSG)), \
            WPP_RECORDER_SF_sD( \
                WPP_RECORDER_LEVEL_FLAGS_ARGS(TRACE_LEVEL_ERROR, ROS_TRACING_DEBUG), \
                45, \
                WPP_LOCAL_TraceGuids+0, __FILE__, __LINE__), \
            1 \
        :   0 \
    )) \
    WPP_LEVEL_FLAGS_POST(TRACE_LEVEL_ERROR, ROS_TRACING_DEBUG)
#endif // ENABLE_WPP_TRACE_FILTERING_WITH_WPP_RECORDER
#else  // ENABLE_WPP_RECORDER
#define WPP_CALL_RosKmdAdapter_cpp1462(MSG) \
    WPP_LOG_ALWAYS(WPP_EX_LEVEL_FLAGS(TRACE_LEVEL_ERROR, ROS_TRACING_DEBUG), MSG) \
    WPP_LEVEL_FLAGS_PRE(TRACE_LEVEL_ERROR, ROS_TRACING_DEBUG) \
    WPP_ANNOTATE(RosKmdAdapter_cpp1462) \
    (( \
        WPP_CHECK_INIT WPP_LEVEL_FLAGS_ENABLED(TRACE_LEVEL_ERROR, ROS_TRACING_DEBUG) \
        ?   WPP_INVOKE_WPP_DEBUG((MSG)), \
            WPP_SF_sD( \
                WPP_LEVEL_FLAGS_LOGGER(TRACE_LEVEL_ERROR, ROS_TRACING_DEBUG) \
                45, \
                WPP_LOCAL_TraceGuids+0, __FILE__, __LINE__), \
            1 \
        :   0 \
    )) \
    WPP_LEVEL_FLAGS_POST(TRACE_LEVEL_ERROR, ROS_TRACING_DEBUG)
#endif // ENABLE_WPP_RECORDER

// WPP_CALL_RosKmdAdapter_cpp1474
#ifndef WPP_LEVEL_FLAGS_PRE
#  define WPP_LEVEL_FLAGS_PRE(LEVEL,FLAGS)
#endif
#ifndef WPP_LEVEL_FLAGS_POST
#  define WPP_LEVEL_FLAGS_POST(LEVEL,FLAGS)
#endif
#if ENABLE_WPP_RECORDER
#if ENABLE_WPP_TRACE_FILTERING_WITH_WPP_RECORDER
#define WPP_CALL_RosKmdAdapter_cpp1474(MSG, _a12, _a13) \
    WPP_LOG_ALWAYS(WPP_EX_LEVEL_FLAGS(TRACE_LEVEL_ERROR, ROS_TRACING_DEFAULT), MSG, _a12, _a13) \
    WPP_LEVEL_FLAGS_PRE(TRACE_LEVEL_ERROR, ROS_TRACING_DEFAULT) \
    do {\
        WPP_ANNOTATE(RosKmdAdapter_cpp1474) 0; \
        BOOLEAN wppEnabled = WPP_CHECK_INIT WPP_LEVEL_FLAGS_ENABLED(TRACE_LEVEL_ERROR, ROS_TRACING_DEFAULT); \
        BOOLEAN recorderEnabled = WPP_RECORDER_CHECK_INIT WPP_RECORDER_LEVEL_FLAGS_FILTER(TRACE_LEVEL_ERROR, ROS_TRACING_DEFAULT); \
        if (wppEnabled || recorderEnabled) { \
            WPP_INVOKE_WPP_DEBUG((MSG, _a12, _a13)); \
            WPP_RECORDER_AND_TRACE_SF_sDdd( \
                     WPP_LEVEL_FLAGS_LOGGER(TRACE_LEVEL_ERROR, ROS_TRACING_DEFAULT) \
                     wppEnabled, recorderEnabled, \
                     WPP_RECORDER_LEVEL_FLAGS_ARGS(TRACE_LEVEL_ERROR, ROS_TRACING_DEFAULT), \
                     46, \
                     WPP_LOCAL_TraceGuids+0, __FILE__, __LINE__, _a12, _a13);\
        } \
    } \
    while(0) \
    WPP_LEVEL_FLAGS_POST(TRACE_LEVEL_ERROR, ROS_TRACING_DEFAULT)
#else // ENABLE_WPP_TRACE_FILTERING_WITH_WPP_RECORDER
#define WPP_CALL_RosKmdAdapter_cpp1474(MSG, _a12, _a13) \
    WPP_LOG_ALWAYS(WPP_EX_LEVEL_FLAGS(TRACE_LEVEL_ERROR, ROS_TRACING_DEFAULT), MSG, _a12, _a13) \
    WPP_LEVEL_FLAGS_PRE(TRACE_LEVEL_ERROR, ROS_TRACING_DEFAULT) \
    WPP_ANNOTATE(RosKmdAdapter_cpp1474) \
    (( \
        WPP_RECORDER_CHECK_INIT WPP_RECORDER_LEVEL_FLAGS_FILTER(TRACE_LEVEL_ERROR, ROS_TRACING_DEFAULT) \
        ?   WPP_INVOKE_WPP_DEBUG((MSG, _a12, _a13)), \
            WPP_RECORDER_SF_sDdd( \
                WPP_RECORDER_LEVEL_FLAGS_ARGS(TRACE_LEVEL_ERROR, ROS_TRACING_DEFAULT), \
                46, \
                WPP_LOCAL_TraceGuids+0, __FILE__, __LINE__, _a12, _a13), \
            1 \
        :   0 \
    )) \
    WPP_LEVEL_FLAGS_POST(TRACE_LEVEL_ERROR, ROS_TRACING_DEFAULT)
#endif // ENABLE_WPP_TRACE_FILTERING_WITH_WPP_RECORDER
#else  // ENABLE_WPP_RECORDER
#define WPP_CALL_RosKmdAdapter_cpp1474(MSG, _a12, _a13) \
    WPP_LOG_ALWAYS(WPP_EX_LEVEL_FLAGS(TRACE_LEVEL_ERROR, ROS_TRACING_DEFAULT), MSG, _a12, _a13) \
    WPP_LEVEL_FLAGS_PRE(TRACE_LEVEL_ERROR, ROS_TRACING_DEFAULT) \
    WPP_ANNOTATE(RosKmdAdapter_cpp1474) \
    (( \
        WPP_CHECK_INIT WPP_LEVEL_FLAGS_ENABLED(TRACE_LEVEL_ERROR, ROS_TRACING_DEFAULT) \
        ?   WPP_INVOKE_WPP_DEBUG((MSG, _a12, _a13)), \
            WPP_SF_sDdd( \
                WPP_LEVEL_FLAGS_LOGGER(TRACE_LEVEL_ERROR, ROS_TRACING_DEFAULT) \
                46, \
                WPP_LOCAL_TraceGuids+0, __FILE__, __LINE__, _a12, _a13), \
            1 \
        :   0 \
    )) \
    WPP_LEVEL_FLAGS_POST(TRACE_LEVEL_ERROR, ROS_TRACING_DEFAULT)
#endif // ENABLE_WPP_RECORDER

// WPP_CALL_RosKmdAdapter_cpp1494
#ifndef WPP_LEVEL_FLAGS_PRE
#  define WPP_LEVEL_FLAGS_PRE(LEVEL,FLAGS)
#endif
#ifndef WPP_LEVEL_FLAGS_POST
#  define WPP_LEVEL_FLAGS_POST(LEVEL,FLAGS)
#endif
#if ENABLE_WPP_RECORDER
#if ENABLE_WPP_TRACE_FILTERING_WITH_WPP_RECORDER
#define WPP_CALL_RosKmdAdapter_cpp1494(MSG) \
    WPP_LOG_ALWAYS(WPP_EX_LEVEL_FLAGS(TRACE_LEVEL_ERROR, ROS_TRACING_DEBUG), MSG) \
    WPP_LEVEL_FLAGS_PRE(TRACE_LEVEL_ERROR, ROS_TRACING_DEBUG) \
    do {\
        WPP_ANNOTATE(RosKmdAdapter_cpp1494) 0; \
        BOOLEAN wppEnabled = WPP_CHECK_INIT WPP_LEVEL_FLAGS_ENABLED(TRACE_LEVEL_ERROR, ROS_TRACING_DEBUG); \
        BOOLEAN recorderEnabled = WPP_RECORDER_CHECK_INIT WPP_RECORDER_LEVEL_FLAGS_FILTER(TRACE_LEVEL_ERROR, ROS_TRACING_DEBUG); \
        if (wppEnabled || recorderEnabled) { \
            WPP_INVOKE_WPP_DEBUG((MSG)); \
            WPP_RECORDER_AND_TRACE_SF_sD( \
                     WPP_LEVEL_FLAGS_LOGGER(TRACE_LEVEL_ERROR, ROS_TRACING_DEBUG) \
                     wppEnabled, recorderEnabled, \
                     WPP_RECORDER_LEVEL_FLAGS_ARGS(TRACE_LEVEL_ERROR, ROS_TRACING_DEBUG), \
                     47, \
                     WPP_LOCAL_TraceGuids+0, __FILE__, __LINE__);\
        } \
    } \
    while(0) \
    WPP_LEVEL_FLAGS_POST(TRACE_LEVEL_ERROR, ROS_TRACING_DEBUG)
#else // ENABLE_WPP_TRACE_FILTERING_WITH_WPP_RECORDER
#define WPP_CALL_RosKmdAdapter_cpp1494(MSG) \
    WPP_LOG_ALWAYS(WPP_EX_LEVEL_FLAGS(TRACE_LEVEL_ERROR, ROS_TRACING_DEBUG), MSG) \
    WPP_LEVEL_FLAGS_PRE(TRACE_LEVEL_ERROR, ROS_TRACING_DEBUG) \
    WPP_ANNOTATE(RosKmdAdapter_cpp1494) \
    (( \
        WPP_RECORDER_CHECK_INIT WPP_RECORDER_LEVEL_FLAGS_FILTER(TRACE_LEVEL_ERROR, ROS_TRACING_DEBUG) \
        ?   WPP_INVOKE_WPP_DEBUG((MSG)), \
            WPP_RECORDER_SF_sD( \
                WPP_RECORDER_LEVEL_FLAGS_ARGS(TRACE_LEVEL_ERROR, ROS_TRACING_DEBUG), \
                47, \
                WPP_LOCAL_TraceGuids+0, __FILE__, __LINE__), \
            1 \
        :   0 \
    )) \
    WPP_LEVEL_FLAGS_POST(TRACE_LEVEL_ERROR, ROS_TRACING_DEBUG)
#endif // ENABLE_WPP_TRACE_FILTERING_WITH_WPP_RECORDER
#else  // ENABLE_WPP_RECORDER
#define WPP_CALL_RosKmdAdapter_cpp1494(MSG) \
    WPP_LOG_ALWAYS(WPP_EX_LEVEL_FLAGS(TRACE_LEVEL_ERROR, ROS_TRACING_DEBUG), MSG) \
    WPP_LEVEL_FLAGS_PRE(TRACE_LEVEL_ERROR, ROS_TRACING_DEBUG) \
    WPP_ANNOTATE(RosKmdAdapter_cpp1494) \
    (( \
        WPP_CHECK_INIT WPP_LEVEL_FLAGS_ENABLED(TRACE_LEVEL_ERROR, ROS_TRACING_DEBUG) \
        ?   WPP_INVOKE_WPP_DEBUG((MSG)), \
            WPP_SF_sD( \
                WPP_LEVEL_FLAGS_LOGGER(TRACE_LEVEL_ERROR, ROS_TRACING_DEBUG) \
                47, \
                WPP_LOCAL_TraceGuids+0, __FILE__, __LINE__), \
            1 \
        :   0 \
    )) \
    WPP_LEVEL_FLAGS_POST(TRACE_LEVEL_ERROR, ROS_TRACING_DEBUG)
#endif // ENABLE_WPP_RECORDER

// WPP_CALL_RosKmdAdapter_cpp1501
#ifndef WPP_LEVEL_FLAGS_PRE
#  define WPP_LEVEL_FLAGS_PRE(LEVEL,FLAGS)
#endif
#ifndef WPP_LEVEL_FLAGS_POST
#  define WPP_LEVEL_FLAGS_POST(LEVEL,FLAGS)
#endif
#if ENABLE_WPP_RECORDER
#if ENABLE_WPP_TRACE_FILTERING_WITH_WPP_RECORDER
#define WPP_CALL_RosKmdAdapter_cpp1501(MSG) \
    WPP_LOG_ALWAYS(WPP_EX_LEVEL_FLAGS(TRACE_LEVEL_ERROR, ROS_TRACING_DEBUG), MSG) \
    WPP_LEVEL_FLAGS_PRE(TRACE_LEVEL_ERROR, ROS_TRACING_DEBUG) \
    do {\
        WPP_ANNOTATE(RosKmdAdapter_cpp1501) 0; \
        BOOLEAN wppEnabled = WPP_CHECK_INIT WPP_LEVEL_FLAGS_ENABLED(TRACE_LEVEL_ERROR, ROS_TRACING_DEBUG); \
        BOOLEAN recorderEnabled = WPP_RECORDER_CHECK_INIT WPP_RECORDER_LEVEL_FLAGS_FILTER(TRACE_LEVEL_ERROR, ROS_TRACING_DEBUG); \
        if (wppEnabled || recorderEnabled) { \
            WPP_INVOKE_WPP_DEBUG((MSG)); \
            WPP_RECORDER_AND_TRACE_SF_sD( \
                     WPP_LEVEL_FLAGS_LOGGER(TRACE_LEVEL_ERROR, ROS_TRACING_DEBUG) \
                     wppEnabled, recorderEnabled, \
                     WPP_RECORDER_LEVEL_FLAGS_ARGS(TRACE_LEVEL_ERROR, ROS_TRACING_DEBUG), \
                     48, \
                     WPP_LOCAL_TraceGuids+0, __FILE__, __LINE__);\
        } \
    } \
    while(0) \
    WPP_LEVEL_FLAGS_POST(TRACE_LEVEL_ERROR, ROS_TRACING_DEBUG)
#else // ENABLE_WPP_TRACE_FILTERING_WITH_WPP_RECORDER
#define WPP_CALL_RosKmdAdapter_cpp1501(MSG) \
    WPP_LOG_ALWAYS(WPP_EX_LEVEL_FLAGS(TRACE_LEVEL_ERROR, ROS_TRACING_DEBUG), MSG) \
    WPP_LEVEL_FLAGS_PRE(TRACE_LEVEL_ERROR, ROS_TRACING_DEBUG) \
    WPP_ANNOTATE(RosKmdAdapter_cpp1501) \
    (( \
        WPP_RECORDER_CHECK_INIT WPP_RECORDER_LEVEL_FLAGS_FILTER(TRACE_LEVEL_ERROR, ROS_TRACING_DEBUG) \
        ?   WPP_INVOKE_WPP_DEBUG((MSG)), \
            WPP_RECORDER_SF_sD( \
                WPP_RECORDER_LEVEL_FLAGS_ARGS(TRACE_LEVEL_ERROR, ROS_TRACING_DEBUG), \
                48, \
                WPP_LOCAL_TraceGuids+0, __FILE__, __LINE__), \
            1 \
        :   0 \
    )) \
    WPP_LEVEL_FLAGS_POST(TRACE_LEVEL_ERROR, ROS_TRACING_DEBUG)
#endif // ENABLE_WPP_TRACE_FILTERING_WITH_WPP_RECORDER
#else  // ENABLE_WPP_RECORDER
#define WPP_CALL_RosKmdAdapter_cpp1501(MSG) \
    WPP_LOG_ALWAYS(WPP_EX_LEVEL_FLAGS(TRACE_LEVEL_ERROR, ROS_TRACING_DEBUG), MSG) \
    WPP_LEVEL_FLAGS_PRE(TRACE_LEVEL_ERROR, ROS_TRACING_DEBUG) \
    WPP_ANNOTATE(RosKmdAdapter_cpp1501) \
    (( \
        WPP_CHECK_INIT WPP_LEVEL_FLAGS_ENABLED(TRACE_LEVEL_ERROR, ROS_TRACING_DEBUG) \
        ?   WPP_INVOKE_WPP_DEBUG((MSG)), \
            WPP_SF_sD( \
                WPP_LEVEL_FLAGS_LOGGER(TRACE_LEVEL_ERROR, ROS_TRACING_DEBUG) \
                48, \
                WPP_LOCAL_TraceGuids+0, __FILE__, __LINE__), \
            1 \
        :   0 \
    )) \
    WPP_LEVEL_FLAGS_POST(TRACE_LEVEL_ERROR, ROS_TRACING_DEBUG)
#endif // ENABLE_WPP_RECORDER

// WPP_CALL_RosKmdAdapter_cpp1512
#ifndef WPP_LEVEL_FLAGS_PRE
#  define WPP_LEVEL_FLAGS_PRE(LEVEL,FLAGS)
#endif
#ifndef WPP_LEVEL_FLAGS_POST
#  define WPP_LEVEL_FLAGS_POST(LEVEL,FLAGS)
#endif
#if ENABLE_WPP_RECORDER
#if ENABLE_WPP_TRACE_FILTERING_WITH_WPP_RECORDER
#define WPP_CALL_RosKmdAdapter_cpp1512(MSG) \
    WPP_LOG_ALWAYS(WPP_EX_LEVEL_FLAGS(TRACE_LEVEL_ERROR, ROS_TRACING_DEBUG), MSG) \
    WPP_LEVEL_FLAGS_PRE(TRACE_LEVEL_ERROR, ROS_TRACING_DEBUG) \
    do {\
        WPP_ANNOTATE(RosKmdAdapter_cpp1512) 0; \
        BOOLEAN wppEnabled = WPP_CHECK_INIT WPP_LEVEL_FLAGS_ENABLED(TRACE_LEVEL_ERROR, ROS_TRACING_DEBUG); \
        BOOLEAN recorderEnabled = WPP_RECORDER_CHECK_INIT WPP_RECORDER_LEVEL_FLAGS_FILTER(TRACE_LEVEL_ERROR, ROS_TRACING_DEBUG); \
        if (wppEnabled || recorderEnabled) { \
            WPP_INVOKE_WPP_DEBUG((MSG)); \
            WPP_RECORDER_AND_TRACE_SF_sD( \
                     WPP_LEVEL_FLAGS_LOGGER(TRACE_LEVEL_ERROR, ROS_TRACING_DEBUG) \
                     wppEnabled, recorderEnabled, \
                     WPP_RECORDER_LEVEL_FLAGS_ARGS(TRACE_LEVEL_ERROR, ROS_TRACING_DEBUG), \
                     49, \
                     WPP_LOCAL_TraceGuids+0, __FILE__, __LINE__);\
        } \
    } \
    while(0) \
    WPP_LEVEL_FLAGS_POST(TRACE_LEVEL_ERROR, ROS_TRACING_DEBUG)
#else // ENABLE_WPP_TRACE_FILTERING_WITH_WPP_RECORDER
#define WPP_CALL_RosKmdAdapter_cpp1512(MSG) \
    WPP_LOG_ALWAYS(WPP_EX_LEVEL_FLAGS(TRACE_LEVEL_ERROR, ROS_TRACING_DEBUG), MSG) \
    WPP_LEVEL_FLAGS_PRE(TRACE_LEVEL_ERROR, ROS_TRACING_DEBUG) \
    WPP_ANNOTATE(RosKmdAdapter_cpp1512) \
    (( \
        WPP_RECORDER_CHECK_INIT WPP_RECORDER_LEVEL_FLAGS_FILTER(TRACE_LEVEL_ERROR, ROS_TRACING_DEBUG) \
        ?   WPP_INVOKE_WPP_DEBUG((MSG)), \
            WPP_RECORDER_SF_sD( \
                WPP_RECORDER_LEVEL_FLAGS_ARGS(TRACE_LEVEL_ERROR, ROS_TRACING_DEBUG), \
                49, \
                WPP_LOCAL_TraceGuids+0, __FILE__, __LINE__), \
            1 \
        :   0 \
    )) \
    WPP_LEVEL_FLAGS_POST(TRACE_LEVEL_ERROR, ROS_TRACING_DEBUG)
#endif // ENABLE_WPP_TRACE_FILTERING_WITH_WPP_RECORDER
#else  // ENABLE_WPP_RECORDER
#define WPP_CALL_RosKmdAdapter_cpp1512(MSG) \
    WPP_LOG_ALWAYS(WPP_EX_LEVEL_FLAGS(TRACE_LEVEL_ERROR, ROS_TRACING_DEBUG), MSG) \
    WPP_LEVEL_FLAGS_PRE(TRACE_LEVEL_ERROR, ROS_TRACING_DEBUG) \
    WPP_ANNOTATE(RosKmdAdapter_cpp1512) \
    (( \
        WPP_CHECK_INIT WPP_LEVEL_FLAGS_ENABLED(TRACE_LEVEL_ERROR, ROS_TRACING_DEBUG) \
        ?   WPP_INVOKE_WPP_DEBUG((MSG)), \
            WPP_SF_sD( \
                WPP_LEVEL_FLAGS_LOGGER(TRACE_LEVEL_ERROR, ROS_TRACING_DEBUG) \
                49, \
                WPP_LOCAL_TraceGuids+0, __FILE__, __LINE__), \
            1 \
        :   0 \
    )) \
    WPP_LEVEL_FLAGS_POST(TRACE_LEVEL_ERROR, ROS_TRACING_DEBUG)
#endif // ENABLE_WPP_RECORDER

// WPP_CALL_RosKmdAdapter_cpp1526
#ifndef WPP_LEVEL_FLAGS_PRE
#  define WPP_LEVEL_FLAGS_PRE(LEVEL,FLAGS)
#endif
#ifndef WPP_LEVEL_FLAGS_POST
#  define WPP_LEVEL_FLAGS_POST(LEVEL,FLAGS)
#endif
#if ENABLE_WPP_RECORDER
#if ENABLE_WPP_TRACE_FILTERING_WITH_WPP_RECORDER
#define WPP_CALL_RosKmdAdapter_cpp1526(MSG) \
    WPP_LOG_ALWAYS(WPP_EX_LEVEL_FLAGS(TRACE_LEVEL_ERROR, ROS_TRACING_DEBUG), MSG) \
    WPP_LEVEL_FLAGS_PRE(TRACE_LEVEL_ERROR, ROS_TRACING_DEBUG) \
    do {\
        WPP_ANNOTATE(RosKmdAdapter_cpp1526) 0; \
        BOOLEAN wppEnabled = WPP_CHECK_INIT WPP_LEVEL_FLAGS_ENABLED(TRACE_LEVEL_ERROR, ROS_TRACING_DEBUG); \
        BOOLEAN recorderEnabled = WPP_RECORDER_CHECK_INIT WPP_RECORDER_LEVEL_FLAGS_FILTER(TRACE_LEVEL_ERROR, ROS_TRACING_DEBUG); \
        if (wppEnabled || recorderEnabled) { \
            WPP_INVOKE_WPP_DEBUG((MSG)); \
            WPP_RECORDER_AND_TRACE_SF_sD( \
                     WPP_LEVEL_FLAGS_LOGGER(TRACE_LEVEL_ERROR, ROS_TRACING_DEBUG) \
                     wppEnabled, recorderEnabled, \
                     WPP_RECORDER_LEVEL_FLAGS_ARGS(TRACE_LEVEL_ERROR, ROS_TRACING_DEBUG), \
                     50, \
                     WPP_LOCAL_TraceGuids+0, __FILE__, __LINE__);\
        } \
    } \
    while(0) \
    WPP_LEVEL_FLAGS_POST(TRACE_LEVEL_ERROR, ROS_TRACING_DEBUG)
#else // ENABLE_WPP_TRACE_FILTERING_WITH_WPP_RECORDER
#define WPP_CALL_RosKmdAdapter_cpp1526(MSG) \
    WPP_LOG_ALWAYS(WPP_EX_LEVEL_FLAGS(TRACE_LEVEL_ERROR, ROS_TRACING_DEBUG), MSG) \
    WPP_LEVEL_FLAGS_PRE(TRACE_LEVEL_ERROR, ROS_TRACING_DEBUG) \
    WPP_ANNOTATE(RosKmdAdapter_cpp1526) \
    (( \
        WPP_RECORDER_CHECK_INIT WPP_RECORDER_LEVEL_FLAGS_FILTER(TRACE_LEVEL_ERROR, ROS_TRACING_DEBUG) \
        ?   WPP_INVOKE_WPP_DEBUG((MSG)), \
            WPP_RECORDER_SF_sD( \
                WPP_RECORDER_LEVEL_FLAGS_ARGS(TRACE_LEVEL_ERROR, ROS_TRACING_DEBUG), \
                50, \
                WPP_LOCAL_TraceGuids+0, __FILE__, __LINE__), \
            1 \
        :   0 \
    )) \
    WPP_LEVEL_FLAGS_POST(TRACE_LEVEL_ERROR, ROS_TRACING_DEBUG)
#endif // ENABLE_WPP_TRACE_FILTERING_WITH_WPP_RECORDER
#else  // ENABLE_WPP_RECORDER
#define WPP_CALL_RosKmdAdapter_cpp1526(MSG) \
    WPP_LOG_ALWAYS(WPP_EX_LEVEL_FLAGS(TRACE_LEVEL_ERROR, ROS_TRACING_DEBUG), MSG) \
    WPP_LEVEL_FLAGS_PRE(TRACE_LEVEL_ERROR, ROS_TRACING_DEBUG) \
    WPP_ANNOTATE(RosKmdAdapter_cpp1526) \
    (( \
        WPP_CHECK_INIT WPP_LEVEL_FLAGS_ENABLED(TRACE_LEVEL_ERROR, ROS_TRACING_DEBUG) \
        ?   WPP_INVOKE_WPP_DEBUG((MSG)), \
            WPP_SF_sD( \
                WPP_LEVEL_FLAGS_LOGGER(TRACE_LEVEL_ERROR, ROS_TRACING_DEBUG) \
                50, \
                WPP_LOCAL_TraceGuids+0, __FILE__, __LINE__), \
            1 \
        :   0 \
    )) \
    WPP_LEVEL_FLAGS_POST(TRACE_LEVEL_ERROR, ROS_TRACING_DEBUG)
#endif // ENABLE_WPP_RECORDER

// WPP_CALL_RosKmdAdapter_cpp1540
#ifndef WPP_LEVEL_FLAGS_PRE
#  define WPP_LEVEL_FLAGS_PRE(LEVEL,FLAGS)
#endif
#ifndef WPP_LEVEL_FLAGS_POST
#  define WPP_LEVEL_FLAGS_POST(LEVEL,FLAGS)
#endif
#if ENABLE_WPP_RECORDER
#if ENABLE_WPP_TRACE_FILTERING_WITH_WPP_RECORDER
#define WPP_CALL_RosKmdAdapter_cpp1540(MSG) \
    WPP_LOG_ALWAYS(WPP_EX_LEVEL_FLAGS(TRACE_LEVEL_ERROR, ROS_TRACING_DEBUG), MSG) \
    WPP_LEVEL_FLAGS_PRE(TRACE_LEVEL_ERROR, ROS_TRACING_DEBUG) \
    do {\
        WPP_ANNOTATE(RosKmdAdapter_cpp1540) 0; \
        BOOLEAN wppEnabled = WPP_CHECK_INIT WPP_LEVEL_FLAGS_ENABLED(TRACE_LEVEL_ERROR, ROS_TRACING_DEBUG); \
        BOOLEAN recorderEnabled = WPP_RECORDER_CHECK_INIT WPP_RECORDER_LEVEL_FLAGS_FILTER(TRACE_LEVEL_ERROR, ROS_TRACING_DEBUG); \
        if (wppEnabled || recorderEnabled) { \
            WPP_INVOKE_WPP_DEBUG((MSG)); \
            WPP_RECORDER_AND_TRACE_SF_sD( \
                     WPP_LEVEL_FLAGS_LOGGER(TRACE_LEVEL_ERROR, ROS_TRACING_DEBUG) \
                     wppEnabled, recorderEnabled, \
                     WPP_RECORDER_LEVEL_FLAGS_ARGS(TRACE_LEVEL_ERROR, ROS_TRACING_DEBUG), \
                     51, \
                     WPP_LOCAL_TraceGuids+0, __FILE__, __LINE__);\
        } \
    } \
    while(0) \
    WPP_LEVEL_FLAGS_POST(TRACE_LEVEL_ERROR, ROS_TRACING_DEBUG)
#else // ENABLE_WPP_TRACE_FILTERING_WITH_WPP_RECORDER
#define WPP_CALL_RosKmdAdapter_cpp1540(MSG) \
    WPP_LOG_ALWAYS(WPP_EX_LEVEL_FLAGS(TRACE_LEVEL_ERROR, ROS_TRACING_DEBUG), MSG) \
    WPP_LEVEL_FLAGS_PRE(TRACE_LEVEL_ERROR, ROS_TRACING_DEBUG) \
    WPP_ANNOTATE(RosKmdAdapter_cpp1540) \
    (( \
        WPP_RECORDER_CHECK_INIT WPP_RECORDER_LEVEL_FLAGS_FILTER(TRACE_LEVEL_ERROR, ROS_TRACING_DEBUG) \
        ?   WPP_INVOKE_WPP_DEBUG((MSG)), \
            WPP_RECORDER_SF_sD( \
                WPP_RECORDER_LEVEL_FLAGS_ARGS(TRACE_LEVEL_ERROR, ROS_TRACING_DEBUG), \
                51, \
                WPP_LOCAL_TraceGuids+0, __FILE__, __LINE__), \
            1 \
        :   0 \
    )) \
    WPP_LEVEL_FLAGS_POST(TRACE_LEVEL_ERROR, ROS_TRACING_DEBUG)
#endif // ENABLE_WPP_TRACE_FILTERING_WITH_WPP_RECORDER
#else  // ENABLE_WPP_RECORDER
#define WPP_CALL_RosKmdAdapter_cpp1540(MSG) \
    WPP_LOG_ALWAYS(WPP_EX_LEVEL_FLAGS(TRACE_LEVEL_ERROR, ROS_TRACING_DEBUG), MSG) \
    WPP_LEVEL_FLAGS_PRE(TRACE_LEVEL_ERROR, ROS_TRACING_DEBUG) \
    WPP_ANNOTATE(RosKmdAdapter_cpp1540) \
    (( \
        WPP_CHECK_INIT WPP_LEVEL_FLAGS_ENABLED(TRACE_LEVEL_ERROR, ROS_TRACING_DEBUG) \
        ?   WPP_INVOKE_WPP_DEBUG((MSG)), \
            WPP_SF_sD( \
                WPP_LEVEL_FLAGS_LOGGER(TRACE_LEVEL_ERROR, ROS_TRACING_DEBUG) \
                51, \
                WPP_LOCAL_TraceGuids+0, __FILE__, __LINE__), \
            1 \
        :   0 \
    )) \
    WPP_LEVEL_FLAGS_POST(TRACE_LEVEL_ERROR, ROS_TRACING_DEBUG)
#endif // ENABLE_WPP_RECORDER

// WPP_CALL_RosKmdAdapter_cpp1559
#ifndef WPP_LEVEL_FLAGS_PRE
#  define WPP_LEVEL_FLAGS_PRE(LEVEL,FLAGS)
#endif
#ifndef WPP_LEVEL_FLAGS_POST
#  define WPP_LEVEL_FLAGS_POST(LEVEL,FLAGS)
#endif
#if ENABLE_WPP_RECORDER
#if ENABLE_WPP_TRACE_FILTERING_WITH_WPP_RECORDER
#define WPP_CALL_RosKmdAdapter_cpp1559(MSG) \
    WPP_LOG_ALWAYS(WPP_EX_LEVEL_FLAGS(TRACE_LEVEL_ERROR, ROS_TRACING_DEBUG), MSG) \
    WPP_LEVEL_FLAGS_PRE(TRACE_LEVEL_ERROR, ROS_TRACING_DEBUG) \
    do {\
        WPP_ANNOTATE(RosKmdAdapter_cpp1559) 0; \
        BOOLEAN wppEnabled = WPP_CHECK_INIT WPP_LEVEL_FLAGS_ENABLED(TRACE_LEVEL_ERROR, ROS_TRACING_DEBUG); \
        BOOLEAN recorderEnabled = WPP_RECORDER_CHECK_INIT WPP_RECORDER_LEVEL_FLAGS_FILTER(TRACE_LEVEL_ERROR, ROS_TRACING_DEBUG); \
        if (wppEnabled || recorderEnabled) { \
            WPP_INVOKE_WPP_DEBUG((MSG)); \
            WPP_RECORDER_AND_TRACE_SF_sD( \
                     WPP_LEVEL_FLAGS_LOGGER(TRACE_LEVEL_ERROR, ROS_TRACING_DEBUG) \
                     wppEnabled, recorderEnabled, \
                     WPP_RECORDER_LEVEL_FLAGS_ARGS(TRACE_LEVEL_ERROR, ROS_TRACING_DEBUG), \
                     52, \
                     WPP_LOCAL_TraceGuids+0, __FILE__, __LINE__);\
        } \
    } \
    while(0) \
    WPP_LEVEL_FLAGS_POST(TRACE_LEVEL_ERROR, ROS_TRACING_DEBUG)
#else // ENABLE_WPP_TRACE_FILTERING_WITH_WPP_RECORDER
#define WPP_CALL_RosKmdAdapter_cpp1559(MSG) \
    WPP_LOG_ALWAYS(WPP_EX_LEVEL_FLAGS(TRACE_LEVEL_ERROR, ROS_TRACING_DEBUG), MSG) \
    WPP_LEVEL_FLAGS_PRE(TRACE_LEVEL_ERROR, ROS_TRACING_DEBUG) \
    WPP_ANNOTATE(RosKmdAdapter_cpp1559) \
    (( \
        WPP_RECORDER_CHECK_INIT WPP_RECORDER_LEVEL_FLAGS_FILTER(TRACE_LEVEL_ERROR, ROS_TRACING_DEBUG) \
        ?   WPP_INVOKE_WPP_DEBUG((MSG)), \
            WPP_RECORDER_SF_sD( \
                WPP_RECORDER_LEVEL_FLAGS_ARGS(TRACE_LEVEL_ERROR, ROS_TRACING_DEBUG), \
                52, \
                WPP_LOCAL_TraceGuids+0, __FILE__, __LINE__), \
            1 \
        :   0 \
    )) \
    WPP_LEVEL_FLAGS_POST(TRACE_LEVEL_ERROR, ROS_TRACING_DEBUG)
#endif // ENABLE_WPP_TRACE_FILTERING_WITH_WPP_RECORDER
#else  // ENABLE_WPP_RECORDER
#define WPP_CALL_RosKmdAdapter_cpp1559(MSG) \
    WPP_LOG_ALWAYS(WPP_EX_LEVEL_FLAGS(TRACE_LEVEL_ERROR, ROS_TRACING_DEBUG), MSG) \
    WPP_LEVEL_FLAGS_PRE(TRACE_LEVEL_ERROR, ROS_TRACING_DEBUG) \
    WPP_ANNOTATE(RosKmdAdapter_cpp1559) \
    (( \
        WPP_CHECK_INIT WPP_LEVEL_FLAGS_ENABLED(TRACE_LEVEL_ERROR, ROS_TRACING_DEBUG) \
        ?   WPP_INVOKE_WPP_DEBUG((MSG)), \
            WPP_SF_sD( \
                WPP_LEVEL_FLAGS_LOGGER(TRACE_LEVEL_ERROR, ROS_TRACING_DEBUG) \
                52, \
                WPP_LOCAL_TraceGuids+0, __FILE__, __LINE__), \
            1 \
        :   0 \
    )) \
    WPP_LEVEL_FLAGS_POST(TRACE_LEVEL_ERROR, ROS_TRACING_DEBUG)
#endif // ENABLE_WPP_RECORDER

// WPP_CALL_RosKmdAdapter_cpp1567
#ifndef WPP_LEVEL_FLAGS_PRE
#  define WPP_LEVEL_FLAGS_PRE(LEVEL,FLAGS)
#endif
#ifndef WPP_LEVEL_FLAGS_POST
#  define WPP_LEVEL_FLAGS_POST(LEVEL,FLAGS)
#endif
#if ENABLE_WPP_RECORDER
#if ENABLE_WPP_TRACE_FILTERING_WITH_WPP_RECORDER
#define WPP_CALL_RosKmdAdapter_cpp1567(MSG) \
    WPP_LOG_ALWAYS(WPP_EX_LEVEL_FLAGS(TRACE_LEVEL_ERROR, ROS_TRACING_DEBUG), MSG) \
    WPP_LEVEL_FLAGS_PRE(TRACE_LEVEL_ERROR, ROS_TRACING_DEBUG) \
    do {\
        WPP_ANNOTATE(RosKmdAdapter_cpp1567) 0; \
        BOOLEAN wppEnabled = WPP_CHECK_INIT WPP_LEVEL_FLAGS_ENABLED(TRACE_LEVEL_ERROR, ROS_TRACING_DEBUG); \
        BOOLEAN recorderEnabled = WPP_RECORDER_CHECK_INIT WPP_RECORDER_LEVEL_FLAGS_FILTER(TRACE_LEVEL_ERROR, ROS_TRACING_DEBUG); \
        if (wppEnabled || recorderEnabled) { \
            WPP_INVOKE_WPP_DEBUG((MSG)); \
            WPP_RECORDER_AND_TRACE_SF_sD( \
                     WPP_LEVEL_FLAGS_LOGGER(TRACE_LEVEL_ERROR, ROS_TRACING_DEBUG) \
                     wppEnabled, recorderEnabled, \
                     WPP_RECORDER_LEVEL_FLAGS_ARGS(TRACE_LEVEL_ERROR, ROS_TRACING_DEBUG), \
                     53, \
                     WPP_LOCAL_TraceGuids+0, __FILE__, __LINE__);\
        } \
    } \
    while(0) \
    WPP_LEVEL_FLAGS_POST(TRACE_LEVEL_ERROR, ROS_TRACING_DEBUG)
#else // ENABLE_WPP_TRACE_FILTERING_WITH_WPP_RECORDER
#define WPP_CALL_RosKmdAdapter_cpp1567(MSG) \
    WPP_LOG_ALWAYS(WPP_EX_LEVEL_FLAGS(TRACE_LEVEL_ERROR, ROS_TRACING_DEBUG), MSG) \
    WPP_LEVEL_FLAGS_PRE(TRACE_LEVEL_ERROR, ROS_TRACING_DEBUG) \
    WPP_ANNOTATE(RosKmdAdapter_cpp1567) \
    (( \
        WPP_RECORDER_CHECK_INIT WPP_RECORDER_LEVEL_FLAGS_FILTER(TRACE_LEVEL_ERROR, ROS_TRACING_DEBUG) \
        ?   WPP_INVOKE_WPP_DEBUG((MSG)), \
            WPP_RECORDER_SF_sD( \
                WPP_RECORDER_LEVEL_FLAGS_ARGS(TRACE_LEVEL_ERROR, ROS_TRACING_DEBUG), \
                53, \
                WPP_LOCAL_TraceGuids+0, __FILE__, __LINE__), \
            1 \
        :   0 \
    )) \
    WPP_LEVEL_FLAGS_POST(TRACE_LEVEL_ERROR, ROS_TRACING_DEBUG)
#endif // ENABLE_WPP_TRACE_FILTERING_WITH_WPP_RECORDER
#else  // ENABLE_WPP_RECORDER
#define WPP_CALL_RosKmdAdapter_cpp1567(MSG) \
    WPP_LOG_ALWAYS(WPP_EX_LEVEL_FLAGS(TRACE_LEVEL_ERROR, ROS_TRACING_DEBUG), MSG) \
    WPP_LEVEL_FLAGS_PRE(TRACE_LEVEL_ERROR, ROS_TRACING_DEBUG) \
    WPP_ANNOTATE(RosKmdAdapter_cpp1567) \
    (( \
        WPP_CHECK_INIT WPP_LEVEL_FLAGS_ENABLED(TRACE_LEVEL_ERROR, ROS_TRACING_DEBUG) \
        ?   WPP_INVOKE_WPP_DEBUG((MSG)), \
            WPP_SF_sD( \
                WPP_LEVEL_FLAGS_LOGGER(TRACE_LEVEL_ERROR, ROS_TRACING_DEBUG) \
                53, \
                WPP_LOCAL_TraceGuids+0, __FILE__, __LINE__), \
            1 \
        :   0 \
    )) \
    WPP_LEVEL_FLAGS_POST(TRACE_LEVEL_ERROR, ROS_TRACING_DEBUG)
#endif // ENABLE_WPP_RECORDER

// WPP_CALL_RosKmdAdapter_cpp1821
#ifndef WPP_LEVEL_FLAGS_PRE
#  define WPP_LEVEL_FLAGS_PRE(LEVEL,FLAGS)
#endif
#ifndef WPP_LEVEL_FLAGS_POST
#  define WPP_LEVEL_FLAGS_POST(LEVEL,FLAGS)
#endif
#if ENABLE_WPP_RECORDER
#if ENABLE_WPP_TRACE_FILTERING_WITH_WPP_RECORDER
#define WPP_CALL_RosKmdAdapter_cpp1821(MSG, _a12) \
    WPP_LOG_ALWAYS(WPP_EX_LEVEL_FLAGS(TRACE_LEVEL_WARNING, ROS_TRACING_DEFAULT), MSG, _a12) \
    WPP_LEVEL_FLAGS_PRE(TRACE_LEVEL_WARNING, ROS_TRACING_DEFAULT) \
    do {\
        WPP_ANNOTATE(RosKmdAdapter_cpp1821) 0; \
        BOOLEAN wppEnabled = WPP_CHECK_INIT WPP_LEVEL_FLAGS_ENABLED(TRACE_LEVEL_WARNING, ROS_TRACING_DEFAULT); \
        BOOLEAN recorderEnabled = WPP_RECORDER_CHECK_INIT WPP_RECORDER_LEVEL_FLAGS_FILTER(TRACE_LEVEL_WARNING, ROS_TRACING_DEFAULT); \
        if (wppEnabled || recorderEnabled) { \
            WPP_INVOKE_WPP_DEBUG((MSG, _a12)); \
            WPP_RECORDER_AND_TRACE_SF_sD_guid_( \
                     WPP_LEVEL_FLAGS_LOGGER(TRACE_LEVEL_WARNING, ROS_TRACING_DEFAULT) \
                     wppEnabled, recorderEnabled, \
                     WPP_RECORDER_LEVEL_FLAGS_ARGS(TRACE_LEVEL_WARNING, ROS_TRACING_DEFAULT), \
                     54, \
                     WPP_LOCAL_TraceGuids+0, __FILE__, __LINE__, _a12);\
        } \
    } \
    while(0) \
    WPP_LEVEL_FLAGS_POST(TRACE_LEVEL_WARNING, ROS_TRACING_DEFAULT)
#else // ENABLE_WPP_TRACE_FILTERING_WITH_WPP_RECORDER
#define WPP_CALL_RosKmdAdapter_cpp1821(MSG, _a12) \
    WPP_LOG_ALWAYS(WPP_EX_LEVEL_FLAGS(TRACE_LEVEL_WARNING, ROS_TRACING_DEFAULT), MSG, _a12) \
    WPP_LEVEL_FLAGS_PRE(TRACE_LEVEL_WARNING, ROS_TRACING_DEFAULT) \
    WPP_ANNOTATE(RosKmdAdapter_cpp1821) \
    (( \
        WPP_RECORDER_CHECK_INIT WPP_RECORDER_LEVEL_FLAGS_FILTER(TRACE_LEVEL_WARNING, ROS_TRACING_DEFAULT) \
        ?   WPP_INVOKE_WPP_DEBUG((MSG, _a12)), \
            WPP_RECORDER_SF_sD_guid_( \
                WPP_RECORDER_LEVEL_FLAGS_ARGS(TRACE_LEVEL_WARNING, ROS_TRACING_DEFAULT), \
                54, \
                WPP_LOCAL_TraceGuids+0, __FILE__, __LINE__, _a12), \
            1 \
        :   0 \
    )) \
    WPP_LEVEL_FLAGS_POST(TRACE_LEVEL_WARNING, ROS_TRACING_DEFAULT)
#endif // ENABLE_WPP_TRACE_FILTERING_WITH_WPP_RECORDER
#else  // ENABLE_WPP_RECORDER
#define WPP_CALL_RosKmdAdapter_cpp1821(MSG, _a12) \
    WPP_LOG_ALWAYS(WPP_EX_LEVEL_FLAGS(TRACE_LEVEL_WARNING, ROS_TRACING_DEFAULT), MSG, _a12) \
    WPP_LEVEL_FLAGS_PRE(TRACE_LEVEL_WARNING, ROS_TRACING_DEFAULT) \
    WPP_ANNOTATE(RosKmdAdapter_cpp1821) \
    (( \
        WPP_CHECK_INIT WPP_LEVEL_FLAGS_ENABLED(TRACE_LEVEL_WARNING, ROS_TRACING_DEFAULT) \
        ?   WPP_INVOKE_WPP_DEBUG((MSG, _a12)), \
            WPP_SF_sD_guid_( \
                WPP_LEVEL_FLAGS_LOGGER(TRACE_LEVEL_WARNING, ROS_TRACING_DEFAULT) \
                54, \
                WPP_LOCAL_TraceGuids+0, __FILE__, __LINE__, _a12), \
            1 \
        :   0 \
    )) \
    WPP_LEVEL_FLAGS_POST(TRACE_LEVEL_WARNING, ROS_TRACING_DEFAULT)
#endif // ENABLE_WPP_RECORDER

// WPP_CALL_RosKmdAdapter_cpp1869
#ifndef WPP_LEVEL_FLAGS_PRE
#  define WPP_LEVEL_FLAGS_PRE(LEVEL,FLAGS)
#endif
#ifndef WPP_LEVEL_FLAGS_POST
#  define WPP_LEVEL_FLAGS_POST(LEVEL,FLAGS)
#endif
#if ENABLE_WPP_RECORDER
#if ENABLE_WPP_TRACE_FILTERING_WITH_WPP_RECORDER
#define WPP_CALL_RosKmdAdapter_cpp1869(MSG, _a12, _a13, _a14, _a15, _a16, _a17) \
    WPP_LOG_ALWAYS(WPP_EX_LEVEL_FLAGS(TRACE_LEVEL_VERBOSE, ROS_TRACING_DEFAULT), MSG, _a12, _a13, _a14, _a15, _a16, _a17) \
    WPP_LEVEL_FLAGS_PRE(TRACE_LEVEL_VERBOSE, ROS_TRACING_DEFAULT) \
    do {\
        WPP_ANNOTATE(RosKmdAdapter_cpp1869) 0; \
        BOOLEAN wppEnabled = WPP_CHECK_INIT WPP_LEVEL_FLAGS_ENABLED(TRACE_LEVEL_VERBOSE, ROS_TRACING_DEFAULT); \
        BOOLEAN recorderEnabled = WPP_RECORDER_CHECK_INIT WPP_RECORDER_LEVEL_FLAGS_FILTER(TRACE_LEVEL_VERBOSE, ROS_TRACING_DEFAULT); \
        if (wppEnabled || recorderEnabled) { \
            WPP_INVOKE_WPP_DEBUG((MSG, _a12, _a13, _a14, _a15, _a16, _a17)); \
            WPP_RECORDER_AND_TRACE_SF_sDdddddd( \
                     WPP_LEVEL_FLAGS_LOGGER(TRACE_LEVEL_VERBOSE, ROS_TRACING_DEFAULT) \
                     wppEnabled, recorderEnabled, \
                     WPP_RECORDER_LEVEL_FLAGS_ARGS(TRACE_LEVEL_VERBOSE, ROS_TRACING_DEFAULT), \
                     55, \
                     WPP_LOCAL_TraceGuids+0, __FILE__, __LINE__, _a12, _a13, _a14, _a15, _a16, _a17);\
        } \
    } \
    while(0) \
    WPP_LEVEL_FLAGS_POST(TRACE_LEVEL_VERBOSE, ROS_TRACING_DEFAULT)
#else // ENABLE_WPP_TRACE_FILTERING_WITH_WPP_RECORDER
#define WPP_CALL_RosKmdAdapter_cpp1869(MSG, _a12, _a13, _a14, _a15, _a16, _a17) \
    WPP_LOG_ALWAYS(WPP_EX_LEVEL_FLAGS(TRACE_LEVEL_VERBOSE, ROS_TRACING_DEFAULT), MSG, _a12, _a13, _a14, _a15, _a16, _a17) \
    WPP_LEVEL_FLAGS_PRE(TRACE_LEVEL_VERBOSE, ROS_TRACING_DEFAULT) \
    WPP_ANNOTATE(RosKmdAdapter_cpp1869) \
    (( \
        WPP_RECORDER_CHECK_INIT WPP_RECORDER_LEVEL_FLAGS_FILTER(TRACE_LEVEL_VERBOSE, ROS_TRACING_DEFAULT) \
        ?   WPP_INVOKE_WPP_DEBUG((MSG, _a12, _a13, _a14, _a15, _a16, _a17)), \
            WPP_RECORDER_SF_sDdddddd( \
                WPP_RECORDER_LEVEL_FLAGS_ARGS(TRACE_LEVEL_VERBOSE, ROS_TRACING_DEFAULT), \
                55, \
                WPP_LOCAL_TraceGuids+0, __FILE__, __LINE__, _a12, _a13, _a14, _a15, _a16, _a17), \
            1 \
        :   0 \
    )) \
    WPP_LEVEL_FLAGS_POST(TRACE_LEVEL_VERBOSE, ROS_TRACING_DEFAULT)
#endif // ENABLE_WPP_TRACE_FILTERING_WITH_WPP_RECORDER
#else  // ENABLE_WPP_RECORDER
#define WPP_CALL_RosKmdAdapter_cpp1869(MSG, _a12, _a13, _a14, _a15, _a16, _a17) \
    WPP_LOG_ALWAYS(WPP_EX_LEVEL_FLAGS(TRACE_LEVEL_VERBOSE, ROS_TRACING_DEFAULT), MSG, _a12, _a13, _a14, _a15, _a16, _a17) \
    WPP_LEVEL_FLAGS_PRE(TRACE_LEVEL_VERBOSE, ROS_TRACING_DEFAULT) \
    WPP_ANNOTATE(RosKmdAdapter_cpp1869) \
    (( \
        WPP_CHECK_INIT WPP_LEVEL_FLAGS_ENABLED(TRACE_LEVEL_VERBOSE, ROS_TRACING_DEFAULT) \
        ?   WPP_INVOKE_WPP_DEBUG((MSG, _a12, _a13, _a14, _a15, _a16, _a17)), \
            WPP_SF_sDdddddd( \
                WPP_LEVEL_FLAGS_LOGGER(TRACE_LEVEL_VERBOSE, ROS_TRACING_DEFAULT) \
                55, \
                WPP_LOCAL_TraceGuids+0, __FILE__, __LINE__, _a12, _a13, _a14, _a15, _a16, _a17), \
            1 \
        :   0 \
    )) \
    WPP_LEVEL_FLAGS_POST(TRACE_LEVEL_VERBOSE, ROS_TRACING_DEFAULT)
#endif // ENABLE_WPP_RECORDER

// WPP_CALL_RosKmdAdapter_cpp1929
#ifndef WPP_LEVEL_FLAGS_PRE
#  define WPP_LEVEL_FLAGS_PRE(LEVEL,FLAGS)
#endif
#ifndef WPP_LEVEL_FLAGS_POST
#  define WPP_LEVEL_FLAGS_POST(LEVEL,FLAGS)
#endif
#if ENABLE_WPP_RECORDER
#if ENABLE_WPP_TRACE_FILTERING_WITH_WPP_RECORDER
#define WPP_CALL_RosKmdAdapter_cpp1929(MSG, _a12, _a13, _a14) \
    WPP_LOG_ALWAYS(WPP_EX_LEVEL_FLAGS(TRACE_LEVEL_VERBOSE, ROS_TRACING_DEFAULT), MSG, _a12, _a13, _a14) \
    WPP_LEVEL_FLAGS_PRE(TRACE_LEVEL_VERBOSE, ROS_TRACING_DEFAULT) \
    do {\
        WPP_ANNOTATE(RosKmdAdapter_cpp1929) 0; \
        BOOLEAN wppEnabled = WPP_CHECK_INIT WPP_LEVEL_FLAGS_ENABLED(TRACE_LEVEL_VERBOSE, ROS_TRACING_DEFAULT); \
        BOOLEAN recorderEnabled = WPP_RECORDER_CHECK_INIT WPP_RECORDER_LEVEL_FLAGS_FILTER(TRACE_LEVEL_VERBOSE, ROS_TRACING_DEFAULT); \
        if (wppEnabled || recorderEnabled) { \
            WPP_INVOKE_WPP_DEBUG((MSG, _a12, _a13, _a14)); \
            WPP_RECORDER_AND_TRACE_SF_sDddd( \
                     WPP_LEVEL_FLAGS_LOGGER(TRACE_LEVEL_VERBOSE, ROS_TRACING_DEFAULT) \
                     wppEnabled, recorderEnabled, \
                     WPP_RECORDER_LEVEL_FLAGS_ARGS(TRACE_LEVEL_VERBOSE, ROS_TRACING_DEFAULT), \
                     56, \
                     WPP_LOCAL_TraceGuids+0, __FILE__, __LINE__, _a12, _a13, _a14);\
        } \
    } \
    while(0) \
    WPP_LEVEL_FLAGS_POST(TRACE_LEVEL_VERBOSE, ROS_TRACING_DEFAULT)
#else // ENABLE_WPP_TRACE_FILTERING_WITH_WPP_RECORDER
#define WPP_CALL_RosKmdAdapter_cpp1929(MSG, _a12, _a13, _a14) \
    WPP_LOG_ALWAYS(WPP_EX_LEVEL_FLAGS(TRACE_LEVEL_VERBOSE, ROS_TRACING_DEFAULT), MSG, _a12, _a13, _a14) \
    WPP_LEVEL_FLAGS_PRE(TRACE_LEVEL_VERBOSE, ROS_TRACING_DEFAULT) \
    WPP_ANNOTATE(RosKmdAdapter_cpp1929) \
    (( \
        WPP_RECORDER_CHECK_INIT WPP_RECORDER_LEVEL_FLAGS_FILTER(TRACE_LEVEL_VERBOSE, ROS_TRACING_DEFAULT) \
        ?   WPP_INVOKE_WPP_DEBUG((MSG, _a12, _a13, _a14)), \
            WPP_RECORDER_SF_sDddd( \
                WPP_RECORDER_LEVEL_FLAGS_ARGS(TRACE_LEVEL_VERBOSE, ROS_TRACING_DEFAULT), \
                56, \
                WPP_LOCAL_TraceGuids+0, __FILE__, __LINE__, _a12, _a13, _a14), \
            1 \
        :   0 \
    )) \
    WPP_LEVEL_FLAGS_POST(TRACE_LEVEL_VERBOSE, ROS_TRACING_DEFAULT)
#endif // ENABLE_WPP_TRACE_FILTERING_WITH_WPP_RECORDER
#else  // ENABLE_WPP_RECORDER
#define WPP_CALL_RosKmdAdapter_cpp1929(MSG, _a12, _a13, _a14) \
    WPP_LOG_ALWAYS(WPP_EX_LEVEL_FLAGS(TRACE_LEVEL_VERBOSE, ROS_TRACING_DEFAULT), MSG, _a12, _a13, _a14) \
    WPP_LEVEL_FLAGS_PRE(TRACE_LEVEL_VERBOSE, ROS_TRACING_DEFAULT) \
    WPP_ANNOTATE(RosKmdAdapter_cpp1929) \
    (( \
        WPP_CHECK_INIT WPP_LEVEL_FLAGS_ENABLED(TRACE_LEVEL_VERBOSE, ROS_TRACING_DEFAULT) \
        ?   WPP_INVOKE_WPP_DEBUG((MSG, _a12, _a13, _a14)), \
            WPP_SF_sDddd( \
                WPP_LEVEL_FLAGS_LOGGER(TRACE_LEVEL_VERBOSE, ROS_TRACING_DEFAULT) \
                56, \
                WPP_LOCAL_TraceGuids+0, __FILE__, __LINE__, _a12, _a13, _a14), \
            1 \
        :   0 \
    )) \
    WPP_LEVEL_FLAGS_POST(TRACE_LEVEL_VERBOSE, ROS_TRACING_DEFAULT)
#endif // ENABLE_WPP_RECORDER

// WPP_CALL_RosKmdAdapter_cpp1977
#ifndef WPP_LEVEL_FLAGS_PRE
#  define WPP_LEVEL_FLAGS_PRE(LEVEL,FLAGS)
#endif
#ifndef WPP_LEVEL_FLAGS_POST
#  define WPP_LEVEL_FLAGS_POST(LEVEL,FLAGS)
#endif
#if ENABLE_WPP_RECORDER
#if ENABLE_WPP_TRACE_FILTERING_WITH_WPP_RECORDER
#define WPP_CALL_RosKmdAdapter_cpp1977(MSG, _a12, _a13, _a14) \
    WPP_LOG_ALWAYS(WPP_EX_LEVEL_FLAGS(TRACE_LEVEL_ERROR, ROS_TRACING_DEBUG), MSG, _a12, _a13, _a14) \
    WPP_LEVEL_FLAGS_PRE(TRACE_LEVEL_ERROR, ROS_TRACING_DEBUG) \
    do {\
        WPP_ANNOTATE(RosKmdAdapter_cpp1977) 0; \
        BOOLEAN wppEnabled = WPP_CHECK_INIT WPP_LEVEL_FLAGS_ENABLED(TRACE_LEVEL_ERROR, ROS_TRACING_DEBUG); \
        BOOLEAN recorderEnabled = WPP_RECORDER_CHECK_INIT WPP_RECORDER_LEVEL_FLAGS_FILTER(TRACE_LEVEL_ERROR, ROS_TRACING_DEBUG); \
        if (wppEnabled || recorderEnabled) { \
            WPP_INVOKE_WPP_DEBUG((MSG, _a12, _a13, _a14)); \
            WPP_RECORDER_AND_TRACE_SF_sDddd( \
                     WPP_LEVEL_FLAGS_LOGGER(TRACE_LEVEL_ERROR, ROS_TRACING_DEBUG) \
                     wppEnabled, recorderEnabled, \
                     WPP_RECORDER_LEVEL_FLAGS_ARGS(TRACE_LEVEL_ERROR, ROS_TRACING_DEBUG), \
                     57, \
                     WPP_LOCAL_TraceGuids+0, __FILE__, __LINE__, _a12, _a13, _a14);\
        } \
    } \
    while(0) \
    WPP_LEVEL_FLAGS_POST(TRACE_LEVEL_ERROR, ROS_TRACING_DEBUG)
#else // ENABLE_WPP_TRACE_FILTERING_WITH_WPP_RECORDER
#define WPP_CALL_RosKmdAdapter_cpp1977(MSG, _a12, _a13, _a14) \
    WPP_LOG_ALWAYS(WPP_EX_LEVEL_FLAGS(TRACE_LEVEL_ERROR, ROS_TRACING_DEBUG), MSG, _a12, _a13, _a14) \
    WPP_LEVEL_FLAGS_PRE(TRACE_LEVEL_ERROR, ROS_TRACING_DEBUG) \
    WPP_ANNOTATE(RosKmdAdapter_cpp1977) \
    (( \
        WPP_RECORDER_CHECK_INIT WPP_RECORDER_LEVEL_FLAGS_FILTER(TRACE_LEVEL_ERROR, ROS_TRACING_DEBUG) \
        ?   WPP_INVOKE_WPP_DEBUG((MSG, _a12, _a13, _a14)), \
            WPP_RECORDER_SF_sDddd( \
                WPP_RECORDER_LEVEL_FLAGS_ARGS(TRACE_LEVEL_ERROR, ROS_TRACING_DEBUG), \
                57, \
                WPP_LOCAL_TraceGuids+0, __FILE__, __LINE__, _a12, _a13, _a14), \
            1 \
        :   0 \
    )) \
    WPP_LEVEL_FLAGS_POST(TRACE_LEVEL_ERROR, ROS_TRACING_DEBUG)
#endif // ENABLE_WPP_TRACE_FILTERING_WITH_WPP_RECORDER
#else  // ENABLE_WPP_RECORDER
#define WPP_CALL_RosKmdAdapter_cpp1977(MSG, _a12, _a13, _a14) \
    WPP_LOG_ALWAYS(WPP_EX_LEVEL_FLAGS(TRACE_LEVEL_ERROR, ROS_TRACING_DEBUG), MSG, _a12, _a13, _a14) \
    WPP_LEVEL_FLAGS_PRE(TRACE_LEVEL_ERROR, ROS_TRACING_DEBUG) \
    WPP_ANNOTATE(RosKmdAdapter_cpp1977) \
    (( \
        WPP_CHECK_INIT WPP_LEVEL_FLAGS_ENABLED(TRACE_LEVEL_ERROR, ROS_TRACING_DEBUG) \
        ?   WPP_INVOKE_WPP_DEBUG((MSG, _a12, _a13, _a14)), \
            WPP_SF_sDddd( \
                WPP_LEVEL_FLAGS_LOGGER(TRACE_LEVEL_ERROR, ROS_TRACING_DEBUG) \
                57, \
                WPP_LOCAL_TraceGuids+0, __FILE__, __LINE__, _a12, _a13, _a14), \
            1 \
        :   0 \
    )) \
    WPP_LEVEL_FLAGS_POST(TRACE_LEVEL_ERROR, ROS_TRACING_DEBUG)
#endif // ENABLE_WPP_RECORDER

// WPP_CALL_RosKmdAdapter_cpp1987
#ifndef WPP_LEVEL_FLAGS_PRE
#  define WPP_LEVEL_FLAGS_PRE(LEVEL,FLAGS)
#endif
#ifndef WPP_LEVEL_FLAGS_POST
#  define WPP_LEVEL_FLAGS_POST(LEVEL,FLAGS)
#endif
#if ENABLE_WPP_RECORDER
#if ENABLE_WPP_TRACE_FILTERING_WITH_WPP_RECORDER
#define WPP_CALL_RosKmdAdapter_cpp1987(MSG, _a12, _a13, _a14, _a15, _a16, _a17) \
    WPP_LOG_ALWAYS(WPP_EX_LEVEL_FLAGS(TRACE_LEVEL_ERROR, ROS_TRACING_DEBUG), MSG, _a12, _a13, _a14, _a15, _a16, _a17) \
    WPP_LEVEL_FLAGS_PRE(TRACE_LEVEL_ERROR, ROS_TRACING_DEBUG) \
    do {\
        WPP_ANNOTATE(RosKmdAdapter_cpp1987) 0; \
        BOOLEAN wppEnabled = WPP_CHECK_INIT WPP_LEVEL_FLAGS_ENABLED(TRACE_LEVEL_ERROR, ROS_TRACING_DEBUG); \
        BOOLEAN recorderEnabled = WPP_RECORDER_CHECK_INIT WPP_RECORDER_LEVEL_FLAGS_FILTER(TRACE_LEVEL_ERROR, ROS_TRACING_DEBUG); \
        if (wppEnabled || recorderEnabled) { \
            WPP_INVOKE_WPP_DEBUG((MSG, _a12, _a13, _a14, _a15, _a16, _a17)); \
            WPP_RECORDER_AND_TRACE_SF_sDddddDd( \
                     WPP_LEVEL_FLAGS_LOGGER(TRACE_LEVEL_ERROR, ROS_TRACING_DEBUG) \
                     wppEnabled, recorderEnabled, \
                     WPP_RECORDER_LEVEL_FLAGS_ARGS(TRACE_LEVEL_ERROR, ROS_TRACING_DEBUG), \
                     58, \
                     WPP_LOCAL_TraceGuids+0, __FILE__, __LINE__, _a12, _a13, _a14, _a15, _a16, _a17);\
        } \
    } \
    while(0) \
    WPP_LEVEL_FLAGS_POST(TRACE_LEVEL_ERROR, ROS_TRACING_DEBUG)
#else // ENABLE_WPP_TRACE_FILTERING_WITH_WPP_RECORDER
#define WPP_CALL_RosKmdAdapter_cpp1987(MSG, _a12, _a13, _a14, _a15, _a16, _a17) \
    WPP_LOG_ALWAYS(WPP_EX_LEVEL_FLAGS(TRACE_LEVEL_ERROR, ROS_TRACING_DEBUG), MSG, _a12, _a13, _a14, _a15, _a16, _a17) \
    WPP_LEVEL_FLAGS_PRE(TRACE_LEVEL_ERROR, ROS_TRACING_DEBUG) \
    WPP_ANNOTATE(RosKmdAdapter_cpp1987) \
    (( \
        WPP_RECORDER_CHECK_INIT WPP_RECORDER_LEVEL_FLAGS_FILTER(TRACE_LEVEL_ERROR, ROS_TRACING_DEBUG) \
        ?   WPP_INVOKE_WPP_DEBUG((MSG, _a12, _a13, _a14, _a15, _a16, _a17)), \
            WPP_RECORDER_SF_sDddddDd( \
                WPP_RECORDER_LEVEL_FLAGS_ARGS(TRACE_LEVEL_ERROR, ROS_TRACING_DEBUG), \
                58, \
                WPP_LOCAL_TraceGuids+0, __FILE__, __LINE__, _a12, _a13, _a14, _a15, _a16, _a17), \
            1 \
        :   0 \
    )) \
    WPP_LEVEL_FLAGS_POST(TRACE_LEVEL_ERROR, ROS_TRACING_DEBUG)
#endif // ENABLE_WPP_TRACE_FILTERING_WITH_WPP_RECORDER
#else  // ENABLE_WPP_RECORDER
#define WPP_CALL_RosKmdAdapter_cpp1987(MSG, _a12, _a13, _a14, _a15, _a16, _a17) \
    WPP_LOG_ALWAYS(WPP_EX_LEVEL_FLAGS(TRACE_LEVEL_ERROR, ROS_TRACING_DEBUG), MSG, _a12, _a13, _a14, _a15, _a16, _a17) \
    WPP_LEVEL_FLAGS_PRE(TRACE_LEVEL_ERROR, ROS_TRACING_DEBUG) \
    WPP_ANNOTATE(RosKmdAdapter_cpp1987) \
    (( \
        WPP_CHECK_INIT WPP_LEVEL_FLAGS_ENABLED(TRACE_LEVEL_ERROR, ROS_TRACING_DEBUG) \
        ?   WPP_INVOKE_WPP_DEBUG((MSG, _a12, _a13, _a14, _a15, _a16, _a17)), \
            WPP_SF_sDddddDd( \
                WPP_LEVEL_FLAGS_LOGGER(TRACE_LEVEL_ERROR, ROS_TRACING_DEBUG) \
                58, \
                WPP_LOCAL_TraceGuids+0, __FILE__, __LINE__, _a12, _a13, _a14, _a15, _a16, _a17), \
            1 \
        :   0 \
    )) \
    WPP_LEVEL_FLAGS_POST(TRACE_LEVEL_ERROR, ROS_TRACING_DEBUG)
#endif // ENABLE_WPP_RECORDER

// WPP_CALL_RosKmdAdapter_cpp1998
#ifndef WPP_LEVEL_FLAGS_PRE
#  define WPP_LEVEL_FLAGS_PRE(LEVEL,FLAGS)
#endif
#ifndef WPP_LEVEL_FLAGS_POST
#  define WPP_LEVEL_FLAGS_POST(LEVEL,FLAGS)
#endif
#if ENABLE_WPP_RECORDER
#if ENABLE_WPP_TRACE_FILTERING_WITH_WPP_RECORDER
#define WPP_CALL_RosKmdAdapter_cpp1998(MSG, _a12) \
    WPP_LOG_ALWAYS(WPP_EX_LEVEL_FLAGS(TRACE_LEVEL_ERROR, ROS_TRACING_DEBUG), MSG, _a12) \
    WPP_LEVEL_FLAGS_PRE(TRACE_LEVEL_ERROR, ROS_TRACING_DEBUG) \
    do {\
        WPP_ANNOTATE(RosKmdAdapter_cpp1998) 0; \
        BOOLEAN wppEnabled = WPP_CHECK_INIT WPP_LEVEL_FLAGS_ENABLED(TRACE_LEVEL_ERROR, ROS_TRACING_DEBUG); \
        BOOLEAN recorderEnabled = WPP_RECORDER_CHECK_INIT WPP_RECORDER_LEVEL_FLAGS_FILTER(TRACE_LEVEL_ERROR, ROS_TRACING_DEBUG); \
        if (wppEnabled || recorderEnabled) { \
            WPP_INVOKE_WPP_DEBUG((MSG, _a12)); \
            WPP_RECORDER_AND_TRACE_SF_sDd( \
                     WPP_LEVEL_FLAGS_LOGGER(TRACE_LEVEL_ERROR, ROS_TRACING_DEBUG) \
                     wppEnabled, recorderEnabled, \
                     WPP_RECORDER_LEVEL_FLAGS_ARGS(TRACE_LEVEL_ERROR, ROS_TRACING_DEBUG), \
                     59, \
                     WPP_LOCAL_TraceGuids+0, __FILE__, __LINE__, _a12);\
        } \
    } \
    while(0) \
    WPP_LEVEL_FLAGS_POST(TRACE_LEVEL_ERROR, ROS_TRACING_DEBUG)
#else // ENABLE_WPP_TRACE_FILTERING_WITH_WPP_RECORDER
#define WPP_CALL_RosKmdAdapter_cpp1998(MSG, _a12) \
    WPP_LOG_ALWAYS(WPP_EX_LEVEL_FLAGS(TRACE_LEVEL_ERROR, ROS_TRACING_DEBUG), MSG, _a12) \
    WPP_LEVEL_FLAGS_PRE(TRACE_LEVEL_ERROR, ROS_TRACING_DEBUG) \
    WPP_ANNOTATE(RosKmdAdapter_cpp1998) \
    (( \
        WPP_RECORDER_CHECK_INIT WPP_RECORDER_LEVEL_FLAGS_FILTER(TRACE_LEVEL_ERROR, ROS_TRACING_DEBUG) \
        ?   WPP_INVOKE_WPP_DEBUG((MSG, _a12)), \
            WPP_RECORDER_SF_sDd( \
                WPP_RECORDER_LEVEL_FLAGS_ARGS(TRACE_LEVEL_ERROR, ROS_TRACING_DEBUG), \
                59, \
                WPP_LOCAL_TraceGuids+0, __FILE__, __LINE__, _a12), \
            1 \
        :   0 \
    )) \
    WPP_LEVEL_FLAGS_POST(TRACE_LEVEL_ERROR, ROS_TRACING_DEBUG)
#endif // ENABLE_WPP_TRACE_FILTERING_WITH_WPP_RECORDER
#else  // ENABLE_WPP_RECORDER
#define WPP_CALL_RosKmdAdapter_cpp1998(MSG, _a12) \
    WPP_LOG_ALWAYS(WPP_EX_LEVEL_FLAGS(TRACE_LEVEL_ERROR, ROS_TRACING_DEBUG), MSG, _a12) \
    WPP_LEVEL_FLAGS_PRE(TRACE_LEVEL_ERROR, ROS_TRACING_DEBUG) \
    WPP_ANNOTATE(RosKmdAdapter_cpp1998) \
    (( \
        WPP_CHECK_INIT WPP_LEVEL_FLAGS_ENABLED(TRACE_LEVEL_ERROR, ROS_TRACING_DEBUG) \
        ?   WPP_INVOKE_WPP_DEBUG((MSG, _a12)), \
            WPP_SF_sDd( \
                WPP_LEVEL_FLAGS_LOGGER(TRACE_LEVEL_ERROR, ROS_TRACING_DEBUG) \
                59, \
                WPP_LOCAL_TraceGuids+0, __FILE__, __LINE__, _a12), \
            1 \
        :   0 \
    )) \
    WPP_LEVEL_FLAGS_POST(TRACE_LEVEL_ERROR, ROS_TRACING_DEBUG)
#endif // ENABLE_WPP_RECORDER

// WPP_CALL_RosKmdAdapter_cpp2011
#ifndef WPP_LEVEL_FLAGS_PRE
#  define WPP_LEVEL_FLAGS_PRE(LEVEL,FLAGS)
#endif
#ifndef WPP_LEVEL_FLAGS_POST
#  define WPP_LEVEL_FLAGS_POST(LEVEL,FLAGS)
#endif
#if ENABLE_WPP_RECORDER
#if ENABLE_WPP_TRACE_FILTERING_WITH_WPP_RECORDER
#define WPP_CALL_RosKmdAdapter_cpp2011(MSG) \
    WPP_LOG_ALWAYS(WPP_EX_LEVEL_FLAGS(TRACE_LEVEL_ERROR, ROS_TRACING_DEBUG), MSG) \
    WPP_LEVEL_FLAGS_PRE(TRACE_LEVEL_ERROR, ROS_TRACING_DEBUG) \
    do {\
        WPP_ANNOTATE(RosKmdAdapter_cpp2011) 0; \
        BOOLEAN wppEnabled = WPP_CHECK_INIT WPP_LEVEL_FLAGS_ENABLED(TRACE_LEVEL_ERROR, ROS_TRACING_DEBUG); \
        BOOLEAN recorderEnabled = WPP_RECORDER_CHECK_INIT WPP_RECORDER_LEVEL_FLAGS_FILTER(TRACE_LEVEL_ERROR, ROS_TRACING_DEBUG); \
        if (wppEnabled || recorderEnabled) { \
            WPP_INVOKE_WPP_DEBUG((MSG)); \
            WPP_RECORDER_AND_TRACE_SF_sD( \
                     WPP_LEVEL_FLAGS_LOGGER(TRACE_LEVEL_ERROR, ROS_TRACING_DEBUG) \
                     wppEnabled, recorderEnabled, \
                     WPP_RECORDER_LEVEL_FLAGS_ARGS(TRACE_LEVEL_ERROR, ROS_TRACING_DEBUG), \
                     60, \
                     WPP_LOCAL_TraceGuids+0, __FILE__, __LINE__);\
        } \
    } \
    while(0) \
    WPP_LEVEL_FLAGS_POST(TRACE_LEVEL_ERROR, ROS_TRACING_DEBUG)
#else // ENABLE_WPP_TRACE_FILTERING_WITH_WPP_RECORDER
#define WPP_CALL_RosKmdAdapter_cpp2011(MSG) \
    WPP_LOG_ALWAYS(WPP_EX_LEVEL_FLAGS(TRACE_LEVEL_ERROR, ROS_TRACING_DEBUG), MSG) \
    WPP_LEVEL_FLAGS_PRE(TRACE_LEVEL_ERROR, ROS_TRACING_DEBUG) \
    WPP_ANNOTATE(RosKmdAdapter_cpp2011) \
    (( \
        WPP_RECORDER_CHECK_INIT WPP_RECORDER_LEVEL_FLAGS_FILTER(TRACE_LEVEL_ERROR, ROS_TRACING_DEBUG) \
        ?   WPP_INVOKE_WPP_DEBUG((MSG)), \
            WPP_RECORDER_SF_sD( \
                WPP_RECORDER_LEVEL_FLAGS_ARGS(TRACE_LEVEL_ERROR, ROS_TRACING_DEBUG), \
                60, \
                WPP_LOCAL_TraceGuids+0, __FILE__, __LINE__), \
            1 \
        :   0 \
    )) \
    WPP_LEVEL_FLAGS_POST(TRACE_LEVEL_ERROR, ROS_TRACING_DEBUG)
#endif // ENABLE_WPP_TRACE_FILTERING_WITH_WPP_RECORDER
#else  // ENABLE_WPP_RECORDER
#define WPP_CALL_RosKmdAdapter_cpp2011(MSG) \
    WPP_LOG_ALWAYS(WPP_EX_LEVEL_FLAGS(TRACE_LEVEL_ERROR, ROS_TRACING_DEBUG), MSG) \
    WPP_LEVEL_FLAGS_PRE(TRACE_LEVEL_ERROR, ROS_TRACING_DEBUG) \
    WPP_ANNOTATE(RosKmdAdapter_cpp2011) \
    (( \
        WPP_CHECK_INIT WPP_LEVEL_FLAGS_ENABLED(TRACE_LEVEL_ERROR, ROS_TRACING_DEBUG) \
        ?   WPP_INVOKE_WPP_DEBUG((MSG)), \
            WPP_SF_sD( \
                WPP_LEVEL_FLAGS_LOGGER(TRACE_LEVEL_ERROR, ROS_TRACING_DEBUG) \
                60, \
                WPP_LOCAL_TraceGuids+0, __FILE__, __LINE__), \
            1 \
        :   0 \
    )) \
    WPP_LEVEL_FLAGS_POST(TRACE_LEVEL_ERROR, ROS_TRACING_DEBUG)
#endif // ENABLE_WPP_RECORDER

// WPP_CALL_RosKmdAdapter_cpp2129
#ifndef WPP_LEVEL_FLAGS_PRE
#  define WPP_LEVEL_FLAGS_PRE(LEVEL,FLAGS)
#endif
#ifndef WPP_LEVEL_FLAGS_POST
#  define WPP_LEVEL_FLAGS_POST(LEVEL,FLAGS)
#endif
#if ENABLE_WPP_RECORDER
#if ENABLE_WPP_TRACE_FILTERING_WITH_WPP_RECORDER
#define WPP_CALL_RosKmdAdapter_cpp2129(MSG) \
    WPP_LOG_ALWAYS(WPP_EX_LEVEL_FLAGS(TRACE_LEVEL_ERROR, ROS_TRACING_DEBUG), MSG) \
    WPP_LEVEL_FLAGS_PRE(TRACE_LEVEL_ERROR, ROS_TRACING_DEBUG) \
    do {\
        WPP_ANNOTATE(RosKmdAdapter_cpp2129) 0; \
        BOOLEAN wppEnabled = WPP_CHECK_INIT WPP_LEVEL_FLAGS_ENABLED(TRACE_LEVEL_ERROR, ROS_TRACING_DEBUG); \
        BOOLEAN recorderEnabled = WPP_RECORDER_CHECK_INIT WPP_RECORDER_LEVEL_FLAGS_FILTER(TRACE_LEVEL_ERROR, ROS_TRACING_DEBUG); \
        if (wppEnabled || recorderEnabled) { \
            WPP_INVOKE_WPP_DEBUG((MSG)); \
            WPP_RECORDER_AND_TRACE_SF_sD( \
                     WPP_LEVEL_FLAGS_LOGGER(TRACE_LEVEL_ERROR, ROS_TRACING_DEBUG) \
                     wppEnabled, recorderEnabled, \
                     WPP_RECORDER_LEVEL_FLAGS_ARGS(TRACE_LEVEL_ERROR, ROS_TRACING_DEBUG), \
                     61, \
                     WPP_LOCAL_TraceGuids+0, __FILE__, __LINE__);\
        } \
    } \
    while(0) \
    WPP_LEVEL_FLAGS_POST(TRACE_LEVEL_ERROR, ROS_TRACING_DEBUG)
#else // ENABLE_WPP_TRACE_FILTERING_WITH_WPP_RECORDER
#define WPP_CALL_RosKmdAdapter_cpp2129(MSG) \
    WPP_LOG_ALWAYS(WPP_EX_LEVEL_FLAGS(TRACE_LEVEL_ERROR, ROS_TRACING_DEBUG), MSG) \
    WPP_LEVEL_FLAGS_PRE(TRACE_LEVEL_ERROR, ROS_TRACING_DEBUG) \
    WPP_ANNOTATE(RosKmdAdapter_cpp2129) \
    (( \
        WPP_RECORDER_CHECK_INIT WPP_RECORDER_LEVEL_FLAGS_FILTER(TRACE_LEVEL_ERROR, ROS_TRACING_DEBUG) \
        ?   WPP_INVOKE_WPP_DEBUG((MSG)), \
            WPP_RECORDER_SF_sD( \
                WPP_RECORDER_LEVEL_FLAGS_ARGS(TRACE_LEVEL_ERROR, ROS_TRACING_DEBUG), \
                61, \
                WPP_LOCAL_TraceGuids+0, __FILE__, __LINE__), \
            1 \
        :   0 \
    )) \
    WPP_LEVEL_FLAGS_POST(TRACE_LEVEL_ERROR, ROS_TRACING_DEBUG)
#endif // ENABLE_WPP_TRACE_FILTERING_WITH_WPP_RECORDER
#else  // ENABLE_WPP_RECORDER
#define WPP_CALL_RosKmdAdapter_cpp2129(MSG) \
    WPP_LOG_ALWAYS(WPP_EX_LEVEL_FLAGS(TRACE_LEVEL_ERROR, ROS_TRACING_DEBUG), MSG) \
    WPP_LEVEL_FLAGS_PRE(TRACE_LEVEL_ERROR, ROS_TRACING_DEBUG) \
    WPP_ANNOTATE(RosKmdAdapter_cpp2129) \
    (( \
        WPP_CHECK_INIT WPP_LEVEL_FLAGS_ENABLED(TRACE_LEVEL_ERROR, ROS_TRACING_DEBUG) \
        ?   WPP_INVOKE_WPP_DEBUG((MSG)), \
            WPP_SF_sD( \
                WPP_LEVEL_FLAGS_LOGGER(TRACE_LEVEL_ERROR, ROS_TRACING_DEBUG) \
                61, \
                WPP_LOCAL_TraceGuids+0, __FILE__, __LINE__), \
            1 \
        :   0 \
    )) \
    WPP_LEVEL_FLAGS_POST(TRACE_LEVEL_ERROR, ROS_TRACING_DEBUG)
#endif // ENABLE_WPP_RECORDER

// Functions
#undef DoDebugTrace
#define DoDebugTrace WPP_(CALL)
#undef DoTraceMessage
#define DoTraceMessage WPP_(CALL)
#undef ROS_ASSERT
#define ROS_ASSERT WPP_(CALL)
#undef ROS_CRITICAL_ASSERT
#define ROS_CRITICAL_ASSERT WPP_(CALL)
#undef ROS_LOG_ASSERTION
#define ROS_LOG_ASSERTION WPP_(CALL)
#undef ROS_LOG_CRITICAL_ERROR
#define ROS_LOG_CRITICAL_ERROR WPP_(CALL)
#undef ROS_LOG_ERROR
#define ROS_LOG_ERROR WPP_(CALL)
#undef ROS_LOG_INFORMATION
#define ROS_LOG_INFORMATION WPP_(CALL)
#undef ROS_LOG_LOW_MEMORY
#define ROS_LOG_LOW_MEMORY WPP_(CALL)
#undef ROS_LOG_TRACE
#define ROS_LOG_TRACE WPP_(CALL)
#undef ROS_LOG_WARNING
#define ROS_LOG_WARNING WPP_(CALL)
#undef ROS_TRACE_EVENTS
#define ROS_TRACE_EVENTS WPP_(CALL)

#ifdef __cplusplus
} // extern "C"
#endif

